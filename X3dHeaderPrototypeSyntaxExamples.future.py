import jnius_config
jnius_config.set_classpath('.', 'X3DJSAIL.3.3.full.jar')
from jnius import autoclass
from X3Dautoclass import *
X3D0 = X3DObject() \
   .setProfile("Immersive") \
   .setVersion("3.3") \
   .setHead(headObject() \
    .addComponent(componentObject() \
     .setName("Geospatial") \
     .setLevel(1) \
    ) \
    .addComponent(componentObject() \
     .setName("NURBS") \
     .setLevel(2) \
    ) \
    .addComponent(componentObject() \
     .setName("Core") \
     .setLevel(2) \
    ) \
    .addComponent(componentObject() \
     .setName("Navigation") \
     .setLevel(1) \
    ) \
    .addComponent(componentObject() \
     .setName("Text") \
     .setLevel(1) \
    ) \
    .addMeta(metaObject() \
     .setName("title") \
     .setContent("X3dHeaderPrototypeSyntaxExamples.x3d") \
    ) \
    .addMeta(metaObject() \
     .setName("description") \
     .setContent("X3D scene header and prototype syntax examples. This example header indicates that the content is XML encoded, follows the Interactive Profile and explicitly lists additional necessary components. The X3D header may also contain additional semantic information. Used for specification EXAMPLE excerpts in 19776:1 XML Encoding.") \
    ) \
    .addMeta(metaObject() \
     .setName("created") \
     .setContent("14 October 2002") \
    ) \
    .addMeta(metaObject() \
     .setName("modified") \
     .setContent("7 May 2017") \
    ) \
    .addMeta(metaObject() \
     .setName("creator") \
     .setContent("Don Brutzman") \
    ) \
    .addMeta(metaObject() \
     .setName("specificationSection") \
     .setContent("X3D encodings, ISO/IEC 19776-1.3, Part 1: XML encoding, 4.3 XML file syntax") \
    ) \
    .addMeta(metaObject() \
     .setName("specificationUrl") \
     .setContent("http://www.web3d.org/documents/specifications/19776-1/V3.3/Part01/concepts.html#XMLFileSyntax") \
    ) \
    .addMeta(metaObject() \
     .setName("identifier") \
     .setContent("http://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/X3dHeaderPrototypeSyntaxExamples.x3d") \
    ) \
    .addMeta(metaObject() \
     .setName("generator") \
     .setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit") \
    ) \
    .addMeta(metaObject() \
     .setName("license") \
     .setContent("../license.html") \
    ) \
   ) \
   .setScene(SceneObject() \
    .addChildren(ExternProtoDeclareObject() \
     .setName("ViewPositionOrientation") \
     .setUrl(["../../Savage/Tools/Authoring/ViewPositionOrientationPrototype.x3d#ViewPositionOrientation","https://savage.nps.edu/Savage/Tools/Authoring/ViewPositionOrientationPrototype.x3d#ViewPositionOrientation","../../Savage/Tools/Authoring/ViewPositionOrientationPrototype.wrl#ViewPositionOrientation","https://savage.nps.edu/Savage/Tools/Authoring/ViewPositionOrientationPrototype.wrl#ViewPositionOrientation"]) \
     .addField(fieldObject() \
      .setName("enabled") \
      .setAccessType("inputOutput") \
      .setType("SFBool") \
     ) \
     .addField(fieldObject() \
      .setName("traceEnabled") \
      .setAccessType("initializeOnly") \
      .setType("SFBool") \
     ) \
     .addField(fieldObject() \
      .setName("set_traceEnabled") \
      .setAccessType("inputOnly") \
      .setType("SFBool") \
     ) \
     .addField(fieldObject() \
      .setName("position_changed") \
      .setAccessType("outputOnly") \
      .setType("SFVec3f") \
     ) \
     .addField(fieldObject() \
      .setName("orientation_changed") \
      .setAccessType("outputOnly") \
      .setType("SFRotation") \
     ) \
     .addField(fieldObject() \
      .setName("outputViewpointString") \
      .setAccessType("outputOnly") \
      .setType("MFString") \
     ) \
    ) \
    .addChildren(ProtoDeclareObject() \
     .setName("NewWorldInfoNode") \
     .setProtoBody(ProtoBodyObject() \
      .addChildren(WorldInfoObject() \
       .setDEF("ExamplePrototypeBody") \
      ) \
     ) \
    ) \
    .addChildren(ProtoInstanceObject() \
     .setName("NewWorldInfoNode") \
    ) \
    .addChildren(ProtoDeclareObject() \
     .setName("EmissiveMaterial") \
     .setProtoInterface(ProtoInterfaceObject() \
      .addField(fieldObject() \
       .setName("onlyColor") \
       .setAccessType("inputOutput") \
       .setType("SFColor") \
       .setValue("1 0 0") \
      ) \
     ) \
     .setProtoBody(ProtoBodyObject() \
#Override default diffuseColor value 0.8 0.8 0.8
      .addChildren(MaterialObject() \
       .setDiffuseColor([0,0,0]) \
#Connect emissiveColor field of current node to onlyColor field of parent ProtoDeclare.
       .setIS(ISObject() \
        .addConnect(connectObject() \
         .setNodeField("emissiveColor") \
         .setProtoField("onlyColor") \
        ) \
       ) \
      ) \
     ) \
    ) \
    .addChildren(ProtoDeclareObject() \
     .setName("ShiftGroupUp2m") \
     .setProtoInterface(ProtoInterfaceObject() \
      .addField(fieldObject() \
       .setName("children") \
       .setAccessType("inputOutput") \
       .setType("MFNode") \
       .addChildren(GroupObject(bboxSize = [2,2,2]) \
        .setDEF("DefaultNodeValue") \
#Authors need to override this node when creating the ProtoInstance fieldValue name=\"children\"
       ) \
      ) \
     ) \
     .setProtoBody(ProtoBodyObject() \
      .addChildren(TransformObject() \
       .setTranslation([0,2,0]) \
       .addChildren(GroupObject() \
        .setIS(ISObject() \
         .addConnect(connectObject() \
          .setNodeField("children") \
          .setProtoField("children") \
         ) \
        ) \
       ) \
      ) \
     ) \
    ) \
    .addChildren(ProtoInstanceObject() \
     .setName("ShiftGroupUp2m") \
    ) \
#====================
    .addChildren(ViewpointObject() \
     .setDEF("ExampleSingleElement") \
     .setDescription("Hello syntax") \
    ) \
    .addChildren(GroupObject() \
     .setDEF("ExampleChildElement") \
     .addChildren(ShapeObject() \
      .setGeometry(BoxObject() \
      ) \
      .setAppearance(AppearanceObject() \
       .setMaterial(MaterialObject() \
        .setDiffuseColor([0.6,0.4,0.2]) \
       ) \
      ) \
     ) \
    ) \
    .addChildren(TransformObject() \
     .setDEF("TransformExampleUSE") \
     .setRotation([0,1,0,0.78]) \
     .setTranslation([0,2.5,0]) \
     .addChildren(GroupObject() \
      .setUSE("ExampleChildElement") \
     ) \
    ) \
    .addChildren(CollisionObject() \
     .setProxy(ShapeObject() \
#note that Collision proxy Shape is not rendered
#alternative: Text string='\"He said, \\&quot;Immel did it!\\&quot;\"'
      .setGeometry(TextObject() \
       .setString(["He said, \"Immel did it!\""]) \
      ) \
      .setAppearance(AppearanceObject() \
       .setMaterial(MaterialObject() \
       ) \
      ) \
     ) \
     .setProxy(GroupObject() \
      .setUSE("ExampleChildElement") \
     ) \
    ) \
    .addChildren(TransformObject() \
     .setTranslation([0,-2.5,0]) \
     .addChildren(ShapeObject() \
      .setAppearance(AppearanceObject() \
       .setMaterial(ProtoInstanceObject() \
        .setName("EmissiveMaterial") \
        .addFieldValue(fieldValueObject() \
         .setName("onlyColor") \
         .setValue("0.2 0.6 0.6") \
        ) \
       ) \
      ) \
      .setGeometry(TextObject() \
       .setString(["X3D Header Prototype syntax examples","(view console for EXTERNPROTO output)"]) \
       .setFontStyle(FontStyleObject(justify = ["MIDDLE","MIDDLE"], size = 0.6) \
       ) \
      ) \
     ) \
    ) \
    .addChildren(ProtoInstanceObject() \
     .setName("ViewPositionOrientation") \
     .addFieldValue(fieldValueObject() \
      .setName("enabled") \
      .setValue("true") \
     ) \
    ) \
    .addChildren(TimeSensorObject() \
     .setDEF("Clock") \
     .setCycleInterval(4) \
     .setLoop(True) \
    ) \
    .addChildren(OrientationInterpolatorObject() \
     .setDEF("Spinner") \
     .setKey([0,0.5,1]) \
     .setKeyValue([0,1,0,0,0,1,0,3.14159,0,1,0,6.28318]) \
    ) \
    .addChildren(ROUTEObject() \
     .setFromField("fraction_changed") \
     .setFromNode("Clock") \
     .setToField("set_fraction") \
     .setToNode("Spinner") \
    ) \
    .addChildren(ROUTEObject() \
     .setFromField("value_changed") \
     .setFromNode("Spinner") \
     .setToField("rotation") \
     .setToNode("TransformExampleUSE") \
    ) \
    .addChildren(InlineObject() \
     .setDEF("someInline") \
     .setUrl(["someUrl.x3d","http://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/someUrl.x3d"]) \
    ) \
    .addChildren(IMPORTObject() \
     .setAS("someInlineRoot") \
     .setImportedDEF("someName") \
     .setInlineDEF("someInline") \
    ) \
    .addChildren(PositionInterpolatorObject() \
     .setDEF("StayInPlace") \
     .setKey([0,1]) \
     .setKeyValue([0,0,0,0,0,0]) \
    ) \
    .addChildren(ROUTEObject() \
     .setFromField("fraction_changed") \
     .setFromNode("Clock") \
     .setToField("set_fraction") \
     .setToNode("StayInPlace") \
    ) \
    .addChildren(ROUTEObject() \
     .setFromField("value_changed") \
     .setFromNode("StayInPlace") \
     .setToField("set_translation") \
     .setToNode("someInlineRoot") \
    ) \
   ) \

X3D0.toFileX3D("./future/./X3dHeaderPrototypeSyntaxExamples.newf.x3d")
