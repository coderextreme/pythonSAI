class InvalidFieldValueException (BaseException):
    def __init__(self):
        return

class InvalidFieldTypeException (BaseException):
    def __init__(self):
        return
class X3DNode():
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DAppearanceChildNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DAppearanceChildNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DAppearanceChildNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DAppearanceChildNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DAppearanceChildNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DAppearanceNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DAppearanceNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DAppearanceNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DAppearanceNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DAppearanceNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DChildNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DChildNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DChildNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DChildNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DChildNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBindableNode(X3DChildNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setMetadata(self, metadata_ = None):
        super(X3DBindableNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, _bind_):
        super(X3DBindableNode, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setDEF(self, DEF_):
        super(X3DBindableNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DBindableNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DBindableNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBackgroundNode(X3DBindableNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setGroundAngle(self, groundAngle_):
        super(X3DBackgroundNode, self).setGroundAngle(groundAngle_)
        if type(groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if groundAngle_ < 0:
                raise InvalidFieldValueException()
        if groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.groundAngle_ = groundAngle_

    def getGroundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def setGroundColor(self, groundColor_):
        super(X3DBackgroundNode, self).setGroundColor(groundColor_)
        if type(groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if groundColor_ < 0:
                raise InvalidFieldValueException()
        if groundColor_ > 1:
                raise InvalidFieldValueException()
        self.groundColor_ = groundColor_

    def getGroundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setMetadata(self, metadata_ = None):
        super(X3DBackgroundNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, _bind_):
        super(X3DBackgroundNode, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setSkyAngle(self, skyAngle_):
        super(X3DBackgroundNode, self).setSkyAngle(skyAngle_)
        if type(skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if skyAngle_ < 0:
                raise InvalidFieldValueException()
        if skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.skyAngle_ = skyAngle_

    def getSkyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def setSkyColor(self, skyColor_ = [0, 0, 0]):
        super(X3DBackgroundNode, self).setSkyColor(skyColor_)
        if type(skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if skyColor_ < 0:
                raise InvalidFieldValueException()
        if skyColor_ > 1:
                raise InvalidFieldValueException()
        self.skyColor_ = skyColor_

    def getSkyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def setTransparency(self, transparency_ = 0):
        super(X3DBackgroundNode, self).setTransparency(transparency_)
        if type(transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if transparency_ < 0:
                raise InvalidFieldValueException()
        if transparency_ > 1:
                raise InvalidFieldValueException()
        self.transparency_ = transparency_

    def getTransparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def setDEF(self, DEF_):
        super(X3DBackgroundNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DBackgroundNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DBackgroundNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFollowerNode(X3DChildNode):
    def __init__(self, **kwargs):
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DFollowerNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DFollowerNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DFollowerNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DFollowerNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DChaserNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DChaserNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DChaserNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DChaserNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DChaserNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DGeometricPropertyNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DGeometricPropertyNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DGeometricPropertyNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DGeometricPropertyNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DGeometricPropertyNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DColorNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DColorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DColorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DColorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DColorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVolumeRenderStyleNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DVolumeRenderStyleNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(X3DVolumeRenderStyleNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DVolumeRenderStyleNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DVolumeRenderStyleNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DVolumeRenderStyleNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DComposableVolumeRenderStyleNode(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DComposableVolumeRenderStyleNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(X3DComposableVolumeRenderStyleNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DComposableVolumeRenderStyleNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DComposableVolumeRenderStyleNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DComposableVolumeRenderStyleNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DGeometryNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DGeometryNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DGeometryNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DGeometryNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DGeometryNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DComposedGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(X3DComposedGeometryNode, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(X3DComposedGeometryNode, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(X3DComposedGeometryNode, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(X3DComposedGeometryNode, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(X3DComposedGeometryNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(X3DComposedGeometryNode, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def setTexCoord(self, texCoord_ = None):
        super(X3DComposedGeometryNode, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(X3DComposedGeometryNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DComposedGeometryNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DComposedGeometryNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DCoordinateNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DCoordinateNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DCoordinateNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DCoordinateNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DDamperNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DDamperNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTau(self, tau_ = 0.3):
        super(X3DDamperNode, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(X3DDamperNode, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_

    def setDEF(self, DEF_):
        super(X3DDamperNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DDamperNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DDamperNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSensorNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPointingDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        return

    def setDescription(self, description_):
        super(X3DPointingDeviceSensorNode, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(X3DPointingDeviceSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(X3DPointingDeviceSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DPointingDeviceSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DPointingDeviceSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DPointingDeviceSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DDragSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        return

    def setAutoOffset(self, autoOffset_ = True):
        super(X3DDragSensorNode, self).setAutoOffset(autoOffset_)
        if type(autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoOffset_ = autoOffset_

    def isAutoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def setDescription(self, description_):
        super(X3DDragSensorNode, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(X3DDragSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(X3DDragSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getTrackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def setDEF(self, DEF_):
        super(X3DDragSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DDragSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DDragSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DEnvironmentalSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setEnabled(self, enabled_ = True):
        super(X3DEnvironmentalSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DEnvironmentalSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DEnvironmentalSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DEnvironmentalSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DEnvironmentalSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTextureNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTextureNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTextureNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTextureNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DEnvironmentTextureNode(X3DTextureNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DEnvironmentTextureNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DEnvironmentTextureNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DEnvironmentTextureNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DEnvironmentTextureNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFontStyleNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DFontStyleNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DFontStyleNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DFontStyleNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DFontStyleNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBoundedObject():
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    pass


class X3DGroupingNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(X3DGroupingNode, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(X3DGroupingNode, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(X3DGroupingNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(X3DGroupingNode, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(X3DGroupingNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DGroupingNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DGroupingNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DInfoNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DInfoNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DInfoNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DInfoNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DInfoNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DInterpolatorNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(X3DInterpolatorNode, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setMetadata(self, metadata_ = None):
        super(X3DInterpolatorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(X3DInterpolatorNode, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_
    def setDEF(self, DEF_):
        super(X3DInterpolatorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DInterpolatorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DInterpolatorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DKeyDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DKeyDeviceSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DKeyDeviceSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DKeyDeviceSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DKeyDeviceSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DKeyDeviceSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLayerNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setPickable(self, Pickable_ = True):
        super(X3DLayerNode, self).setPickable(Pickable_)
        if type(Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.Pickable_ = Pickable_

    def isPickable(self):
        if type(self.Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Pickable_

    def setMetadata(self, metadata_ = None):
        super(X3DLayerNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setViewport(self, viewport_ = None):
        super(X3DLayerNode, self).setViewport(viewport_)
        if type(viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.viewport_ = viewport_

    def getViewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def setDEF(self, DEF_):
        super(X3DLayerNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DLayerNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DLayerNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLayoutNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DLayoutNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DLayoutNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DLayoutNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DLayoutNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLightNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0):
        super(X3DLightNode, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setColor(self, color_ = [1, 1, 1]):
        super(X3DLightNode, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setIntensity(self, intensity_ = 1):
        super(X3DLightNode, self).setIntensity(intensity_)
        if type(intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensity_ < 0:
                raise InvalidFieldValueException()
        if intensity_ > 1:
                raise InvalidFieldValueException()
        self.intensity_ = intensity_

    def getIntensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def setMetadata(self, metadata_ = None):
        super(X3DLightNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOn(self, on_ = True):
        super(X3DLightNode, self).setOn(on_)
        if type(on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.on_ = on_

    def isOn(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def setDEF(self, DEF_):
        super(X3DLightNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DLightNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DLightNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DMaterialNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DMaterialNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DMaterialNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DMaterialNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DMaterialNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNBodyCollidableNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setEnabled(self, enabled_ = True):
        super(X3DNBodyCollidableNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(X3DNBodyCollidableNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(X3DNBodyCollidableNode, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(X3DNBodyCollidableNode, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(X3DNBodyCollidableNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNBodyCollidableNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNBodyCollidableNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNBodyCollisionSpaceNode(X3DBoundedObject, X3DNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setEnabled(self, enabled_ = True):
        super(X3DNBodyCollisionSpaceNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(X3DNBodyCollisionSpaceNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DNBodyCollisionSpaceNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNBodyCollisionSpaceNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNBodyCollisionSpaceNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNetworkSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DNetworkSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(X3DNetworkSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DNetworkSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNetworkSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNetworkSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNormalNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DNormalNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DNormalNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNormalNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNormalNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNurbsControlCurveNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setControlPoint(self, controlPoint_):
        super(X3DNurbsControlCurveNode, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(X3DNurbsControlCurveNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DNurbsControlCurveNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNurbsControlCurveNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNurbsControlCurveNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParametricGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DParametricGeometryNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DParametricGeometryNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DParametricGeometryNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DParametricGeometryNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNurbsSurfaceGeometryNode(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def setControlPoint(self, controlPoint_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTexCoord(self, texCoord_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setUTessellation(self, uTessellation_ = 0):
        super(X3DNurbsSurfaceGeometryNode, self).setUTessellation(uTessellation_)
        if type(uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.uTessellation_ = uTessellation_

    def getUTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def setVTessellation(self, vTessellation_ = 0):
        super(X3DNurbsSurfaceGeometryNode, self).setVTessellation(vTessellation_)
        if type(vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.vTessellation_ = vTessellation_

    def getVTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def setWeight(self, weight_):
        super(X3DNurbsSurfaceGeometryNode, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(X3DNurbsSurfaceGeometryNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DNurbsSurfaceGeometryNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DNurbsSurfaceGeometryNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParticleEmitterNode(X3DNode):
    def __init__(self, **kwargs):
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setMass(self, mass_ = 0):
        super(X3DParticleEmitterNode, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(X3DParticleEmitterNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSpeed(self, speed_ = 0):
        super(X3DParticleEmitterNode, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(X3DParticleEmitterNode, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(X3DParticleEmitterNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DParticleEmitterNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DParticleEmitterNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParticlePhysicsModelNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(X3DParticlePhysicsModelNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(X3DParticlePhysicsModelNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DParticlePhysicsModelNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DParticlePhysicsModelNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DParticlePhysicsModelNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPickSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def setEnabled(self, enabled_ = True):
        super(X3DPickSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMatchCriterion(self, matchCriterion_ = "MATCH_ANY"):
        super(X3DPickSensorNode, self).setMatchCriterion(matchCriterion_)
        if type(matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == matchCriterion_:
            pass
        elif 'MATCH_EVERY' == matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.matchCriterion_ = matchCriterion_

    def getMatchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def setMetadata(self, metadata_ = None):
        super(X3DPickSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(X3DPickSensorNode, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def getPickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def setPickingGeometry(self, pickingGeometry_ = None):
        super(X3DPickSensorNode, self).setPickingGeometry(pickingGeometry_)
        if type(pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.pickingGeometry_ = pickingGeometry_

    def getPickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def setPickTarget(self, pickTarget_):
        super(X3DPickSensorNode, self).setPickTarget(pickTarget_)
        if type(pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.pickTarget_ = pickTarget_

    def getPickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def setDEF(self, DEF_):
        super(X3DPickSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DPickSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DPickSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DProductStructureChildNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DProductStructureChildNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(X3DProductStructureChildNode, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setDEF(self, DEF_):
        super(X3DProductStructureChildNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DProductStructureChildNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DProductStructureChildNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPrototypeInstance(X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DPrototypeInstance, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    pass


class X3DRigidJointNode(X3DNode):
    def __init__(self, **kwargs):
        return

    def setBody1(self, body1_ = None):
        super(X3DRigidJointNode, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def setBody2(self, body2_ = None):
        super(X3DRigidJointNode, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(X3DRigidJointNode, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMetadata(self, metadata_ = None):
        super(X3DRigidJointNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DRigidJointNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DRigidJointNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DRigidJointNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DUrlObject():
    def __init__(self, **kwargs):
        return

    def setUrl(self, url_):
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    pass


class X3DScriptNode(X3DUrlObject, X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DScriptNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(X3DScriptNode, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(X3DScriptNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DScriptNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DScriptNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSequencerNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(X3DSequencerNode, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setMetadata(self, metadata_ = None):
        super(X3DSequencerNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNext(self, next_):
        super(X3DSequencerNode, self).setNext(next_)
        if type(next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.next_ = next_
    def setPrevious(self, previous_):
        super(X3DSequencerNode, self).setPrevious(previous_)
        if type(previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.previous_ = previous_
    def set_fraction(self, _fraction_):
        super(X3DSequencerNode, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_
    def setDEF(self, DEF_):
        super(X3DSequencerNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DSequencerNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DSequencerNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DShaderNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def setActivate(self, activate_):
        super(X3DShaderNode, self).setActivate(activate_)
        if type(activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.activate_ = activate_

    def isSelected(self):
        if type(self.Selected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Selected_


    def isValid(self):
        if type(self.Valid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Valid_

    def setMetadata(self, metadata_ = None):
        super(X3DShaderNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DShaderNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DShaderNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DShaderNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DShapeNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setAppearance(self, appearance_ = None):
        super(X3DShapeNode, self).setAppearance(appearance_)
        if type(appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.appearance_ = appearance_

    def getAppearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def setGeometry(self, geometry_ = None):
        super(X3DShapeNode, self).setGeometry(geometry_)
        if type(geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setMetadata(self, metadata_ = None):
        super(X3DShapeNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DShapeNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DShapeNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DShapeNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSoundNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DSoundNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DSoundNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DSoundNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DSoundNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTimeDependentNode(X3DChildNode):
    def __init__(self, **kwargs):
        return


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isPaused(self):
        if type(self.Paused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Paused_

    def setLoop(self, loop_ = False):
        super(X3DTimeDependentNode, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(X3DTimeDependentNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPauseTime(self, pauseTime_ = 0):
        super(X3DTimeDependentNode, self).setPauseTime(pauseTime_)
        if type(pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.pauseTime_ = pauseTime_

    def getPauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def setResumeTime(self, resumeTime_ = 0):
        super(X3DTimeDependentNode, self).setResumeTime(resumeTime_)
        if type(resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.resumeTime_ = resumeTime_

    def getResumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def setStartTime(self, startTime_ = 0):
        super(X3DTimeDependentNode, self).setStartTime(startTime_)
        if type(startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.startTime_ = startTime_

    def getStartTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def setStopTime(self, stopTime_ = 0):
        super(X3DTimeDependentNode, self).setStopTime(stopTime_)
        if type(stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.stopTime_ = stopTime_

    def getStopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def setDEF(self, DEF_):
        super(X3DTimeDependentNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTimeDependentNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTimeDependentNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSoundSourceNode(X3DTimeDependentNode):
    def __init__(self, **kwargs):
        return

    def setDescription(self, description_):
        super(X3DSoundSourceNode, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def getDuration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isPaused(self):
        if type(self.Paused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Paused_

    def setLoop(self, loop_ = False):
        super(X3DSoundSourceNode, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(X3DSoundSourceNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPauseTime(self, pauseTime_ = 0):
        super(X3DSoundSourceNode, self).setPauseTime(pauseTime_)
        if type(pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.pauseTime_ = pauseTime_

    def getPauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def setPitch(self, pitch_ = 1.0):
        super(X3DSoundSourceNode, self).setPitch(pitch_)
        if type(pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if pitch_ <= 0:
                raise InvalidFieldValueException()
        self.pitch_ = pitch_

    def getPitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def setResumeTime(self, resumeTime_ = 0):
        super(X3DSoundSourceNode, self).setResumeTime(resumeTime_)
        if type(resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.resumeTime_ = resumeTime_

    def getResumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def setStartTime(self, startTime_ = 0):
        super(X3DSoundSourceNode, self).setStartTime(startTime_)
        if type(startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.startTime_ = startTime_

    def getStartTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def setStopTime(self, stopTime_ = 0):
        super(X3DSoundSourceNode, self).setStopTime(stopTime_)
        if type(stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.stopTime_ = stopTime_

    def getStopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def setDEF(self, DEF_):
        super(X3DSoundSourceNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DSoundSourceNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DSoundSourceNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTexture2DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTexture2DNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTexture2DNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTexture2DNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTexture2DNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTexture3DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTexture3DNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTexture3DNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTexture3DNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTexture3DNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTextureCoordinateNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTextureCoordinateNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTextureCoordinateNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTextureCoordinateNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureTransformNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTextureTransformNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTextureTransformNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTextureTransformNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTextureTransformNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTouchSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        return

    def setDescription(self, description_):
        super(X3DTouchSensorNode, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(X3DTouchSensorNode, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(X3DTouchSensorNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getTouchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def setDEF(self, DEF_):
        super(X3DTouchSensorNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTouchSensorNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTouchSensorNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTriggerNode(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DTriggerNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DTriggerNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DTriggerNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DTriggerNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVertexAttributeNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(X3DVertexAttributeNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(X3DVertexAttributeNode, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setDEF(self, DEF_):
        super(X3DVertexAttributeNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DVertexAttributeNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DVertexAttributeNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DViewpointNode(X3DBindableNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setDescription(self, description_):
        super(X3DViewpointNode, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setJump(self, jump_ = True):
        super(X3DViewpointNode, self).setJump(jump_)
        if type(jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.jump_ = jump_

    def isJump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def setMetadata(self, metadata_ = None):
        super(X3DViewpointNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(X3DViewpointNode, self).setOrientation(orientation_)
        if type(orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setRetainUserOffsets(self, retainUserOffsets_ = False):
        super(X3DViewpointNode, self).setRetainUserOffsets(retainUserOffsets_)
        if type(retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.retainUserOffsets_ = retainUserOffsets_

    def isRetainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, _bind_):
        super(X3DViewpointNode, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setDEF(self, DEF_):
        super(X3DViewpointNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DViewpointNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DViewpointNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DViewportNode(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(X3DViewportNode, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(X3DViewportNode, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(X3DViewportNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(X3DViewportNode, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(X3DViewportNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DViewportNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DViewportNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVolumeDataNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setDimensions(self, dimensions_ = [1, 1, 1]):
        super(X3DVolumeDataNode, self).setDimensions(dimensions_)
        if type(dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.dimensions_ = dimensions_

    def getDimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def setMetadata(self, metadata_ = None):
        super(X3DVolumeDataNode, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(X3DVolumeDataNode, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(X3DVolumeDataNode, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(X3DVolumeDataNode, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFogObject():
    def __init__(self, **kwargs):
        return

    def setColor(self, color_ = [1, 1, 1]):
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setFogType(self, fogType_ = "LINEAR"):
        if type(fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == fogType_:
            pass
        elif 'EXPONENTIAL' == fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.fogType_ = fogType_

    def getFogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_

    def setVisibilityRange(self, visibilityRange_ = 0):
        if type(visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.visibilityRange_ = visibilityRange_

    def getVisibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    pass


class X3DMetadataObject():
    def __init__(self, **kwargs):
        return

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    pass


class X3DPickableObject():
    def __init__(self, **kwargs):
        return

    def setPickable(self, pickable_ = True):
        if type(pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.pickable_ = pickable_

    def isPickable(self):
        if type(self.pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.pickable_

    pass


class X3DProgrammableShaderObject():
    def __init__(self, **kwargs):
        return

    def setDEF(self, DEF_):
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class AnchorObject(X3DUrlObject, X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(AnchorObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(AnchorObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setDescription(self, description_):
        super(AnchorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setMetadata(self, metadata_ = None):
        super(AnchorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setParameter(self, parameter_):
        super(AnchorObject, self).setParameter(parameter_)
        if type(parameter_) is not MFString:
            raise InvalidFieldTypeException()
        self.parameter_ = parameter_

    def getParameter(self):
        if type(self.parameter_) is not MFString:
            raise InvalidFieldTypeException()
        return self.parameter_

    def removeChildren(self, Children_):
        super(AnchorObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setUrl(self, url_):
        super(AnchorObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(AnchorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(AnchorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(AnchorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class AppearanceObject(X3DAppearanceNode):
    def __init__(self, **kwargs):
        return

    def setFillProperties(self, fillProperties_ = None):
        super(AppearanceObject, self).setFillProperties(fillProperties_)
        if type(fillProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fillProperties_ = fillProperties_

    def getFillProperties(self):
        if type(self.fillProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fillProperties_

    def setLineProperties(self, lineProperties_ = None):
        super(AppearanceObject, self).setLineProperties(lineProperties_)
        if type(lineProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.lineProperties_ = lineProperties_

    def getLineProperties(self):
        if type(self.lineProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.lineProperties_

    def setMaterial(self, material_ = None):
        super(AppearanceObject, self).setMaterial(material_)
        if type(material_) is not SFNode:
            raise InvalidFieldTypeException()
        self.material_ = material_

    def getMaterial(self):
        if type(self.material_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.material_

    def setMetadata(self, metadata_ = None):
        super(AppearanceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setShaders(self, shaders_):
        super(AppearanceObject, self).setShaders(shaders_)
        if type(shaders_) is not MFNode:
            raise InvalidFieldTypeException()
        self.shaders_ = shaders_

    def getShaders(self):
        if type(self.shaders_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.shaders_

    def setTexture(self, texture_ = None):
        super(AppearanceObject, self).setTexture(texture_)
        if type(texture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texture_ = texture_

    def getTexture(self):
        if type(self.texture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def setTextureTransform(self, textureTransform_ = None):
        super(AppearanceObject, self).setTextureTransform(textureTransform_)
        if type(textureTransform_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureTransform_ = textureTransform_

    def getTextureTransform(self):
        if type(self.textureTransform_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.textureTransform_

    def setDEF(self, DEF_):
        super(AppearanceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(AppearanceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(AppearanceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Arc2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(endAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if endAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if endAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.endAngle_ = kwargs.pop("endAngle", 1.570796)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(startAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if startAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if startAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.startAngle_ = kwargs.pop("startAngle", 0)
        return

    def setMetadata(self, metadata_ = None):
        super(Arc2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(Arc2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Arc2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Arc2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ArcClose2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(closureType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PIE' == closureType_:
            pass
        elif 'CHORD' == closureType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.closureType_ = kwargs.pop("closureType", "PIE")
        if type(endAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if endAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if endAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.endAngle_ = kwargs.pop("endAngle", 1.570796)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        if type(startAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if startAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if startAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.startAngle_ = kwargs.pop("startAngle", 0)
        return

    def setMetadata(self, metadata_ = None):
        super(ArcClose2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ArcClose2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ArcClose2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ArcClose2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class AudioClipObject(X3DUrlObject, X3DSoundSourceNode):
    def __init__(self, **kwargs):
        return

    def setDescription(self, description_):
        super(AudioClipObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def getDuration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isPaused(self):
        if type(self.Paused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Paused_

    def setLoop(self, loop_ = False):
        super(AudioClipObject, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(AudioClipObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPauseTime(self, pauseTime_ = 0):
        super(AudioClipObject, self).setPauseTime(pauseTime_)
        if type(pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.pauseTime_ = pauseTime_

    def getPauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def setPitch(self, pitch_ = 1.0):
        super(AudioClipObject, self).setPitch(pitch_)
        if type(pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if pitch_ <= 0:
                raise InvalidFieldValueException()
        self.pitch_ = pitch_

    def getPitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def setResumeTime(self, resumeTime_ = 0):
        super(AudioClipObject, self).setResumeTime(resumeTime_)
        if type(resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.resumeTime_ = resumeTime_

    def getResumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def setStartTime(self, startTime_ = 0):
        super(AudioClipObject, self).setStartTime(startTime_)
        if type(startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.startTime_ = startTime_

    def getStartTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def setStopTime(self, stopTime_ = 0):
        super(AudioClipObject, self).setStopTime(stopTime_)
        if type(stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.stopTime_ = stopTime_

    def getStopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def setUrl(self, url_):
        super(AudioClipObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(AudioClipObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(AudioClipObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(AudioClipObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BackgroundObject(X3DBackgroundNode):
    def __init__(self, **kwargs):
        return

    def setBackUrl(self, backUrl_):
        super(BackgroundObject, self).setBackUrl(backUrl_)
        if type(backUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.backUrl_ = backUrl_

    def getBackUrl(self):
        if type(self.backUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.backUrl_


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setBottomUrl(self, bottomUrl_):
        super(BackgroundObject, self).setBottomUrl(bottomUrl_)
        if type(bottomUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.bottomUrl_ = bottomUrl_

    def getBottomUrl(self):
        if type(self.bottomUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.bottomUrl_

    def setFrontUrl(self, frontUrl_):
        super(BackgroundObject, self).setFrontUrl(frontUrl_)
        if type(frontUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.frontUrl_ = frontUrl_

    def getFrontUrl(self):
        if type(self.frontUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.frontUrl_

    def setGroundAngle(self, groundAngle_):
        super(BackgroundObject, self).setGroundAngle(groundAngle_)
        if type(groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if groundAngle_ < 0:
                raise InvalidFieldValueException()
        if groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.groundAngle_ = groundAngle_

    def getGroundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def setGroundColor(self, groundColor_):
        super(BackgroundObject, self).setGroundColor(groundColor_)
        if type(groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if groundColor_ < 0:
                raise InvalidFieldValueException()
        if groundColor_ > 1:
                raise InvalidFieldValueException()
        self.groundColor_ = groundColor_

    def getGroundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setLeftUrl(self, leftUrl_):
        super(BackgroundObject, self).setLeftUrl(leftUrl_)
        if type(leftUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.leftUrl_ = leftUrl_

    def getLeftUrl(self):
        if type(self.leftUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.leftUrl_

    def setMetadata(self, metadata_ = None):
        super(BackgroundObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRightUrl(self, rightUrl_):
        super(BackgroundObject, self).setRightUrl(rightUrl_)
        if type(rightUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.rightUrl_ = rightUrl_

    def getRightUrl(self):
        if type(self.rightUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.rightUrl_

    def set_bind(self, _bind_):
        super(BackgroundObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setSkyAngle(self, skyAngle_):
        super(BackgroundObject, self).setSkyAngle(skyAngle_)
        if type(skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if skyAngle_ < 0:
                raise InvalidFieldValueException()
        if skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.skyAngle_ = skyAngle_

    def getSkyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def setSkyColor(self, skyColor_ = [0, 0, 0]):
        super(BackgroundObject, self).setSkyColor(skyColor_)
        if type(skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if skyColor_ < 0:
                raise InvalidFieldValueException()
        if skyColor_ > 1:
                raise InvalidFieldValueException()
        self.skyColor_ = skyColor_

    def getSkyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def setTopUrl(self, topUrl_):
        super(BackgroundObject, self).setTopUrl(topUrl_)
        if type(topUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.topUrl_ = topUrl_

    def getTopUrl(self):
        if type(self.topUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.topUrl_

    def setTransparency(self, transparency_ = 0):
        super(BackgroundObject, self).setTransparency(transparency_)
        if type(transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if transparency_ < 0:
                raise InvalidFieldValueException()
        if transparency_ > 1:
                raise InvalidFieldValueException()
        self.transparency_ = transparency_

    def getTransparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def setDEF(self, DEF_):
        super(BackgroundObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BackgroundObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BackgroundObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BallJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        return

    def setAnchorPoint(self, anchorPoint_ = [0, 0, 0]):
        super(BallJointObject, self).setAnchorPoint(anchorPoint_)
        if type(anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.anchorPoint_ = anchorPoint_

    def getAnchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def setBody1(self, body1_ = None):
        super(BallJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def getBody1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_

    def setBody2(self, body2_ = None):
        super(BallJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def getBody2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(BallJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMetadata(self, metadata_ = None):
        super(BallJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(BallJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BallJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BallJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BillboardObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(BillboardObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setAxisOfRotation(self, axisOfRotation_ = [0, 1, 0]):
        super(BillboardObject, self).setAxisOfRotation(axisOfRotation_)
        if type(axisOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axisOfRotation_ = axisOfRotation_

    def getAxisOfRotation(self):
        if type(self.axisOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axisOfRotation_

    def setChildren(self, children_):
        super(BillboardObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(BillboardObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(BillboardObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(BillboardObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BillboardObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BillboardObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BlendedVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(BlendedVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(BlendedVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRenderStyle(self, renderStyle_ = None):
        super(BlendedVolumeStyleObject, self).setRenderStyle(renderStyle_)
        if type(renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.renderStyle_ = renderStyle_

    def getRenderStyle(self):
        if type(self.renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def setVoxels(self, voxels_ = None):
        super(BlendedVolumeStyleObject, self).setVoxels(voxels_)
        if type(voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.voxels_ = voxels_

    def getVoxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def setWeightConstant1(self, weightConstant1_ = 0.5):
        super(BlendedVolumeStyleObject, self).setWeightConstant1(weightConstant1_)
        if type(weightConstant1_) is not SFFloat:
            raise InvalidFieldTypeException()
        if weightConstant1_ < 0:
                raise InvalidFieldValueException()
        if weightConstant1_ > 1:
                raise InvalidFieldValueException()
        self.weightConstant1_ = weightConstant1_

    def getWeightConstant1(self):
        if type(self.weightConstant1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weightConstant1_

    def setWeightConstant2(self, weightConstant2_ = 0.5):
        super(BlendedVolumeStyleObject, self).setWeightConstant2(weightConstant2_)
        if type(weightConstant2_) is not SFFloat:
            raise InvalidFieldTypeException()
        if weightConstant2_ < 0:
                raise InvalidFieldValueException()
        if weightConstant2_ > 1:
                raise InvalidFieldValueException()
        self.weightConstant2_ = weightConstant2_

    def getWeightConstant2(self):
        if type(self.weightConstant2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weightConstant2_

    def setWeightFunction1(self, weightFunction1_ = "CONSTANT"):
        super(BlendedVolumeStyleObject, self).setWeightFunction1(weightFunction1_)
        if type(weightFunction1_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CONSTANT' == weightFunction1_:
            pass
        elif 'ALPHA1' == weightFunction1_:
            pass
        elif 'ALPHA2' == weightFunction1_:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction1_:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction1_:
            pass
        elif 'TABLE' == weightFunction1_:
            pass
        else:
            raise InvalidFieldValueException()
        self.weightFunction1_ = weightFunction1_

    def getWeightFunction1(self):
        if type(self.weightFunction1_) is not SFString:
            raise InvalidFieldTypeException()
        return self.weightFunction1_

    def setWeightFunction2(self, weightFunction2_ = "CONSTANT"):
        super(BlendedVolumeStyleObject, self).setWeightFunction2(weightFunction2_)
        if type(weightFunction2_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CONSTANT' == weightFunction2_:
            pass
        elif 'ALPHA1' == weightFunction2_:
            pass
        elif 'ALPHA2' == weightFunction2_:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction2_:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction2_:
            pass
        elif 'TABLE' == weightFunction2_:
            pass
        else:
            raise InvalidFieldValueException()
        self.weightFunction2_ = weightFunction2_

    def getWeightFunction2(self):
        if type(self.weightFunction2_) is not SFString:
            raise InvalidFieldTypeException()
        return self.weightFunction2_

    def setWeightTransferFunction1(self, weightTransferFunction1_ = None):
        super(BlendedVolumeStyleObject, self).setWeightTransferFunction1(weightTransferFunction1_)
        if type(weightTransferFunction1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.weightTransferFunction1_ = weightTransferFunction1_

    def getWeightTransferFunction1(self):
        if type(self.weightTransferFunction1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.weightTransferFunction1_

    def setWeightTransferFunction2(self, weightTransferFunction2_ = None):
        super(BlendedVolumeStyleObject, self).setWeightTransferFunction2(weightTransferFunction2_)
        if type(weightTransferFunction2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.weightTransferFunction2_ = weightTransferFunction2_

    def getWeightTransferFunction2(self):
        if type(self.weightTransferFunction2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.weightTransferFunction2_

    def setDEF(self, DEF_):
        super(BlendedVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BlendedVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BlendedVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanFilterObject(X3DChildNode):
    def __init__(self, **kwargs):
        return


    def isInputFalse(self):
        if type(self.inputFalse_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputFalse_


    def isInputNegate(self):
        if type(self.inputNegate_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputNegate_


    def isInputTrue(self):
        if type(self.inputTrue_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputTrue_

    def setMetadata(self, metadata_ = None):
        super(BooleanFilterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, _boolean_):
        super(BooleanFilterObject, self).set_boolean(_boolean_)
        if type(_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self._boolean_ = _boolean_
    def setDEF(self, DEF_):
        super(BooleanFilterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BooleanFilterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BooleanFilterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanSequencerObject(X3DSequencerNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(BooleanSequencerObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(BooleanSequencerObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFBool:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(BooleanSequencerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNext(self, next_):
        super(BooleanSequencerObject, self).setNext(next_)
        if type(next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.next_ = next_
    def setPrevious(self, previous_):
        super(BooleanSequencerObject, self).setPrevious(previous_)
        if type(previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.previous_ = previous_
    def set_fraction(self, _fraction_):
        super(BooleanSequencerObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def isValue_changed(self):
        if type(self.value_changed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(BooleanSequencerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BooleanSequencerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BooleanSequencerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanToggleObject(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(BooleanToggleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, _boolean_):
        super(BooleanToggleObject, self).set_boolean(_boolean_)
        if type(_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self._boolean_ = _boolean_
    def setToggle(self, toggle_ = False):
        super(BooleanToggleObject, self).setToggle(toggle_)
        if type(toggle_) is not SFBool:
            raise InvalidFieldTypeException()
        self.toggle_ = toggle_

    def isToggle(self):
        if type(self.toggle_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.toggle_

    def setDEF(self, DEF_):
        super(BooleanToggleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BooleanToggleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BooleanToggleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanTriggerObject(X3DTriggerNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(BooleanTriggerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_triggerTime(self, _triggerTime_):
        super(BooleanTriggerObject, self).set_triggerTime(_triggerTime_)
        if type(_triggerTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self._triggerTime_ = _triggerTime_

    def isTriggerTrue(self):
        if type(self.triggerTrue_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.triggerTrue_

    def setDEF(self, DEF_):
        super(BooleanTriggerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BooleanTriggerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BooleanTriggerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BoundaryEnhancementVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setBoundaryOpacity(self, boundaryOpacity_ = 0.9):
        super(BoundaryEnhancementVolumeStyleObject, self).setBoundaryOpacity(boundaryOpacity_)
        if type(boundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if boundaryOpacity_ < 0:
                raise InvalidFieldValueException()
        if boundaryOpacity_ > 1:
                raise InvalidFieldValueException()
        self.boundaryOpacity_ = boundaryOpacity_

    def getBoundaryOpacity(self):
        if type(self.boundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.boundaryOpacity_

    def setEnabled(self, enabled_ = True):
        super(BoundaryEnhancementVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(BoundaryEnhancementVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOpacityFactor(self, opacityFactor_ = 2):
        super(BoundaryEnhancementVolumeStyleObject, self).setOpacityFactor(opacityFactor_)
        if type(opacityFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        if opacityFactor_ < 0:
                raise InvalidFieldValueException()
        self.opacityFactor_ = opacityFactor_

    def getOpacityFactor(self):
        if type(self.opacityFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.opacityFactor_

    def setRetainedOpacity(self, retainedOpacity_ = 0.2):
        super(BoundaryEnhancementVolumeStyleObject, self).setRetainedOpacity(retainedOpacity_)
        if type(retainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if retainedOpacity_ < 0:
                raise InvalidFieldValueException()
        if retainedOpacity_ > 1:
                raise InvalidFieldValueException()
        self.retainedOpacity_ = retainedOpacity_

    def getRetainedOpacity(self):
        if type(self.retainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.retainedOpacity_

    def setDEF(self, DEF_):
        super(BoundaryEnhancementVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BoundaryEnhancementVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BoundaryEnhancementVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BoundedPhysicsModelObject(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(BoundedPhysicsModelObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setGeometry(self, geometry_ = None):
        super(BoundedPhysicsModelObject, self).setGeometry(geometry_)
        if type(geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setMetadata(self, metadata_ = None):
        super(BoundedPhysicsModelObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(BoundedPhysicsModelObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BoundedPhysicsModelObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BoundedPhysicsModelObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BoxObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [2, 2, 2])
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setMetadata(self, metadata_ = None):
        super(BoxObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(BoxObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(BoxObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(BoxObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADAssemblyObject(X3DProductStructureChildNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(CADAssemblyObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(CADAssemblyObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(CADAssemblyObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(CADAssemblyObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(CADAssemblyObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(CADAssemblyObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CADAssemblyObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CADAssemblyObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADFaceObject(X3DBoundedObject, X3DProductStructureChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setMetadata(self, metadata_ = None):
        super(CADFaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(CADFaceObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setShape(self, shape_ = None):
        super(CADFaceObject, self).setShape(shape_)
        if type(shape_) is not SFNode:
            raise InvalidFieldTypeException()
        self.shape_ = shape_

    def getShape(self):
        if type(self.shape_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.shape_

    def setDEF(self, DEF_):
        super(CADFaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CADFaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CADFaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADLayerObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(CADLayerObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(CADLayerObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(CADLayerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(CADLayerObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(CADLayerObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setVisible(self, visible_):
        super(CADLayerObject, self).setVisible(visible_)
        if type(visible_) is not MFBool:
            raise InvalidFieldTypeException()
        self.visible_ = visible_

    def getVisible(self):
        if type(self.visible_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.visible_

    def setDEF(self, DEF_):
        super(CADLayerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CADLayerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CADLayerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADPartObject(X3DGroupingNode, X3DProductStructureChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(CADPartObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setCenter(self, center_ = [0, 0, 0]):
        super(CADPartObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(CADPartObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(CADPartObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(CADPartObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(CADPartObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(CADPartObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(CADPartObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(CADPartObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(CADPartObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(CADPartObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CADPartObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CADPartObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CartoonVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setColorSteps(self, colorSteps_ = 4):
        super(CartoonVolumeStyleObject, self).setColorSteps(colorSteps_)
        if type(colorSteps_) is not SFInt32:
            raise InvalidFieldTypeException()
        if colorSteps_ < 1:
                raise InvalidFieldValueException()
        if colorSteps_ > 64:
                raise InvalidFieldValueException()
        self.colorSteps_ = colorSteps_

    def getColorSteps(self):
        if type(self.colorSteps_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.colorSteps_

    def setEnabled(self, enabled_ = True):
        super(CartoonVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(CartoonVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrthogonalColor(self, orthogonalColor_ = [1, 1, 1, 1]):
        super(CartoonVolumeStyleObject, self).setOrthogonalColor(orthogonalColor_)
        if type(orthogonalColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if orthogonalColor_ < 0:
                raise InvalidFieldValueException()
        if orthogonalColor_ > 1:
                raise InvalidFieldValueException()
        self.orthogonalColor_ = orthogonalColor_

    def getOrthogonalColor(self):
        if type(self.orthogonalColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.orthogonalColor_

    def setParallelColor(self, parallelColor_ = [0, 0, 0, 1]):
        super(CartoonVolumeStyleObject, self).setParallelColor(parallelColor_)
        if type(parallelColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if parallelColor_ < 0:
                raise InvalidFieldValueException()
        if parallelColor_ > 1:
                raise InvalidFieldValueException()
        self.parallelColor_ = parallelColor_

    def getParallelColor(self):
        if type(self.parallelColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.parallelColor_

    def setSurfaceNormals(self, surfaceNormals_ = None):
        super(CartoonVolumeStyleObject, self).setSurfaceNormals(surfaceNormals_)
        if type(surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surfaceNormals_ = surfaceNormals_

    def getSurfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def setDEF(self, DEF_):
        super(CartoonVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CartoonVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CartoonVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Circle2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        return

    def setMetadata(self, metadata_ = None):
        super(Circle2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(Circle2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Circle2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Circle2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ClipPlaneObject(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(ClipPlaneObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(ClipPlaneObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPlane(self, plane_ = [0, 1, 0, 0]):
        super(ClipPlaneObject, self).setPlane(plane_)
        if type(plane_) is not SFVec4f:
            raise InvalidFieldTypeException()
        if plane_ < -1:
                raise InvalidFieldValueException()
        if plane_ > 1:
                raise InvalidFieldValueException()
        self.plane_ = plane_

    def getPlane(self):
        if type(self.plane_) is not SFVec4f:
            raise InvalidFieldTypeException()
        return self.plane_

    def setDEF(self, DEF_):
        super(ClipPlaneObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ClipPlaneObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ClipPlaneObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollidableOffsetObject(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(collidable_) is not SFNode:
            raise InvalidFieldTypeException()
        self.collidable_ = kwargs.pop("collidable", None)
        return

    def setEnabled(self, enabled_ = True):
        super(CollidableOffsetObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(CollidableOffsetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(CollidableOffsetObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(CollidableOffsetObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(CollidableOffsetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollidableOffsetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollidableOffsetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollidableShapeObject(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(shape_) is not SFNode:
            raise InvalidFieldTypeException()
        self.shape_ = kwargs.pop("shape", None)
        return

    def setEnabled(self, enabled_ = True):
        super(CollidableShapeObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(CollidableShapeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(CollidableShapeObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(CollidableShapeObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(CollidableShapeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollidableShapeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollidableShapeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionObject(X3DSensorNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(proxy_) is not SFNode:
            raise InvalidFieldTypeException()
        self.proxy_ = kwargs.pop("proxy", None)
        return

    def addChildren(self, Children_):
        super(CollisionObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(CollisionObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def getCollideTime(self):
        if type(self.collideTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.collideTime_

    def setEnabled(self, enabled_ = True):
        super(CollisionObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(CollisionObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(CollisionObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(CollisionObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollisionObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollisionObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionCollectionObject(X3DNode):
    def __init__(self, **kwargs):
        return

    def setAppliedParameters(self, appliedParameters_ = "BOUNCE"):
        super(CollisionCollectionObject, self).setAppliedParameters(appliedParameters_)
        if type(appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        if '"BOUNCE"' == appliedParameters_:
            pass
        elif '"USER_FRICTION"' == appliedParameters_:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters_:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters_:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters_:
            pass
        elif '"SPEED-1"' == appliedParameters_:
            pass
        elif '"SPEED-2"' == appliedParameters_:
            pass
        elif '"SLIP-1"' == appliedParameters_:
            pass
        elif '"SLIP-2"' == appliedParameters_:
            pass
        else:
            raise InvalidFieldValueException()
        self.appliedParameters_ = appliedParameters_

    def getAppliedParameters(self):
        if type(self.appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        return self.appliedParameters_

    def setBounce(self, bounce_ = 0):
        super(CollisionCollectionObject, self).setBounce(bounce_)
        if type(bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if bounce_ < 0:
                raise InvalidFieldValueException()
        if bounce_ > 1:
                raise InvalidFieldValueException()
        self.bounce_ = bounce_

    def getBounce(self):
        if type(self.bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.bounce_

    def setCollidables(self, collidables_):
        super(CollisionCollectionObject, self).setCollidables(collidables_)
        if type(collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        self.collidables_ = collidables_

    def getCollidables(self):
        if type(self.collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.collidables_

    def setEnabled(self, enabled_ = True):
        super(CollisionCollectionObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setFrictionCoefficients(self, frictionCoefficients_ = [0, 0]):
        super(CollisionCollectionObject, self).setFrictionCoefficients(frictionCoefficients_)
        if type(frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if frictionCoefficients_ < 0:
                raise InvalidFieldValueException()
        self.frictionCoefficients_ = frictionCoefficients_

    def getFrictionCoefficients(self):
        if type(self.frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.frictionCoefficients_

    def setMetadata(self, metadata_ = None):
        super(CollisionCollectionObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinBounceSpeed(self, minBounceSpeed_ = 0.1):
        super(CollisionCollectionObject, self).setMinBounceSpeed(minBounceSpeed_)
        if type(minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if minBounceSpeed_ < 0:
                raise InvalidFieldValueException()
        self.minBounceSpeed_ = minBounceSpeed_

    def getMinBounceSpeed(self):
        if type(self.minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBounceSpeed_

    def setSlipFactors(self, slipFactors_ = [0, 0]):
        super(CollisionCollectionObject, self).setSlipFactors(slipFactors_)
        if type(slipFactors_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.slipFactors_ = slipFactors_

    def getSlipFactors(self):
        if type(self.slipFactors_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.slipFactors_

    def setSoftnessConstantForceMix(self, softnessConstantForceMix_ = 0.0001):
        super(CollisionCollectionObject, self).setSoftnessConstantForceMix(softnessConstantForceMix_)
        if type(softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        if softnessConstantForceMix_ < 0:
                raise InvalidFieldValueException()
        if softnessConstantForceMix_ > 1:
                raise InvalidFieldValueException()
        self.softnessConstantForceMix_ = softnessConstantForceMix_

    def getSoftnessConstantForceMix(self):
        if type(self.softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessConstantForceMix_

    def setSoftnessErrorCorrection(self, softnessErrorCorrection_ = 0.8):
        super(CollisionCollectionObject, self).setSoftnessErrorCorrection(softnessErrorCorrection_)
        if type(softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if softnessErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if softnessErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.softnessErrorCorrection_ = softnessErrorCorrection_

    def getSoftnessErrorCorrection(self):
        if type(self.softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessErrorCorrection_

    def setSurfaceSpeed(self, surfaceSpeed_ = [0, 0]):
        super(CollisionCollectionObject, self).setSurfaceSpeed(surfaceSpeed_)
        if type(surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.surfaceSpeed_ = surfaceSpeed_

    def getSurfaceSpeed(self):
        if type(self.surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.surfaceSpeed_

    def setDEF(self, DEF_):
        super(CollisionCollectionObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollisionCollectionObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollisionCollectionObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionSensorObject(X3DSensorNode):
    def __init__(self, **kwargs):
        return

    def setCollider(self, collider_ = None):
        super(CollisionSensorObject, self).setCollider(collider_)
        if type(collider_) is not SFNode:
            raise InvalidFieldTypeException()
        self.collider_ = collider_

    def getCollider(self):
        if type(self.collider_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.collider_


    def getContacts(self):
        if type(self.contacts_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.contacts_

    def setEnabled(self, enabled_ = True):
        super(CollisionSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getIntersections(self):
        if type(self.intersections_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.intersections_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(CollisionSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(CollisionSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollisionSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollisionSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionSpaceObject(X3DNBodyCollisionSpaceNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setCollidables(self, collidables_):
        super(CollisionSpaceObject, self).setCollidables(collidables_)
        if type(collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        self.collidables_ = collidables_

    def getCollidables(self):
        if type(self.collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.collidables_

    def setEnabled(self, enabled_ = True):
        super(CollisionSpaceObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(CollisionSpaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUseGeometry(self, useGeometry_ = False):
        super(CollisionSpaceObject, self).setUseGeometry(useGeometry_)
        if type(useGeometry_) is not SFBool:
            raise InvalidFieldTypeException()
        self.useGeometry_ = useGeometry_

    def isUseGeometry(self):
        if type(self.useGeometry_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useGeometry_

    def setDEF(self, DEF_):
        super(CollisionSpaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CollisionSpaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CollisionSpaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorObject(X3DColorNode):
    def __init__(self, **kwargs):
        return

    def setColor(self, color_):
        super(ColorObject, self).setColor(color_)
        if type(color_) is not MFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setMetadata(self, metadata_ = None):
        super(ColorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ColorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ColorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ColorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorChaserObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialDestination_ < 0:
                raise InvalidFieldValueException()
        if initialDestination_ > 1:
                raise InvalidFieldValueException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if type(initialValue_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialValue_ < 0:
                raise InvalidFieldValueException()
        if initialValue_ > 1:
                raise InvalidFieldValueException()
        self.initialValue_ = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(ColorChaserObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(ColorChaserObject, self).set_destination(_destination_)
        if type(_destination_) is not SFColor:
            raise InvalidFieldTypeException()
        if _destination_ < 0:
                raise InvalidFieldValueException()
        if _destination_ > 1:
                raise InvalidFieldValueException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(ColorChaserObject, self).set_value(_value_)
        if type(_value_) is not SFColor:
            raise InvalidFieldTypeException()
        if _value_ < 0:
                raise InvalidFieldValueException()
        if _value_ > 1:
                raise InvalidFieldValueException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ColorChaserObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ColorChaserObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ColorChaserObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorDamperObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialDestination_ < 0:
                raise InvalidFieldValueException()
        if initialDestination_ > 1:
                raise InvalidFieldValueException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if type(initialValue_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialValue_ < 0:
                raise InvalidFieldValueException()
        if initialValue_ > 1:
                raise InvalidFieldValueException()
        self.initialValue_ = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(ColorDamperObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(ColorDamperObject, self).set_destination(_destination_)
        if type(_destination_) is not SFColor:
            raise InvalidFieldTypeException()
        if _destination_ < 0:
                raise InvalidFieldValueException()
        if _destination_ > 1:
                raise InvalidFieldValueException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(ColorDamperObject, self).set_value(_value_)
        if type(_value_) is not SFColor:
            raise InvalidFieldTypeException()
        if _value_ < 0:
                raise InvalidFieldValueException()
        if _value_ > 1:
                raise InvalidFieldValueException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(ColorDamperObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(ColorDamperObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ColorDamperObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ColorDamperObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ColorDamperObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(ColorInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(ColorInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFColor:
            raise InvalidFieldTypeException()
        if keyValue_ < 0:
                raise InvalidFieldValueException()
        if keyValue_ > 1:
                raise InvalidFieldValueException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(ColorInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(ColorInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ColorInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ColorInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ColorInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorRGBAObject(X3DColorNode):
    def __init__(self, **kwargs):
        return

    def setColor(self, color_):
        super(ColorRGBAObject, self).setColor(color_)
        if type(color_) is not MFColorRGBA:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not MFColorRGBA:
            raise InvalidFieldTypeException()
        return self.color_

    def setMetadata(self, metadata_ = None):
        super(ColorRGBAObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ColorRGBAObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ColorRGBAObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ColorRGBAObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedCubeMapTextureObject(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        return

    def setBack(self, back_ = None):
        super(ComposedCubeMapTextureObject, self).setBack(back_)
        if type(back_) is not SFNode:
            raise InvalidFieldTypeException()
        self.back_ = back_

    def getBack(self):
        if type(self.back_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.back_

    def setBottom(self, bottom_ = None):
        super(ComposedCubeMapTextureObject, self).setBottom(bottom_)
        if type(bottom_) is not SFNode:
            raise InvalidFieldTypeException()
        self.bottom_ = bottom_

    def getBottom(self):
        if type(self.bottom_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.bottom_

    def setFront(self, front_ = None):
        super(ComposedCubeMapTextureObject, self).setFront(front_)
        if type(front_) is not SFNode:
            raise InvalidFieldTypeException()
        self.front_ = front_

    def getFront(self):
        if type(self.front_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.front_

    def setLeft(self, left_ = None):
        super(ComposedCubeMapTextureObject, self).setLeft(left_)
        if type(left_) is not SFNode:
            raise InvalidFieldTypeException()
        self.left_ = left_

    def getLeft(self):
        if type(self.left_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.left_

    def setMetadata(self, metadata_ = None):
        super(ComposedCubeMapTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRight(self, right_ = None):
        super(ComposedCubeMapTextureObject, self).setRight(right_)
        if type(right_) is not SFNode:
            raise InvalidFieldTypeException()
        self.right_ = right_

    def getRight(self):
        if type(self.right_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.right_

    def setTop(self, top_ = None):
        super(ComposedCubeMapTextureObject, self).setTop(top_)
        if type(top_) is not SFNode:
            raise InvalidFieldTypeException()
        self.top_ = top_

    def getTop(self):
        if type(self.top_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.top_

    def setDEF(self, DEF_):
        super(ComposedCubeMapTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ComposedCubeMapTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ComposedCubeMapTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedShaderObject(X3DProgrammableShaderObject, X3DShaderNode):
    def __init__(self, **kwargs):
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def setActivate(self, activate_):
        super(ComposedShaderObject, self).setActivate(activate_)
        if type(activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.activate_ = activate_

    def isSelected(self):
        if type(self.Selected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Selected_


    def isValid(self):
        if type(self.Valid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Valid_

    def setMetadata(self, metadata_ = None):
        super(ComposedShaderObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setParts(self, parts_):
        super(ComposedShaderObject, self).setParts(parts_)
        if type(parts_) is not MFNode:
            raise InvalidFieldTypeException()
        self.parts_ = parts_

    def getParts(self):
        if type(self.parts_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.parts_

    def setDEF(self, DEF_):
        super(ComposedShaderObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ComposedShaderObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ComposedShaderObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedTexture3DObject(X3DTexture3DNode):
    def __init__(self, **kwargs):
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(ComposedTexture3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTexture(self, texture_):
        super(ComposedTexture3DObject, self).setTexture(texture_)
        if type(texture_) is not MFNode:
            raise InvalidFieldTypeException()
        self.texture_ = texture_

    def getTexture(self):
        if type(self.texture_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def setDEF(self, DEF_):
        super(ComposedTexture3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ComposedTexture3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ComposedTexture3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(ComposedVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(ComposedVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRenderStyle(self, renderStyle_):
        super(ComposedVolumeStyleObject, self).setRenderStyle(renderStyle_)
        if type(renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.renderStyle_ = renderStyle_

    def getRenderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def setDEF(self, DEF_):
        super(ComposedVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ComposedVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ComposedVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ConeObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(bottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.bottom_ = kwargs.pop("bottom", True)
        if type(bottomRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if bottomRadius_ <= 0:
                raise InvalidFieldValueException()
        self.bottomRadius_ = kwargs.pop("bottomRadius", 1)
        if type(height_) is not SFFloat:
            raise InvalidFieldTypeException()
        if height_ <= 0:
                raise InvalidFieldValueException()
        self.height_ = kwargs.pop("height", 2)
        if type(side_) is not SFBool:
            raise InvalidFieldTypeException()
        self.side_ = kwargs.pop("side", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setMetadata(self, metadata_ = None):
        super(ConeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ConeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ConeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ConeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ConeEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setAngle(self, angle_ = 0.7854):
        super(ConeEmitterObject, self).setAngle(angle_)
        if type(angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if angle_ < 0:
                raise InvalidFieldValueException()
        if angle_ > 3.1416:
                raise InvalidFieldValueException()
        self.angle_ = angle_

    def getAngle(self):
        if type(self.angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angle_

    def setDirection(self, direction_ = [0, 1, 0]):
        super(ConeEmitterObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if direction_ < -1:
                raise InvalidFieldValueException()
        if direction_ > 1:
                raise InvalidFieldValueException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setMass(self, mass_ = 0):
        super(ConeEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(ConeEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPosition(self, position_ = [0, 0, 0]):
        super(ConeEmitterObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setSpeed(self, speed_ = 0):
        super(ConeEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(ConeEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(ConeEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ConeEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ConeEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ContactObject(X3DNode):
    def __init__(self, **kwargs):
        return

    def setAppliedParameters(self, appliedParameters_ = "BOUNCE"):
        super(ContactObject, self).setAppliedParameters(appliedParameters_)
        if type(appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        if '"BOUNCE"' == appliedParameters_:
            pass
        elif '"USER_FRICTION"' == appliedParameters_:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters_:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters_:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters_:
            pass
        elif '"SPEED-1"' == appliedParameters_:
            pass
        elif '"SPEED-2"' == appliedParameters_:
            pass
        elif '"SLIP-1"' == appliedParameters_:
            pass
        elif '"SLIP-2"' == appliedParameters_:
            pass
        else:
            raise InvalidFieldValueException()
        self.appliedParameters_ = appliedParameters_

    def getAppliedParameters(self):
        if type(self.appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        return self.appliedParameters_

    def setBody1(self, body1_ = None):
        super(ContactObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def setBody2(self, body2_ = None):
        super(ContactObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def setBounce(self, bounce_ = 0):
        super(ContactObject, self).setBounce(bounce_)
        if type(bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if bounce_ < 0:
                raise InvalidFieldValueException()
        if bounce_ > 1:
                raise InvalidFieldValueException()
        self.bounce_ = bounce_

    def getBounce(self):
        if type(self.bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.bounce_

    def setContactNormal(self, contactNormal_ = [0, 1, 0]):
        super(ContactObject, self).setContactNormal(contactNormal_)
        if type(contactNormal_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.contactNormal_ = contactNormal_

    def getContactNormal(self):
        if type(self.contactNormal_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.contactNormal_

    def setDepth(self, depth_ = 0):
        super(ContactObject, self).setDepth(depth_)
        if type(depth_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.depth_ = depth_

    def getDepth(self):
        if type(self.depth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.depth_

    def setFrictionCoefficients(self, frictionCoefficients_ = [0, 0]):
        super(ContactObject, self).setFrictionCoefficients(frictionCoefficients_)
        if type(frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if frictionCoefficients_ < 0:
                raise InvalidFieldValueException()
        self.frictionCoefficients_ = frictionCoefficients_

    def getFrictionCoefficients(self):
        if type(self.frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.frictionCoefficients_

    def setFrictionDirection(self, frictionDirection_ = [0, 1, 0]):
        super(ContactObject, self).setFrictionDirection(frictionDirection_)
        if type(frictionDirection_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.frictionDirection_ = frictionDirection_

    def getFrictionDirection(self):
        if type(self.frictionDirection_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.frictionDirection_

    def setGeometry1(self, geometry1_ = None):
        super(ContactObject, self).setGeometry1(geometry1_)
        if type(geometry1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry1_ = geometry1_

    def getGeometry1(self):
        if type(self.geometry1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry1_

    def setGeometry2(self, geometry2_ = None):
        super(ContactObject, self).setGeometry2(geometry2_)
        if type(geometry2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry2_ = geometry2_

    def getGeometry2(self):
        if type(self.geometry2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry2_

    def setMetadata(self, metadata_ = None):
        super(ContactObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinBounceSpeed(self, minBounceSpeed_ = 0):
        super(ContactObject, self).setMinBounceSpeed(minBounceSpeed_)
        if type(minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if minBounceSpeed_ < 0:
                raise InvalidFieldValueException()
        self.minBounceSpeed_ = minBounceSpeed_

    def getMinBounceSpeed(self):
        if type(self.minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBounceSpeed_

    def setPosition(self, position_ = [0, 0, 0]):
        super(ContactObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setSlipCoefficients(self, slipCoefficients_ = [0, 0]):
        super(ContactObject, self).setSlipCoefficients(slipCoefficients_)
        if type(slipCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.slipCoefficients_ = slipCoefficients_

    def getSlipCoefficients(self):
        if type(self.slipCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.slipCoefficients_

    def setSoftnessConstantForceMix(self, softnessConstantForceMix_ = 0.0001):
        super(ContactObject, self).setSoftnessConstantForceMix(softnessConstantForceMix_)
        if type(softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        if softnessConstantForceMix_ < 0:
                raise InvalidFieldValueException()
        if softnessConstantForceMix_ > 1:
                raise InvalidFieldValueException()
        self.softnessConstantForceMix_ = softnessConstantForceMix_

    def getSoftnessConstantForceMix(self):
        if type(self.softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessConstantForceMix_

    def setSoftnessErrorCorrection(self, softnessErrorCorrection_ = 0.8):
        super(ContactObject, self).setSoftnessErrorCorrection(softnessErrorCorrection_)
        if type(softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if softnessErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if softnessErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.softnessErrorCorrection_ = softnessErrorCorrection_

    def getSoftnessErrorCorrection(self):
        if type(self.softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessErrorCorrection_

    def setSurfaceSpeed(self, surfaceSpeed_ = [0, 0]):
        super(ContactObject, self).setSurfaceSpeed(surfaceSpeed_)
        if type(surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.surfaceSpeed_ = surfaceSpeed_

    def getSurfaceSpeed(self):
        if type(self.surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.surfaceSpeed_

    def setDEF(self, DEF_):
        super(ContactObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ContactObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ContactObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Contour2DObject(X3DNode):
    def __init__(self, **kwargs):
        return

    def addChildren(self, Children_):
        super(Contour2DObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(Contour2DObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(Contour2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(Contour2DObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(Contour2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Contour2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Contour2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ContourPolyline2DObject(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        return

    def setControlPoint(self, controlPoint_):
        super(ContourPolyline2DObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(ContourPolyline2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ContourPolyline2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ContourPolyline2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ContourPolyline2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateObject(X3DCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(CoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(CoordinateObject, self).setPoint(point_)
        if type(point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(CoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateChaserObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(CoordinateChaserObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(CoordinateChaserObject, self).set_destination(_destination_)
        if type(_destination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(CoordinateChaserObject, self).set_value(_value_)
        if type(_value_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(CoordinateChaserObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateChaserObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateChaserObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateDamperObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(CoordinateDamperObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(CoordinateDamperObject, self).set_destination(_destination_)
        if type(_destination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(CoordinateDamperObject, self).set_value(_value_)
        if type(_value_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(CoordinateDamperObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(CoordinateDamperObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(CoordinateDamperObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateDamperObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateDamperObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateDoubleObject(X3DCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(CoordinateDoubleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(CoordinateDoubleObject, self).setPoint(point_)
        if type(point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(CoordinateDoubleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateDoubleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateDoubleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(CoordinateInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(CoordinateInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(CoordinateInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(CoordinateInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(CoordinateInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateInterpolator2DObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(CoordinateInterpolator2DObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(CoordinateInterpolator2DObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(CoordinateInterpolator2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(CoordinateInterpolator2DObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(CoordinateInterpolator2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CoordinateInterpolator2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CoordinateInterpolator2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CylinderObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(bottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.bottom_ = kwargs.pop("bottom", True)
        if type(height_) is not SFFloat:
            raise InvalidFieldTypeException()
        if height_ <= 0:
                raise InvalidFieldValueException()
        self.height_ = kwargs.pop("height", 2)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(side_) is not SFBool:
            raise InvalidFieldTypeException()
        self.side_ = kwargs.pop("side", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setMetadata(self, metadata_ = None):
        super(CylinderObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTop(self, top_ = True):
        super(CylinderObject, self).setTop(top_)
        if type(top_) is not SFBool:
            raise InvalidFieldTypeException()
        self.top_ = top_

    def isTop(self):
        if type(self.top_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.top_

    def setDEF(self, DEF_):
        super(CylinderObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CylinderObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CylinderObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CylinderSensorObject(X3DDragSensorNode):
    def __init__(self, **kwargs):
        return

    def setAutoOffset(self, autoOffset_ = True):
        super(CylinderSensorObject, self).setAutoOffset(autoOffset_)
        if type(autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoOffset_ = autoOffset_

    def isAutoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def setAxisRotation(self, axisRotation_ = [0, 1, 0, 0]):
        super(CylinderSensorObject, self).setAxisRotation(axisRotation_)
        if type(axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.axisRotation_ = axisRotation_

    def getAxisRotation(self):
        if type(self.axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.axisRotation_

    def setDescription(self, description_):
        super(CylinderSensorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setDiskAngle(self, diskAngle_ = 0.26179167):
        super(CylinderSensorObject, self).setDiskAngle(diskAngle_)
        if type(diskAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if diskAngle_ < 0:
                raise InvalidFieldValueException()
        if diskAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.diskAngle_ = diskAngle_

    def getDiskAngle(self):
        if type(self.diskAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.diskAngle_

    def setEnabled(self, enabled_ = True):
        super(CylinderSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMaxAngle(self, maxAngle_ = -1):
        super(CylinderSensorObject, self).setMaxAngle(maxAngle_)
        if type(maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if maxAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if maxAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.maxAngle_ = maxAngle_

    def getMaxAngle(self):
        if type(self.maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle_

    def setMetadata(self, metadata_ = None):
        super(CylinderSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinAngle(self, minAngle_ = 0):
        super(CylinderSensorObject, self).setMinAngle(minAngle_)
        if type(minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if minAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if minAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.minAngle_ = minAngle_

    def getMinAngle(self):
        if type(self.minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle_

    def setOffset(self, offset_ = 0):
        super(CylinderSensorObject, self).setOffset(offset_)
        if type(offset_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.offset_ = offset_

    def getOffset(self):
        if type(self.offset_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.offset_


    def getRotation_changed(self):
        if type(self.rotation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_changed_


    def getTrackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def setDEF(self, DEF_):
        super(CylinderSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(CylinderSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(CylinderSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DirectionalLightObject(X3DLightNode):
    def __init__(self, **kwargs):
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0):
        super(DirectionalLightObject, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setColor(self, color_ = [1, 1, 1]):
        super(DirectionalLightObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setDirection(self, direction_ = [0, 0, -1]):
        super(DirectionalLightObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setGlobal(self, global_ = False):
        super(DirectionalLightObject, self).setGlobal(global_)
        if type(global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.global_ = global_

    def isGlobal(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def setIntensity(self, intensity_ = 1):
        super(DirectionalLightObject, self).setIntensity(intensity_)
        if type(intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensity_ < 0:
                raise InvalidFieldValueException()
        if intensity_ > 1:
                raise InvalidFieldValueException()
        self.intensity_ = intensity_

    def getIntensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def setMetadata(self, metadata_ = None):
        super(DirectionalLightObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOn(self, on_ = True):
        super(DirectionalLightObject, self).setOn(on_)
        if type(on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.on_ = on_

    def isOn(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def setDEF(self, DEF_):
        super(DirectionalLightObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(DirectionalLightObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(DirectionalLightObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DISEntityManagerObject(X3DChildNode):
    def __init__(self, **kwargs):
        return


    def getAddedEntities(self):
        if type(self.addedEntities_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.addedEntities_

    def address(self, ress_ = "localhost"):
        super(DISEntityManagerObject, self).address(ress_)
        if type(ress_) is not SFString:
            raise InvalidFieldTypeException()
        self.ress_ = ress_

    def getAddress(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def setApplicationID(self, applicationID_ = 0):
        super(DISEntityManagerObject, self).setApplicationID(applicationID_)
        if type(applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.applicationID_ = applicationID_

    def getApplicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def setMapping(self, mapping_):
        super(DISEntityManagerObject, self).setMapping(mapping_)
        if type(mapping_) is not MFNode:
            raise InvalidFieldTypeException()
        self.mapping_ = mapping_

    def getMapping(self):
        if type(self.mapping_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.mapping_

    def setMetadata(self, metadata_ = None):
        super(DISEntityManagerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPort(self, port_ = 0):
        super(DISEntityManagerObject, self).setPort(port_)
        if type(port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.port_ = port_

    def getPort(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_


    def getRemovedEntities(self):
        if type(self.removedEntities_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.removedEntities_

    def setSiteID(self, siteID_ = 0):
        super(DISEntityManagerObject, self).setSiteID(siteID_)
        if type(siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.siteID_ = siteID_

    def getSiteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_

    def setDEF(self, DEF_):
        super(DISEntityManagerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(DISEntityManagerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(DISEntityManagerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DISEntityTypeMappingObject(X3DUrlObject, X3DInfoNode):
    def __init__(self, **kwargs):
        if type(category_) is not SFInt32:
            raise InvalidFieldTypeException()
        if category_ < 0:
                raise InvalidFieldValueException()
        if category_ > 255:
                raise InvalidFieldValueException()
        self.category_ = kwargs.pop("category", 0)
        if type(country_) is not SFInt32:
            raise InvalidFieldTypeException()
        if country_ < 0:
                raise InvalidFieldValueException()
        if country_ > 65535:
                raise InvalidFieldValueException()
        self.country_ = kwargs.pop("country", 0)
        if type(domain_) is not SFInt32:
            raise InvalidFieldTypeException()
        if domain_ < 0:
                raise InvalidFieldValueException()
        if domain_ > 255:
                raise InvalidFieldValueException()
        self.domain_ = kwargs.pop("domain", 0)
        if type(extra_) is not SFInt32:
            raise InvalidFieldTypeException()
        if extra_ < 0:
                raise InvalidFieldValueException()
        if extra_ > 255:
                raise InvalidFieldValueException()
        self.extra_ = kwargs.pop("extra", 0)
        if type(kind_) is not SFInt32:
            raise InvalidFieldTypeException()
        if kind_ < 0:
                raise InvalidFieldValueException()
        if kind_ > 255:
                raise InvalidFieldValueException()
        self.kind_ = kwargs.pop("kind", 0)
        if type(specific_) is not SFInt32:
            raise InvalidFieldTypeException()
        if specific_ < 0:
                raise InvalidFieldValueException()
        if specific_ > 255:
                raise InvalidFieldValueException()
        self.specific_ = kwargs.pop("specific", 0)
        if type(subcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        if subcategory_ < 0:
                raise InvalidFieldValueException()
        if subcategory_ > 255:
                raise InvalidFieldValueException()
        self.subcategory_ = kwargs.pop("subcategory", 0)
        return

    def setMetadata(self, metadata_ = None):
        super(DISEntityTypeMappingObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(DISEntityTypeMappingObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(DISEntityTypeMappingObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(DISEntityTypeMappingObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(DISEntityTypeMappingObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Disk2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(innerRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if innerRadius_ < 0:
                raise InvalidFieldValueException()
        self.innerRadius_ = kwargs.pop("innerRadius", 0)
        if type(outerRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if outerRadius_ <= 0:
                raise InvalidFieldValueException()
        self.outerRadius_ = kwargs.pop("outerRadius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def setMetadata(self, metadata_ = None):
        super(Disk2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(Disk2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Disk2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Disk2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DoubleAxisHingeJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        return

    def setAnchorPoint(self, anchorPoint_ = [0, 0, 0]):
        super(DoubleAxisHingeJointObject, self).setAnchorPoint(anchorPoint_)
        if type(anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.anchorPoint_ = anchorPoint_

    def getAnchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def setAxis1(self, axis1_ = [0, 0, 0]):
        super(DoubleAxisHingeJointObject, self).setAxis1(axis1_)
        if type(axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis1_ = axis1_

    def getAxis1(self):
        if type(self.axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis1_

    def setAxis2(self, axis2_ = [0, 0, 0]):
        super(DoubleAxisHingeJointObject, self).setAxis2(axis2_)
        if type(axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis2_ = axis2_

    def getAxis2(self):
        if type(self.axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis2_

    def setBody1(self, body1_ = None):
        super(DoubleAxisHingeJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def getBody1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_


    def getBody1Axis(self):
        if type(self.body1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1Axis_

    def setBody2(self, body2_ = None):
        super(DoubleAxisHingeJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def getBody2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_


    def getBody2Axis(self):
        if type(self.body2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2Axis_

    def setDesiredAngularVelocity1(self, desiredAngularVelocity1_ = 0):
        super(DoubleAxisHingeJointObject, self).setDesiredAngularVelocity1(desiredAngularVelocity1_)
        if type(desiredAngularVelocity1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.desiredAngularVelocity1_ = desiredAngularVelocity1_

    def getDesiredAngularVelocity1(self):
        if type(self.desiredAngularVelocity1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.desiredAngularVelocity1_

    def setDesiredAngularVelocity2(self, desiredAngularVelocity2_ = 0):
        super(DoubleAxisHingeJointObject, self).setDesiredAngularVelocity2(desiredAngularVelocity2_)
        if type(desiredAngularVelocity2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.desiredAngularVelocity2_ = desiredAngularVelocity2_

    def getDesiredAngularVelocity2(self):
        if type(self.desiredAngularVelocity2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.desiredAngularVelocity2_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(DoubleAxisHingeJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_


    def getHinge1Angle(self):
        if type(self.hinge1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge1Angle_


    def getHinge1AngleRate(self):
        if type(self.hinge1AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge1AngleRate_


    def getHinge2Angle(self):
        if type(self.hinge2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge2Angle_


    def getHinge2AngleRate(self):
        if type(self.hinge2AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge2AngleRate_

    def setMaxAngle1(self, maxAngle1_ = 3.141592653):
        super(DoubleAxisHingeJointObject, self).setMaxAngle1(maxAngle1_)
        if type(maxAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxAngle1_ = maxAngle1_

    def getMaxAngle1(self):
        if type(self.maxAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle1_

    def setMaxTorque1(self, maxTorque1_ = 0):
        super(DoubleAxisHingeJointObject, self).setMaxTorque1(maxTorque1_)
        if type(maxTorque1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxTorque1_ = maxTorque1_

    def getMaxTorque1(self):
        if type(self.maxTorque1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxTorque1_

    def setMaxTorque2(self, maxTorque2_ = 0):
        super(DoubleAxisHingeJointObject, self).setMaxTorque2(maxTorque2_)
        if type(maxTorque2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxTorque2_ = maxTorque2_

    def getMaxTorque2(self):
        if type(self.maxTorque2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxTorque2_

    def setMetadata(self, metadata_ = None):
        super(DoubleAxisHingeJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinAngle1(self, minAngle1_ = -3.141592653):
        super(DoubleAxisHingeJointObject, self).setMinAngle1(minAngle1_)
        if type(minAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.minAngle1_ = minAngle1_

    def getMinAngle1(self):
        if type(self.minAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle1_

    def setStop1Bounce(self, stop1Bounce_ = 0):
        super(DoubleAxisHingeJointObject, self).setStop1Bounce(stop1Bounce_)
        if type(stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop1Bounce_ = stop1Bounce_

    def getStop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def setStop1ConstantForceMix(self, stop1ConstantForceMix_ = 0.001):
        super(DoubleAxisHingeJointObject, self).setStop1ConstantForceMix(stop1ConstantForceMix_)
        if type(stop1ConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop1ConstantForceMix_ = stop1ConstantForceMix_

    def getStop1ConstantForceMix(self):
        if type(self.stop1ConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ConstantForceMix_

    def setStop1ErrorCorrection(self, stop1ErrorCorrection_ = 0.8):
        super(DoubleAxisHingeJointObject, self).setStop1ErrorCorrection(stop1ErrorCorrection_)
        if type(stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop1ErrorCorrection_ = stop1ErrorCorrection_

    def getStop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def setSuspensionErrorCorrection(self, suspensionErrorCorrection_ = 0.8):
        super(DoubleAxisHingeJointObject, self).setSuspensionErrorCorrection(suspensionErrorCorrection_)
        if type(suspensionErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.suspensionErrorCorrection_ = suspensionErrorCorrection_

    def getSuspensionErrorCorrection(self):
        if type(self.suspensionErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.suspensionErrorCorrection_

    def setSuspensionForce(self, suspensionForce_ = 0):
        super(DoubleAxisHingeJointObject, self).setSuspensionForce(suspensionForce_)
        if type(suspensionForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.suspensionForce_ = suspensionForce_

    def getSuspensionForce(self):
        if type(self.suspensionForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.suspensionForce_

    def setDEF(self, DEF_):
        super(DoubleAxisHingeJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(DoubleAxisHingeJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(DoubleAxisHingeJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EaseInEaseOutObject(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setEaseInEaseOut(self, easeInEaseOut_):
        super(EaseInEaseOutObject, self).setEaseInEaseOut(easeInEaseOut_)
        if type(easeInEaseOut_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.easeInEaseOut_ = easeInEaseOut_

    def getEaseInEaseOut(self):
        if type(self.easeInEaseOut_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.easeInEaseOut_

    def setKey(self, key_):
        super(EaseInEaseOutObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setMetadata(self, metadata_ = None):
        super(EaseInEaseOutObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getModifiedFraction_changed(self):
        if type(self.modifiedFraction_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.modifiedFraction_changed_

    def set_fraction(self, _fraction_):
        super(EaseInEaseOutObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_
    def setDEF(self, DEF_):
        super(EaseInEaseOutObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(EaseInEaseOutObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(EaseInEaseOutObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EdgeEnhancementVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEdgeColor(self, edgeColor_ = [0, 0, 0, 1]):
        super(EdgeEnhancementVolumeStyleObject, self).setEdgeColor(edgeColor_)
        if type(edgeColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if edgeColor_ < 0:
                raise InvalidFieldValueException()
        if edgeColor_ > 1:
                raise InvalidFieldValueException()
        self.edgeColor_ = edgeColor_

    def getEdgeColor(self):
        if type(self.edgeColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.edgeColor_

    def setEnabled(self, enabled_ = True):
        super(EdgeEnhancementVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setGradientThreshold(self, gradientThreshold_ = 0.4):
        super(EdgeEnhancementVolumeStyleObject, self).setGradientThreshold(gradientThreshold_)
        if type(gradientThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        if gradientThreshold_ < 0:
                raise InvalidFieldValueException()
        if gradientThreshold_ > 3.1416:
                raise InvalidFieldValueException()
        self.gradientThreshold_ = gradientThreshold_

    def getGradientThreshold(self):
        if type(self.gradientThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.gradientThreshold_

    def setMetadata(self, metadata_ = None):
        super(EdgeEnhancementVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSurfaceNormals(self, surfaceNormals_ = None):
        super(EdgeEnhancementVolumeStyleObject, self).setSurfaceNormals(surfaceNormals_)
        if type(surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surfaceNormals_ = surfaceNormals_

    def getSurfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def setDEF(self, DEF_):
        super(EdgeEnhancementVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(EdgeEnhancementVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(EdgeEnhancementVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ElevationGridObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.height_ = kwargs.pop("height", [0, 0, 0, 0])
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(xDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if xDimension_ < 0:
                raise InvalidFieldValueException()
        self.xDimension_ = kwargs.pop("xDimension", 2)
        if type(xSpacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if xSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.xSpacing_ = kwargs.pop("xSpacing", 1.0)
        if type(zDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if zDimension_ < 0:
                raise InvalidFieldValueException()
        self.zDimension_ = kwargs.pop("zDimension", 2)
        if type(zSpacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if zSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.zSpacing_ = kwargs.pop("zSpacing", 1.0)
        return

    def setAttrib(self, attrib_):
        super(ElevationGridObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(ElevationGridObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setFogCoord(self, fogCoord_ = None):
        super(ElevationGridObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(ElevationGridObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(ElevationGridObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_height(self, _height_):
        super(ElevationGridObject, self).set_height(_height_)
        if type(_height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self._height_ = _height_
    def setTexCoord(self, texCoord_ = None):
        super(ElevationGridObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(ElevationGridObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ElevationGridObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ElevationGridObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EspduTransformObject(X3DNetworkSensorNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def addChildren(self, Children_):
        super(EspduTransformObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def address(self, ress_ = "localhost"):
        super(EspduTransformObject, self).address(ress_)
        if type(ress_) is not SFString:
            raise InvalidFieldTypeException()
        self.ress_ = ress_

    def getAddress(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def setApplicationID(self, applicationID_ = 0):
        super(EspduTransformObject, self).setApplicationID(applicationID_)
        if type(applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.applicationID_ = applicationID_

    def getApplicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def setArticulationParameterArray(self, articulationParameterArray_):
        super(EspduTransformObject, self).setArticulationParameterArray(articulationParameterArray_)
        if type(articulationParameterArray_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.articulationParameterArray_ = articulationParameterArray_

    def getArticulationParameterArray(self):
        if type(self.articulationParameterArray_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterArray_

    def setArticulationParameterChangeIndicatorArray(self, articulationParameterChangeIndicatorArray_):
        super(EspduTransformObject, self).setArticulationParameterChangeIndicatorArray(articulationParameterChangeIndicatorArray_)
        if type(articulationParameterChangeIndicatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.articulationParameterChangeIndicatorArray_ = articulationParameterChangeIndicatorArray_

    def getArticulationParameterChangeIndicatorArray(self):
        if type(self.articulationParameterChangeIndicatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterChangeIndicatorArray_

    def setArticulationParameterCount(self, articulationParameterCount_ = 0):
        super(EspduTransformObject, self).setArticulationParameterCount(articulationParameterCount_)
        if type(articulationParameterCount_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.articulationParameterCount_ = articulationParameterCount_

    def getArticulationParameterCount(self):
        if type(self.articulationParameterCount_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterCount_

    def setArticulationParameterDesignatorArray(self, articulationParameterDesignatorArray_):
        super(EspduTransformObject, self).setArticulationParameterDesignatorArray(articulationParameterDesignatorArray_)
        if type(articulationParameterDesignatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.articulationParameterDesignatorArray_ = articulationParameterDesignatorArray_

    def getArticulationParameterDesignatorArray(self):
        if type(self.articulationParameterDesignatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterDesignatorArray_

    def setArticulationParameterIdPartAttachedToArray(self, articulationParameterIdPartAttachedToArray_):
        super(EspduTransformObject, self).setArticulationParameterIdPartAttachedToArray(articulationParameterIdPartAttachedToArray_)
        if type(articulationParameterIdPartAttachedToArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.articulationParameterIdPartAttachedToArray_ = articulationParameterIdPartAttachedToArray_

    def getArticulationParameterIdPartAttachedToArray(self):
        if type(self.articulationParameterIdPartAttachedToArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterIdPartAttachedToArray_

    def setArticulationParameterTypeArray(self, articulationParameterTypeArray_):
        super(EspduTransformObject, self).setArticulationParameterTypeArray(articulationParameterTypeArray_)
        if type(articulationParameterTypeArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.articulationParameterTypeArray_ = articulationParameterTypeArray_

    def getArticulationParameterTypeArray(self):
        if type(self.articulationParameterTypeArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterTypeArray_


    def getArticulationParameterValue0_changed(self):
        if type(self.articulationParameterValue0_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue0_changed_


    def getArticulationParameterValue1_changed(self):
        if type(self.articulationParameterValue1_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue1_changed_


    def getArticulationParameterValue2_changed(self):
        if type(self.articulationParameterValue2_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue2_changed_


    def getArticulationParameterValue3_changed(self):
        if type(self.articulationParameterValue3_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue3_changed_


    def getArticulationParameterValue4_changed(self):
        if type(self.articulationParameterValue4_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue4_changed_


    def getArticulationParameterValue5_changed(self):
        if type(self.articulationParameterValue5_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue5_changed_


    def getArticulationParameterValue6_changed(self):
        if type(self.articulationParameterValue6_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue6_changed_


    def getArticulationParameterValue7_changed(self):
        if type(self.articulationParameterValue7_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue7_changed_

    def setCenter(self, center_ = [0, 0, 0]):
        super(EspduTransformObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(EspduTransformObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def getCollideTime(self):
        if type(self.collideTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.collideTime_

    def setCollisionType(self, collisionType_ = 0):
        super(EspduTransformObject, self).setCollisionType(collisionType_)
        if type(collisionType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.collisionType_ = collisionType_

    def getCollisionType(self):
        if type(self.collisionType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.collisionType_

    def setDeadReckoning(self, deadReckoning_ = 0):
        super(EspduTransformObject, self).setDeadReckoning(deadReckoning_)
        if type(deadReckoning_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.deadReckoning_ = deadReckoning_

    def getDeadReckoning(self):
        if type(self.deadReckoning_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.deadReckoning_


    def getDetonateTime(self):
        if type(self.detonateTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.detonateTime_

    def setDetonationLocation(self, detonationLocation_ = [0, 0, 0]):
        super(EspduTransformObject, self).setDetonationLocation(detonationLocation_)
        if type(detonationLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.detonationLocation_ = detonationLocation_

    def getDetonationLocation(self):
        if type(self.detonationLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.detonationLocation_

    def setDetonationRelativeLocation(self, detonationRelativeLocation_ = [0, 0, 0]):
        super(EspduTransformObject, self).setDetonationRelativeLocation(detonationRelativeLocation_)
        if type(detonationRelativeLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.detonationRelativeLocation_ = detonationRelativeLocation_

    def getDetonationRelativeLocation(self):
        if type(self.detonationRelativeLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.detonationRelativeLocation_

    def setDetonationResult(self, detonationResult_ = 0):
        super(EspduTransformObject, self).setDetonationResult(detonationResult_)
        if type(detonationResult_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.detonationResult_ = detonationResult_

    def getDetonationResult(self):
        if type(self.detonationResult_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.detonationResult_

    def setEnabled(self, enabled_ = True):
        super(EspduTransformObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setEntityCategory(self, entityCategory_ = 0):
        super(EspduTransformObject, self).setEntityCategory(entityCategory_)
        if type(entityCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityCategory_ = entityCategory_

    def getEntityCategory(self):
        if type(self.entityCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityCategory_

    def setEntityCountry(self, entityCountry_ = 0):
        super(EspduTransformObject, self).setEntityCountry(entityCountry_)
        if type(entityCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityCountry_ = entityCountry_

    def getEntityCountry(self):
        if type(self.entityCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityCountry_

    def setEntityDomain(self, entityDomain_ = 0):
        super(EspduTransformObject, self).setEntityDomain(entityDomain_)
        if type(entityDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityDomain_ = entityDomain_

    def getEntityDomain(self):
        if type(self.entityDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityDomain_

    def setEntityExtra(self, entityExtra_ = 0):
        super(EspduTransformObject, self).setEntityExtra(entityExtra_)
        if type(entityExtra_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityExtra_ = entityExtra_

    def getEntityExtra(self):
        if type(self.entityExtra_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityExtra_

    def setEntityID(self, entityID_ = 0):
        super(EspduTransformObject, self).setEntityID(entityID_)
        if type(entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityID_ = entityID_

    def getEntityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def setEntityKind(self, entityKind_ = 0):
        super(EspduTransformObject, self).setEntityKind(entityKind_)
        if type(entityKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityKind_ = entityKind_

    def getEntityKind(self):
        if type(self.entityKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityKind_

    def setEntitySpecific(self, entitySpecific_ = 0):
        super(EspduTransformObject, self).setEntitySpecific(entitySpecific_)
        if type(entitySpecific_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entitySpecific_ = entitySpecific_

    def getEntitySpecific(self):
        if type(self.entitySpecific_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entitySpecific_

    def setEntitySubcategory(self, entitySubcategory_ = 0):
        super(EspduTransformObject, self).setEntitySubcategory(entitySubcategory_)
        if type(entitySubcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entitySubcategory_ = entitySubcategory_

    def getEntitySubcategory(self):
        if type(self.entitySubcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entitySubcategory_

    def setEventApplicationID(self, eventApplicationID_ = 0):
        super(EspduTransformObject, self).setEventApplicationID(eventApplicationID_)
        if type(eventApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.eventApplicationID_ = eventApplicationID_

    def getEventApplicationID(self):
        if type(self.eventApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventApplicationID_

    def setEventEntityID(self, eventEntityID_ = 0):
        super(EspduTransformObject, self).setEventEntityID(eventEntityID_)
        if type(eventEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.eventEntityID_ = eventEntityID_

    def getEventEntityID(self):
        if type(self.eventEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventEntityID_

    def setEventNumber(self, eventNumber_ = 0):
        super(EspduTransformObject, self).setEventNumber(eventNumber_)
        if type(eventNumber_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.eventNumber_ = eventNumber_

    def getEventNumber(self):
        if type(self.eventNumber_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventNumber_

    def setEventSiteID(self, eventSiteID_ = 0):
        super(EspduTransformObject, self).setEventSiteID(eventSiteID_)
        if type(eventSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.eventSiteID_ = eventSiteID_

    def getEventSiteID(self):
        if type(self.eventSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventSiteID_

    def setFired1(self, fired1_ = False):
        super(EspduTransformObject, self).setFired1(fired1_)
        if type(fired1_) is not SFBool:
            raise InvalidFieldTypeException()
        self.fired1_ = fired1_

    def isFired1(self):
        if type(self.fired1_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fired1_

    def setFired2(self, fired2_ = False):
        super(EspduTransformObject, self).setFired2(fired2_)
        if type(fired2_) is not SFBool:
            raise InvalidFieldTypeException()
        self.fired2_ = fired2_

    def isFired2(self):
        if type(self.fired2_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fired2_


    def getFiredTime(self):
        if type(self.firedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.firedTime_

    def setFireMissionIndex(self, fireMissionIndex_ = 0):
        super(EspduTransformObject, self).setFireMissionIndex(fireMissionIndex_)
        if type(fireMissionIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.fireMissionIndex_ = fireMissionIndex_

    def getFireMissionIndex(self):
        if type(self.fireMissionIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.fireMissionIndex_

    def setFiringRange(self, firingRange_ = 0):
        super(EspduTransformObject, self).setFiringRange(firingRange_)
        if type(firingRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.firingRange_ = firingRange_

    def getFiringRange(self):
        if type(self.firingRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.firingRange_

    def setFiringRate(self, firingRate_ = 0):
        super(EspduTransformObject, self).setFiringRate(firingRate_)
        if type(firingRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.firingRate_ = firingRate_

    def getFiringRate(self):
        if type(self.firingRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.firingRate_

    def setForceID(self, forceID_ = 0):
        super(EspduTransformObject, self).setForceID(forceID_)
        if type(forceID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.forceID_ = forceID_

    def getForceID(self):
        if type(self.forceID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.forceID_

    def setFuse(self, fuse_ = 0):
        super(EspduTransformObject, self).setFuse(fuse_)
        if type(fuse_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.fuse_ = fuse_

    def getFuse(self):
        if type(self.fuse_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.fuse_

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(EspduTransformObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isCollided(self):
        if type(self.Collided_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Collided_


    def isDetonated(self):
        if type(self.Detonated_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Detonated_


    def isNetworkReader(self):
        if type(self.NetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkReader_


    def isNetworkWriter(self):
        if type(self.NetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkWriter_


    def isRtpHeaderHeard(self):
        if type(self.RtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.RtpHeaderHeard_


    def isStandAlone(self):
        if type(self.StandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.StandAlone_

    def setLinearAcceleration(self, linearAcceleration_ = [0, 0, 0]):
        super(EspduTransformObject, self).setLinearAcceleration(linearAcceleration_)
        if type(linearAcceleration_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.linearAcceleration_ = linearAcceleration_

    def getLinearAcceleration(self):
        if type(self.linearAcceleration_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearAcceleration_

    def setLinearVelocity(self, linearVelocity_ = [0, 0, 0]):
        super(EspduTransformObject, self).setLinearVelocity(linearVelocity_)
        if type(linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.linearVelocity_ = linearVelocity_

    def getLinearVelocity(self):
        if type(self.linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearVelocity_

    def setMarking(self, marking_):
        super(EspduTransformObject, self).setMarking(marking_)
        if type(marking_) is not SFString:
            raise InvalidFieldTypeException()
        self.marking_ = marking_

    def getMarking(self):
        if type(self.marking_) is not SFString:
            raise InvalidFieldTypeException()
        return self.marking_

    def setMetadata(self, metadata_ = None):
        super(EspduTransformObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMulticastRelayHost(self, multicastRelayHost_):
        super(EspduTransformObject, self).setMulticastRelayHost(multicastRelayHost_)
        if type(multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.multicastRelayHost_ = multicastRelayHost_

    def getMulticastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def setMulticastRelayPort(self, multicastRelayPort_ = 0):
        super(EspduTransformObject, self).setMulticastRelayPort(multicastRelayPort_)
        if type(multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.multicastRelayPort_ = multicastRelayPort_

    def getMulticastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def setMunitionApplicationID(self, munitionApplicationID_ = 0):
        super(EspduTransformObject, self).setMunitionApplicationID(munitionApplicationID_)
        if type(munitionApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.munitionApplicationID_ = munitionApplicationID_

    def getMunitionApplicationID(self):
        if type(self.munitionApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionApplicationID_

    def setMunitionEndPoint(self, munitionEndPoint_ = [0, 0, 0]):
        super(EspduTransformObject, self).setMunitionEndPoint(munitionEndPoint_)
        if type(munitionEndPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.munitionEndPoint_ = munitionEndPoint_

    def getMunitionEndPoint(self):
        if type(self.munitionEndPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.munitionEndPoint_

    def setMunitionEntityID(self, munitionEntityID_ = 0):
        super(EspduTransformObject, self).setMunitionEntityID(munitionEntityID_)
        if type(munitionEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.munitionEntityID_ = munitionEntityID_

    def getMunitionEntityID(self):
        if type(self.munitionEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionEntityID_

    def setMunitionQuantity(self, munitionQuantity_ = 0):
        super(EspduTransformObject, self).setMunitionQuantity(munitionQuantity_)
        if type(munitionQuantity_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.munitionQuantity_ = munitionQuantity_

    def getMunitionQuantity(self):
        if type(self.munitionQuantity_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionQuantity_

    def setMunitionSiteID(self, munitionSiteID_ = 0):
        super(EspduTransformObject, self).setMunitionSiteID(munitionSiteID_)
        if type(munitionSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.munitionSiteID_ = munitionSiteID_

    def getMunitionSiteID(self):
        if type(self.munitionSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionSiteID_

    def setMunitionStartPoint(self, munitionStartPoint_ = [0, 0, 0]):
        super(EspduTransformObject, self).setMunitionStartPoint(munitionStartPoint_)
        if type(munitionStartPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.munitionStartPoint_ = munitionStartPoint_

    def getMunitionStartPoint(self):
        if type(self.munitionStartPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.munitionStartPoint_

    def setNetworkMode(self, networkMode_ = "standAlone"):
        super(EspduTransformObject, self).setNetworkMode(networkMode_)
        if type(networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == networkMode_:
            pass
        elif 'networkReader' == networkMode_:
            pass
        elif 'networkWriter' == networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.networkMode_ = networkMode_

    def getNetworkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def setPort(self, port_ = 0):
        super(EspduTransformObject, self).setPort(port_)
        if type(port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.port_ = port_

    def getPort(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def setReadInterval(self, readInterval_ = 0.1):
        super(EspduTransformObject, self).setReadInterval(readInterval_)
        if type(readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if readInterval_ < 0:
                raise InvalidFieldValueException()
        self.readInterval_ = readInterval_

    def getReadInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def removeChildren(self, Children_):
        super(EspduTransformObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(EspduTransformObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(EspduTransformObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(EspduTransformObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_articulationParameterValue0(self, _articulationParameterValue0_):
        super(EspduTransformObject, self).set_articulationParameterValue0(_articulationParameterValue0_)
        if type(_articulationParameterValue0_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue0_ = _articulationParameterValue0_
    def set_articulationParameterValue1(self, _articulationParameterValue1_):
        super(EspduTransformObject, self).set_articulationParameterValue1(_articulationParameterValue1_)
        if type(_articulationParameterValue1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue1_ = _articulationParameterValue1_
    def set_articulationParameterValue2(self, _articulationParameterValue2_):
        super(EspduTransformObject, self).set_articulationParameterValue2(_articulationParameterValue2_)
        if type(_articulationParameterValue2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue2_ = _articulationParameterValue2_
    def set_articulationParameterValue3(self, _articulationParameterValue3_):
        super(EspduTransformObject, self).set_articulationParameterValue3(_articulationParameterValue3_)
        if type(_articulationParameterValue3_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue3_ = _articulationParameterValue3_
    def set_articulationParameterValue4(self, _articulationParameterValue4_):
        super(EspduTransformObject, self).set_articulationParameterValue4(_articulationParameterValue4_)
        if type(_articulationParameterValue4_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue4_ = _articulationParameterValue4_
    def set_articulationParameterValue5(self, _articulationParameterValue5_):
        super(EspduTransformObject, self).set_articulationParameterValue5(_articulationParameterValue5_)
        if type(_articulationParameterValue5_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue5_ = _articulationParameterValue5_
    def set_articulationParameterValue6(self, _articulationParameterValue6_):
        super(EspduTransformObject, self).set_articulationParameterValue6(_articulationParameterValue6_)
        if type(_articulationParameterValue6_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue6_ = _articulationParameterValue6_
    def set_articulationParameterValue7(self, _articulationParameterValue7_):
        super(EspduTransformObject, self).set_articulationParameterValue7(_articulationParameterValue7_)
        if type(_articulationParameterValue7_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._articulationParameterValue7_ = _articulationParameterValue7_
    def setSiteID(self, siteID_ = 0):
        super(EspduTransformObject, self).setSiteID(siteID_)
        if type(siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.siteID_ = siteID_

    def getSiteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def getTimestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(EspduTransformObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setWarhead(self, warhead_ = 0):
        super(EspduTransformObject, self).setWarhead(warhead_)
        if type(warhead_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.warhead_ = warhead_

    def getWarhead(self):
        if type(self.warhead_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.warhead_

    def setWriteInterval(self, writeInterval_ = 1.0):
        super(EspduTransformObject, self).setWriteInterval(writeInterval_)
        if type(writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if writeInterval_ < 0:
                raise InvalidFieldValueException()
        self.writeInterval_ = writeInterval_

    def getWriteInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def setDEF(self, DEF_):
        super(EspduTransformObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(EspduTransformObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(EspduTransformObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ExplosionEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setMass(self, mass_ = 0):
        super(ExplosionEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(ExplosionEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPosition(self, position_ = [0, 0, 0]):
        super(ExplosionEmitterObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setSpeed(self, speed_ = 0):
        super(ExplosionEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(ExplosionEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(ExplosionEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ExplosionEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ExplosionEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ExtrusionObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(beginCap_) is not SFBool:
            raise InvalidFieldTypeException()
        self.beginCap_ = kwargs.pop("beginCap", True)
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(convex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.convex_ = kwargs.pop("convex", True)
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0.0)
        if type(crossSection_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.crossSection_ = kwargs.pop("crossSection", [1, 1, 1, -1, -1, -1, -1, 1, 1, 1])
        if type(endCap_) is not SFBool:
            raise InvalidFieldTypeException()
        self.endCap_ = kwargs.pop("endCap", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(spine_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.spine_ = kwargs.pop("spine", [0, 0, 0, 0, 1, 0])
        return

    def setMetadata(self, metadata_ = None):
        super(ExtrusionObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(ExtrusionObject, self).setOrientation(orientation_)
        if type(orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setScale(self, scale_ = [1, 1]):
        super(ExtrusionObject, self).setScale(scale_)
        if type(scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_crossSection(self, _crossSection_):
        super(ExtrusionObject, self).set_crossSection(_crossSection_)
        if type(_crossSection_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._crossSection_ = _crossSection_
    def set_orientation(self, _orientation_):
        super(ExtrusionObject, self).set_orientation(_orientation_)
        if type(_orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        self._orientation_ = _orientation_
    def set_scale(self, _scale_):
        super(ExtrusionObject, self).set_scale(_scale_)
        if type(_scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._scale_ = _scale_
    def set_spine(self, _spine_):
        super(ExtrusionObject, self).set_spine(_spine_)
        if type(_spine_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self._spine_ = _spine_
    def setDEF(self, DEF_):
        super(ExtrusionObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ExtrusionObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ExtrusionObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FillPropertiesObject(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        return

    def setFilled(self, filled_ = True):
        super(FillPropertiesObject, self).setFilled(filled_)
        if type(filled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.filled_ = filled_

    def isFilled(self):
        if type(self.filled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.filled_

    def setHatchColor(self, hatchColor_ = [1, 1, 1]):
        super(FillPropertiesObject, self).setHatchColor(hatchColor_)
        if type(hatchColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if hatchColor_ < 0:
                raise InvalidFieldValueException()
        if hatchColor_ > 1:
                raise InvalidFieldValueException()
        self.hatchColor_ = hatchColor_

    def getHatchColor(self):
        if type(self.hatchColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.hatchColor_

    def setHatched(self, hatched_ = True):
        super(FillPropertiesObject, self).setHatched(hatched_)
        if type(hatched_) is not SFBool:
            raise InvalidFieldTypeException()
        self.hatched_ = hatched_

    def isHatched(self):
        if type(self.hatched_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.hatched_

    def setHatchStyle(self, hatchStyle_ = 1):
        super(FillPropertiesObject, self).setHatchStyle(hatchStyle_)
        if type(hatchStyle_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.hatchStyle_ = hatchStyle_

    def getHatchStyle(self):
        if type(self.hatchStyle_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.hatchStyle_

    def setMetadata(self, metadata_ = None):
        super(FillPropertiesObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(FillPropertiesObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(FillPropertiesObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(FillPropertiesObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FloatVertexAttributeObject(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        if type(numComponents_) is not SFInt32:
            raise InvalidFieldTypeException()
        if numComponents_ < 1:
                raise InvalidFieldValueException()
        if numComponents_ > 4:
                raise InvalidFieldValueException()
        self.numComponents_ = kwargs.pop("numComponents", 4)
        return

    def setMetadata(self, metadata_ = None):
        super(FloatVertexAttributeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(FloatVertexAttributeObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setValue(self, value_):
        super(FloatVertexAttributeObject, self).setValue(value_)
        if type(value_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(FloatVertexAttributeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(FloatVertexAttributeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(FloatVertexAttributeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FogObject(X3DFogObject, X3DBindableNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setColor(self, color_ = [1, 1, 1]):
        super(FogObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setFogType(self, fogType_ = "LINEAR"):
        super(FogObject, self).setFogType(fogType_)
        if type(fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == fogType_:
            pass
        elif 'EXPONENTIAL' == fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.fogType_ = fogType_

    def getFogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setMetadata(self, metadata_ = None):
        super(FogObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, _bind_):
        super(FogObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setVisibilityRange(self, visibilityRange_ = 0):
        super(FogObject, self).setVisibilityRange(visibilityRange_)
        if type(visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.visibilityRange_ = visibilityRange_

    def getVisibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    def setDEF(self, DEF_):
        super(FogObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(FogObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(FogObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FogCoordinateObject(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        return

    def setDepth(self, depth_):
        super(FogCoordinateObject, self).setDepth(depth_)
        if type(depth_) is not MFFloat:
            raise InvalidFieldTypeException()
        if depth_ < 0:
                raise InvalidFieldValueException()
        if depth_ > 1:
                raise InvalidFieldValueException()
        self.depth_ = depth_

    def getDepth(self):
        if type(self.depth_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.depth_

    def setMetadata(self, metadata_ = None):
        super(FogCoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(FogCoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(FogCoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(FogCoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FontStyleObject(X3DFontStyleNode):
    def __init__(self, **kwargs):
        if type(family_) is not MFString:
            raise InvalidFieldTypeException()
        if '"SANS"' == family_:
            pass
        elif '"SERIF"' == family_:
            pass
        elif '"TYPEWRITER"' == family_:
            pass
        else:
            raise InvalidFieldValueException()
        self.family_ = kwargs.pop("family", "SERIF")
        if type(horizontal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.horizontal_ = kwargs.pop("horizontal", True)
        if type(justify_) is not MFString:
            raise InvalidFieldTypeException()
        if '"MIDDLE"' == justify_:
            pass
        elif '"MIDDLE" "BEGIN"' == justify_:
            pass
        elif '"MIDDLE" "END"' == justify_:
            pass
        elif '"MIDDLE" "FIRST"' == justify_:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify_:
            pass
        elif '"BEGIN"' == justify_:
            pass
        elif '"BEGIN" "BEGIN"' == justify_:
            pass
        elif '"BEGIN" "END"' == justify_:
            pass
        elif '"BEGIN" "FIRST"' == justify_:
            pass
        elif '"BEGIN" "MIDDLE"' == justify_:
            pass
        elif '"END"' == justify_:
            pass
        elif '"END" "BEGIN"' == justify_:
            pass
        elif '"END" "END"' == justify_:
            pass
        elif '"END" "FIRST"' == justify_:
            pass
        elif '"END" "MIDDLE"' == justify_:
            pass
        elif '"FIRST"' == justify_:
            pass
        elif '"FIRST" "BEGIN"' == justify_:
            pass
        elif '"FIRST" "END"' == justify_:
            pass
        elif '"FIRST" "FIRST"' == justify_:
            pass
        elif '"FIRST" "MIDDLE"' == justify_:
            pass
        else:
            raise InvalidFieldValueException()
        self.justify_ = kwargs.pop("justify", "BEGIN")
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        self.language_ = kwargs.pop("language")
        if type(leftToRight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.leftToRight_ = kwargs.pop("leftToRight", True)
        if type(size_) is not SFFloat:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", 1.0)
        if type(spacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if spacing_ < 0:
                raise InvalidFieldValueException()
        self.spacing_ = kwargs.pop("spacing", 1.0)
        if type(style_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PLAIN' == style_:
            pass
        elif 'BOLD' == style_:
            pass
        elif 'ITALIC' == style_:
            pass
        elif 'BOLDITALIC' == style_:
            pass
        else:
            raise InvalidFieldValueException()
        self.style_ = kwargs.pop("style", "PLAIN")
        if type(topToBottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.topToBottom_ = kwargs.pop("topToBottom", True)
        return

    def setMetadata(self, metadata_ = None):
        super(FontStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(FontStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(FontStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(FontStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ForcePhysicsModelObject(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(ForcePhysicsModelObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setForce(self, force_ = [0, -9.8, 0]):
        super(ForcePhysicsModelObject, self).setForce(force_)
        if type(force_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.force_ = force_

    def getForce(self):
        if type(self.force_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.force_

    def setMetadata(self, metadata_ = None):
        super(ForcePhysicsModelObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ForcePhysicsModelObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ForcePhysicsModelObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ForcePhysicsModelObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeneratedCubeMapTextureObject(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFInt32:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", 128)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(GeneratedCubeMapTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUpdate(self, update_ = "NONE"):
        super(GeneratedCubeMapTextureObject, self).setUpdate(update_)
        if type(update_) is not SFString:
            raise InvalidFieldTypeException()
        if 'NONE' == update_:
            pass
        elif 'NEXT_FRAME_ONLY' == update_:
            pass
        elif 'ALWAYS' == update_:
            pass
        else:
            raise InvalidFieldValueException()
        self.update_ = update_

    def getUpdate(self):
        if type(self.update_) is not SFString:
            raise InvalidFieldTypeException()
        return self.update_

    def setDEF(self, DEF_):
        super(GeneratedCubeMapTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeneratedCubeMapTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeneratedCubeMapTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoCoordinateObject(X3DCoordinateNode):
    def __init__(self, **kwargs):
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def setMetadata(self, metadata_ = None):
        super(GeoCoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(GeoCoordinateObject, self).setPoint(point_)
        if type(point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(GeoCoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoCoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoCoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoElevationGridObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(creaseAngle_) is not SFDouble:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(geoGridOrigin_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoGridOrigin_ = kwargs.pop("geoGridOrigin", [0, 0, 0])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(height_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.height_ = kwargs.pop("height", [0, 0, 0, 0])
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(xDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if xDimension_ < 0:
                raise InvalidFieldValueException()
        self.xDimension_ = kwargs.pop("xDimension", 2)
        if type(xSpacing_) is not SFDouble:
            raise InvalidFieldTypeException()
        if xSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.xSpacing_ = kwargs.pop("xSpacing", 1.0)
        if type(zDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if zDimension_ < 0:
                raise InvalidFieldValueException()
        self.zDimension_ = kwargs.pop("zDimension", 2)
        if type(zSpacing_) is not SFDouble:
            raise InvalidFieldTypeException()
        if zSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.zSpacing_ = kwargs.pop("zSpacing", 1.0)
        return

    def setColor(self, color_ = None):
        super(GeoElevationGridObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setMetadata(self, metadata_ = None):
        super(GeoElevationGridObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(GeoElevationGridObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_height(self, _height_):
        super(GeoElevationGridObject, self).set_height(_height_)
        if type(_height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self._height_ = _height_
    def setTexCoord(self, texCoord_ = None):
        super(GeoElevationGridObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setYScale(self, yScale_ = 1):
        super(GeoElevationGridObject, self).setYScale(yScale_)
        if type(yScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        if yScale_ < 0:
                raise InvalidFieldValueException()
        self.yScale_ = yScale_

    def getYScale(self):
        if type(self.yScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.yScale_

    def setDEF(self, DEF_):
        super(GeoElevationGridObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoElevationGridObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoElevationGridObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoLocationObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def addChildren(self, Children_):
        super(GeoLocationObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(GeoLocationObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(GeoLocationObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def setMetadata(self, metadata_ = None):
        super(GeoLocationObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(GeoLocationObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(GeoLocationObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoLocationObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoLocationObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoLODObject(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.center_ = kwargs.pop("center", [0, 0, 0])
        if type(child1Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child1Url_ = kwargs.pop("child1Url")
        if type(child2Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child2Url_ = kwargs.pop("child2Url")
        if type(child3Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child3Url_ = kwargs.pop("child3Url")
        if type(child4Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child4Url_ = kwargs.pop("child4Url")
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(range_) is not SFFloat:
            raise InvalidFieldTypeException()
        if range_ < 0:
                raise InvalidFieldValueException()
        self.range_ = kwargs.pop("range", 10)
        if type(rootNode_) is not MFNode:
            raise InvalidFieldTypeException()
        self.rootNode_ = kwargs.pop("rootNode")
        if type(rootUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.rootUrl_ = kwargs.pop("rootUrl")
        return


    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def getLevel_changed(self):
        if type(self.level_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_changed_

    def setMetadata(self, metadata_ = None):
        super(GeoLODObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(GeoLODObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoLODObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoLODObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoMetadataObject(X3DUrlObject, X3DInfoNode):
    def __init__(self, **kwargs):
        return

    def setData(self, data_):
        super(GeoMetadataObject, self).setData(data_)
        if type(data_) is not MFNode:
            raise InvalidFieldTypeException()
        self.data_ = data_

    def getData(self):
        if type(self.data_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.data_

    def setMetadata(self, metadata_ = None):
        super(GeoMetadataObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSummary(self, summary_):
        super(GeoMetadataObject, self).setSummary(summary_)
        if type(summary_) is not MFString:
            raise InvalidFieldTypeException()
        self.summary_ = summary_

    def getSummary(self):
        if type(self.summary_) is not MFString:
            raise InvalidFieldTypeException()
        return self.summary_

    def setUrl(self, url_):
        super(GeoMetadataObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(GeoMetadataObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoMetadataObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoMetadataObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoOriginObject(X3DNode):
    def __init__(self, **kwargs):
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rotateYUp_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rotateYUp_ = kwargs.pop("rotateYUp", False)
        return

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(GeoOriginObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def setMetadata(self, metadata_ = None):
        super(GeoOriginObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(GeoOriginObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoOriginObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoOriginObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoPositionInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return


    def getGeovalue_changed(self):
        if type(self.geovalue_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geovalue_changed_

    def setKey(self, key_):
        super(GeoPositionInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(GeoPositionInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(GeoPositionInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(GeoPositionInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(GeoPositionInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoPositionInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoPositionInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoProximitySensorObject(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(GeoProximitySensorObject, self).setCenter(center_)
        if type(center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.center_


    def getCenterOfRotation_changed(self):
        if type(self.centerOfRotation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_changed_

    def setEnabled(self, enabled_ = True):
        super(GeoProximitySensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getEnterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def getExitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_

    def setGeoCenter(self, geoCenter_ = [0, 0, 0]):
        super(GeoProximitySensorObject, self).setGeoCenter(geoCenter_)
        if type(geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCenter_ = geoCenter_

    def getGeoCenter(self):
        if type(self.geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCenter_


    def getGeoCoord_changed(self):
        if type(self.geoCoord_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoord_changed_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(GeoProximitySensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getOrientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def getPosition_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def setDEF(self, DEF_):
        super(GeoProximitySensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoProximitySensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoProximitySensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoTouchSensorObject(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def setDescription(self, description_):
        super(GeoTouchSensorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(GeoTouchSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getHitGeoCoord_changed(self):
        if type(self.hitGeoCoord_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.hitGeoCoord_changed_


    def getHitNormal_changed(self):
        if type(self.hitNormal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitNormal_changed_


    def getHitPoint_changed(self):
        if type(self.hitPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitPoint_changed_


    def getHitTexCoord_changed(self):
        if type(self.hitTexCoord_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.hitTexCoord_changed_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(GeoTouchSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getTouchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def setDEF(self, DEF_):
        super(GeoTouchSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoTouchSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoTouchSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoTransformObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def addChildren(self, Children_):
        super(GeoTransformObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(GeoTransformObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setGeoCenter(self, geoCenter_ = [0, 0, 0]):
        super(GeoTransformObject, self).setGeoCenter(geoCenter_)
        if type(geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCenter_ = geoCenter_

    def getGeoCenter(self):
        if type(self.geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCenter_

    def setMetadata(self, metadata_ = None):
        super(GeoTransformObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(GeoTransformObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(GeoTransformObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(GeoTransformObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if scale_ <= 0:
                raise InvalidFieldValueException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(GeoTransformObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(GeoTransformObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(GeoTransformObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoTransformObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoTransformObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoViewpointObject(X3DViewpointNode):
    def __init__(self, **kwargs):
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(speedFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speedFactor_ < 0:
                raise InvalidFieldValueException()
        self.speedFactor_ = kwargs.pop("speedFactor", 1.0)
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setCenterOfRotation(self, centerOfRotation_ = [0, 0, 0]):
        super(GeoViewpointObject, self).setCenterOfRotation(centerOfRotation_)
        if type(centerOfRotation_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.centerOfRotation_ = centerOfRotation_

    def getCenterOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def setDescription(self, description_):
        super(GeoViewpointObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setFieldOfView(self, fieldOfView_ = 0.7854):
        super(GeoViewpointObject, self).setFieldOfView(fieldOfView_)
        if type(fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        if fieldOfView_ <= 0:
                raise InvalidFieldValueException()
        if fieldOfView_ >= 3.1416:
                raise InvalidFieldValueException()
        self.fieldOfView_ = fieldOfView_

    def getFieldOfView(self):
        if type(self.fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setJump(self, jump_ = True):
        super(GeoViewpointObject, self).setJump(jump_)
        if type(jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.jump_ = jump_

    def isJump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def setMetadata(self, metadata_ = None):
        super(GeoViewpointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(GeoViewpointObject, self).setOrientation(orientation_)
        if type(orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setPosition(self, position_ = [0, 0, 100000]):
        super(GeoViewpointObject, self).setPosition(position_)
        if type(position_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.position_

    def setRetainUserOffsets(self, retainUserOffsets_ = False):
        super(GeoViewpointObject, self).setRetainUserOffsets(retainUserOffsets_)
        if type(retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.retainUserOffsets_ = retainUserOffsets_

    def isRetainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, _bind_):
        super(GeoViewpointObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setDEF(self, DEF_):
        super(GeoViewpointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GeoViewpointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GeoViewpointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GroupObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(GroupObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(GroupObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(GroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(GroupObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(GroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(GroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(GroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimDisplacerObject(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < 0:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        return

    def setDescription(self, description_):
        super(HAnimDisplacerObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setDisplacements(self, displacements_):
        super(HAnimDisplacerObject, self).setDisplacements(displacements_)
        if type(displacements_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.displacements_ = displacements_

    def getDisplacements(self):
        if type(self.displacements_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.displacements_

    def setMetadata(self, metadata_ = None):
        super(HAnimDisplacerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(HAnimDisplacerObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'skull_tip' == name_:
            pass
        elif 'glabella' == name_:
            pass
        elif 'sellion' == name_:
            pass
        elif 'l_infraorbitale' == name_:
            pass
        elif 'l_tragion' == name_:
            pass
        elif 'l_gonion' == name_:
            pass
        elif 'r_infraorbitale' == name_:
            pass
        elif 'r_tragion' == name_:
            pass
        elif 'r_gonion' == name_:
            pass
        elif 'supramenton' == name_:
            pass
        elif 'cervicale' == name_:
            pass
        elif 'adams_apple' == name_:
            pass
        elif 'suprasternale' == name_:
            pass
        elif 'substernale' == name_:
            pass
        elif 'l_clavicle' == name_:
            pass
        elif 'l_acromion' == name_:
            pass
        elif 'l_axilla_proximal' == name_:
            pass
        elif 'l_axilla_distal' == name_:
            pass
        elif 'l_axilla_posterior_folds' == name_:
            pass
        elif 'r_clavicle' == name_:
            pass
        elif 'r_acromion' == name_:
            pass
        elif 'r_axilla_proximal' == name_:
            pass
        elif 'r_axilla_distal' == name_:
            pass
        elif 'r_axilla_posterior_folds' == name_:
            pass
        elif 'spine_1_middle_back' == name_:
            pass
        elif 'spine_2_lower_back' == name_:
            pass
        elif 'waist_preferred_anterior' == name_:
            pass
        elif 'waist_preferred_posterior' == name_:
            pass
        elif 'l_rib10' == name_:
            pass
        elif 'l_thelion' == name_:
            pass
        elif 'r_rib10' == name_:
            pass
        elif 'r_thelion' == name_:
            pass
        elif 'l_asis' == name_:
            pass
        elif 'l_iliocristale' == name_:
            pass
        elif 'l_psis' == name_:
            pass
        elif 'r_asis' == name_:
            pass
        elif 'r_iliocristale' == name_:
            pass
        elif 'r_psis' == name_:
            pass
        elif 'crotch' == name_:
            pass
        elif 'l_femoral_lateral_epicondyle' == name_:
            pass
        elif 'l_femoral_medial_epicondyle' == name_:
            pass
        elif 'l_suprapatella' == name_:
            pass
        elif 'l_trochanterion' == name_:
            pass
        elif 'r_femoral_lateral_epicondyle' == name_:
            pass
        elif 'r_femoral_medial_epicondyle' == name_:
            pass
        elif 'r_suprapatella' == name_:
            pass
        elif 'r_trochanterion' == name_:
            pass
        elif 'l_tibiale' == name_:
            pass
        elif 'l_medial_malleolus' == name_:
            pass
        elif 'l_lateral_malleolus' == name_:
            pass
        elif 'l_sphyrion' == name_:
            pass
        elif 'r_tibiale' == name_:
            pass
        elif 'r_medial_malleolus' == name_:
            pass
        elif 'r_lateral_malleolus' == name_:
            pass
        elif 'r_sphyrion' == name_:
            pass
        elif 'l_metatarsal_phalanx_1' == name_:
            pass
        elif 'l_metatarsal_phalanx_5' == name_:
            pass
        elif 'l_dactylion' == name_:
            pass
        elif 'l_calcaneous_posterior' == name_:
            pass
        elif 'r_metatarsal_phalanx_1' == name_:
            pass
        elif 'r_metatarsal_phalanx_5' == name_:
            pass
        elif 'r_dactylion' == name_:
            pass
        elif 'r_calcaneous_posterior' == name_:
            pass
        elif 'l_humeral_lateral_epicondyle' == name_:
            pass
        elif 'l_humeral_medial_epicondyle' == name_:
            pass
        elif 'l_olecranon' == name_:
            pass
        elif 'r_humeral_lateral_epicondyle' == name_:
            pass
        elif 'r_humeral_medial_epicondyle' == name_:
            pass
        elif 'r_olecranon' == name_:
            pass
        elif 'l_radiale' == name_:
            pass
        elif 'l_ulnar_styloid' == name_:
            pass
        elif 'l_radial_styloid' == name_:
            pass
        elif 'r_radiale' == name_:
            pass
        elif 'r_ulnar_styloid' == name_:
            pass
        elif 'r_radial_styloid' == name_:
            pass
        elif 'l_metacarpal_phalanx_2' == name_:
            pass
        elif 'l_metacarpal_phalanx_3' == name_:
            pass
        elif 'l_metacarpal_phalanx_5' == name_:
            pass
        elif 'r_metacarpal_phalanx_2' == name_:
            pass
        elif 'r_metacarpal_phalanx_3' == name_:
            pass
        elif 'r_metacarpal_phalanx_5' == name_:
            pass
        elif 'nuchale' == name_:
            pass
        elif 'l_neck_base' == name_:
            pass
        elif 'r_neck_base' == name_:
            pass
        elif 'navel' == name_:
            pass
        elif 'l_ectocanthus' == name_:
            pass
        elif 'r_ectocanthus' == name_:
            pass
        elif 'menton' == name_:
            pass
        elif 'mesosternale' == name_:
            pass
        elif 'opisthocranion' == name_:
            pass
        elif 'l_knee_crease' == name_:
            pass
        elif 'r_knee_crease' == name_:
            pass
        elif 'rear_center_midsagittal_plane' == name_:
            pass
        elif 'buttocks_standing_wall_contact_point' == name_:
            pass
        elif 'l_chest_midsagittal_plane' == name_:
            pass
        elif 'r_chest_midsagittal_plane' == name_:
            pass
        elif 'l_bideltoid' == name_:
            pass
        elif 'r_bideltoid' == name_:
            pass
        elif 'l_carpal_distal_phalanx_1' == name_:
            pass
        elif 'l_carpal_distal_phalanx_2' == name_:
            pass
        elif 'l_carpal_distal_phalanx_3' == name_:
            pass
        elif 'l_carpal_distal_phalanx_4' == name_:
            pass
        elif 'l_carpal_distal_phalanx_5' == name_:
            pass
        elif 'r_carpal_distal_phalanx_1' == name_:
            pass
        elif 'r_carpal_distal_phalanx_2' == name_:
            pass
        elif 'r_carpal_distal_phalanx_3' == name_:
            pass
        elif 'r_carpal_distal_phalanx_4' == name_:
            pass
        elif 'r_carpal_distal_phalanx_5' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_5' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_5' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setWeight(self, weight_ = 0.0):
        super(HAnimDisplacerObject, self).setWeight(weight_)
        if type(weight_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(HAnimDisplacerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimDisplacerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimDisplacerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimHumanoidObject(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(HAnimHumanoidObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setDescription(self, description_):
        super(HAnimHumanoidObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setInfo(self, info_):
        super(HAnimHumanoidObject, self).setInfo(info_)
        if type(info_) is not MFString:
            raise InvalidFieldTypeException()
        self.info_ = info_

    def getInfo(self):
        if type(self.info_) is not MFString:
            raise InvalidFieldTypeException()
        return self.info_

    def setJointBindingPositions(self, jointBindingPositions_ = [0, 0, 0]):
        super(HAnimHumanoidObject, self).setJointBindingPositions(jointBindingPositions_)
        if type(jointBindingPositions_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.jointBindingPositions_ = jointBindingPositions_

    def getJointBindingPositions(self):
        if type(self.jointBindingPositions_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.jointBindingPositions_

    def setJointBindingRotations(self, jointBindingRotations_ = [0, 0, 1, 0]):
        super(HAnimHumanoidObject, self).setJointBindingRotations(jointBindingRotations_)
        if type(jointBindingRotations_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.jointBindingRotations_ = jointBindingRotations_

    def getJointBindingRotations(self):
        if type(self.jointBindingRotations_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.jointBindingRotations_

    def setJointBindingScales(self, jointBindingScales_ = [0, 0, 0]):
        super(HAnimHumanoidObject, self).setJointBindingScales(jointBindingScales_)
        if type(jointBindingScales_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.jointBindingScales_ = jointBindingScales_

    def getJointBindingScales(self):
        if type(self.jointBindingScales_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.jointBindingScales_

    def setJoints(self, joints_):
        super(HAnimHumanoidObject, self).setJoints(joints_)
        if type(joints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.joints_ = joints_

    def getJoints(self):
        if type(self.joints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.joints_

    def setLoa(self, loa_ = -1):
        super(HAnimHumanoidObject, self).setLoa(loa_)
        if type(loa_) is not SFInt32:
            raise InvalidFieldTypeException()
        if loa_ < -1:
                raise InvalidFieldValueException()
        if loa_ > 4:
                raise InvalidFieldValueException()
        self.loa_ = loa_

    def getLoa(self):
        if type(self.loa_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.loa_

    def setMetadata(self, metadata_ = None):
        super(HAnimHumanoidObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMotions(self, motions_):
        super(HAnimHumanoidObject, self).setMotions(motions_)
        if type(motions_) is not MFNode:
            raise InvalidFieldTypeException()
        self.motions_ = motions_

    def getMotions(self):
        if type(self.motions_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.motions_

    def setName(self, name_):
        super(HAnimHumanoidObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(HAnimHumanoidObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(HAnimHumanoidObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if scale_ <= 0:
                raise InvalidFieldValueException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimHumanoidObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setSegments(self, segments_):
        super(HAnimHumanoidObject, self).setSegments(segments_)
        if type(segments_) is not MFNode:
            raise InvalidFieldTypeException()
        self.segments_ = segments_

    def getSegments(self):
        if type(self.segments_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.segments_

    def setSites(self, sites_):
        super(HAnimHumanoidObject, self).setSites(sites_)
        if type(sites_) is not MFNode:
            raise InvalidFieldTypeException()
        self.sites_ = sites_

    def getSites(self):
        if type(self.sites_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.sites_

    def setSkeletalConfiguration(self, skeletalConfiguration_ = "BASIC"):
        super(HAnimHumanoidObject, self).setSkeletalConfiguration(skeletalConfiguration_)
        if type(skeletalConfiguration_) is not SFString:
            raise InvalidFieldTypeException()
        self.skeletalConfiguration_ = skeletalConfiguration_

    def getSkeletalConfiguration(self):
        if type(self.skeletalConfiguration_) is not SFString:
            raise InvalidFieldTypeException()
        return self.skeletalConfiguration_

    def setSkeleton(self, skeleton_):
        super(HAnimHumanoidObject, self).setSkeleton(skeleton_)
        if type(skeleton_) is not MFNode:
            raise InvalidFieldTypeException()
        self.skeleton_ = skeleton_

    def getSkeleton(self):
        if type(self.skeleton_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skeleton_

    def setSkin(self, skin_):
        super(HAnimHumanoidObject, self).setSkin(skin_)
        if type(skin_) is not MFNode:
            raise InvalidFieldTypeException()
        self.skin_ = skin_

    def getSkin(self):
        if type(self.skin_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skin_

    def setSkinBindingCoords(self, skinBindingCoords_):
        super(HAnimHumanoidObject, self).setSkinBindingCoords(skinBindingCoords_)
        if type(skinBindingCoords_) is not MFNode:
            raise InvalidFieldTypeException()
        self.skinBindingCoords_ = skinBindingCoords_

    def getSkinBindingCoords(self):
        if type(self.skinBindingCoords_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skinBindingCoords_

    def setSkinBindingNormals(self, skinBindingNormals_):
        super(HAnimHumanoidObject, self).setSkinBindingNormals(skinBindingNormals_)
        if type(skinBindingNormals_) is not MFNode:
            raise InvalidFieldTypeException()
        self.skinBindingNormals_ = skinBindingNormals_

    def getSkinBindingNormals(self):
        if type(self.skinBindingNormals_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skinBindingNormals_

    def setSkinCoord(self, skinCoord_ = None):
        super(HAnimHumanoidObject, self).setSkinCoord(skinCoord_)
        if type(skinCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.skinCoord_ = skinCoord_

    def getSkinCoord(self):
        if type(self.skinCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.skinCoord_

    def setSkinNormal(self, skinNormal_ = None):
        super(HAnimHumanoidObject, self).setSkinNormal(skinNormal_)
        if type(skinNormal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.skinNormal_ = skinNormal_

    def getSkinNormal(self):
        if type(self.skinNormal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.skinNormal_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(HAnimHumanoidObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setVersion(self, version_ = "2.0"):
        super(HAnimHumanoidObject, self).setVersion(version_)
        if type(version_) is not SFString:
            raise InvalidFieldTypeException()
        if '1.0' == version_:
            pass
        elif '1.1' == version_:
            pass
        elif '2.0' == version_:
            pass
        else:
            raise InvalidFieldValueException()
        self.version_ = version_

    def getVersion(self):
        if type(self.version_) is not SFString:
            raise InvalidFieldTypeException()
        return self.version_

    def setViewpoints(self, viewpoints_):
        super(HAnimHumanoidObject, self).setViewpoints(viewpoints_)
        if type(viewpoints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.viewpoints_ = viewpoints_

    def getViewpoints(self):
        if type(self.viewpoints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.viewpoints_

    def setDEF(self, DEF_):
        super(HAnimHumanoidObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimHumanoidObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimHumanoidObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimJointObject(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(HAnimJointObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setCenter(self, center_ = [0, 0, 0]):
        super(HAnimJointObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(HAnimJointObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setDescription(self, description_):
        super(HAnimJointObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setDisplacers(self, displacers_):
        super(HAnimJointObject, self).setDisplacers(displacers_)
        if type(displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.displacers_ = displacers_

    def getDisplacers(self):
        if type(self.displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.displacers_

    def setLimitOrientation(self, limitOrientation_ = [0, 0, 1, 0]):
        super(HAnimJointObject, self).setLimitOrientation(limitOrientation_)
        if type(limitOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.limitOrientation_ = limitOrientation_

    def getLimitOrientation(self):
        if type(self.limitOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.limitOrientation_

    def setLlimit(self, llimit_ = [0, 0, 0]):
        super(HAnimJointObject, self).setLlimit(llimit_)
        if type(llimit_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.llimit_ = llimit_

    def getLlimit(self):
        if type(self.llimit_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.llimit_

    def setMetadata(self, metadata_ = None):
        super(HAnimJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(HAnimJointObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'humanoidroot' == name_:
            pass
        elif 'sacroiliac' == name_:
            pass
        elif 'l_hip' == name_:
            pass
        elif 'l_knee' == name_:
            pass
        elif 'l_ankle' == name_:
            pass
        elif 'l_subtalar' == name_:
            pass
        elif 'l_midtarsal' == name_:
            pass
        elif 'l_metatarsal' == name_:
            pass
        elif 'r_hip' == name_:
            pass
        elif 'r_knee' == name_:
            pass
        elif 'r_ankle' == name_:
            pass
        elif 'r_subtalar' == name_:
            pass
        elif 'r_midtarsal' == name_:
            pass
        elif 'r_metatarsal' == name_:
            pass
        elif 'vl5' == name_:
            pass
        elif 'vl4' == name_:
            pass
        elif 'vl3' == name_:
            pass
        elif 'vl2' == name_:
            pass
        elif 'vl1' == name_:
            pass
        elif 'vt12' == name_:
            pass
        elif 'vt11' == name_:
            pass
        elif 'vt10' == name_:
            pass
        elif 'vt9' == name_:
            pass
        elif 'vt8' == name_:
            pass
        elif 'vt7' == name_:
            pass
        elif 'vt6' == name_:
            pass
        elif 'vt5' == name_:
            pass
        elif 'vt4' == name_:
            pass
        elif 'vt3' == name_:
            pass
        elif 'vt2' == name_:
            pass
        elif 'vt1' == name_:
            pass
        elif 'vc7' == name_:
            pass
        elif 'vc6' == name_:
            pass
        elif 'vc5' == name_:
            pass
        elif 'vc4' == name_:
            pass
        elif 'vc3' == name_:
            pass
        elif 'vc2' == name_:
            pass
        elif 'vc1' == name_:
            pass
        elif 'skullbase' == name_:
            pass
        elif 'l_eyelid_joint' == name_:
            pass
        elif 'r_eyelid_joint' == name_:
            pass
        elif 'l_eyeball_joint' == name_:
            pass
        elif 'r_eyeball_joint' == name_:
            pass
        elif 'l_eyebrow_joint' == name_:
            pass
        elif 'r_eyebrow_joint' == name_:
            pass
        elif 'temporomandibular' == name_:
            pass
        elif 'l_sternoclavicular' == name_:
            pass
        elif 'l_acromioclavicular' == name_:
            pass
        elif 'l_shoulder' == name_:
            pass
        elif 'l_elbow' == name_:
            pass
        elif 'l_wrist' == name_:
            pass
        elif 'l_thumb1' == name_:
            pass
        elif 'l_thumb2' == name_:
            pass
        elif 'l_thumb3' == name_:
            pass
        elif 'l_index0' == name_:
            pass
        elif 'l_index1' == name_:
            pass
        elif 'l_index2' == name_:
            pass
        elif 'l_index3' == name_:
            pass
        elif 'l_middle0' == name_:
            pass
        elif 'l_middle1' == name_:
            pass
        elif 'l_middle2' == name_:
            pass
        elif 'l_middle3' == name_:
            pass
        elif 'l_ring0' == name_:
            pass
        elif 'l_ring1' == name_:
            pass
        elif 'l_ring2' == name_:
            pass
        elif 'l_ring3' == name_:
            pass
        elif 'l_pinky0' == name_:
            pass
        elif 'l_pinky1' == name_:
            pass
        elif 'l_pinky2' == name_:
            pass
        elif 'l_pinky3' == name_:
            pass
        elif 'r_sternoclavicular' == name_:
            pass
        elif 'r_acromioclavicular' == name_:
            pass
        elif 'r_shoulder' == name_:
            pass
        elif 'r_elbow' == name_:
            pass
        elif 'r_wrist' == name_:
            pass
        elif 'r_thumb1' == name_:
            pass
        elif 'r_thumb2' == name_:
            pass
        elif 'r_thumb3' == name_:
            pass
        elif 'r_index0' == name_:
            pass
        elif 'r_index1' == name_:
            pass
        elif 'r_index2' == name_:
            pass
        elif 'r_index3' == name_:
            pass
        elif 'r_middle0' == name_:
            pass
        elif 'r_middle1' == name_:
            pass
        elif 'r_middle2' == name_:
            pass
        elif 'r_middle3' == name_:
            pass
        elif 'r_ring0' == name_:
            pass
        elif 'r_ring1' == name_:
            pass
        elif 'r_ring2' == name_:
            pass
        elif 'r_ring3' == name_:
            pass
        elif 'r_pinky0' == name_:
            pass
        elif 'r_pinky1' == name_:
            pass
        elif 'r_pinky2' == name_:
            pass
        elif 'r_pinky3' == name_:
            pass
        elif 'l_carpometacarpal_joint_2' == name_:
            pass
        elif 'l_metacarpophalangeal_joint_2' == name_:
            pass
        elif 'l_carpal_proximal_interphalangeal_joint_2' == name_:
            pass
        elif 'l_carpal_distal_interphalangeal_joint_2' == name_:
            pass
        elif 'l_midcarpal_joint_3' == name_:
            pass
        elif 'l_carpometacarpal_joint_3' == name_:
            pass
        elif 'l_metacarpophalangeal_joint_3' == name_:
            pass
        elif 'l_carpal_proximal_interphalangeal_joint_3' == name_:
            pass
        elif 'l_carpal_distal_interphalangeal_joint_3' == name_:
            pass
        elif 'l_midcarpal_joint_45' == name_:
            pass
        elif 'l_carpometacarpal_joint_4' == name_:
            pass
        elif 'l_metacarpophalangeal_joint_4' == name_:
            pass
        elif 'l_carpal_proximal_interphalangeal_joint_4' == name_:
            pass
        elif 'l_carpal_distal_interphalangeal_joint_4' == name_:
            pass
        elif 'l_carpometacarpal_joint_5' == name_:
            pass
        elif 'l_metacarpophalangeal_joint_5' == name_:
            pass
        elif 'l_carpal_proximal_interphalangeal_joint_5' == name_:
            pass
        elif 'l_carpal_distal_interphalangeal_joint_5' == name_:
            pass
        elif 'r_radiocarpal_joint' == name_:
            pass
        elif 'r_midcarpal_joint_12' == name_:
            pass
        elif 'r_carpometacarpal_joint_1' == name_:
            pass
        elif 'r_metacarpophalangeal_joint_1' == name_:
            pass
        elif 'r_carpal_interphalangeal_joint_1' == name_:
            pass
        elif 'r_carpometacarpal_joint_2' == name_:
            pass
        elif 'r_metacarpophalangeal_joint_2' == name_:
            pass
        elif 'r_carpal_proximal_interphalangeal_joint_2' == name_:
            pass
        elif 'r_carpal_distal_interphalangeal_joint_2' == name_:
            pass
        elif 'r_midcarpal_joint_3' == name_:
            pass
        elif 'r_carpometacarpal_joint_3' == name_:
            pass
        elif 'r_metacarpophalangeal_joint_3' == name_:
            pass
        elif 'r_carpal_proximal_interphalangeal_joint_3' == name_:
            pass
        elif 'r_carpal_distal_interphalangeal_joint_3' == name_:
            pass
        elif 'r_midcarpal_joint_45' == name_:
            pass
        elif 'r_carpometacarpal_joint_4' == name_:
            pass
        elif 'r_metacarpophalangeal_joint_4' == name_:
            pass
        elif 'r_carpal_proximal_interphalangeal_joint_4' == name_:
            pass
        elif 'r_carpal_distal_interphalangeal_joint_4' == name_:
            pass
        elif 'r_carpometacarpal_joint_5' == name_:
            pass
        elif 'r_metacarpophalangeal_joint_5' == name_:
            pass
        elif 'r_carpal_proximal_interphalangeal_joint_5' == name_:
            pass
        elif 'r_carpal_distal_interphalangeal_joint_5' == name_:
            pass
        elif 'l_tarsometatarsal_joint' == name_:
            pass
        elif 'l_metatarsophalangeal_joint' == name_:
            pass
        elif 'l_tarsal_interphalangeal_joint' == name_:
            pass
        elif 'r_talocrural_joint' == name_:
            pass
        elif 'r_tarsometatarsal_joint' == name_:
            pass
        elif 'r_metatarsophalangeal_joint' == name_:
            pass
        elif 'r_tarsal_interphalangeal_joint' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(HAnimJointObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(HAnimJointObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(HAnimJointObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if scale_ <= 0:
                raise InvalidFieldValueException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimJointObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setSkinCoordIndex(self, skinCoordIndex_):
        super(HAnimJointObject, self).setSkinCoordIndex(skinCoordIndex_)
        if type(skinCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if skinCoordIndex_ < 0:
                raise InvalidFieldValueException()
        self.skinCoordIndex_ = skinCoordIndex_

    def getSkinCoordIndex(self):
        if type(self.skinCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.skinCoordIndex_

    def setSkinCoordWeight(self, skinCoordWeight_):
        super(HAnimJointObject, self).setSkinCoordWeight(skinCoordWeight_)
        if type(skinCoordWeight_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.skinCoordWeight_ = skinCoordWeight_

    def getSkinCoordWeight(self):
        if type(self.skinCoordWeight_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skinCoordWeight_

    def setStiffness(self, stiffness_ = [1, 1, 1]):
        super(HAnimJointObject, self).setStiffness(stiffness_)
        if type(stiffness_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if stiffness_ < 0:
                raise InvalidFieldValueException()
        if stiffness_ > 1:
                raise InvalidFieldValueException()
        self.stiffness_ = stiffness_

    def getStiffness(self):
        if type(self.stiffness_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.stiffness_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(HAnimJointObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setUlimit(self, ulimit_ = [0, 0, 0]):
        super(HAnimJointObject, self).setUlimit(ulimit_)
        if type(ulimit_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.ulimit_ = ulimit_

    def getUlimit(self):
        if type(self.ulimit_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.ulimit_

    def setDEF(self, DEF_):
        super(HAnimJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimMotionObject(X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setChannels(self, channels_):
        super(HAnimMotionObject, self).setChannels(channels_)
        if type(channels_) is not MFString:
            raise InvalidFieldTypeException()
        self.channels_ = channels_

    def getChannels(self):
        if type(self.channels_) is not MFString:
            raise InvalidFieldTypeException()
        return self.channels_

    def setChannelsEnabled(self, channelsEnabled_):
        super(HAnimMotionObject, self).setChannelsEnabled(channelsEnabled_)
        if type(channelsEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        self.channelsEnabled_ = channelsEnabled_

    def getChannelsEnabled(self):
        if type(self.channelsEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.channelsEnabled_


    def getCycleTime(self):
        if type(self.cycleTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.cycleTime_

    def setDescription(self, description_):
        super(HAnimMotionObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_

    def setEnabled(self, enabled_ = False):
        super(HAnimMotionObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setEndFrame(self, endFrame_ = -1):
        super(HAnimMotionObject, self).setEndFrame(endFrame_)
        if type(endFrame_) is not SFInt32:
            raise InvalidFieldTypeException()
        if endFrame_ < -1:
                raise InvalidFieldValueException()
        self.endFrame_ = endFrame_

    def getEndFrame(self):
        if type(self.endFrame_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.endFrame_


    def getFrameCount(self):
        if type(self.frameCount_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.frameCount_

    def setFrameDuration(self, frameDuration_ = 0.1):
        super(HAnimMotionObject, self).setFrameDuration(frameDuration_)
        if type(frameDuration_) is not SFTime:
            raise InvalidFieldTypeException()
        if frameDuration_ <= 0:
                raise InvalidFieldValueException()
        self.frameDuration_ = frameDuration_

    def getFrameDuration(self):
        if type(self.frameDuration_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.frameDuration_

    def setFrameIncrement(self, frameIncrement_ = 1):
        super(HAnimMotionObject, self).setFrameIncrement(frameIncrement_)
        if type(frameIncrement_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.frameIncrement_ = frameIncrement_

    def getFrameIncrement(self):
        if type(self.frameIncrement_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.frameIncrement_

    def setFrameIndex(self, frameIndex_ = 0):
        super(HAnimMotionObject, self).setFrameIndex(frameIndex_)
        if type(frameIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        if frameIndex_ < 0:
                raise InvalidFieldValueException()
        self.frameIndex_ = frameIndex_

    def getFrameIndex(self):
        if type(self.frameIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.frameIndex_

    def setJoints(self, joints_):
        super(HAnimMotionObject, self).setJoints(joints_)
        if type(joints_) is not MFString:
            raise InvalidFieldTypeException()
        self.joints_ = joints_

    def getJoints(self):
        if type(self.joints_) is not MFString:
            raise InvalidFieldTypeException()
        return self.joints_

    def setLoa(self, loa_ = -1):
        super(HAnimMotionObject, self).setLoa(loa_)
        if type(loa_) is not SFInt32:
            raise InvalidFieldTypeException()
        if loa_ < -1:
                raise InvalidFieldValueException()
        if loa_ > 4:
                raise InvalidFieldValueException()
        self.loa_ = loa_

    def getLoa(self):
        if type(self.loa_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.loa_

    def setLoop(self, loop_ = False):
        super(HAnimMotionObject, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(HAnimMotionObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setStartFrame(self, startFrame_ = 0):
        super(HAnimMotionObject, self).setStartFrame(startFrame_)
        if type(startFrame_) is not SFInt32:
            raise InvalidFieldTypeException()
        if startFrame_ < 0:
                raise InvalidFieldValueException()
        self.startFrame_ = startFrame_

    def getStartFrame(self):
        if type(self.startFrame_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.startFrame_

    def setValues(self, values_):
        super(HAnimMotionObject, self).setValues(values_)
        if type(values_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.values_ = values_

    def getValues(self):
        if type(self.values_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.values_

    def setDEF(self, DEF_):
        super(HAnimMotionObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimMotionObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimMotionObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimSegmentObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(HAnimSegmentObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setCenterOfMass(self, centerOfMass_ = [0, 0, 0]):
        super(HAnimSegmentObject, self).setCenterOfMass(centerOfMass_)
        if type(centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.centerOfMass_ = centerOfMass_

    def getCenterOfMass(self):
        if type(self.centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfMass_

    def setChildren(self, children_):
        super(HAnimSegmentObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setCoord(self, coord_ = None):
        super(HAnimSegmentObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setDescription(self, description_):
        super(HAnimSegmentObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setDisplacers(self, displacers_):
        super(HAnimSegmentObject, self).setDisplacers(displacers_)
        if type(displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.displacers_ = displacers_

    def getDisplacers(self):
        if type(self.displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.displacers_

    def setMass(self, mass_ = 0):
        super(HAnimSegmentObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(HAnimSegmentObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMomentsOfInertia(self, momentsOfInertia_ = [0, 0, 0, 0, 0, 0, 0, 0, 0]):
        super(HAnimSegmentObject, self).setMomentsOfInertia(momentsOfInertia_)
        if type(momentsOfInertia_) is not MFFloat:
            raise InvalidFieldTypeException()
        if momentsOfInertia_ < 0:
                raise InvalidFieldValueException()
        self.momentsOfInertia_ = momentsOfInertia_

    def getMomentsOfInertia(self):
        if type(self.momentsOfInertia_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.momentsOfInertia_

    def setName(self, name_):
        super(HAnimSegmentObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'sacrum' == name_:
            pass
        elif 'pelvis' == name_:
            pass
        elif 'l_thigh' == name_:
            pass
        elif 'l_calf' == name_:
            pass
        elif 'l_hindfoot' == name_:
            pass
        elif 'l_midproximal' == name_:
            pass
        elif 'l_middistal' == name_:
            pass
        elif 'l_forefoot' == name_:
            pass
        elif 'r_thigh' == name_:
            pass
        elif 'r_calf' == name_:
            pass
        elif 'r_hindfoot' == name_:
            pass
        elif 'r_midproximal' == name_:
            pass
        elif 'r_middistal' == name_:
            pass
        elif 'r_forefoot' == name_:
            pass
        elif 'l5' == name_:
            pass
        elif 'l4' == name_:
            pass
        elif 'l3' == name_:
            pass
        elif 'l2' == name_:
            pass
        elif 'l1' == name_:
            pass
        elif 't12' == name_:
            pass
        elif 't11' == name_:
            pass
        elif 't10' == name_:
            pass
        elif 't9' == name_:
            pass
        elif 't8' == name_:
            pass
        elif 't7' == name_:
            pass
        elif 't6' == name_:
            pass
        elif 't5' == name_:
            pass
        elif 't4' == name_:
            pass
        elif 't3' == name_:
            pass
        elif 't2' == name_:
            pass
        elif 't1' == name_:
            pass
        elif 'c7' == name_:
            pass
        elif 'c6' == name_:
            pass
        elif 'c5' == name_:
            pass
        elif 'c4' == name_:
            pass
        elif 'c3' == name_:
            pass
        elif 'c2' == name_:
            pass
        elif 'c1' == name_:
            pass
        elif 'skull' == name_:
            pass
        elif 'l_eyelid' == name_:
            pass
        elif 'r_eyelid' == name_:
            pass
        elif 'l_eyeball' == name_:
            pass
        elif 'r_eyeball' == name_:
            pass
        elif 'l_eyebrow' == name_:
            pass
        elif 'r_eyebrow' == name_:
            pass
        elif 'jaw' == name_:
            pass
        elif 'l_clavicle' == name_:
            pass
        elif 'l_scapula' == name_:
            pass
        elif 'l_upperarm' == name_:
            pass
        elif 'l_forearm' == name_:
            pass
        elif 'l_hand' == name_:
            pass
        elif 'l_thumb_metacarpal' == name_:
            pass
        elif 'l_thumb_proximal' == name_:
            pass
        elif 'l_thumb_distal' == name_:
            pass
        elif 'l_index_metacarpal' == name_:
            pass
        elif 'l_index_proximal' == name_:
            pass
        elif 'l_index_middle' == name_:
            pass
        elif 'l_index_distal' == name_:
            pass
        elif 'l_middle_metacarpal' == name_:
            pass
        elif 'l_middle_proximal' == name_:
            pass
        elif 'l_middle_middle' == name_:
            pass
        elif 'l_middle_distal' == name_:
            pass
        elif 'l_ring_metacarpal' == name_:
            pass
        elif 'l_ring_proximal' == name_:
            pass
        elif 'l_ring_middle' == name_:
            pass
        elif 'l_ring_distal' == name_:
            pass
        elif 'l_pinky_metacarpal' == name_:
            pass
        elif 'l_pinky_proximal' == name_:
            pass
        elif 'l_pinky_middle' == name_:
            pass
        elif 'l_pinky_distal' == name_:
            pass
        elif 'r_clavicle' == name_:
            pass
        elif 'r_scapula' == name_:
            pass
        elif 'r_upperarm' == name_:
            pass
        elif 'r_forearm' == name_:
            pass
        elif 'r_hand' == name_:
            pass
        elif 'r_thumb_metacarpal' == name_:
            pass
        elif 'r_thumb_proximal' == name_:
            pass
        elif 'r_thumb_distal' == name_:
            pass
        elif 'r_index_metacarpal' == name_:
            pass
        elif 'r_index_proximal' == name_:
            pass
        elif 'r_index_middle' == name_:
            pass
        elif 'r_index_distal' == name_:
            pass
        elif 'r_middle_metacarpal' == name_:
            pass
        elif 'r_middle_proximal' == name_:
            pass
        elif 'r_middle_middle' == name_:
            pass
        elif 'r_middle_distal' == name_:
            pass
        elif 'r_ring_metacarpal' == name_:
            pass
        elif 'r_ring_proximal' == name_:
            pass
        elif 'r_ring_middle' == name_:
            pass
        elif 'r_ring_distal' == name_:
            pass
        elif 'r_pinky_metacarpal' == name_:
            pass
        elif 'r_pinky_proximal' == name_:
            pass
        elif 'r_pinky_middle' == name_:
            pass
        elif 'r_pinky_distal' == name_:
            pass
        elif 'l_carpal' == name_:
            pass
        elif 'l_trapezoid' == name_:
            pass
        elif 'l_metacarpal_1' == name_:
            pass
        elif 'l_carpal_proximal_phalanx_1' == name_:
            pass
        elif 'l_carpal_distal_phalanx_1' == name_:
            pass
        elif 'l_metacarpal_2' == name_:
            pass
        elif 'l_carpal_proximal_phalanx_2' == name_:
            pass
        elif 'l_carpal_middle_phalanx_2' == name_:
            pass
        elif 'l_carpal_distal_phalanx_2' == name_:
            pass
        elif 'l_capitate' == name_:
            pass
        elif 'l_metacarpal_3' == name_:
            pass
        elif 'l_carpal_proximal_phalanx_3' == name_:
            pass
        elif 'l_carpal_middle_phalanx_3' == name_:
            pass
        elif 'l_carpal_distal_phalanx_3' == name_:
            pass
        elif 'l_hamate' == name_:
            pass
        elif 'l_metacarpal_4' == name_:
            pass
        elif 'l_carpal_proximal_phalanx_4' == name_:
            pass
        elif 'l_carpal_middle_phalanx_4' == name_:
            pass
        elif 'l_carpal_distal_phalanx_4' == name_:
            pass
        elif 'l_metacarpal_5' == name_:
            pass
        elif 'l_carpal_proximal_phalanx_5' == name_:
            pass
        elif 'l_carpal_middle_phalanx_5' == name_:
            pass
        elif 'l_carpal_distal_phalanx_5' == name_:
            pass
        elif 'r_carpal' == name_:
            pass
        elif 'r_trapezoid' == name_:
            pass
        elif 'r_metacarpal_1' == name_:
            pass
        elif 'r_carpal_proximal_phalanx_1' == name_:
            pass
        elif 'r_carpal_distal_phalanx_1' == name_:
            pass
        elif 'r_metacarpal_2' == name_:
            pass
        elif 'r_carpal_proximal_phalanx_2' == name_:
            pass
        elif 'r_carpal_middle_phalanx_2' == name_:
            pass
        elif 'r_carpal_distal_phalanx_2' == name_:
            pass
        elif 'r_capitate' == name_:
            pass
        elif 'r_metacarpal_3' == name_:
            pass
        elif 'r_carpal_proximal_phalanx_3' == name_:
            pass
        elif 'r_carpal_middle_phalanx_3' == name_:
            pass
        elif 'r_carpal_distal_phalanx_3' == name_:
            pass
        elif 'r_hamate' == name_:
            pass
        elif 'r_metacarpal_4' == name_:
            pass
        elif 'r_carpal_proximal_phalanx_4' == name_:
            pass
        elif 'r_carpal_middle_phalanx_4' == name_:
            pass
        elif 'r_carpal_distal_phalanx_4' == name_:
            pass
        elif 'r_metacarpal_5' == name_:
            pass
        elif 'r_carpal_proximal_phalanx_5' == name_:
            pass
        elif 'r_carpal_middle_phalanx_5' == name_:
            pass
        elif 'r_carpal_distal_phalanx_5' == name_:
            pass
        elif 'l_talus' == name_:
            pass
        elif 'l_metatarsal' == name_:
            pass
        elif 'l_tarsal_proximal_phalanx_1' == name_:
            pass
        elif 'l_tarsal_proximal_phalanx_2' == name_:
            pass
        elif 'l_tarsal_proximal_phalanx_3' == name_:
            pass
        elif 'l_tarsal_proximal_phalanx_4' == name_:
            pass
        elif 'l_tarsal_proximal_phalanx_5' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_5' == name_:
            pass
        elif 'r_talus' == name_:
            pass
        elif 'r_metatarsal' == name_:
            pass
        elif 'r_tarsal_proximal_phalanx_1' == name_:
            pass
        elif 'r_tarsal_proximal_phalanx_2' == name_:
            pass
        elif 'r_tarsal_proximal_phalanx_3' == name_:
            pass
        elif 'r_tarsal_proximal_phalanx_4' == name_:
            pass
        elif 'r_tarsal_proximal_phalanx_5' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_5' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(HAnimSegmentObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(HAnimSegmentObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimSegmentObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimSegmentObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimSiteObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(HAnimSiteObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setCenter(self, center_ = [0, 0, 0]):
        super(HAnimSiteObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(HAnimSiteObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setDescription(self, description_):
        super(HAnimSiteObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setMetadata(self, metadata_ = None):
        super(HAnimSiteObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(HAnimSiteObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'skull_tip' == name_:
            pass
        elif 'glabella' == name_:
            pass
        elif 'sellion' == name_:
            pass
        elif 'l_infraorbitale' == name_:
            pass
        elif 'l_tragion' == name_:
            pass
        elif 'l_gonion' == name_:
            pass
        elif 'r_infraorbitale' == name_:
            pass
        elif 'r_tragion' == name_:
            pass
        elif 'r_gonion' == name_:
            pass
        elif 'supramenton' == name_:
            pass
        elif 'cervicale' == name_:
            pass
        elif 'adams_apple' == name_:
            pass
        elif 'suprasternale' == name_:
            pass
        elif 'substernale' == name_:
            pass
        elif 'l_clavicle' == name_:
            pass
        elif 'l_acromion' == name_:
            pass
        elif 'l_axilla_proximal' == name_:
            pass
        elif 'l_axilla_distal' == name_:
            pass
        elif 'l_axilla_posterior_folds' == name_:
            pass
        elif 'r_clavicle' == name_:
            pass
        elif 'r_acromion' == name_:
            pass
        elif 'r_axilla_proximal' == name_:
            pass
        elif 'r_axilla_distal' == name_:
            pass
        elif 'r_axilla_posterior_folds' == name_:
            pass
        elif 'spine_1_middle_back' == name_:
            pass
        elif 'spine_2_lower_back' == name_:
            pass
        elif 'waist_preferred_anterior' == name_:
            pass
        elif 'waist_preferred_posterior' == name_:
            pass
        elif 'l_rib10' == name_:
            pass
        elif 'l_thelion' == name_:
            pass
        elif 'r_rib10' == name_:
            pass
        elif 'r_thelion' == name_:
            pass
        elif 'l_asis' == name_:
            pass
        elif 'l_iliocristale' == name_:
            pass
        elif 'l_psis' == name_:
            pass
        elif 'r_asis' == name_:
            pass
        elif 'r_iliocristale' == name_:
            pass
        elif 'r_psis' == name_:
            pass
        elif 'crotch' == name_:
            pass
        elif 'l_femoral_lateral_epicondyle' == name_:
            pass
        elif 'l_femoral_medial_epicondyle' == name_:
            pass
        elif 'l_suprapatella' == name_:
            pass
        elif 'l_trochanterion' == name_:
            pass
        elif 'r_femoral_lateral_epicondyle' == name_:
            pass
        elif 'r_femoral_medial_epicondyle' == name_:
            pass
        elif 'r_suprapatella' == name_:
            pass
        elif 'r_trochanterion' == name_:
            pass
        elif 'l_tibiale' == name_:
            pass
        elif 'l_medial_malleolus' == name_:
            pass
        elif 'l_lateral_malleolus' == name_:
            pass
        elif 'l_sphyrion' == name_:
            pass
        elif 'r_tibiale' == name_:
            pass
        elif 'r_medial_malleolus' == name_:
            pass
        elif 'r_lateral_malleolus' == name_:
            pass
        elif 'r_sphyrion' == name_:
            pass
        elif 'l_metatarsal_phalanx_1' == name_:
            pass
        elif 'l_metatarsal_phalanx_5' == name_:
            pass
        elif 'l_dactylion' == name_:
            pass
        elif 'l_calcaneous_posterior' == name_:
            pass
        elif 'r_metatarsal_phalanx_1' == name_:
            pass
        elif 'r_metatarsal_phalanx_5' == name_:
            pass
        elif 'r_dactylion' == name_:
            pass
        elif 'r_calcaneous_posterior' == name_:
            pass
        elif 'l_humeral_lateral_epicondyle' == name_:
            pass
        elif 'l_humeral_medial_epicondyle' == name_:
            pass
        elif 'l_olecranon' == name_:
            pass
        elif 'r_humeral_lateral_epicondyle' == name_:
            pass
        elif 'r_humeral_medial_epicondyle' == name_:
            pass
        elif 'r_olecranon' == name_:
            pass
        elif 'l_radiale' == name_:
            pass
        elif 'l_ulnar_styloid' == name_:
            pass
        elif 'l_radial_styloid' == name_:
            pass
        elif 'r_radiale' == name_:
            pass
        elif 'r_ulnar_styloid' == name_:
            pass
        elif 'r_radial_styloid' == name_:
            pass
        elif 'l_metacarpal_phalanx_2' == name_:
            pass
        elif 'l_metacarpal_phalanx_3' == name_:
            pass
        elif 'l_metacarpal_phalanx_5' == name_:
            pass
        elif 'r_metacarpal_phalanx_2' == name_:
            pass
        elif 'r_metacarpal_phalanx_3' == name_:
            pass
        elif 'r_metacarpal_phalanx_5' == name_:
            pass
        elif 'nuchale' == name_:
            pass
        elif 'l_neck_base' == name_:
            pass
        elif 'r_neck_base' == name_:
            pass
        elif 'navel' == name_:
            pass
        elif 'l_ectocanthus' == name_:
            pass
        elif 'r_ectocanthus' == name_:
            pass
        elif 'menton' == name_:
            pass
        elif 'mesosternale' == name_:
            pass
        elif 'opisthocranion' == name_:
            pass
        elif 'l_knee_crease' == name_:
            pass
        elif 'r_knee_crease' == name_:
            pass
        elif 'rear_center_midsagittal_plane' == name_:
            pass
        elif 'buttocks_standing_wall_contact_point' == name_:
            pass
        elif 'l_chest_midsagittal_plane' == name_:
            pass
        elif 'r_chest_midsagittal_plane' == name_:
            pass
        elif 'l_bideltoid' == name_:
            pass
        elif 'r_bideltoid' == name_:
            pass
        elif 'l_carpal_distal_phalanx_1' == name_:
            pass
        elif 'l_carpal_distal_phalanx_2' == name_:
            pass
        elif 'l_carpal_distal_phalanx_3' == name_:
            pass
        elif 'l_carpal_distal_phalanx_4' == name_:
            pass
        elif 'l_carpal_distal_phalanx_5' == name_:
            pass
        elif 'r_carpal_distal_phalanx_1' == name_:
            pass
        elif 'r_carpal_distal_phalanx_2' == name_:
            pass
        elif 'r_carpal_distal_phalanx_3' == name_:
            pass
        elif 'r_carpal_distal_phalanx_4' == name_:
            pass
        elif 'r_carpal_distal_phalanx_5' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'l_tarsal_distal_phalanx_5' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_1' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_2' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_3' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_4' == name_:
            pass
        elif 'r_tarsal_distal_phalanx_5' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def removeChildren(self, Children_):
        super(HAnimSiteObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(HAnimSiteObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(HAnimSiteObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if scale_ <= 0:
                raise InvalidFieldValueException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimSiteObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(HAnimSiteObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(HAnimSiteObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(HAnimSiteObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(HAnimSiteObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageCubeMapTextureObject(X3DUrlObject, X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(ImageCubeMapTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(ImageCubeMapTextureObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ImageCubeMapTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ImageCubeMapTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ImageCubeMapTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageTextureObject(X3DUrlObject, X3DTexture2DNode):
    def __init__(self, **kwargs):
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(ImageTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(ImageTextureObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ImageTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ImageTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ImageTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageTexture3DObject(X3DUrlObject, X3DTexture3DNode):
    def __init__(self, **kwargs):
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setMetadata(self, metadata_ = None):
        super(ImageTexture3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(ImageTexture3DObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ImageTexture3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ImageTexture3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ImageTexture3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedFaceSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if colorIndex_ < -1:
                raise InvalidFieldValueException()
        self.colorIndex_ = kwargs.pop("colorIndex")
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(convex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.convex_ = kwargs.pop("convex", True)
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(normalIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if normalIndex_ < -1:
                raise InvalidFieldValueException()
        self.normalIndex_ = kwargs.pop("normalIndex")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(texCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if texCoordIndex_ < -1:
                raise InvalidFieldValueException()
        self.texCoordIndex_ = kwargs.pop("texCoordIndex")
        return

    def setAttrib(self, attrib_):
        super(IndexedFaceSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedFaceSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedFaceSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedFaceSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedFaceSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(IndexedFaceSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_colorIndex(self, _colorIndex_):
        super(IndexedFaceSetObject, self).set_colorIndex(_colorIndex_)
        if type(_colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _colorIndex_ < -1:
                raise InvalidFieldValueException()
        self._colorIndex_ = _colorIndex_
    def set_coordIndex(self, _coordIndex_):
        super(IndexedFaceSetObject, self).set_coordIndex(_coordIndex_)
        if type(_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _coordIndex_ < -1:
                raise InvalidFieldValueException()
        self._coordIndex_ = _coordIndex_
    def set_normalIndex(self, _normalIndex_):
        super(IndexedFaceSetObject, self).set_normalIndex(_normalIndex_)
        if type(_normalIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _normalIndex_ < -1:
                raise InvalidFieldValueException()
        self._normalIndex_ = _normalIndex_
    def set_texCoordIndex(self, _texCoordIndex_):
        super(IndexedFaceSetObject, self).set_texCoordIndex(_texCoordIndex_)
        if type(_texCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _texCoordIndex_ < -1:
                raise InvalidFieldValueException()
        self._texCoordIndex_ = _texCoordIndex_
    def setTexCoord(self, texCoord_ = None):
        super(IndexedFaceSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(IndexedFaceSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedFaceSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedFaceSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedLineSetObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if colorIndex_ < -1:
                raise InvalidFieldValueException()
        self.colorIndex_ = kwargs.pop("colorIndex")
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        return

    def setAttrib(self, attrib_):
        super(IndexedLineSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedLineSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedLineSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedLineSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedLineSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_colorIndex(self, _colorIndex_):
        super(IndexedLineSetObject, self).set_colorIndex(_colorIndex_)
        if type(_colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _colorIndex_ < -1:
                raise InvalidFieldValueException()
        self._colorIndex_ = _colorIndex_
    def set_coordIndex(self, _coordIndex_):
        super(IndexedLineSetObject, self).set_coordIndex(_coordIndex_)
        if type(_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _coordIndex_ < -1:
                raise InvalidFieldValueException()
        self._coordIndex_ = _coordIndex_
    def setDEF(self, DEF_):
        super(IndexedLineSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedLineSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedLineSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedQuadSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < 0:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(IndexedQuadSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedQuadSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedQuadSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedQuadSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedQuadSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(IndexedQuadSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, _index_):
        super(IndexedQuadSetObject, self).set_index(_index_)
        if type(_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _index_ < 0:
                raise InvalidFieldValueException()
        self._index_ = _index_
    def setTexCoord(self, texCoord_ = None):
        super(IndexedQuadSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(IndexedQuadSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedQuadSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedQuadSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleFanSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < -1:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(IndexedTriangleFanSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedTriangleFanSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedTriangleFanSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedTriangleFanSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedTriangleFanSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(IndexedTriangleFanSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, _index_):
        super(IndexedTriangleFanSetObject, self).set_index(_index_)
        if type(_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _index_ < -1:
                raise InvalidFieldValueException()
        self._index_ = _index_
    def setTexCoord(self, texCoord_ = None):
        super(IndexedTriangleFanSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(IndexedTriangleFanSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedTriangleFanSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedTriangleFanSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < 0:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(IndexedTriangleSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedTriangleSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedTriangleSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedTriangleSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedTriangleSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(IndexedTriangleSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, _index_):
        super(IndexedTriangleSetObject, self).set_index(_index_)
        if type(_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _index_ < 0:
                raise InvalidFieldValueException()
        self._index_ = _index_
    def setTexCoord(self, texCoord_ = None):
        super(IndexedTriangleSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(IndexedTriangleSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedTriangleSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedTriangleSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleStripSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < -1:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(IndexedTriangleStripSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(IndexedTriangleStripSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(IndexedTriangleStripSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(IndexedTriangleStripSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(IndexedTriangleStripSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(IndexedTriangleStripSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, _index_):
        super(IndexedTriangleStripSetObject, self).set_index(_index_)
        if type(_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _index_ < -1:
                raise InvalidFieldValueException()
        self._index_ = _index_
    def setTexCoord(self, texCoord_ = None):
        super(IndexedTriangleStripSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(IndexedTriangleStripSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IndexedTriangleStripSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IndexedTriangleStripSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class InlineObject(X3DBoundedObject, X3DUrlObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setLoad(self, load_ = True):
        super(InlineObject, self).setLoad(load_)
        if type(load_) is not SFBool:
            raise InvalidFieldTypeException()
        self.load_ = load_

    def isLoad(self):
        if type(self.load_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.load_

    def setMetadata(self, metadata_ = None):
        super(InlineObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(InlineObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(InlineObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(InlineObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(InlineObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IntegerSequencerObject(X3DSequencerNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(IntegerSequencerObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(IntegerSequencerObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(IntegerSequencerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNext(self, next_):
        super(IntegerSequencerObject, self).setNext(next_)
        if type(next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.next_ = next_
    def setPrevious(self, previous_):
        super(IntegerSequencerObject, self).setPrevious(previous_)
        if type(previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.previous_ = previous_
    def set_fraction(self, _fraction_):
        super(IntegerSequencerObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(IntegerSequencerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IntegerSequencerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IntegerSequencerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IntegerTriggerObject(X3DTriggerNode):
    def __init__(self, **kwargs):
        return

    def setIntegerKey(self, integerKey_ = -1):
        super(IntegerTriggerObject, self).setIntegerKey(integerKey_)
        if type(integerKey_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.integerKey_ = integerKey_

    def getIntegerKey(self):
        if type(self.integerKey_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.integerKey_

    def setMetadata(self, metadata_ = None):
        super(IntegerTriggerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, _boolean_):
        super(IntegerTriggerObject, self).set_boolean(_boolean_)
        if type(_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self._boolean_ = _boolean_

    def getTriggerValue(self):
        if type(self.triggerValue_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.triggerValue_

    def setDEF(self, DEF_):
        super(IntegerTriggerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IntegerTriggerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IntegerTriggerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IsoSurfaceVolumeDataObject(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setContourStepSize(self, contourStepSize_ = 0):
        super(IsoSurfaceVolumeDataObject, self).setContourStepSize(contourStepSize_)
        if type(contourStepSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.contourStepSize_ = contourStepSize_

    def getContourStepSize(self):
        if type(self.contourStepSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.contourStepSize_

    def setDimensions(self, dimensions_ = [1, 1, 1]):
        super(IsoSurfaceVolumeDataObject, self).setDimensions(dimensions_)
        if type(dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.dimensions_ = dimensions_

    def getDimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def setGradients(self, gradients_ = None):
        super(IsoSurfaceVolumeDataObject, self).setGradients(gradients_)
        if type(gradients_) is not SFNode:
            raise InvalidFieldTypeException()
        self.gradients_ = gradients_

    def getGradients(self):
        if type(self.gradients_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.gradients_

    def setMetadata(self, metadata_ = None):
        super(IsoSurfaceVolumeDataObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRenderStyle(self, renderStyle_):
        super(IsoSurfaceVolumeDataObject, self).setRenderStyle(renderStyle_)
        if type(renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.renderStyle_ = renderStyle_

    def getRenderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def setSurfaceTolerance(self, surfaceTolerance_ = 0):
        super(IsoSurfaceVolumeDataObject, self).setSurfaceTolerance(surfaceTolerance_)
        if type(surfaceTolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceTolerance_ < 0:
                raise InvalidFieldValueException()
        self.surfaceTolerance_ = surfaceTolerance_

    def getSurfaceTolerance(self):
        if type(self.surfaceTolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.surfaceTolerance_

    def setSurfaceValues(self, surfaceValues_):
        super(IsoSurfaceVolumeDataObject, self).setSurfaceValues(surfaceValues_)
        if type(surfaceValues_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.surfaceValues_ = surfaceValues_

    def getSurfaceValues(self):
        if type(self.surfaceValues_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.surfaceValues_

    def setVoxels(self, voxels_ = None):
        super(IsoSurfaceVolumeDataObject, self).setVoxels(voxels_)
        if type(voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.voxels_ = voxels_

    def getVoxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def setDEF(self, DEF_):
        super(IsoSurfaceVolumeDataObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(IsoSurfaceVolumeDataObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(IsoSurfaceVolumeDataObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class KeySensorObject(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        return


    def getActionKeyPress(self):
        if type(self.actionKeyPress_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.actionKeyPress_


    def getActionKeyRelease(self):
        if type(self.actionKeyRelease_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.actionKeyRelease_


    def isAltKey(self):
        if type(self.altKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.altKey_


    def isControlKey(self):
        if type(self.controlKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.controlKey_

    def setEnabled(self, enabled_ = True):
        super(KeySensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def getKeyPress(self):
        if type(self.keyPress_) is not SFString:
            raise InvalidFieldTypeException()
        return self.keyPress_


    def getKeyRelease(self):
        if type(self.keyRelease_) is not SFString:
            raise InvalidFieldTypeException()
        return self.keyRelease_

    def setMetadata(self, metadata_ = None):
        super(KeySensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def isShiftKey(self):
        if type(self.shiftKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.shiftKey_

    def setDEF(self, DEF_):
        super(KeySensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(KeySensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(KeySensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayerObject(X3DLayerNode):
    def __init__(self, **kwargs):
        return

    def addChildren(self, Children_):
        super(LayerObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(LayerObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setPickable(self, Pickable_ = True):
        super(LayerObject, self).setPickable(Pickable_)
        if type(Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.Pickable_ = Pickable_

    def isPickable(self):
        if type(self.Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Pickable_

    def setMetadata(self, metadata_ = None):
        super(LayerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(LayerObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setViewport(self, viewport_ = None):
        super(LayerObject, self).setViewport(viewport_)
        if type(viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.viewport_ = viewport_

    def getViewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def setDEF(self, DEF_):
        super(LayerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LayerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LayerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayerSetObject(X3DNode):
    def __init__(self, **kwargs):
        if type(order_) is not MFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 0)
        return

    def setActiveLayer(self, activeLayer_ = 0):
        super(LayerSetObject, self).setActiveLayer(activeLayer_)
        if type(activeLayer_) is not SFInt32:
            raise InvalidFieldTypeException()
        if activeLayer_ < 0:
                raise InvalidFieldValueException()
        self.activeLayer_ = activeLayer_

    def getActiveLayer(self):
        if type(self.activeLayer_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.activeLayer_

    def setLayers(self, layers_):
        super(LayerSetObject, self).setLayers(layers_)
        if type(layers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.layers_ = layers_

    def getLayers(self):
        if type(self.layers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.layers_

    def setMetadata(self, metadata_ = None):
        super(LayerSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(LayerSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LayerSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LayerSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayoutObject(X3DLayoutNode):
    def __init__(self, **kwargs):
        if type(size_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [1, 1])
        return

    def setAlign(self, align_ = ["CENTER", "CENTER"]):
        super(LayoutObject, self).setAlign(align_)
        if type(align_) is not MFString:
            raise InvalidFieldTypeException()
        if '"LEFT" "BOTTOM"' == align_:
            pass
        elif '"LEFT" "CENTER"' == align_:
            pass
        elif '"LEFT" "TOP"' == align_:
            pass
        elif '"CENTER" "BOTTOM"' == align_:
            pass
        elif '"CENTER" "CENTER"' == align_:
            pass
        elif '"CENTER" "TOP"' == align_:
            pass
        elif '"RIGHT" "BOTTOM"' == align_:
            pass
        elif '"RIGHT" "CENTER"' == align_:
            pass
        elif '"RIGHT" "TOP"' == align_:
            pass
        else:
            raise InvalidFieldValueException()
        self.align_ = align_

    def getAlign(self):
        if type(self.align_) is not MFString:
            raise InvalidFieldTypeException()
        return self.align_

    def setMetadata(self, metadata_ = None):
        super(LayoutObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOffset(self, offset_ = [0, 0]):
        super(LayoutObject, self).setOffset(offset_)
        if type(offset_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.offset_ = offset_

    def getOffset(self):
        if type(self.offset_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.offset_

    def setOffsetUnits(self, offsetUnits_ = ["WORLD", "WORLD"]):
        super(LayoutObject, self).setOffsetUnits(offsetUnits_)
        if type(offsetUnits_) is not MFString:
            raise InvalidFieldTypeException()
        if '"WORLD" "WORLD"' == offsetUnits_:
            pass
        elif '"WORLD" "FRACTION"' == offsetUnits_:
            pass
        elif '"WORLD" "PIXEL"' == offsetUnits_:
            pass
        elif '"FRACTION" "WORLD"' == offsetUnits_:
            pass
        elif '"FRACTION" "FRACTION"' == offsetUnits_:
            pass
        elif '"FRACTION" "PIXEL"' == offsetUnits_:
            pass
        elif '"PIXEL" "WORLD"' == offsetUnits_:
            pass
        elif '"PIXEL" "FRACTION"' == offsetUnits_:
            pass
        elif '"PIXEL" "PIXEL"' == offsetUnits_:
            pass
        else:
            raise InvalidFieldValueException()
        self.offsetUnits_ = offsetUnits_

    def getOffsetUnits(self):
        if type(self.offsetUnits_) is not MFString:
            raise InvalidFieldTypeException()
        return self.offsetUnits_

    def setScaleMode(self, scaleMode_ = ["NONE", "NONE"]):
        super(LayoutObject, self).setScaleMode(scaleMode_)
        if type(scaleMode_) is not MFString:
            raise InvalidFieldTypeException()
        if '"NONE" "NONE"' == scaleMode_:
            pass
        elif '"NONE" "FRACTION"' == scaleMode_:
            pass
        elif '"NONE" "STRETCH"' == scaleMode_:
            pass
        elif '"NONE" "PIXEL"' == scaleMode_:
            pass
        elif '"FRACTION" "NONE"' == scaleMode_:
            pass
        elif '"FRACTION" "FRACTION"' == scaleMode_:
            pass
        elif '"FRACTION" "STRETCH"' == scaleMode_:
            pass
        elif '"FRACTION" "PIXEL"' == scaleMode_:
            pass
        elif '"STRETCH" "NONE"' == scaleMode_:
            pass
        elif '"STRETCH" "FRACTION"' == scaleMode_:
            pass
        elif '"STRETCH" "STRETCH"' == scaleMode_:
            pass
        elif '"STRETCH" "PIXEL"' == scaleMode_:
            pass
        elif '"PIXEL" "NONE"' == scaleMode_:
            pass
        elif '"PIXEL" "FRACTION"' == scaleMode_:
            pass
        elif '"PIXEL" "STRETCH"' == scaleMode_:
            pass
        elif '"PIXEL" "PIXEL"' == scaleMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.scaleMode_ = scaleMode_

    def getScaleMode(self):
        if type(self.scaleMode_) is not MFString:
            raise InvalidFieldTypeException()
        return self.scaleMode_

    def setSizeUnits(self, sizeUnits_ = ["WORLD", "WORLD"]):
        super(LayoutObject, self).setSizeUnits(sizeUnits_)
        if type(sizeUnits_) is not MFString:
            raise InvalidFieldTypeException()
        if '"WORLD" "WORLD"' == sizeUnits_:
            pass
        elif '"WORLD" "FRACTION"' == sizeUnits_:
            pass
        elif '"WORLD" "PIXEL"' == sizeUnits_:
            pass
        elif '"FRACTION" "WORLD"' == sizeUnits_:
            pass
        elif '"FRACTION" "FRACTION"' == sizeUnits_:
            pass
        elif '"FRACTION" "PIXEL"' == sizeUnits_:
            pass
        elif '"PIXEL" "WORLD"' == sizeUnits_:
            pass
        elif '"PIXEL" "FRACTION"' == sizeUnits_:
            pass
        elif '"PIXEL" "PIXEL"' == sizeUnits_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sizeUnits_ = sizeUnits_

    def getSizeUnits(self):
        if type(self.sizeUnits_) is not MFString:
            raise InvalidFieldTypeException()
        return self.sizeUnits_

    def setDEF(self, DEF_):
        super(LayoutObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LayoutObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LayoutObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayoutGroupObject(X3DGroupingNode, X3DNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(LayoutGroupObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(LayoutGroupObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setLayout(self, layout_ = None):
        super(LayoutGroupObject, self).setLayout(layout_)
        if type(layout_) is not SFNode:
            raise InvalidFieldTypeException()
        self.layout_ = layout_

    def getLayout(self):
        if type(self.layout_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.layout_

    def setMetadata(self, metadata_ = None):
        super(LayoutGroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(LayoutGroupObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setViewport(self, viewport_ = None):
        super(LayoutGroupObject, self).setViewport(viewport_)
        if type(viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.viewport_ = viewport_

    def getViewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def setDEF(self, DEF_):
        super(LayoutGroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LayoutGroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LayoutGroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayoutLayerObject(X3DLayerNode):
    def __init__(self, **kwargs):
        return

    def addChildren(self, Children_):
        super(LayoutLayerObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(LayoutLayerObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setPickable(self, Pickable_ = True):
        super(LayoutLayerObject, self).setPickable(Pickable_)
        if type(Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.Pickable_ = Pickable_

    def isPickable(self):
        if type(self.Pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Pickable_

    def setLayout(self, layout_ = None):
        super(LayoutLayerObject, self).setLayout(layout_)
        if type(layout_) is not SFNode:
            raise InvalidFieldTypeException()
        self.layout_ = layout_

    def getLayout(self):
        if type(self.layout_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.layout_

    def setMetadata(self, metadata_ = None):
        super(LayoutLayerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(LayoutLayerObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setViewport(self, viewport_ = None):
        super(LayoutLayerObject, self).setViewport(viewport_)
        if type(viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.viewport_ = viewport_

    def getViewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def setDEF(self, DEF_):
        super(LayoutLayerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LayoutLayerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LayoutLayerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LinePickSensorObject(X3DPickSensorNode):
    def __init__(self, **kwargs):
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def setEnabled(self, enabled_ = True):
        super(LinePickSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMatchCriterion(self, matchCriterion_ = "MATCH_ANY"):
        super(LinePickSensorObject, self).setMatchCriterion(matchCriterion_)
        if type(matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == matchCriterion_:
            pass
        elif 'MATCH_EVERY' == matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.matchCriterion_ = matchCriterion_

    def getMatchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def setMetadata(self, metadata_ = None):
        super(LinePickSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(LinePickSensorObject, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def getPickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_


    def getPickedNormal(self):
        if type(self.pickedNormal_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedNormal_


    def getPickedPoint(self):
        if type(self.pickedPoint_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedPoint_


    def getPickedTextureCoordinate(self):
        if type(self.pickedTextureCoordinate_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedTextureCoordinate_

    def setPickingGeometry(self, pickingGeometry_ = None):
        super(LinePickSensorObject, self).setPickingGeometry(pickingGeometry_)
        if type(pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.pickingGeometry_ = pickingGeometry_

    def getPickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def setPickTarget(self, pickTarget_):
        super(LinePickSensorObject, self).setPickTarget(pickTarget_)
        if type(pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.pickTarget_ = pickTarget_

    def getPickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def setDEF(self, DEF_):
        super(LinePickSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LinePickSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LinePickSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LinePropertiesObject(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        return

    def setApplied(self, applied_ = True):
        super(LinePropertiesObject, self).setApplied(applied_)
        if type(applied_) is not SFBool:
            raise InvalidFieldTypeException()
        self.applied_ = applied_

    def isApplied(self):
        if type(self.applied_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.applied_

    def setLinetype(self, linetype_ = 1):
        super(LinePropertiesObject, self).setLinetype(linetype_)
        if type(linetype_) is not SFInt32:
            raise InvalidFieldTypeException()
        if linetype_ < 1:
                raise InvalidFieldValueException()
        self.linetype_ = linetype_

    def getLinetype(self):
        if type(self.linetype_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.linetype_

    def setLinewidthScaleFactor(self, linewidthScaleFactor_ = 0):
        super(LinePropertiesObject, self).setLinewidthScaleFactor(linewidthScaleFactor_)
        if type(linewidthScaleFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.linewidthScaleFactor_ = linewidthScaleFactor_

    def getLinewidthScaleFactor(self):
        if type(self.linewidthScaleFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.linewidthScaleFactor_

    def setMetadata(self, metadata_ = None):
        super(LinePropertiesObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(LinePropertiesObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LinePropertiesObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LinePropertiesObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LineSetObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        return

    def setAttrib(self, attrib_):
        super(LineSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(LineSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(LineSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(LineSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(LineSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setVertexCount(self, vertexCount_):
        super(LineSetObject, self).setVertexCount(vertexCount_)
        if type(vertexCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if vertexCount_ < 2:
                raise InvalidFieldValueException()
        self.vertexCount_ = vertexCount_

    def getVertexCount(self):
        if type(self.vertexCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.vertexCount_

    def setDEF(self, DEF_):
        super(LineSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LineSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LineSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LoadSensorObject(X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(LoadSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isLoaded(self):
        if type(self.Loaded_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Loaded_


    def getLoadTime(self):
        if type(self.loadTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.loadTime_

    def setMetadata(self, metadata_ = None):
        super(LoadSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getProgress(self):
        if type(self.progress_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.progress_

    def setTimeOut(self, timeOut_ = 0):
        super(LoadSensorObject, self).setTimeOut(timeOut_)
        if type(timeOut_) is not SFTime:
            raise InvalidFieldTypeException()
        if timeOut_ < 0:
                raise InvalidFieldValueException()
        self.timeOut_ = timeOut_

    def getTimeOut(self):
        if type(self.timeOut_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timeOut_

    def setWatchList(self, watchList_):
        super(LoadSensorObject, self).setWatchList(watchList_)
        if type(watchList_) is not MFNode:
            raise InvalidFieldTypeException()
        self.watchList_ = watchList_

    def getWatchList(self):
        if type(self.watchList_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.watchList_

    def setDEF(self, DEF_):
        super(LoadSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LoadSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LoadSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LocalFogObject(X3DFogObject, X3DChildNode):
    def __init__(self, **kwargs):
        return

    def setColor(self, color_ = [1, 1, 1]):
        super(LocalFogObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setEnabled(self, enabled_ = True):
        super(LocalFogObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setFogType(self, fogType_ = "LINEAR"):
        super(LocalFogObject, self).setFogType(fogType_)
        if type(fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == fogType_:
            pass
        elif 'EXPONENTIAL' == fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.fogType_ = fogType_

    def getFogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_

    def setMetadata(self, metadata_ = None):
        super(LocalFogObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setVisibilityRange(self, visibilityRange_ = 0):
        super(LocalFogObject, self).setVisibilityRange(visibilityRange_)
        if type(visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.visibilityRange_ = visibilityRange_

    def getVisibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    def setDEF(self, DEF_):
        super(LocalFogObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LocalFogObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LocalFogObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LODObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = kwargs.pop("center", [0, 0, 0])
        if type(forceTransitions_) is not SFBool:
            raise InvalidFieldTypeException()
        self.forceTransitions_ = kwargs.pop("forceTransitions", False)
        if type(range_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.range_ = kwargs.pop("range")
        return

    def addChildren(self, Children_):
        super(LODObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(LODObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def getLevel_changed(self):
        if type(self.level_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_changed_

    def setMetadata(self, metadata_ = None):
        super(LODObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(LODObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(LODObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(LODObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(LODObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MaterialObject(X3DMaterialNode):
    def __init__(self, **kwargs):
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0.2):
        super(MaterialObject, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setDiffuseColor(self, diffuseColor_ = [0.8, 0.8, 0.8]):
        super(MaterialObject, self).setDiffuseColor(diffuseColor_)
        if type(diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if diffuseColor_ < 0:
                raise InvalidFieldValueException()
        if diffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.diffuseColor_ = diffuseColor_

    def getDiffuseColor(self):
        if type(self.diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.diffuseColor_

    def setEmissiveColor(self, emissiveColor_ = [0, 0, 0]):
        super(MaterialObject, self).setEmissiveColor(emissiveColor_)
        if type(emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if emissiveColor_ < 0:
                raise InvalidFieldValueException()
        if emissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.emissiveColor_ = emissiveColor_

    def getEmissiveColor(self):
        if type(self.emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.emissiveColor_

    def setMetadata(self, metadata_ = None):
        super(MaterialObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setShininess(self, shininess_ = 0.2):
        super(MaterialObject, self).setShininess(shininess_)
        if type(shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if shininess_ < 0:
                raise InvalidFieldValueException()
        if shininess_ > 1:
                raise InvalidFieldValueException()
        self.shininess_ = shininess_

    def getShininess(self):
        if type(self.shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.shininess_

    def setSpecularColor(self, specularColor_ = [0, 0, 0]):
        super(MaterialObject, self).setSpecularColor(specularColor_)
        if type(specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if specularColor_ < 0:
                raise InvalidFieldValueException()
        if specularColor_ > 1:
                raise InvalidFieldValueException()
        self.specularColor_ = specularColor_

    def getSpecularColor(self):
        if type(self.specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.specularColor_

    def setTransparency(self, transparency_ = 0):
        super(MaterialObject, self).setTransparency(transparency_)
        if type(transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if transparency_ < 0:
                raise InvalidFieldValueException()
        if transparency_ > 1:
                raise InvalidFieldValueException()
        self.transparency_ = transparency_

    def getTransparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def setDEF(self, DEF_):
        super(MaterialObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MaterialObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MaterialObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Matrix3VertexAttributeObject(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(Matrix3VertexAttributeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(Matrix3VertexAttributeObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setValue(self, value_):
        super(Matrix3VertexAttributeObject, self).setValue(value_)
        if type(value_) is not MFMatrix3f:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFMatrix3f:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(Matrix3VertexAttributeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Matrix3VertexAttributeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Matrix3VertexAttributeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Matrix4VertexAttributeObject(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(Matrix4VertexAttributeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(Matrix4VertexAttributeObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setValue(self, value_):
        super(Matrix4VertexAttributeObject, self).setValue(value_)
        if type(value_) is not MFMatrix4f:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFMatrix4f:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(Matrix4VertexAttributeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Matrix4VertexAttributeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Matrix4VertexAttributeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataBooleanObject(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataBooleanObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataBooleanObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataBooleanObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataBooleanObject, self).setValue(value_)
        if type(value_) is not MFBool:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataBooleanObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataBooleanObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataBooleanObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataDoubleObject(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataDoubleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataDoubleObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataDoubleObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataDoubleObject, self).setValue(value_)
        if type(value_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataDoubleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataDoubleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataDoubleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataFloatObject(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataFloatObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataFloatObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataFloatObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataFloatObject, self).setValue(value_)
        if type(value_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataFloatObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataFloatObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataFloatObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataIntegerObject(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataIntegerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataIntegerObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataIntegerObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataIntegerObject, self).setValue(value_)
        if type(value_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataIntegerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataIntegerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataIntegerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataSetObject(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataSetObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataSetObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataSetObject, self).setValue(value_)
        if type(value_) is not MFNode:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataStringObject(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MetadataStringObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(MetadataStringObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setReference(self, reference_):
        super(MetadataStringObject, self).setReference(reference_)
        if type(reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.reference_ = reference_

    def getReference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def setValue(self, value_):
        super(MetadataStringObject, self).setValue(value_)
        if type(value_) is not MFString:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not MFString:
            raise InvalidFieldTypeException()
        return self.value_

    def setDEF(self, DEF_):
        super(MetadataStringObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MetadataStringObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MetadataStringObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MotorJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        if type(autoCalc_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoCalc_ = kwargs.pop("autoCalc", False)
        return

    def setAxis1Angle(self, axis1Angle_ = 0):
        super(MotorJointObject, self).setAxis1Angle(axis1Angle_)
        if type(axis1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis1Angle_ = axis1Angle_

    def getAxis1Angle(self):
        if type(self.axis1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis1Angle_

    def setAxis1Torque(self, axis1Torque_ = 0):
        super(MotorJointObject, self).setAxis1Torque(axis1Torque_)
        if type(axis1Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis1Torque_ = axis1Torque_

    def getAxis1Torque(self):
        if type(self.axis1Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis1Torque_

    def setAxis2Angle(self, axis2Angle_ = 0):
        super(MotorJointObject, self).setAxis2Angle(axis2Angle_)
        if type(axis2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis2Angle_ = axis2Angle_

    def getAxis2Angle(self):
        if type(self.axis2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis2Angle_

    def setAxis2Torque(self, axis2Torque_ = 0):
        super(MotorJointObject, self).setAxis2Torque(axis2Torque_)
        if type(axis2Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis2Torque_ = axis2Torque_

    def getAxis2Torque(self):
        if type(self.axis2Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis2Torque_

    def setAxis3Angle(self, axis3Angle_ = 0):
        super(MotorJointObject, self).setAxis3Angle(axis3Angle_)
        if type(axis3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis3Angle_ = axis3Angle_

    def getAxis3Angle(self):
        if type(self.axis3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis3Angle_

    def setAxis3Torque(self, axis3Torque_ = 0):
        super(MotorJointObject, self).setAxis3Torque(axis3Torque_)
        if type(axis3Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.axis3Torque_ = axis3Torque_

    def getAxis3Torque(self):
        if type(self.axis3Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis3Torque_

    def setBody1(self, body1_ = None):
        super(MotorJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def setBody2(self, body2_ = None):
        super(MotorJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def setEnabledAxes(self, enabledAxes_ = 1):
        super(MotorJointObject, self).setEnabledAxes(enabledAxes_)
        if type(enabledAxes_) is not SFInt32:
            raise InvalidFieldTypeException()
        if enabledAxes_ < 0:
                raise InvalidFieldValueException()
        if enabledAxes_ > 3:
                raise InvalidFieldValueException()
        self.enabledAxes_ = enabledAxes_

    def getEnabledAxes(self):
        if type(self.enabledAxes_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.enabledAxes_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(MotorJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMetadata(self, metadata_ = None):
        super(MotorJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getMotor1Angle(self):
        if type(self.motor1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor1Angle_


    def getMotor1AngleRate(self):
        if type(self.motor1AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor1AngleRate_

    def setMotor1Axis(self, motor1Axis_ = [0, 0, 0]):
        super(MotorJointObject, self).setMotor1Axis(motor1Axis_)
        if type(motor1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.motor1Axis_ = motor1Axis_

    def getMotor1Axis(self):
        if type(self.motor1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor1Axis_


    def getMotor2Angle(self):
        if type(self.motor2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor2Angle_


    def getMotor2AngleRate(self):
        if type(self.motor2AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor2AngleRate_

    def setMotor2Axis(self, motor2Axis_ = [0, 0, 0]):
        super(MotorJointObject, self).setMotor2Axis(motor2Axis_)
        if type(motor2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.motor2Axis_ = motor2Axis_

    def getMotor2Axis(self):
        if type(self.motor2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor2Axis_


    def getMotor3Angle(self):
        if type(self.motor3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor3Angle_


    def getMotor3AngleRate(self):
        if type(self.motor3AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor3AngleRate_

    def setMotor3Axis(self, motor3Axis_ = [0, 0, 0]):
        super(MotorJointObject, self).setMotor3Axis(motor3Axis_)
        if type(motor3Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.motor3Axis_ = motor3Axis_

    def getMotor3Axis(self):
        if type(self.motor3Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor3Axis_

    def setStop1Bounce(self, stop1Bounce_ = 0):
        super(MotorJointObject, self).setStop1Bounce(stop1Bounce_)
        if type(stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop1Bounce_ = stop1Bounce_

    def getStop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def setStop1ErrorCorrection(self, stop1ErrorCorrection_ = 0.8):
        super(MotorJointObject, self).setStop1ErrorCorrection(stop1ErrorCorrection_)
        if type(stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop1ErrorCorrection_ = stop1ErrorCorrection_

    def getStop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def setStop2Bounce(self, stop2Bounce_ = 0):
        super(MotorJointObject, self).setStop2Bounce(stop2Bounce_)
        if type(stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop2Bounce_ = stop2Bounce_

    def getStop2Bounce(self):
        if type(self.stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2Bounce_

    def setStop2ErrorCorrection(self, stop2ErrorCorrection_ = 0.8):
        super(MotorJointObject, self).setStop2ErrorCorrection(stop2ErrorCorrection_)
        if type(stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop2ErrorCorrection_ = stop2ErrorCorrection_

    def getStop2ErrorCorrection(self):
        if type(self.stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2ErrorCorrection_

    def setStop3Bounce(self, stop3Bounce_ = 0):
        super(MotorJointObject, self).setStop3Bounce(stop3Bounce_)
        if type(stop3Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop3Bounce_ = stop3Bounce_

    def getStop3Bounce(self):
        if type(self.stop3Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop3Bounce_

    def setStop3ErrorCorrection(self, stop3ErrorCorrection_ = 0.8):
        super(MotorJointObject, self).setStop3ErrorCorrection(stop3ErrorCorrection_)
        if type(stop3ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stop3ErrorCorrection_ = stop3ErrorCorrection_

    def getStop3ErrorCorrection(self):
        if type(self.stop3ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop3ErrorCorrection_

    def setDEF(self, DEF_):
        super(MotorJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MotorJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MotorJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MovieTextureObject(X3DTexture2DNode, X3DUrlObject, X3DSoundSourceNode):
    def __init__(self, **kwargs):
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setDescription(self, description_):
        super(MovieTextureObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def getDuration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isPaused(self):
        if type(self.Paused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Paused_

    def setLoop(self, loop_ = False):
        super(MovieTextureObject, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(MovieTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPauseTime(self, pauseTime_ = 0):
        super(MovieTextureObject, self).setPauseTime(pauseTime_)
        if type(pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.pauseTime_ = pauseTime_

    def getPauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def setPitch(self, pitch_ = 1.0):
        super(MovieTextureObject, self).setPitch(pitch_)
        if type(pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if pitch_ <= 0:
                raise InvalidFieldValueException()
        self.pitch_ = pitch_

    def getPitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def setResumeTime(self, resumeTime_ = 0):
        super(MovieTextureObject, self).setResumeTime(resumeTime_)
        if type(resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.resumeTime_ = resumeTime_

    def getResumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def setSpeed(self, speed_ = 1.0):
        super(MovieTextureObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setStartTime(self, startTime_ = 0):
        super(MovieTextureObject, self).setStartTime(startTime_)
        if type(startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.startTime_ = startTime_

    def getStartTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def setStopTime(self, stopTime_ = 0):
        super(MovieTextureObject, self).setStopTime(stopTime_)
        if type(stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.stopTime_ = stopTime_

    def getStopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def setUrl(self, url_):
        super(MovieTextureObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(MovieTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MovieTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MovieTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTextureObject(X3DTextureNode):
    def __init__(self, **kwargs):
        return

    def setAlpha(self, alpha_ = 1):
        super(MultiTextureObject, self).setAlpha(alpha_)
        if type(alpha_) is not SFFloat:
            raise InvalidFieldTypeException()
        if alpha_ < 0:
                raise InvalidFieldValueException()
        if alpha_ > 1:
                raise InvalidFieldValueException()
        self.alpha_ = alpha_

    def getAlpha(self):
        if type(self.alpha_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.alpha_

    def setColor(self, color_ = [1, 1, 1]):
        super(MultiTextureObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setFunction(self, function_):
        super(MultiTextureObject, self).setFunction(function_)
        if type(function_) is not MFString:
            raise InvalidFieldTypeException()
        if '"COMPLEMENT"' == function_:
            pass
        elif '"ALPHAREPLICATE"' == function_:
            pass
        elif '""' == function_:
            pass
        else:
            raise InvalidFieldValueException()
        self.function_ = function_

    def getFunction(self):
        if type(self.function_) is not MFString:
            raise InvalidFieldTypeException()
        return self.function_

    def setMetadata(self, metadata_ = None):
        super(MultiTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMode(self, mode_):
        super(MultiTextureObject, self).setMode(mode_)
        if type(mode_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ADD"' == mode_:
            pass
        elif '"ADDSIGNED"' == mode_:
            pass
        elif '"ADDSIGNED2X"' == mode_:
            pass
        elif '"ADDSMOOTH"' == mode_:
            pass
        elif '"BLENDCURRENTALPHA"' == mode_:
            pass
        elif '"BLENDDIFFUSEALPHA"' == mode_:
            pass
        elif '"BLENDFACTORALPHA"' == mode_:
            pass
        elif '"BLENDTEXTUREALPHA"' == mode_:
            pass
        elif '"DOTPRODUCT3"' == mode_:
            pass
        elif '"MODULATE"' == mode_:
            pass
        elif '"MODULATE2X"' == mode_:
            pass
        elif '"MODULATE4X"' == mode_:
            pass
        elif '"MODULATEALPHA_ADDCOLOR"' == mode_:
            pass
        elif '"MODULATEINVALPHA_ADDCOLOR"' == mode_:
            pass
        elif '"MODULATEINVCOLOR_ADDALPHA"' == mode_:
            pass
        elif '"OFF"' == mode_:
            pass
        elif '"REPLACE"' == mode_:
            pass
        elif '"SELECTARG1"' == mode_:
            pass
        elif '"SELECTARG2"' == mode_:
            pass
        elif '"SUBTRACT"' == mode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.mode_ = mode_

    def getMode(self):
        if type(self.mode_) is not MFString:
            raise InvalidFieldTypeException()
        return self.mode_

    def setSource(self, source_):
        super(MultiTextureObject, self).setSource(source_)
        if type(source_) is not MFString:
            raise InvalidFieldTypeException()
        if '"DIFFUSE"' == source_:
            pass
        elif '"FACTOR"' == source_:
            pass
        elif '"SPECULAR"' == source_:
            pass
        elif '""' == source_:
            pass
        else:
            raise InvalidFieldValueException()
        self.source_ = source_

    def getSource(self):
        if type(self.source_) is not MFString:
            raise InvalidFieldTypeException()
        return self.source_

    def setTexture(self, texture_):
        super(MultiTextureObject, self).setTexture(texture_)
        if type(texture_) is not MFNode:
            raise InvalidFieldTypeException()
        self.texture_ = texture_

    def getTexture(self):
        if type(self.texture_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def setDEF(self, DEF_):
        super(MultiTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MultiTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MultiTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTextureCoordinateObject(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MultiTextureCoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTexCoord(self, texCoord_):
        super(MultiTextureCoordinateObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not MFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(MultiTextureCoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MultiTextureCoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MultiTextureCoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTextureTransformObject(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(MultiTextureTransformObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTextureTransform(self, textureTransform_):
        super(MultiTextureTransformObject, self).setTextureTransform(textureTransform_)
        if type(textureTransform_) is not MFNode:
            raise InvalidFieldTypeException()
        self.textureTransform_ = textureTransform_

    def getTextureTransform(self):
        if type(self.textureTransform_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.textureTransform_

    def setDEF(self, DEF_):
        super(MultiTextureTransformObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(MultiTextureTransformObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(MultiTextureTransformObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NavigationInfoObject(X3DBindableNode):
    def __init__(self, **kwargs):
        return

    def setAvatarSize(self, avatarSize_ = [0.25, 1.6, 0.75]):
        super(NavigationInfoObject, self).setAvatarSize(avatarSize_)
        if type(avatarSize_) is not MFFloat:
            raise InvalidFieldTypeException()
        if avatarSize_ < 0:
                raise InvalidFieldValueException()
        self.avatarSize_ = avatarSize_

    def getAvatarSize(self):
        if type(self.avatarSize_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.avatarSize_


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setHeadlight(self, headlight_ = True):
        super(NavigationInfoObject, self).setHeadlight(headlight_)
        if type(headlight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.headlight_ = headlight_

    def isHeadlight(self):
        if type(self.headlight_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.headlight_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setMetadata(self, metadata_ = None):
        super(NavigationInfoObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, _bind_):
        super(NavigationInfoObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setSpeed(self, speed_ = 1):
        super(NavigationInfoObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_


    def isTransitionComplete(self):
        if type(self.transitionComplete_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.transitionComplete_

    def setTransitionTime(self, transitionTime_ = 1.0):
        super(NavigationInfoObject, self).setTransitionTime(transitionTime_)
        if type(transitionTime_) is not SFTime:
            raise InvalidFieldTypeException()
        if transitionTime_ < 0:
                raise InvalidFieldValueException()
        self.transitionTime_ = transitionTime_

    def getTransitionTime(self):
        if type(self.transitionTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.transitionTime_

    def setTransitionType(self, transitionType_ = "LINEAR"):
        super(NavigationInfoObject, self).setTransitionType(transitionType_)
        if type(transitionType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"TELEPORT"' == transitionType_:
            pass
        elif '"LINEAR"' == transitionType_:
            pass
        elif '"ANIMATE"' == transitionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.transitionType_ = transitionType_

    def getTransitionType(self):
        if type(self.transitionType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.transitionType_

    def setType(self, type_ = ["EXAMINE", "ANY"]):
        super(NavigationInfoObject, self).setType(type_)
        if type(type_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ANY"' == type_:
            pass
        elif '"WALK"' == type_:
            pass
        elif '"EXAMINE"' == type_:
            pass
        elif '"FLY"' == type_:
            pass
        elif '"LOOKAT"' == type_:
            pass
        elif '"NONE"' == type_:
            pass
        elif '"EXPLORE"' == type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.type_ = type_

    def getType(self):
        if type(self.type_) is not MFString:
            raise InvalidFieldTypeException()
        return self.type_

    def setVisibilityLimit(self, visibilityLimit_ = 0):
        super(NavigationInfoObject, self).setVisibilityLimit(visibilityLimit_)
        if type(visibilityLimit_) is not SFFloat:
            raise InvalidFieldTypeException()
        if visibilityLimit_ < 0:
                raise InvalidFieldValueException()
        self.visibilityLimit_ = visibilityLimit_

    def getVisibilityLimit(self):
        if type(self.visibilityLimit_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityLimit_

    def setDEF(self, DEF_):
        super(NavigationInfoObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NavigationInfoObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NavigationInfoObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NormalObject(X3DNormalNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(NormalObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setVector(self, vector_):
        super(NormalObject, self).setVector(vector_)
        if type(vector_) is not MFVec3f:
            raise InvalidFieldTypeException()
        if vector_ < -1:
                raise InvalidFieldValueException()
        if vector_ > 1:
                raise InvalidFieldValueException()
        self.vector_ = vector_

    def getVector(self):
        if type(self.vector_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.vector_

    def setDEF(self, DEF_):
        super(NormalObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NormalObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NormalObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NormalInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(NormalInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(NormalInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(NormalInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(NormalInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(NormalInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NormalInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NormalInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsCurveObject(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return

    def setControlPoint(self, controlPoint_ = None):
        super(NurbsCurveObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsCurveObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTessellation(self, tessellation_ = 0):
        super(NurbsCurveObject, self).setTessellation(tessellation_)
        if type(tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.tessellation_ = tessellation_

    def getTessellation(self):
        if type(self.tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tessellation_

    def setWeight(self, weight_):
        super(NurbsCurveObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsCurveObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsCurveObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsCurveObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsCurve2DObject(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return

    def setControlPoint(self, controlPoint_):
        super(NurbsCurve2DObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsCurve2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTessellation(self, tessellation_ = 0):
        super(NurbsCurve2DObject, self).setTessellation(tessellation_)
        if type(tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.tessellation_ = tessellation_

    def getTessellation(self):
        if type(self.tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tessellation_

    def setWeight(self, weight_):
        super(NurbsCurve2DObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsCurve2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsCurve2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsCurve2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsOrientationInterpolatorObject(X3DChildNode):
    def __init__(self, **kwargs):
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        return

    def setControlPoint(self, controlPoint_ = None):
        super(NurbsOrientationInterpolatorObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsOrientationInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrder(self, order_ = 3):
        super(NurbsOrientationInterpolatorObject, self).setOrder(order_)
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = order_

    def getOrder(self):
        if type(self.order_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.order_

    def set_fraction(self, _fraction_):
        super(NurbsOrientationInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setWeight(self, weight_):
        super(NurbsOrientationInterpolatorObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsOrientationInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsOrientationInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsOrientationInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsPatchSurfaceObject(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def setControlPoint(self, controlPoint_ = None):
        super(NurbsPatchSurfaceObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsPatchSurfaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTexCoord(self, texCoord_ = None):
        super(NurbsPatchSurfaceObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setUTessellation(self, uTessellation_ = 0):
        super(NurbsPatchSurfaceObject, self).setUTessellation(uTessellation_)
        if type(uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.uTessellation_ = uTessellation_

    def getUTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def setVTessellation(self, vTessellation_ = 0):
        super(NurbsPatchSurfaceObject, self).setVTessellation(vTessellation_)
        if type(vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.vTessellation_ = vTessellation_

    def getVTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def setWeight(self, weight_):
        super(NurbsPatchSurfaceObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsPatchSurfaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsPatchSurfaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsPatchSurfaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsPositionInterpolatorObject(X3DChildNode):
    def __init__(self, **kwargs):
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        return

    def setControlPoint(self, controlPoint_ = None):
        super(NurbsPositionInterpolatorObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsPositionInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrder(self, order_ = 3):
        super(NurbsPositionInterpolatorObject, self).setOrder(order_)
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = order_

    def getOrder(self):
        if type(self.order_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.order_

    def set_fraction(self, _fraction_):
        super(NurbsPositionInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setWeight(self, weight_):
        super(NurbsPositionInterpolatorObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsPositionInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsPositionInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsPositionInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSetObject(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addGeometry(self, Geometry_):
        super(NurbsSetObject, self).addGeometry(Geometry_)
        if type(Geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Geometry_ = Geometry_
    def setGeometry(self, geometry_):
        super(NurbsSetObject, self).setGeometry(geometry_)
        if type(geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setMetadata(self, metadata_ = None):
        super(NurbsSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeGeometry(self, Geometry_):
        super(NurbsSetObject, self).removeGeometry(Geometry_)
        if type(Geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Geometry_ = Geometry_
    def setTessellationScale(self, tessellationScale_ = 1.0):
        super(NurbsSetObject, self).setTessellationScale(tessellationScale_)
        if type(tessellationScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        if tessellationScale_ <= 0:
                raise InvalidFieldValueException()
        self.tessellationScale_ = tessellationScale_

    def getTessellationScale(self):
        if type(self.tessellationScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tessellationScale_

    def setDEF(self, DEF_):
        super(NurbsSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSurfaceInterpolatorObject(X3DChildNode):
    def __init__(self, **kwargs):
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def setControlPoint(self, controlPoint_ = None):
        super(NurbsSurfaceInterpolatorObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsSurfaceInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getNormal_changed(self):
        if type(self.normal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.normal_changed_


    def getPosition_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def set_fraction(self, _fraction_):
        super(NurbsSurfaceInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_
    def setWeight(self, weight_):
        super(NurbsSurfaceInterpolatorObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsSurfaceInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsSurfaceInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsSurfaceInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSweptSurfaceObject(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setCrossSectionCurve(self, crossSectionCurve_ = None):
        super(NurbsSweptSurfaceObject, self).setCrossSectionCurve(crossSectionCurve_)
        if type(crossSectionCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.crossSectionCurve_ = crossSectionCurve_

    def getCrossSectionCurve(self):
        if type(self.crossSectionCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.crossSectionCurve_

    def setMetadata(self, metadata_ = None):
        super(NurbsSweptSurfaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTrajectoryCurve(self, trajectoryCurve_ = None):
        super(NurbsSweptSurfaceObject, self).setTrajectoryCurve(trajectoryCurve_)
        if type(trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.trajectoryCurve_ = trajectoryCurve_

    def getTrajectoryCurve(self):
        if type(self.trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.trajectoryCurve_

    def setDEF(self, DEF_):
        super(NurbsSweptSurfaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsSweptSurfaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsSweptSurfaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSwungSurfaceObject(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setMetadata(self, metadata_ = None):
        super(NurbsSwungSurfaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setProfileCurve(self, profileCurve_ = None):
        super(NurbsSwungSurfaceObject, self).setProfileCurve(profileCurve_)
        if type(profileCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.profileCurve_ = profileCurve_

    def getProfileCurve(self):
        if type(self.profileCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.profileCurve_

    def setTrajectoryCurve(self, trajectoryCurve_ = None):
        super(NurbsSwungSurfaceObject, self).setTrajectoryCurve(trajectoryCurve_)
        if type(trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.trajectoryCurve_ = trajectoryCurve_

    def getTrajectoryCurve(self):
        if type(self.trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.trajectoryCurve_

    def setDEF(self, DEF_):
        super(NurbsSwungSurfaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsSwungSurfaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsSwungSurfaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsTextureCoordinateObject(X3DNode):
    def __init__(self, **kwargs):
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def setControlPoint(self, controlPoint_):
        super(NurbsTextureCoordinateObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsTextureCoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setWeight(self, weight_):
        super(NurbsTextureCoordinateObject, self).setWeight(weight_)
        if type(weight_) is not MFFloat:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsTextureCoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsTextureCoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsTextureCoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsTrimmedSurfaceObject(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def addTrimmingContour(self, TrimmingContour_):
        super(NurbsTrimmedSurfaceObject, self).addTrimmingContour(TrimmingContour_)
        if type(TrimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.TrimmingContour_ = TrimmingContour_
    def setControlPoint(self, controlPoint_ = None):
        super(NurbsTrimmedSurfaceObject, self).setControlPoint(controlPoint_)
        if type(controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.controlPoint_ = controlPoint_

    def getControlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def setMetadata(self, metadata_ = None):
        super(NurbsTrimmedSurfaceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeTrimmingContour(self, TrimmingContour_):
        super(NurbsTrimmedSurfaceObject, self).removeTrimmingContour(TrimmingContour_)
        if type(TrimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.TrimmingContour_ = TrimmingContour_
    def setTexCoord(self, texCoord_ = None):
        super(NurbsTrimmedSurfaceObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setTrimmingContour(self, trimmingContour_):
        super(NurbsTrimmedSurfaceObject, self).setTrimmingContour(trimmingContour_)
        if type(trimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.trimmingContour_ = trimmingContour_

    def getTrimmingContour(self):
        if type(self.trimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.trimmingContour_

    def setUTessellation(self, uTessellation_ = 0):
        super(NurbsTrimmedSurfaceObject, self).setUTessellation(uTessellation_)
        if type(uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.uTessellation_ = uTessellation_

    def getUTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def setVTessellation(self, vTessellation_ = 0):
        super(NurbsTrimmedSurfaceObject, self).setVTessellation(vTessellation_)
        if type(vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.vTessellation_ = vTessellation_

    def getVTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def setWeight(self, weight_):
        super(NurbsTrimmedSurfaceObject, self).setWeight(weight_)
        if type(weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if weight_ <= 0:
                raise InvalidFieldValueException()
        self.weight_ = weight_

    def getWeight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def setDEF(self, DEF_):
        super(NurbsTrimmedSurfaceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(NurbsTrimmedSurfaceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(NurbsTrimmedSurfaceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OpacityMapVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(OpacityMapVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(OpacityMapVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTransferFunction(self, transferFunction_ = None):
        super(OpacityMapVolumeStyleObject, self).setTransferFunction(transferFunction_)
        if type(transferFunction_) is not SFNode:
            raise InvalidFieldTypeException()
        self.transferFunction_ = transferFunction_

    def getTransferFunction(self):
        if type(self.transferFunction_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.transferFunction_

    def setDEF(self, DEF_):
        super(OpacityMapVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(OpacityMapVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(OpacityMapVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationChaserObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 1, 0, 0])
        if type(initialValue_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 1, 0, 0])
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(OrientationChaserObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(OrientationChaserObject, self).set_destination(_destination_)
        if type(_destination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(OrientationChaserObject, self).set_value(_value_)
        if type(_value_) is not SFRotation:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(OrientationChaserObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(OrientationChaserObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(OrientationChaserObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationDamperObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 1, 0, 0])
        if type(initialValue_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 1, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(OrientationDamperObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(OrientationDamperObject, self).set_destination(_destination_)
        if type(_destination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(OrientationDamperObject, self).set_value(_value_)
        if type(_value_) is not SFRotation:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(OrientationDamperObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(OrientationDamperObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(OrientationDamperObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(OrientationDamperObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(OrientationDamperObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(OrientationInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(OrientationInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(OrientationInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(OrientationInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(OrientationInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(OrientationInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(OrientationInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrthoViewpointObject(X3DViewpointNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setCenterOfRotation(self, centerOfRotation_ = [0, 0, 0]):
        super(OrthoViewpointObject, self).setCenterOfRotation(centerOfRotation_)
        if type(centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.centerOfRotation_ = centerOfRotation_

    def getCenterOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def setDescription(self, description_):
        super(OrthoViewpointObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setFieldOfView(self, fieldOfView_ = [-1, -1, 1, 1]):
        super(OrthoViewpointObject, self).setFieldOfView(fieldOfView_)
        if type(fieldOfView_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.fieldOfView_ = fieldOfView_

    def getFieldOfView(self):
        if type(self.fieldOfView_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setJump(self, jump_ = True):
        super(OrthoViewpointObject, self).setJump(jump_)
        if type(jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.jump_ = jump_

    def isJump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def setMetadata(self, metadata_ = None):
        super(OrthoViewpointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(OrthoViewpointObject, self).setOrientation(orientation_)
        if type(orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setPosition(self, position_ = [0, 0, 10]):
        super(OrthoViewpointObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setRetainUserOffsets(self, retainUserOffsets_ = False):
        super(OrthoViewpointObject, self).setRetainUserOffsets(retainUserOffsets_)
        if type(retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.retainUserOffsets_ = retainUserOffsets_

    def isRetainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, _bind_):
        super(OrthoViewpointObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setDEF(self, DEF_):
        super(OrthoViewpointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(OrthoViewpointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(OrthoViewpointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PackagedShaderObject(X3DUrlObject, X3DProgrammableShaderObject, X3DShaderNode):
    def __init__(self, **kwargs):
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def setActivate(self, activate_):
        super(PackagedShaderObject, self).setActivate(activate_)
        if type(activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.activate_ = activate_

    def isSelected(self):
        if type(self.Selected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Selected_


    def isValid(self):
        if type(self.Valid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Valid_

    def setMetadata(self, metadata_ = None):
        super(PackagedShaderObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(PackagedShaderObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(PackagedShaderObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PackagedShaderObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PackagedShaderObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ParticleSystemObject(X3DShapeNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(colorKey_) is not MFFloat:
            raise InvalidFieldTypeException()
        if colorKey_ < 0:
                raise InvalidFieldValueException()
        self.colorKey_ = kwargs.pop("colorKey")
        if type(colorRamp_) is not SFNode:
            raise InvalidFieldTypeException()
        self.colorRamp_ = kwargs.pop("colorRamp", None)
        if type(emitter_) is not SFNode:
            raise InvalidFieldTypeException()
        self.emitter_ = kwargs.pop("emitter", None)
        if type(geometryType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINE' == geometryType_:
            pass
        elif 'POINT' == geometryType_:
            pass
        elif 'QUAD' == geometryType_:
            pass
        elif 'SPRITE' == geometryType_:
            pass
        elif 'TRIANGLE' == geometryType_:
            pass
        elif 'GEOMETRY' == geometryType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.geometryType_ = kwargs.pop("geometryType", "QUAD")
        if type(physics_) is not MFNode:
            raise InvalidFieldTypeException()
        self.physics_ = kwargs.pop("physics")
        if type(texCoordKey_) is not MFFloat:
            raise InvalidFieldTypeException()
        if texCoordKey_ < 0:
                raise InvalidFieldValueException()
        self.texCoordKey_ = kwargs.pop("texCoordKey")
        if type(texCoordRamp_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoordRamp_ = kwargs.pop("texCoordRamp", None)
        return

    def setAppearance(self, appearance_ = None):
        super(ParticleSystemObject, self).setAppearance(appearance_)
        if type(appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.appearance_ = appearance_

    def getAppearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def setCreateParticles(self, createParticles_ = True):
        super(ParticleSystemObject, self).setCreateParticles(createParticles_)
        if type(createParticles_) is not SFBool:
            raise InvalidFieldTypeException()
        self.createParticles_ = createParticles_

    def isCreateParticles(self):
        if type(self.createParticles_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.createParticles_

    def setEnabled(self, enabled_ = True):
        super(ParticleSystemObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setGeometry(self, geometry_ = None):
        super(ParticleSystemObject, self).setGeometry(geometry_)
        if type(geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setGeometry(self, geometry_ = None):
        super(ParticleSystemObject, self).setGeometry(geometry_)
        if type(geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setLifetimeVariation(self, lifetimeVariation_ = 0.25):
        super(ParticleSystemObject, self).setLifetimeVariation(lifetimeVariation_)
        if type(lifetimeVariation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if lifetimeVariation_ < 0:
                raise InvalidFieldValueException()
        if lifetimeVariation_ > 1:
                raise InvalidFieldValueException()
        self.lifetimeVariation_ = lifetimeVariation_

    def getLifetimeVariation(self):
        if type(self.lifetimeVariation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.lifetimeVariation_

    def setMaxParticles(self, maxParticles_ = 200):
        super(ParticleSystemObject, self).setMaxParticles(maxParticles_)
        if type(maxParticles_) is not SFInt32:
            raise InvalidFieldTypeException()
        if maxParticles_ < 0:
                raise InvalidFieldValueException()
        self.maxParticles_ = maxParticles_

    def getMaxParticles(self):
        if type(self.maxParticles_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.maxParticles_

    def setMetadata(self, metadata_ = None):
        super(ParticleSystemObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setParticleLifetime(self, particleLifetime_ = 5):
        super(ParticleSystemObject, self).setParticleLifetime(particleLifetime_)
        if type(particleLifetime_) is not SFFloat:
            raise InvalidFieldTypeException()
        if particleLifetime_ < 0:
                raise InvalidFieldValueException()
        self.particleLifetime_ = particleLifetime_

    def getParticleLifetime(self):
        if type(self.particleLifetime_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.particleLifetime_

    def setParticleSize(self, particleSize_ = [0.02, 0.02]):
        super(ParticleSystemObject, self).setParticleSize(particleSize_)
        if type(particleSize_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if particleSize_ < 0:
                raise InvalidFieldValueException()
        self.particleSize_ = particleSize_

    def getParticleSize(self):
        if type(self.particleSize_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.particleSize_

    def setDEF(self, DEF_):
        super(ParticleSystemObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ParticleSystemObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ParticleSystemObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PickableGroupObject(X3DPickableObject, X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(PickableGroupObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(PickableGroupObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(PickableGroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(PickableGroupObject, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_

    def setPickable(self, pickable_ = True):
        super(PickableGroupObject, self).setPickable(pickable_)
        if type(pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.pickable_ = pickable_

    def isPickable(self):
        if type(self.pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.pickable_

    def removeChildren(self, Children_):
        super(PickableGroupObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(PickableGroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PickableGroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PickableGroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PixelTextureObject(X3DTexture2DNode):
    def __init__(self, **kwargs):
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setImage(self, image_ = [0, 0, 0]):
        super(PixelTextureObject, self).setImage(image_)
        if type(image_) is not SFImage:
            raise InvalidFieldTypeException()
        self.image_ = image_

    def getImage(self):
        if type(self.image_) is not SFImage:
            raise InvalidFieldTypeException()
        return self.image_

    def setMetadata(self, metadata_ = None):
        super(PixelTextureObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(PixelTextureObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PixelTextureObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PixelTextureObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PixelTexture3DObject(X3DTexture3DNode):
    def __init__(self, **kwargs):
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def setImage(self, image_ = [0, 0, 0, 0]):
        super(PixelTexture3DObject, self).setImage(image_)
        if type(image_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.image_ = image_

    def getImage(self):
        if type(self.image_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.image_

    def setMetadata(self, metadata_ = None):
        super(PixelTexture3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(PixelTexture3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PixelTexture3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PixelTexture3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PlaneSensorObject(X3DDragSensorNode):
    def __init__(self, **kwargs):
        return

    def setAutoOffset(self, autoOffset_ = True):
        super(PlaneSensorObject, self).setAutoOffset(autoOffset_)
        if type(autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoOffset_ = autoOffset_

    def isAutoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def setAxisRotation(self, axisRotation_ = [0, 1, 0, 0]):
        super(PlaneSensorObject, self).setAxisRotation(axisRotation_)
        if type(axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.axisRotation_ = axisRotation_

    def getAxisRotation(self):
        if type(self.axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.axisRotation_

    def setDescription(self, description_):
        super(PlaneSensorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(PlaneSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMaxPosition(self, maxPosition_ = [-1, -1]):
        super(PlaneSensorObject, self).setMaxPosition(maxPosition_)
        if type(maxPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.maxPosition_ = maxPosition_

    def getMaxPosition(self):
        if type(self.maxPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.maxPosition_

    def setMetadata(self, metadata_ = None):
        super(PlaneSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinPosition(self, minPosition_ = [0, 0]):
        super(PlaneSensorObject, self).setMinPosition(minPosition_)
        if type(minPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.minPosition_ = minPosition_

    def getMinPosition(self):
        if type(self.minPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.minPosition_

    def setOffset(self, offset_ = [0, 0, 0]):
        super(PlaneSensorObject, self).setOffset(offset_)
        if type(offset_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.offset_ = offset_

    def getOffset(self):
        if type(self.offset_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.offset_


    def getTrackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_


    def getTranslation_changed(self):
        if type(self.translation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_changed_

    def setDEF(self, DEF_):
        super(PlaneSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PlaneSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PlaneSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setDirection(self, direction_ = [0, 1, 0]):
        super(PointEmitterObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setMass(self, mass_ = 0):
        super(PointEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(PointEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPosition(self, position_ = [0, 0, 0]):
        super(PointEmitterObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setSpeed(self, speed_ = 0):
        super(PointEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(PointEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(PointEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PointEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PointEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointLightObject(X3DLightNode):
    def __init__(self, **kwargs):
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ < 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 100)
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0):
        super(PointLightObject, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setAttenuation(self, attenuation_ = [1, 0, 0]):
        super(PointLightObject, self).setAttenuation(attenuation_)
        if type(attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if attenuation_ < 0:
                raise InvalidFieldValueException()
        self.attenuation_ = attenuation_

    def getAttenuation(self):
        if type(self.attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.attenuation_

    def setColor(self, color_ = [1, 1, 1]):
        super(PointLightObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setGlobal(self, global_ = True):
        super(PointLightObject, self).setGlobal(global_)
        if type(global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.global_ = global_

    def isGlobal(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def setIntensity(self, intensity_ = 1):
        super(PointLightObject, self).setIntensity(intensity_)
        if type(intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensity_ < 0:
                raise InvalidFieldValueException()
        if intensity_ > 1:
                raise InvalidFieldValueException()
        self.intensity_ = intensity_

    def getIntensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def setLocation(self, location_ = [0, 0, 0]):
        super(PointLightObject, self).setLocation(location_)
        if type(location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.location_ = location_

    def getLocation(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def setMetadata(self, metadata_ = None):
        super(PointLightObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOn(self, on_ = True):
        super(PointLightObject, self).setOn(on_)
        if type(on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.on_ = on_

    def isOn(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def setDEF(self, DEF_):
        super(PointLightObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PointLightObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PointLightObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointPickSensorObject(X3DPickSensorNode):
    def __init__(self, **kwargs):
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def setEnabled(self, enabled_ = True):
        super(PointPickSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMatchCriterion(self, matchCriterion_ = "MATCH_ANY"):
        super(PointPickSensorObject, self).setMatchCriterion(matchCriterion_)
        if type(matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == matchCriterion_:
            pass
        elif 'MATCH_EVERY' == matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.matchCriterion_ = matchCriterion_

    def getMatchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def setMetadata(self, metadata_ = None):
        super(PointPickSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(PointPickSensorObject, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def getPickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_


    def getPickedPoint(self):
        if type(self.pickedPoint_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedPoint_

    def setPickingGeometry(self, pickingGeometry_ = None):
        super(PointPickSensorObject, self).setPickingGeometry(pickingGeometry_)
        if type(pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.pickingGeometry_ = pickingGeometry_

    def getPickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def setPickTarget(self, pickTarget_):
        super(PointPickSensorObject, self).setPickTarget(pickTarget_)
        if type(pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.pickTarget_ = pickTarget_

    def getPickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def setDEF(self, DEF_):
        super(PointPickSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PointPickSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PointPickSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointSetObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        return

    def setAttrib(self, attrib_):
        super(PointSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(PointSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(PointSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(PointSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(PointSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(PointSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PointSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PointSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Polyline2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(lineSegments_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.lineSegments_ = kwargs.pop("lineSegments")
        return

    def setMetadata(self, metadata_ = None):
        super(Polyline2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(Polyline2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Polyline2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Polyline2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PolylineEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setCoord(self, coord_ = None):
        super(PolylineEmitterObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setDirection(self, direction_ = [0, 1, 0]):
        super(PolylineEmitterObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if direction_ < -1:
                raise InvalidFieldValueException()
        if direction_ > 1:
                raise InvalidFieldValueException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setMass(self, mass_ = 0):
        super(PolylineEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(PolylineEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, _coordIndex_):
        super(PolylineEmitterObject, self).set_coordIndex(_coordIndex_)
        if type(_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _coordIndex_ < -1:
                raise InvalidFieldValueException()
        self._coordIndex_ = _coordIndex_
    def setSpeed(self, speed_ = 0):
        super(PolylineEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(PolylineEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(PolylineEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PolylineEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PolylineEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Polypoint2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(Polypoint2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(Polypoint2DObject, self).setPoint(point_)
        if type(point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(Polypoint2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Polypoint2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Polypoint2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionChaserObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(PositionChaserObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(PositionChaserObject, self).set_destination(_destination_)
        if type(_destination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(PositionChaserObject, self).set_value(_value_)
        if type(_value_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionChaserObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionChaserObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionChaserObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionChaser2DObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0])
        if type(initialValue_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0])
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(PositionChaser2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(PositionChaser2DObject, self).set_destination(_destination_)
        if type(_destination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(PositionChaser2DObject, self).set_value(_value_)
        if type(_value_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionChaser2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionChaser2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionChaser2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionDamperObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(PositionDamperObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(PositionDamperObject, self).set_destination(_destination_)
        if type(_destination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(PositionDamperObject, self).set_value(_value_)
        if type(_value_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(PositionDamperObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(PositionDamperObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionDamperObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionDamperObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionDamperObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionDamper2DObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0])
        if type(initialValue_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(PositionDamper2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(PositionDamper2DObject, self).set_destination(_destination_)
        if type(_destination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(PositionDamper2DObject, self).set_value(_value_)
        if type(_value_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(PositionDamper2DObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(PositionDamper2DObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionDamper2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionDamper2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionDamper2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(PositionInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(PositionInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(PositionInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(PositionInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionInterpolator2DObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(PositionInterpolator2DObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(PositionInterpolator2DObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(PositionInterpolator2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(PositionInterpolator2DObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(PositionInterpolator2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PositionInterpolator2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PositionInterpolator2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PrimitivePickSensorObject(X3DPickSensorNode):
    def __init__(self, **kwargs):
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def setEnabled(self, enabled_ = True):
        super(PrimitivePickSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMatchCriterion(self, matchCriterion_ = "MATCH_ANY"):
        super(PrimitivePickSensorObject, self).setMatchCriterion(matchCriterion_)
        if type(matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == matchCriterion_:
            pass
        elif 'MATCH_EVERY' == matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.matchCriterion_ = matchCriterion_

    def getMatchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def setMetadata(self, metadata_ = None):
        super(PrimitivePickSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(PrimitivePickSensorObject, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def getPickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def setPickingGeometry(self, pickingGeometry_ = None):
        super(PrimitivePickSensorObject, self).setPickingGeometry(pickingGeometry_)
        if type(pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.pickingGeometry_ = pickingGeometry_

    def getPickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def setPickTarget(self, pickTarget_):
        super(PrimitivePickSensorObject, self).setPickTarget(pickTarget_)
        if type(pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.pickTarget_ = pickTarget_

    def getPickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def setDEF(self, DEF_):
        super(PrimitivePickSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(PrimitivePickSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(PrimitivePickSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProgramShaderObject(X3DShaderNode):
    def __init__(self, **kwargs):
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def setActivate(self, activate_):
        super(ProgramShaderObject, self).setActivate(activate_)
        if type(activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.activate_ = activate_

    def isSelected(self):
        if type(self.Selected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Selected_


    def isValid(self):
        if type(self.Valid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Valid_

    def setMetadata(self, metadata_ = None):
        super(ProgramShaderObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPrograms(self, programs_):
        super(ProgramShaderObject, self).setPrograms(programs_)
        if type(programs_) is not MFNode:
            raise InvalidFieldTypeException()
        self.programs_ = programs_

    def getPrograms(self):
        if type(self.programs_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.programs_

    def setDEF(self, DEF_):
        super(ProgramShaderObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ProgramShaderObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ProgramShaderObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProjectionVolumeStyleObject(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(ProjectionVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setIntensityThreshold(self, intensityThreshold_ = 0):
        super(ProjectionVolumeStyleObject, self).setIntensityThreshold(intensityThreshold_)
        if type(intensityThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensityThreshold_ < 0:
                raise InvalidFieldValueException()
        if intensityThreshold_ > 1:
                raise InvalidFieldValueException()
        self.intensityThreshold_ = intensityThreshold_

    def getIntensityThreshold(self):
        if type(self.intensityThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensityThreshold_

    def setMetadata(self, metadata_ = None):
        super(ProjectionVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setType(self, type_ = "MAX"):
        super(ProjectionVolumeStyleObject, self).setType(type_)
        if type(type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MAX' == type_:
            pass
        elif 'MIN' == type_:
            pass
        elif 'AVERAGE' == type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.type_ = type_

    def getType(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def setDEF(self, DEF_):
        super(ProjectionVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ProjectionVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ProjectionVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProtoInstanceObject(X3DChildNode, X3DPrototypeInstance):
    def __init__(self, **kwargs):
        return

    def setFieldValue(self, fieldValue_):
        super(ProtoInstanceObject, self).setFieldValue(fieldValue_)
        if type(fieldValue_) is not MFNode:
            raise InvalidFieldTypeException()
        self.fieldValue_ = fieldValue_

    def getFieldValue(self):
        if type(self.fieldValue_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.fieldValue_

    def setMetadata(self, metadata_ = None):
        super(ProtoInstanceObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setName(self, name_):
        super(ProtoInstanceObject, self).setName(name_)
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setDEF(self, DEF_):
        super(ProtoInstanceObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ProtoInstanceObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ProtoInstanceObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProximitySensorObject(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(ProximitySensorObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_


    def getCenterOfRotation_changed(self):
        if type(self.centerOfRotation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_changed_

    def setEnabled(self, enabled_ = True):
        super(ProximitySensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getEnterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def getExitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(ProximitySensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getOrientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def getPosition_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def setDEF(self, DEF_):
        super(ProximitySensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ProximitySensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ProximitySensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class QuadSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(QuadSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(QuadSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(QuadSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(QuadSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(QuadSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(QuadSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def setTexCoord(self, texCoord_ = None):
        super(QuadSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(QuadSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(QuadSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(QuadSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ReceiverPduObject(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def address(self, ress_ = "localhost"):
        super(ReceiverPduObject, self).address(ress_)
        if type(ress_) is not SFString:
            raise InvalidFieldTypeException()
        self.ress_ = ress_

    def getAddress(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def setApplicationID(self, applicationID_ = 0):
        super(ReceiverPduObject, self).setApplicationID(applicationID_)
        if type(applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.applicationID_ = applicationID_

    def getApplicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def setEnabled(self, enabled_ = True):
        super(ReceiverPduObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setEntityID(self, entityID_ = 0):
        super(ReceiverPduObject, self).setEntityID(entityID_)
        if type(entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityID_ = entityID_

    def getEntityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(ReceiverPduObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isNetworkReader(self):
        if type(self.NetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkReader_


    def isNetworkWriter(self):
        if type(self.NetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkWriter_


    def isRtpHeaderHeard(self):
        if type(self.RtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.RtpHeaderHeard_


    def isStandAlone(self):
        if type(self.StandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.StandAlone_

    def setMetadata(self, metadata_ = None):
        super(ReceiverPduObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMulticastRelayHost(self, multicastRelayHost_):
        super(ReceiverPduObject, self).setMulticastRelayHost(multicastRelayHost_)
        if type(multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.multicastRelayHost_ = multicastRelayHost_

    def getMulticastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def setMulticastRelayPort(self, multicastRelayPort_ = 0):
        super(ReceiverPduObject, self).setMulticastRelayPort(multicastRelayPort_)
        if type(multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.multicastRelayPort_ = multicastRelayPort_

    def getMulticastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def setNetworkMode(self, networkMode_ = "standAlone"):
        super(ReceiverPduObject, self).setNetworkMode(networkMode_)
        if type(networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == networkMode_:
            pass
        elif 'networkReader' == networkMode_:
            pass
        elif 'networkWriter' == networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.networkMode_ = networkMode_

    def getNetworkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def setPort(self, port_ = 0):
        super(ReceiverPduObject, self).setPort(port_)
        if type(port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.port_ = port_

    def getPort(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def setRadioID(self, radioID_ = 0):
        super(ReceiverPduObject, self).setRadioID(radioID_)
        if type(radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioID_ = radioID_

    def getRadioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def setReadInterval(self, readInterval_ = 0.1):
        super(ReceiverPduObject, self).setReadInterval(readInterval_)
        if type(readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if readInterval_ < 0:
                raise InvalidFieldValueException()
        self.readInterval_ = readInterval_

    def getReadInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def setReceivedPower(self, receivedPower_ = 0.0):
        super(ReceiverPduObject, self).setReceivedPower(receivedPower_)
        if type(receivedPower_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.receivedPower_ = receivedPower_

    def getReceivedPower(self):
        if type(self.receivedPower_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.receivedPower_

    def setReceiverState(self, receiverState_ = 0):
        super(ReceiverPduObject, self).setReceiverState(receiverState_)
        if type(receiverState_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.receiverState_ = receiverState_

    def getReceiverState(self):
        if type(self.receiverState_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.receiverState_

    def setSiteID(self, siteID_ = 0):
        super(ReceiverPduObject, self).setSiteID(siteID_)
        if type(siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.siteID_ = siteID_

    def getSiteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def getTimestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def setTransmitterApplicationID(self, transmitterApplicationID_ = 0):
        super(ReceiverPduObject, self).setTransmitterApplicationID(transmitterApplicationID_)
        if type(transmitterApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.transmitterApplicationID_ = transmitterApplicationID_

    def getTransmitterApplicationID(self):
        if type(self.transmitterApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterApplicationID_

    def setTransmitterEntityID(self, transmitterEntityID_ = 0):
        super(ReceiverPduObject, self).setTransmitterEntityID(transmitterEntityID_)
        if type(transmitterEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.transmitterEntityID_ = transmitterEntityID_

    def getTransmitterEntityID(self):
        if type(self.transmitterEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterEntityID_

    def setTransmitterRadioID(self, transmitterRadioID_ = 0):
        super(ReceiverPduObject, self).setTransmitterRadioID(transmitterRadioID_)
        if type(transmitterRadioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.transmitterRadioID_ = transmitterRadioID_

    def getTransmitterRadioID(self):
        if type(self.transmitterRadioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterRadioID_

    def setTransmitterSiteID(self, transmitterSiteID_ = 0):
        super(ReceiverPduObject, self).setTransmitterSiteID(transmitterSiteID_)
        if type(transmitterSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.transmitterSiteID_ = transmitterSiteID_

    def getTransmitterSiteID(self):
        if type(self.transmitterSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterSiteID_

    def setWhichGeometry(self, whichGeometry_ = 1):
        super(ReceiverPduObject, self).setWhichGeometry(whichGeometry_)
        if type(whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.whichGeometry_ = whichGeometry_

    def getWhichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def setWriteInterval(self, writeInterval_ = 1.0):
        super(ReceiverPduObject, self).setWriteInterval(writeInterval_)
        if type(writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if writeInterval_ < 0:
                raise InvalidFieldValueException()
        self.writeInterval_ = writeInterval_

    def getWriteInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def setDEF(self, DEF_):
        super(ReceiverPduObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ReceiverPduObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ReceiverPduObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Rectangle2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [2, 2])
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def setMetadata(self, metadata_ = None):
        super(Rectangle2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(Rectangle2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(Rectangle2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(Rectangle2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class RigidBodyObject(X3DNode):
    def __init__(self, **kwargs):
        return

    def setAngularDampingFactor(self, angularDampingFactor_ = 0.001):
        super(RigidBodyObject, self).setAngularDampingFactor(angularDampingFactor_)
        if type(angularDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.angularDampingFactor_ = angularDampingFactor_

    def getAngularDampingFactor(self):
        if type(self.angularDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angularDampingFactor_

    def setAngularVelocity(self, angularVelocity_ = [0, 0, 0]):
        super(RigidBodyObject, self).setAngularVelocity(angularVelocity_)
        if type(angularVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.angularVelocity_ = angularVelocity_

    def getAngularVelocity(self):
        if type(self.angularVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.angularVelocity_

    def setAutoDamp(self, autoDamp_ = False):
        super(RigidBodyObject, self).setAutoDamp(autoDamp_)
        if type(autoDamp_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoDamp_ = autoDamp_

    def isAutoDamp(self):
        if type(self.autoDamp_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDamp_

    def setAutoDisable(self, autoDisable_ = False):
        super(RigidBodyObject, self).setAutoDisable(autoDisable_)
        if type(autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoDisable_ = autoDisable_

    def isAutoDisable(self):
        if type(self.autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDisable_

    def setCenterOfMass(self, centerOfMass_ = [0, 0, 0]):
        super(RigidBodyObject, self).setCenterOfMass(centerOfMass_)
        if type(centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.centerOfMass_ = centerOfMass_

    def getCenterOfMass(self):
        if type(self.centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfMass_

    def setDisableAngularSpeed(self, disableAngularSpeed_ = 0):
        super(RigidBodyObject, self).setDisableAngularSpeed(disableAngularSpeed_)
        if type(disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.disableAngularSpeed_ = disableAngularSpeed_

    def getDisableAngularSpeed(self):
        if type(self.disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableAngularSpeed_

    def setDisableLinearSpeed(self, disableLinearSpeed_ = 0):
        super(RigidBodyObject, self).setDisableLinearSpeed(disableLinearSpeed_)
        if type(disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.disableLinearSpeed_ = disableLinearSpeed_

    def getDisableLinearSpeed(self):
        if type(self.disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableLinearSpeed_

    def setDisableTime(self, disableTime_ = 0):
        super(RigidBodyObject, self).setDisableTime(disableTime_)
        if type(disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        if disableTime_ < 0:
                raise InvalidFieldValueException()
        self.disableTime_ = disableTime_

    def getDisableTime(self):
        if type(self.disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.disableTime_

    def setEnabled(self, enabled_ = True):
        super(RigidBodyObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setFiniteRotationAxis(self, finiteRotationAxis_ = [0, 1, 0]):
        super(RigidBodyObject, self).setFiniteRotationAxis(finiteRotationAxis_)
        if type(finiteRotationAxis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.finiteRotationAxis_ = finiteRotationAxis_

    def getFiniteRotationAxis(self):
        if type(self.finiteRotationAxis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.finiteRotationAxis_

    def setFixed(self, fixed_ = False):
        super(RigidBodyObject, self).setFixed(fixed_)
        if type(fixed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.fixed_ = fixed_

    def isFixed(self):
        if type(self.fixed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fixed_

    def setForces(self, forces_):
        super(RigidBodyObject, self).setForces(forces_)
        if type(forces_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.forces_ = forces_

    def getForces(self):
        if type(self.forces_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.forces_

    def setGeometry(self, geometry_):
        super(RigidBodyObject, self).setGeometry(geometry_)
        if type(geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setInertia(self, inertia_ = [1, 0, 0, 0, 1, 0, 0, 0, 1]):
        super(RigidBodyObject, self).setInertia(inertia_)
        if type(inertia_) is not SFMatrix3f:
            raise InvalidFieldTypeException()
        self.inertia_ = inertia_

    def getInertia(self):
        if type(self.inertia_) is not SFMatrix3f:
            raise InvalidFieldTypeException()
        return self.inertia_

    def setLinearDampingFactor(self, linearDampingFactor_ = 0.001):
        super(RigidBodyObject, self).setLinearDampingFactor(linearDampingFactor_)
        if type(linearDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.linearDampingFactor_ = linearDampingFactor_

    def getLinearDampingFactor(self):
        if type(self.linearDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.linearDampingFactor_

    def setLinearVelocity(self, linearVelocity_ = [0, 0, 0]):
        super(RigidBodyObject, self).setLinearVelocity(linearVelocity_)
        if type(linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.linearVelocity_ = linearVelocity_

    def getLinearVelocity(self):
        if type(self.linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearVelocity_

    def setMass(self, mass_ = 1):
        super(RigidBodyObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMassDensityModel(self, massDensityModel_ = None):
        super(RigidBodyObject, self).setMassDensityModel(massDensityModel_)
        if type(massDensityModel_) is not SFNode:
            raise InvalidFieldTypeException()
        self.massDensityModel_ = massDensityModel_

    def getMassDensityModel(self):
        if type(self.massDensityModel_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.massDensityModel_

    def setMetadata(self, metadata_ = None):
        super(RigidBodyObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(RigidBodyObject, self).setOrientation(orientation_)
        if type(orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setPosition(self, position_ = [0, 0, 0]):
        super(RigidBodyObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setTorques(self, torques_):
        super(RigidBodyObject, self).setTorques(torques_)
        if type(torques_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.torques_ = torques_

    def getTorques(self):
        if type(self.torques_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.torques_

    def setUseFiniteRotation(self, useFiniteRotation_ = False):
        super(RigidBodyObject, self).setUseFiniteRotation(useFiniteRotation_)
        if type(useFiniteRotation_) is not SFBool:
            raise InvalidFieldTypeException()
        self.useFiniteRotation_ = useFiniteRotation_

    def isUseFiniteRotation(self):
        if type(self.useFiniteRotation_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useFiniteRotation_

    def setUseGlobalGravity(self, useGlobalGravity_ = True):
        super(RigidBodyObject, self).setUseGlobalGravity(useGlobalGravity_)
        if type(useGlobalGravity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.useGlobalGravity_ = useGlobalGravity_

    def isUseGlobalGravity(self):
        if type(self.useGlobalGravity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useGlobalGravity_

    def setDEF(self, DEF_):
        super(RigidBodyObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(RigidBodyObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(RigidBodyObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class RigidBodyCollectionObject(X3DChildNode):
    def __init__(self, **kwargs):
        if type(collider_) is not SFNode:
            raise InvalidFieldTypeException()
        self.collider_ = kwargs.pop("collider", None)
        return

    def setAutoDisable(self, autoDisable_ = False):
        super(RigidBodyCollectionObject, self).setAutoDisable(autoDisable_)
        if type(autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoDisable_ = autoDisable_

    def isAutoDisable(self):
        if type(self.autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDisable_

    def setBodies(self, bodies_):
        super(RigidBodyCollectionObject, self).setBodies(bodies_)
        if type(bodies_) is not MFNode:
            raise InvalidFieldTypeException()
        self.bodies_ = bodies_

    def getBodies(self):
        if type(self.bodies_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.bodies_

    def setConstantForceMix(self, constantForceMix_ = 0.0001):
        super(RigidBodyCollectionObject, self).setConstantForceMix(constantForceMix_)
        if type(constantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.constantForceMix_ = constantForceMix_

    def getConstantForceMix(self):
        if type(self.constantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.constantForceMix_

    def setContactSurfaceThickness(self, contactSurfaceThickness_ = 0):
        super(RigidBodyCollectionObject, self).setContactSurfaceThickness(contactSurfaceThickness_)
        if type(contactSurfaceThickness_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.contactSurfaceThickness_ = contactSurfaceThickness_

    def getContactSurfaceThickness(self):
        if type(self.contactSurfaceThickness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.contactSurfaceThickness_

    def setDisableAngularSpeed(self, disableAngularSpeed_ = 0):
        super(RigidBodyCollectionObject, self).setDisableAngularSpeed(disableAngularSpeed_)
        if type(disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.disableAngularSpeed_ = disableAngularSpeed_

    def getDisableAngularSpeed(self):
        if type(self.disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableAngularSpeed_

    def setDisableLinearSpeed(self, disableLinearSpeed_ = 0):
        super(RigidBodyCollectionObject, self).setDisableLinearSpeed(disableLinearSpeed_)
        if type(disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.disableLinearSpeed_ = disableLinearSpeed_

    def getDisableLinearSpeed(self):
        if type(self.disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableLinearSpeed_

    def setDisableTime(self, disableTime_ = 0):
        super(RigidBodyCollectionObject, self).setDisableTime(disableTime_)
        if type(disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        if disableTime_ < 0:
                raise InvalidFieldValueException()
        self.disableTime_ = disableTime_

    def getDisableTime(self):
        if type(self.disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.disableTime_

    def setEnabled(self, enabled_ = True):
        super(RigidBodyCollectionObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setErrorCorrection(self, errorCorrection_ = 0.8):
        super(RigidBodyCollectionObject, self).setErrorCorrection(errorCorrection_)
        if type(errorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.errorCorrection_ = errorCorrection_

    def getErrorCorrection(self):
        if type(self.errorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.errorCorrection_

    def setGravity(self, gravity_ = [0, -9.8, 0]):
        super(RigidBodyCollectionObject, self).setGravity(gravity_)
        if type(gravity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.gravity_ = gravity_

    def getGravity(self):
        if type(self.gravity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.gravity_

    def setIterations(self, iterations_ = 10):
        super(RigidBodyCollectionObject, self).setIterations(iterations_)
        if type(iterations_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.iterations_ = iterations_

    def getIterations(self):
        if type(self.iterations_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.iterations_

    def setJoints(self, joints_):
        super(RigidBodyCollectionObject, self).setJoints(joints_)
        if type(joints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.joints_ = joints_

    def getJoints(self):
        if type(self.joints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.joints_

    def setMaxCorrectionSpeed(self, maxCorrectionSpeed_ = -1):
        super(RigidBodyCollectionObject, self).setMaxCorrectionSpeed(maxCorrectionSpeed_)
        if type(maxCorrectionSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxCorrectionSpeed_ = maxCorrectionSpeed_

    def getMaxCorrectionSpeed(self):
        if type(self.maxCorrectionSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxCorrectionSpeed_

    def setMetadata(self, metadata_ = None):
        super(RigidBodyCollectionObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPreferAccuracy(self, preferAccuracy_ = False):
        super(RigidBodyCollectionObject, self).setPreferAccuracy(preferAccuracy_)
        if type(preferAccuracy_) is not SFBool:
            raise InvalidFieldTypeException()
        self.preferAccuracy_ = preferAccuracy_

    def isPreferAccuracy(self):
        if type(self.preferAccuracy_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.preferAccuracy_

    def set_contacts(self, _contacts_):
        super(RigidBodyCollectionObject, self).set_contacts(_contacts_)
        if type(_contacts_) is not MFNode:
            raise InvalidFieldTypeException()
        self._contacts_ = _contacts_
    def setDEF(self, DEF_):
        super(RigidBodyCollectionObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(RigidBodyCollectionObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(RigidBodyCollectionObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarChaserObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", 0)
        if type(initialValue_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", 0)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(ScalarChaserObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(ScalarChaserObject, self).set_destination(_destination_)
        if type(_destination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(ScalarChaserObject, self).set_value(_value_)
        if type(_value_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ScalarChaserObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScalarChaserObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScalarChaserObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarDamperObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", 0)
        if type(initialValue_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", 0)
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(ScalarDamperObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(ScalarDamperObject, self).set_destination(_destination_)
        if type(_destination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(ScalarDamperObject, self).set_value(_value_)
        if type(_value_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(ScalarDamperObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(ScalarDamperObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ScalarDamperObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScalarDamperObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScalarDamperObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(ScalarInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(ScalarInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(ScalarInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, _fraction_):
        super(ScalarInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(ScalarInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScalarInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScalarInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScreenFontStyleObject(X3DFontStyleNode):
    def __init__(self, **kwargs):
        if type(family_) is not MFString:
            raise InvalidFieldTypeException()
        if '"SANS"' == family_:
            pass
        elif '"SERIF"' == family_:
            pass
        elif '"TYPEWRITER"' == family_:
            pass
        else:
            raise InvalidFieldValueException()
        self.family_ = kwargs.pop("family", "SERIF")
        if type(horizontal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.horizontal_ = kwargs.pop("horizontal", True)
        if type(justify_) is not MFString:
            raise InvalidFieldTypeException()
        if '"MIDDLE"' == justify_:
            pass
        elif '"MIDDLE" "BEGIN"' == justify_:
            pass
        elif '"MIDDLE" "END"' == justify_:
            pass
        elif '"MIDDLE" "FIRST"' == justify_:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify_:
            pass
        elif '"BEGIN"' == justify_:
            pass
        elif '"BEGIN" "BEGIN"' == justify_:
            pass
        elif '"BEGIN" "END"' == justify_:
            pass
        elif '"BEGIN" "FIRST"' == justify_:
            pass
        elif '"BEGIN" "MIDDLE"' == justify_:
            pass
        elif '"END"' == justify_:
            pass
        elif '"END" "BEGIN"' == justify_:
            pass
        elif '"END" "END"' == justify_:
            pass
        elif '"END" "FIRST"' == justify_:
            pass
        elif '"END" "MIDDLE"' == justify_:
            pass
        elif '"FIRST"' == justify_:
            pass
        elif '"FIRST" "BEGIN"' == justify_:
            pass
        elif '"FIRST" "END"' == justify_:
            pass
        elif '"FIRST" "FIRST"' == justify_:
            pass
        elif '"FIRST" "MIDDLE"' == justify_:
            pass
        else:
            raise InvalidFieldValueException()
        self.justify_ = kwargs.pop("justify", "BEGIN")
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        self.language_ = kwargs.pop("language")
        if type(leftToRight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.leftToRight_ = kwargs.pop("leftToRight", True)
        if type(pointSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        if pointSize_ <= 0:
                raise InvalidFieldValueException()
        self.pointSize_ = kwargs.pop("pointSize", 12.0)
        if type(spacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if spacing_ < 0:
                raise InvalidFieldValueException()
        self.spacing_ = kwargs.pop("spacing", 1.0)
        if type(style_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PLAIN' == style_:
            pass
        elif 'BOLD' == style_:
            pass
        elif 'ITALIC' == style_:
            pass
        elif 'BOLDITALIC' == style_:
            pass
        else:
            raise InvalidFieldValueException()
        self.style_ = kwargs.pop("style", "PLAIN")
        if type(topToBottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.topToBottom_ = kwargs.pop("topToBottom", True)
        return

    def setMetadata(self, metadata_ = None):
        super(ScreenFontStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ScreenFontStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScreenFontStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScreenFontStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScreenGroupObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(ScreenGroupObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(ScreenGroupObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(ScreenGroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(ScreenGroupObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(ScreenGroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScreenGroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScreenGroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScriptObject(X3DScriptNode):
    def __init__(self, **kwargs):
        if type(directOutput_) is not SFBool:
            raise InvalidFieldTypeException()
        self.directOutput_ = kwargs.pop("directOutput", False)
        if type(mustEvaluate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.mustEvaluate_ = kwargs.pop("mustEvaluate", False)
        return

    def setMetadata(self, metadata_ = None):
        super(ScriptObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setUrl(self, url_):
        super(ScriptObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ScriptObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ScriptObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ScriptObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SegmentedVolumeDataObject(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setDimensions(self, dimensions_ = [1, 1, 1]):
        super(SegmentedVolumeDataObject, self).setDimensions(dimensions_)
        if type(dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.dimensions_ = dimensions_

    def getDimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def setMetadata(self, metadata_ = None):
        super(SegmentedVolumeDataObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRenderStyle(self, renderStyle_):
        super(SegmentedVolumeDataObject, self).setRenderStyle(renderStyle_)
        if type(renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.renderStyle_ = renderStyle_

    def getRenderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def setSegmentEnabled(self, segmentEnabled_):
        super(SegmentedVolumeDataObject, self).setSegmentEnabled(segmentEnabled_)
        if type(segmentEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        self.segmentEnabled_ = segmentEnabled_

    def getSegmentEnabled(self):
        if type(self.segmentEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.segmentEnabled_

    def setSegmentIdentifiers(self, segmentIdentifiers_ = None):
        super(SegmentedVolumeDataObject, self).setSegmentIdentifiers(segmentIdentifiers_)
        if type(segmentIdentifiers_) is not SFNode:
            raise InvalidFieldTypeException()
        self.segmentIdentifiers_ = segmentIdentifiers_

    def getSegmentIdentifiers(self):
        if type(self.segmentIdentifiers_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.segmentIdentifiers_

    def setVoxels(self, voxels_ = None):
        super(SegmentedVolumeDataObject, self).setVoxels(voxels_)
        if type(voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.voxels_ = voxels_

    def getVoxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def setDEF(self, DEF_):
        super(SegmentedVolumeDataObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SegmentedVolumeDataObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SegmentedVolumeDataObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShadedVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        if type(phaseFunction_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Henyey-Greenstein' == phaseFunction_:
            pass
        elif 'NONE' == phaseFunction_:
            pass
        else:
            raise InvalidFieldValueException()
        self.phaseFunction_ = kwargs.pop("phaseFunction", "Henyey-Greenstein")
        return

    def setEnabled(self, enabled_ = True):
        super(ShadedVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setLighting(self, lighting_ = False):
        super(ShadedVolumeStyleObject, self).setLighting(lighting_)
        if type(lighting_) is not SFBool:
            raise InvalidFieldTypeException()
        self.lighting_ = lighting_

    def isLighting(self):
        if type(self.lighting_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.lighting_

    def setMaterial(self, material_ = None):
        super(ShadedVolumeStyleObject, self).setMaterial(material_)
        if type(material_) is not SFNode:
            raise InvalidFieldTypeException()
        self.material_ = material_

    def getMaterial(self):
        if type(self.material_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.material_

    def setMetadata(self, metadata_ = None):
        super(ShadedVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setShadows(self, shadows_ = False):
        super(ShadedVolumeStyleObject, self).setShadows(shadows_)
        if type(shadows_) is not SFBool:
            raise InvalidFieldTypeException()
        self.shadows_ = shadows_

    def isShadows(self):
        if type(self.shadows_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.shadows_

    def setSurfaceNormals(self, surfaceNormals_ = None):
        super(ShadedVolumeStyleObject, self).setSurfaceNormals(surfaceNormals_)
        if type(surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surfaceNormals_ = surfaceNormals_

    def getSurfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def setDEF(self, DEF_):
        super(ShadedVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ShadedVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ShadedVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShaderPartObject(X3DUrlObject, X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(ShaderPartObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setType(self, type_ = "VERTEX"):
        super(ShaderPartObject, self).setType(type_)
        if type(type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'VERTEX' == type_:
            pass
        elif 'FRAGMENT' == type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.type_ = type_

    def getType(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def setUrl(self, url_):
        super(ShaderPartObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ShaderPartObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ShaderPartObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ShaderPartObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShaderProgramObject(X3DUrlObject, X3DProgrammableShaderObject, X3DNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(ShaderProgramObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setType(self, type_ = "VERTEX"):
        super(ShaderProgramObject, self).setType(type_)
        if type(type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'VERTEX' == type_:
            pass
        elif 'FRAGMENT' == type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.type_ = type_

    def getType(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def setUrl(self, url_):
        super(ShaderProgramObject, self).setUrl(url_)
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def setDEF(self, DEF_):
        super(ShaderProgramObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ShaderProgramObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ShaderProgramObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShapeObject(X3DShapeNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setAppearance(self, appearance_ = None):
        super(ShapeObject, self).setAppearance(appearance_)
        if type(appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.appearance_ = appearance_

    def getAppearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def setGeometry(self, geometry_ = None):
        super(ShapeObject, self).setGeometry(geometry_)
        if type(geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geometry_ = geometry_

    def getGeometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def setMetadata(self, metadata_ = None):
        super(ShapeObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(ShapeObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ShapeObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ShapeObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SignalPduObject(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def address(self, ress_ = "localhost"):
        super(SignalPduObject, self).address(ress_)
        if type(ress_) is not SFString:
            raise InvalidFieldTypeException()
        self.ress_ = ress_

    def getAddress(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def setApplicationID(self, applicationID_ = 0):
        super(SignalPduObject, self).setApplicationID(applicationID_)
        if type(applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.applicationID_ = applicationID_

    def getApplicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def setData(self, data_):
        super(SignalPduObject, self).setData(data_)
        if type(data_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.data_ = data_

    def getData(self):
        if type(self.data_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.data_

    def setDataLength(self, dataLength_ = 0):
        super(SignalPduObject, self).setDataLength(dataLength_)
        if type(dataLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.dataLength_ = dataLength_

    def getDataLength(self):
        if type(self.dataLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.dataLength_

    def setEnabled(self, enabled_ = True):
        super(SignalPduObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setEncodingScheme(self, encodingScheme_ = 0):
        super(SignalPduObject, self).setEncodingScheme(encodingScheme_)
        if type(encodingScheme_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.encodingScheme_ = encodingScheme_

    def getEncodingScheme(self):
        if type(self.encodingScheme_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.encodingScheme_

    def setEntityID(self, entityID_ = 0):
        super(SignalPduObject, self).setEntityID(entityID_)
        if type(entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityID_ = entityID_

    def getEntityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(SignalPduObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isNetworkReader(self):
        if type(self.NetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkReader_


    def isNetworkWriter(self):
        if type(self.NetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkWriter_


    def isRtpHeaderHeard(self):
        if type(self.RtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.RtpHeaderHeard_


    def isStandAlone(self):
        if type(self.StandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.StandAlone_

    def setMetadata(self, metadata_ = None):
        super(SignalPduObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMulticastRelayHost(self, multicastRelayHost_):
        super(SignalPduObject, self).setMulticastRelayHost(multicastRelayHost_)
        if type(multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.multicastRelayHost_ = multicastRelayHost_

    def getMulticastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def setMulticastRelayPort(self, multicastRelayPort_ = 0):
        super(SignalPduObject, self).setMulticastRelayPort(multicastRelayPort_)
        if type(multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.multicastRelayPort_ = multicastRelayPort_

    def getMulticastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def setNetworkMode(self, networkMode_ = "standAlone"):
        super(SignalPduObject, self).setNetworkMode(networkMode_)
        if type(networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == networkMode_:
            pass
        elif 'networkReader' == networkMode_:
            pass
        elif 'networkWriter' == networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.networkMode_ = networkMode_

    def getNetworkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def setPort(self, port_ = 0):
        super(SignalPduObject, self).setPort(port_)
        if type(port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.port_ = port_

    def getPort(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def setRadioID(self, radioID_ = 0):
        super(SignalPduObject, self).setRadioID(radioID_)
        if type(radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioID_ = radioID_

    def getRadioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def setReadInterval(self, readInterval_ = 0.1):
        super(SignalPduObject, self).setReadInterval(readInterval_)
        if type(readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if readInterval_ < 0:
                raise InvalidFieldValueException()
        self.readInterval_ = readInterval_

    def getReadInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def setSampleRate(self, sampleRate_ = 0):
        super(SignalPduObject, self).setSampleRate(sampleRate_)
        if type(sampleRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.sampleRate_ = sampleRate_

    def getSampleRate(self):
        if type(self.sampleRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.sampleRate_

    def setSamples(self, samples_ = 0):
        super(SignalPduObject, self).setSamples(samples_)
        if type(samples_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.samples_ = samples_

    def getSamples(self):
        if type(self.samples_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.samples_

    def setSiteID(self, siteID_ = 0):
        super(SignalPduObject, self).setSiteID(siteID_)
        if type(siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.siteID_ = siteID_

    def getSiteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_

    def setTdlType(self, tdlType_ = 0):
        super(SignalPduObject, self).setTdlType(tdlType_)
        if type(tdlType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.tdlType_ = tdlType_

    def getTdlType(self):
        if type(self.tdlType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tdlType_


    def getTimestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def setWhichGeometry(self, whichGeometry_ = 1):
        super(SignalPduObject, self).setWhichGeometry(whichGeometry_)
        if type(whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.whichGeometry_ = whichGeometry_

    def getWhichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def setWriteInterval(self, writeInterval_ = 1.0):
        super(SignalPduObject, self).setWriteInterval(writeInterval_)
        if type(writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if writeInterval_ < 0:
                raise InvalidFieldValueException()
        self.writeInterval_ = writeInterval_

    def getWriteInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def setDEF(self, DEF_):
        super(SignalPduObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SignalPduObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SignalPduObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SilhouetteEnhancementVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setEnabled(self, enabled_ = True):
        super(SilhouetteEnhancementVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(SilhouetteEnhancementVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSilhouetteBoundaryOpacity(self, silhouetteBoundaryOpacity_ = 0):
        super(SilhouetteEnhancementVolumeStyleObject, self).setSilhouetteBoundaryOpacity(silhouetteBoundaryOpacity_)
        if type(silhouetteBoundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if silhouetteBoundaryOpacity_ < 0:
                raise InvalidFieldValueException()
        if silhouetteBoundaryOpacity_ > 1:
                raise InvalidFieldValueException()
        self.silhouetteBoundaryOpacity_ = silhouetteBoundaryOpacity_

    def getSilhouetteBoundaryOpacity(self):
        if type(self.silhouetteBoundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteBoundaryOpacity_

    def setSilhouetteRetainedOpacity(self, silhouetteRetainedOpacity_ = 1):
        super(SilhouetteEnhancementVolumeStyleObject, self).setSilhouetteRetainedOpacity(silhouetteRetainedOpacity_)
        if type(silhouetteRetainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if silhouetteRetainedOpacity_ < 0:
                raise InvalidFieldValueException()
        if silhouetteRetainedOpacity_ > 1:
                raise InvalidFieldValueException()
        self.silhouetteRetainedOpacity_ = silhouetteRetainedOpacity_

    def getSilhouetteRetainedOpacity(self):
        if type(self.silhouetteRetainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteRetainedOpacity_

    def setSilhouetteSharpness(self, silhouetteSharpness_ = 0.5):
        super(SilhouetteEnhancementVolumeStyleObject, self).setSilhouetteSharpness(silhouetteSharpness_)
        if type(silhouetteSharpness_) is not SFFloat:
            raise InvalidFieldTypeException()
        if silhouetteSharpness_ < 0:
                raise InvalidFieldValueException()
        self.silhouetteSharpness_ = silhouetteSharpness_

    def getSilhouetteSharpness(self):
        if type(self.silhouetteSharpness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteSharpness_

    def setSurfaceNormals(self, surfaceNormals_ = None):
        super(SilhouetteEnhancementVolumeStyleObject, self).setSurfaceNormals(surfaceNormals_)
        if type(surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surfaceNormals_ = surfaceNormals_

    def getSurfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def setDEF(self, DEF_):
        super(SilhouetteEnhancementVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SilhouetteEnhancementVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SilhouetteEnhancementVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SingleAxisHingeJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        return

    def setAnchorPoint(self, anchorPoint_ = [0, 0, 0]):
        super(SingleAxisHingeJointObject, self).setAnchorPoint(anchorPoint_)
        if type(anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.anchorPoint_ = anchorPoint_

    def getAnchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_


    def getAngle(self):
        if type(self.angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angle_


    def getAngleRate(self):
        if type(self.angleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angleRate_

    def setAxis(self, axis_ = [0, 0, 0]):
        super(SingleAxisHingeJointObject, self).setAxis(axis_)
        if type(axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis_ = axis_

    def getAxis(self):
        if type(self.axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis_

    def setBody1(self, body1_ = None):
        super(SingleAxisHingeJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def getBody1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_

    def setBody2(self, body2_ = None):
        super(SingleAxisHingeJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def getBody2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(SingleAxisHingeJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMaxAngle(self, maxAngle_ = 3.141592653):
        super(SingleAxisHingeJointObject, self).setMaxAngle(maxAngle_)
        if type(maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxAngle_ = maxAngle_

    def getMaxAngle(self):
        if type(self.maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle_

    def setMetadata(self, metadata_ = None):
        super(SingleAxisHingeJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinAngle(self, minAngle_ = -3.141592653):
        super(SingleAxisHingeJointObject, self).setMinAngle(minAngle_)
        if type(minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.minAngle_ = minAngle_

    def getMinAngle(self):
        if type(self.minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle_

    def setStopBounce(self, stopBounce_ = 0):
        super(SingleAxisHingeJointObject, self).setStopBounce(stopBounce_)
        if type(stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stopBounce_ = stopBounce_

    def getStopBounce(self):
        if type(self.stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopBounce_

    def setStopErrorCorrection(self, stopErrorCorrection_ = 0.8):
        super(SingleAxisHingeJointObject, self).setStopErrorCorrection(stopErrorCorrection_)
        if type(stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stopErrorCorrection_ = stopErrorCorrection_

    def getStopErrorCorrection(self):
        if type(self.stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopErrorCorrection_

    def setDEF(self, DEF_):
        super(SingleAxisHingeJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SingleAxisHingeJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SingleAxisHingeJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SliderJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        return

    def setAxis(self, axis_ = [0, 1, 0]):
        super(SliderJointObject, self).setAxis(axis_)
        if type(axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis_ = axis_

    def getAxis(self):
        if type(self.axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis_

    def setBody1(self, body1_ = None):
        super(SliderJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def setBody2(self, body2_ = None):
        super(SliderJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(SliderJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMaxSeparation(self, maxSeparation_ = 1):
        super(SliderJointObject, self).setMaxSeparation(maxSeparation_)
        if type(maxSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.maxSeparation_ = maxSeparation_

    def getMaxSeparation(self):
        if type(self.maxSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxSeparation_

    def setMetadata(self, metadata_ = None):
        super(SliderJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinSeparation(self, minSeparation_ = 0):
        super(SliderJointObject, self).setMinSeparation(minSeparation_)
        if type(minSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.minSeparation_ = minSeparation_

    def getMinSeparation(self):
        if type(self.minSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minSeparation_


    def getSeparation(self):
        if type(self.separation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.separation_


    def getSeparationRate(self):
        if type(self.separationRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.separationRate_

    def setSliderForce(self, sliderForce_ = 0):
        super(SliderJointObject, self).setSliderForce(sliderForce_)
        if type(sliderForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.sliderForce_ = sliderForce_

    def getSliderForce(self):
        if type(self.sliderForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.sliderForce_

    def setStopBounce(self, stopBounce_ = 0):
        super(SliderJointObject, self).setStopBounce(stopBounce_)
        if type(stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stopBounce_ = stopBounce_

    def getStopBounce(self):
        if type(self.stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopBounce_

    def setStopErrorCorrection(self, stopErrorCorrection_ = 1):
        super(SliderJointObject, self).setStopErrorCorrection(stopErrorCorrection_)
        if type(stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.stopErrorCorrection_ = stopErrorCorrection_

    def getStopErrorCorrection(self):
        if type(self.stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopErrorCorrection_

    def setDEF(self, DEF_):
        super(SliderJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SliderJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SliderJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SoundObject(X3DSoundNode):
    def __init__(self, **kwargs):
        if type(spatialize_) is not SFBool:
            raise InvalidFieldTypeException()
        self.spatialize_ = kwargs.pop("spatialize", True)
        return

    def setDirection(self, direction_ = [0, 0, 1]):
        super(SoundObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setIntensity(self, intensity_ = 1):
        super(SoundObject, self).setIntensity(intensity_)
        if type(intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensity_ < 0:
                raise InvalidFieldValueException()
        if intensity_ > 1:
                raise InvalidFieldValueException()
        self.intensity_ = intensity_

    def getIntensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def setLocation(self, location_ = [0, 0, 0]):
        super(SoundObject, self).setLocation(location_)
        if type(location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.location_ = location_

    def getLocation(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def setMaxBack(self, maxBack_ = 10):
        super(SoundObject, self).setMaxBack(maxBack_)
        if type(maxBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        if maxBack_ < 0:
                raise InvalidFieldValueException()
        self.maxBack_ = maxBack_

    def getMaxBack(self):
        if type(self.maxBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxBack_

    def setMaxFront(self, maxFront_ = 10):
        super(SoundObject, self).setMaxFront(maxFront_)
        if type(maxFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        if maxFront_ < 0:
                raise InvalidFieldValueException()
        self.maxFront_ = maxFront_

    def getMaxFront(self):
        if type(self.maxFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxFront_

    def setMetadata(self, metadata_ = None):
        super(SoundObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinBack(self, minBack_ = 1):
        super(SoundObject, self).setMinBack(minBack_)
        if type(minBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        if minBack_ < 0:
                raise InvalidFieldValueException()
        self.minBack_ = minBack_

    def getMinBack(self):
        if type(self.minBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBack_

    def setMinFront(self, minFront_ = 1):
        super(SoundObject, self).setMinFront(minFront_)
        if type(minFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        if minFront_ < 0:
                raise InvalidFieldValueException()
        self.minFront_ = minFront_

    def getMinFront(self):
        if type(self.minFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minFront_

    def setPriority(self, priority_ = 0):
        super(SoundObject, self).setPriority(priority_)
        if type(priority_) is not SFFloat:
            raise InvalidFieldTypeException()
        if priority_ < 0:
                raise InvalidFieldValueException()
        if priority_ > 1:
                raise InvalidFieldValueException()
        self.priority_ = priority_

    def getPriority(self):
        if type(self.priority_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.priority_

    def setSource(self, source_ = None):
        super(SoundObject, self).setSource(source_)
        if type(source_) is not SFNode:
            raise InvalidFieldTypeException()
        self.source_ = source_

    def getSource(self):
        if type(self.source_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.source_

    def setDEF(self, DEF_):
        super(SoundObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SoundObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SoundObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SphereObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setMetadata(self, metadata_ = None):
        super(SphereObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(SphereObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SphereObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SphereObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SphereSensorObject(X3DDragSensorNode):
    def __init__(self, **kwargs):
        return

    def setAutoOffset(self, autoOffset_ = True):
        super(SphereSensorObject, self).setAutoOffset(autoOffset_)
        if type(autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoOffset_ = autoOffset_

    def isAutoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def setDescription(self, description_):
        super(SphereSensorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(SphereSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(SphereSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOffset(self, offset_ = [0, 1, 0, 0]):
        super(SphereSensorObject, self).setOffset(offset_)
        if type(offset_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.offset_ = offset_

    def getOffset(self):
        if type(self.offset_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.offset_


    def getRotation_changed(self):
        if type(self.rotation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_changed_


    def getTrackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def setDEF(self, DEF_):
        super(SphereSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SphereSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SphereSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplinePositionInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def setKey(self, key_):
        super(SplinePositionInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(SplinePositionInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setKeyVelocity(self, keyVelocity_):
        super(SplinePositionInterpolatorObject, self).setKeyVelocity(keyVelocity_)
        if type(keyVelocity_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.keyVelocity_ = keyVelocity_

    def getKeyVelocity(self):
        if type(self.keyVelocity_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def setMetadata(self, metadata_ = None):
        super(SplinePositionInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormalizeVelocity(self, normalizeVelocity_ = False):
        super(SplinePositionInterpolatorObject, self).setNormalizeVelocity(normalizeVelocity_)
        if type(normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalizeVelocity_ = normalizeVelocity_

    def isNormalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, _fraction_):
        super(SplinePositionInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(SplinePositionInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SplinePositionInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SplinePositionInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplinePositionInterpolator2DObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def setKey(self, key_):
        super(SplinePositionInterpolator2DObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(SplinePositionInterpolator2DObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setKeyVelocity(self, keyVelocity_):
        super(SplinePositionInterpolator2DObject, self).setKeyVelocity(keyVelocity_)
        if type(keyVelocity_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.keyVelocity_ = keyVelocity_

    def getKeyVelocity(self):
        if type(self.keyVelocity_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def setMetadata(self, metadata_ = None):
        super(SplinePositionInterpolator2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormalizeVelocity(self, normalizeVelocity_ = False):
        super(SplinePositionInterpolator2DObject, self).setNormalizeVelocity(normalizeVelocity_)
        if type(normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalizeVelocity_ = normalizeVelocity_

    def isNormalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, _fraction_):
        super(SplinePositionInterpolator2DObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(SplinePositionInterpolator2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SplinePositionInterpolator2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SplinePositionInterpolator2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplineScalarInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def setKey(self, key_):
        super(SplineScalarInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(SplineScalarInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setKeyVelocity(self, keyVelocity_):
        super(SplineScalarInterpolatorObject, self).setKeyVelocity(keyVelocity_)
        if type(keyVelocity_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.keyVelocity_ = keyVelocity_

    def getKeyVelocity(self):
        if type(self.keyVelocity_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def setMetadata(self, metadata_ = None):
        super(SplineScalarInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormalizeVelocity(self, normalizeVelocity_ = False):
        super(SplineScalarInterpolatorObject, self).setNormalizeVelocity(normalizeVelocity_)
        if type(normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalizeVelocity_ = normalizeVelocity_

    def isNormalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, _fraction_):
        super(SplineScalarInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(SplineScalarInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SplineScalarInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SplineScalarInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SpotLightObject(X3DLightNode):
    def __init__(self, **kwargs):
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ < 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 100)
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0):
        super(SpotLightObject, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setAttenuation(self, attenuation_ = [1, 0, 0]):
        super(SpotLightObject, self).setAttenuation(attenuation_)
        if type(attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if attenuation_ < 0:
                raise InvalidFieldValueException()
        self.attenuation_ = attenuation_

    def getAttenuation(self):
        if type(self.attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.attenuation_

    def setBeamWidth(self, beamWidth_ = 0.7854):
        super(SpotLightObject, self).setBeamWidth(beamWidth_)
        if type(beamWidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        if beamWidth_ > 1.570796:
                raise InvalidFieldValueException()
        if beamWidth_ <= 0:
                raise InvalidFieldValueException()
        self.beamWidth_ = beamWidth_

    def getBeamWidth(self):
        if type(self.beamWidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.beamWidth_

    def setColor(self, color_ = [1, 1, 1]):
        super(SpotLightObject, self).setColor(color_)
        if type(color_) is not SFColor:
            raise InvalidFieldTypeException()
        if color_ < 0:
                raise InvalidFieldValueException()
        if color_ > 1:
                raise InvalidFieldValueException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def setCutOffAngle(self, cutOffAngle_ = 1.570796):
        super(SpotLightObject, self).setCutOffAngle(cutOffAngle_)
        if type(cutOffAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if cutOffAngle_ > 1.570796:
                raise InvalidFieldValueException()
        if cutOffAngle_ <= 0:
                raise InvalidFieldValueException()
        self.cutOffAngle_ = cutOffAngle_

    def getCutOffAngle(self):
        if type(self.cutOffAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.cutOffAngle_

    def setDirection(self, direction_ = [0, 0, -1]):
        super(SpotLightObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setGlobal(self, global_ = True):
        super(SpotLightObject, self).setGlobal(global_)
        if type(global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.global_ = global_

    def isGlobal(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def setIntensity(self, intensity_ = 1):
        super(SpotLightObject, self).setIntensity(intensity_)
        if type(intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if intensity_ < 0:
                raise InvalidFieldValueException()
        if intensity_ > 1:
                raise InvalidFieldValueException()
        self.intensity_ = intensity_

    def getIntensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def setLocation(self, location_ = [0, 0, 0]):
        super(SpotLightObject, self).setLocation(location_)
        if type(location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.location_ = location_

    def getLocation(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def setMetadata(self, metadata_ = None):
        super(SpotLightObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOn(self, on_ = True):
        super(SpotLightObject, self).setOn(on_)
        if type(on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.on_ = on_

    def isOn(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def setDEF(self, DEF_):
        super(SpotLightObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SpotLightObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SpotLightObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SquadOrientationInterpolatorObject(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        return

    def setKey(self, key_):
        super(SquadOrientationInterpolatorObject, self).setKey(key_)
        if type(key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.key_ = key_

    def getKey(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def setKeyValue(self, keyValue_):
        super(SquadOrientationInterpolatorObject, self).setKeyValue(keyValue_)
        if type(keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.keyValue_ = keyValue_

    def getKeyValue(self):
        if type(self.keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def setMetadata(self, metadata_ = None):
        super(SquadOrientationInterpolatorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormalizeVelocity(self, normalizeVelocity_ = False):
        super(SquadOrientationInterpolatorObject, self).setNormalizeVelocity(normalizeVelocity_)
        if type(normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalizeVelocity_ = normalizeVelocity_

    def isNormalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, _fraction_):
        super(SquadOrientationInterpolatorObject, self).set_fraction(_fraction_)
        if type(_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self._fraction_ = _fraction_

    def getValue_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(SquadOrientationInterpolatorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SquadOrientationInterpolatorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SquadOrientationInterpolatorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class StaticGroupObject(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = kwargs.pop("children")
        return

    def setMetadata(self, metadata_ = None):
        super(StaticGroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(StaticGroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(StaticGroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(StaticGroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class StringSensorObject(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        return

    def setDeletionAllowed(self, deletionAllowed_ = True):
        super(StringSensorObject, self).setDeletionAllowed(deletionAllowed_)
        if type(deletionAllowed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.deletionAllowed_ = deletionAllowed_

    def isDeletionAllowed(self):
        if type(self.deletionAllowed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.deletionAllowed_

    def setEnabled(self, enabled_ = True):
        super(StringSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getEnteredText(self):
        if type(self.enteredText_) is not SFString:
            raise InvalidFieldTypeException()
        return self.enteredText_


    def getFinalText(self):
        if type(self.finalText_) is not SFString:
            raise InvalidFieldTypeException()
        return self.finalText_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(StringSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(StringSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(StringSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(StringSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SurfaceEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(surface_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surface_ = kwargs.pop("surface", None)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setMass(self, mass_ = 0):
        super(SurfaceEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(SurfaceEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, _coordIndex_):
        super(SurfaceEmitterObject, self).set_coordIndex(_coordIndex_)
        if type(_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _coordIndex_ < -1:
                raise InvalidFieldValueException()
        self._coordIndex_ = _coordIndex_
    def setSpeed(self, speed_ = 0):
        super(SurfaceEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(SurfaceEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(SurfaceEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SurfaceEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SurfaceEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SwitchObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(SwitchObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(SwitchObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(SwitchObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(SwitchObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setWhichChoice(self, whichChoice_ = -1):
        super(SwitchObject, self).setWhichChoice(whichChoice_)
        if type(whichChoice_) is not SFInt32:
            raise InvalidFieldTypeException()
        if whichChoice_ < -1:
                raise InvalidFieldValueException()
        self.whichChoice_ = whichChoice_

    def getWhichChoice(self):
        if type(self.whichChoice_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichChoice_

    def setDEF(self, DEF_):
        super(SwitchObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(SwitchObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(SwitchObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TexCoordChaser2DObject(X3DChaserNode):
    def __init__(self, **kwargs):
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination")
        if type(initialValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue")
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(TexCoordChaser2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(TexCoordChaser2DObject, self).set_destination(_destination_)
        if type(_destination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(TexCoordChaser2DObject, self).set_value(_value_)
        if type(_value_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._value_ = _value_

    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(TexCoordChaser2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TexCoordChaser2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TexCoordChaser2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TexCoordDamper2DObject(X3DDamperNode):
    def __init__(self, **kwargs):
        if type(initialDestination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination")
        if type(initialValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(TexCoordDamper2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, _destination_):
        super(TexCoordDamper2DObject, self).set_destination(_destination_)
        if type(_destination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._destination_ = _destination_
    def set_value(self, _value_):
        super(TexCoordDamper2DObject, self).set_value(_value_)
        if type(_value_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self._value_ = _value_
    def setTau(self, tau_ = 0.3):
        super(TexCoordDamper2DObject, self).setTau(tau_)
        if type(tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if tau_ < 0:
                raise InvalidFieldValueException()
        self.tau_ = tau_

    def getTau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def setTolerance(self, tolerance_ = -1):
        super(TexCoordDamper2DObject, self).setTolerance(tolerance_)
        if type(tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.tolerance_ = tolerance_

    def getTolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def getValue_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def setDEF(self, DEF_):
        super(TexCoordDamper2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TexCoordDamper2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TexCoordDamper2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def setFontStyle(self, fontStyle_ = None):
        super(TextObject, self).setFontStyle(fontStyle_)
        if type(fontStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fontStyle_ = fontStyle_

    def getFontStyle(self):
        if type(self.fontStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fontStyle_

    def setLength(self, length_):
        super(TextObject, self).setLength(length_)
        if type(length_) is not MFFloat:
            raise InvalidFieldTypeException()
        if length_ < 0:
                raise InvalidFieldValueException()
        self.length_ = length_

    def getLength(self):
        if type(self.length_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.length_


    def getLineBounds(self):
        if type(self.lineBounds_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.lineBounds_

    def setMaxExtent(self, maxExtent_ = 0.0):
        super(TextObject, self).setMaxExtent(maxExtent_)
        if type(maxExtent_) is not SFFloat:
            raise InvalidFieldTypeException()
        if maxExtent_ < 0:
                raise InvalidFieldValueException()
        self.maxExtent_ = maxExtent_

    def getMaxExtent(self):
        if type(self.maxExtent_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxExtent_

    def setMetadata(self, metadata_ = None):
        super(TextObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getOrigin(self):
        if type(self.origin_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.origin_

    def setString(self, string_):
        super(TextObject, self).setString(string_)
        if type(string_) is not MFString:
            raise InvalidFieldTypeException()
        self.string_ = string_

    def getString(self):
        if type(self.string_) is not MFString:
            raise InvalidFieldTypeException()
        return self.string_


    def getTextBounds(self):
        if type(self.textBounds_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.textBounds_

    def setDEF(self, DEF_):
        super(TextObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureBackgroundObject(X3DBackgroundNode):
    def __init__(self, **kwargs):
        return

    def setBackTexture(self, backTexture_ = None):
        super(TextureBackgroundObject, self).setBackTexture(backTexture_)
        if type(backTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.backTexture_ = backTexture_

    def getBackTexture(self):
        if type(self.backTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.backTexture_


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setBottomTexture(self, bottomTexture_ = None):
        super(TextureBackgroundObject, self).setBottomTexture(bottomTexture_)
        if type(bottomTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.bottomTexture_ = bottomTexture_

    def getBottomTexture(self):
        if type(self.bottomTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.bottomTexture_

    def setFrontTexture(self, frontTexture_ = None):
        super(TextureBackgroundObject, self).setFrontTexture(frontTexture_)
        if type(frontTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.frontTexture_ = frontTexture_

    def getFrontTexture(self):
        if type(self.frontTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.frontTexture_

    def setGroundAngle(self, groundAngle_):
        super(TextureBackgroundObject, self).setGroundAngle(groundAngle_)
        if type(groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if groundAngle_ < 0:
                raise InvalidFieldValueException()
        if groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.groundAngle_ = groundAngle_

    def getGroundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def setGroundColor(self, groundColor_):
        super(TextureBackgroundObject, self).setGroundColor(groundColor_)
        if type(groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if groundColor_ < 0:
                raise InvalidFieldValueException()
        if groundColor_ > 1:
                raise InvalidFieldValueException()
        self.groundColor_ = groundColor_

    def getGroundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setLeftTexture(self, leftTexture_ = None):
        super(TextureBackgroundObject, self).setLeftTexture(leftTexture_)
        if type(leftTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.leftTexture_ = leftTexture_

    def getLeftTexture(self):
        if type(self.leftTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.leftTexture_

    def setMetadata(self, metadata_ = None):
        super(TextureBackgroundObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRightTexture(self, rightTexture_ = None):
        super(TextureBackgroundObject, self).setRightTexture(rightTexture_)
        if type(rightTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.rightTexture_ = rightTexture_

    def getRightTexture(self):
        if type(self.rightTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.rightTexture_

    def set_bind(self, _bind_):
        super(TextureBackgroundObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setSkyAngle(self, skyAngle_):
        super(TextureBackgroundObject, self).setSkyAngle(skyAngle_)
        if type(skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if skyAngle_ < 0:
                raise InvalidFieldValueException()
        if skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.skyAngle_ = skyAngle_

    def getSkyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def setSkyColor(self, skyColor_ = [0, 0, 0]):
        super(TextureBackgroundObject, self).setSkyColor(skyColor_)
        if type(skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if skyColor_ < 0:
                raise InvalidFieldValueException()
        if skyColor_ > 1:
                raise InvalidFieldValueException()
        self.skyColor_ = skyColor_

    def getSkyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def setTopTexture(self, topTexture_ = None):
        super(TextureBackgroundObject, self).setTopTexture(topTexture_)
        if type(topTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.topTexture_ = topTexture_

    def getTopTexture(self):
        if type(self.topTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.topTexture_

    def setTransparency(self, transparency_ = 0):
        super(TextureBackgroundObject, self).setTransparency(transparency_)
        if type(transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if transparency_ < 0:
                raise InvalidFieldValueException()
        if transparency_ > 1:
                raise InvalidFieldValueException()
        self.transparency_ = transparency_

    def getTransparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def setDEF(self, DEF_):
        super(TextureBackgroundObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureBackgroundObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureBackgroundObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinateObject(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(TextureCoordinateObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(TextureCoordinateObject, self).setPoint(point_)
        if type(point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(TextureCoordinateObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureCoordinateObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureCoordinateObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinate3DObject(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(TextureCoordinate3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(TextureCoordinate3DObject, self).setPoint(point_)
        if type(point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(TextureCoordinate3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureCoordinate3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureCoordinate3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinate4DObject(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(TextureCoordinate4DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPoint(self, point_):
        super(TextureCoordinate4DObject, self).setPoint(point_)
        if type(point_) is not MFVec4f:
            raise InvalidFieldTypeException()
        self.point_ = point_

    def getPoint(self):
        if type(self.point_) is not MFVec4f:
            raise InvalidFieldTypeException()
        return self.point_

    def setDEF(self, DEF_):
        super(TextureCoordinate4DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureCoordinate4DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureCoordinate4DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinateGeneratorObject(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(TextureCoordinateGeneratorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMode(self, mode_ = "SPHERE"):
        super(TextureCoordinateGeneratorObject, self).setMode(mode_)
        if type(mode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'SPHERE' == mode_:
            pass
        elif 'CAMERASPACENORMAL' == mode_:
            pass
        elif 'CAMERASPACEPOSITION' == mode_:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == mode_:
            pass
        elif 'SPHERE-LOCAL' == mode_:
            pass
        elif 'COORD' == mode_:
            pass
        elif 'COORD-EYE' == mode_:
            pass
        elif 'NOISE' == mode_:
            pass
        elif 'NOISE-EYE' == mode_:
            pass
        elif 'SPHERE-REFLECT' == mode_:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == mode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.mode_ = mode_

    def getMode(self):
        if type(self.mode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.mode_

    def setParameter(self, parameter_):
        super(TextureCoordinateGeneratorObject, self).setParameter(parameter_)
        if type(parameter_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.parameter_ = parameter_

    def getParameter(self):
        if type(self.parameter_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.parameter_

    def setDEF(self, DEF_):
        super(TextureCoordinateGeneratorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureCoordinateGeneratorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureCoordinateGeneratorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TexturePropertiesObject(X3DNode):
    def __init__(self, **kwargs):
        if type(generateMipMaps_) is not SFBool:
            raise InvalidFieldTypeException()
        self.generateMipMaps_ = kwargs.pop("generateMipMaps", False)
        return

    def setAnisotropicDegree(self, anisotropicDegree_ = 1):
        super(TexturePropertiesObject, self).setAnisotropicDegree(anisotropicDegree_)
        if type(anisotropicDegree_) is not SFFloat:
            raise InvalidFieldTypeException()
        if anisotropicDegree_ < 1:
                raise InvalidFieldValueException()
        self.anisotropicDegree_ = anisotropicDegree_

    def getAnisotropicDegree(self):
        if type(self.anisotropicDegree_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.anisotropicDegree_

    def setBorderColor(self, borderColor_ = [0, 0, 0, 0]):
        super(TexturePropertiesObject, self).setBorderColor(borderColor_)
        if type(borderColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if borderColor_ < 0:
                raise InvalidFieldValueException()
        if borderColor_ > 1:
                raise InvalidFieldValueException()
        self.borderColor_ = borderColor_

    def getBorderColor(self):
        if type(self.borderColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.borderColor_

    def setBorderWidth(self, borderWidth_ = 0):
        super(TexturePropertiesObject, self).setBorderWidth(borderWidth_)
        if type(borderWidth_) is not SFInt32:
            raise InvalidFieldTypeException()
        if borderWidth_ < 0:
                raise InvalidFieldValueException()
        self.borderWidth_ = borderWidth_

    def getBorderWidth(self):
        if type(self.borderWidth_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.borderWidth_

    def setBoundaryModeR(self, boundaryModeR_ = "REPEAT"):
        super(TexturePropertiesObject, self).setBoundaryModeR(boundaryModeR_)
        if type(boundaryModeR_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == boundaryModeR_:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeR_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeR_:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeR_:
            pass
        elif 'REPEAT' == boundaryModeR_:
            pass
        else:
            raise InvalidFieldValueException()
        self.boundaryModeR_ = boundaryModeR_

    def getBoundaryModeR(self):
        if type(self.boundaryModeR_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeR_

    def setBoundaryModeS(self, boundaryModeS_ = "REPEAT"):
        super(TexturePropertiesObject, self).setBoundaryModeS(boundaryModeS_)
        if type(boundaryModeS_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == boundaryModeS_:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeS_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeS_:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeS_:
            pass
        elif 'REPEAT' == boundaryModeS_:
            pass
        else:
            raise InvalidFieldValueException()
        self.boundaryModeS_ = boundaryModeS_

    def getBoundaryModeS(self):
        if type(self.boundaryModeS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeS_

    def setBoundaryModeT(self, boundaryModeT_ = "REPEAT"):
        super(TexturePropertiesObject, self).setBoundaryModeT(boundaryModeT_)
        if type(boundaryModeT_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == boundaryModeT_:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeT_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeT_:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeT_:
            pass
        elif 'REPEAT' == boundaryModeT_:
            pass
        else:
            raise InvalidFieldValueException()
        self.boundaryModeT_ = boundaryModeT_

    def getBoundaryModeT(self):
        if type(self.boundaryModeT_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeT_

    def setMagnificationFilter(self, magnificationFilter_ = "FASTEST"):
        super(TexturePropertiesObject, self).setMagnificationFilter(magnificationFilter_)
        if type(magnificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        if 'AVG_PIXEL' == magnificationFilter_:
            pass
        elif 'DEFAULT' == magnificationFilter_:
            pass
        elif 'FASTEST' == magnificationFilter_:
            pass
        elif 'NEAREST_PIXEL' == magnificationFilter_:
            pass
        elif 'NICEST' == magnificationFilter_:
            pass
        else:
            raise InvalidFieldValueException()
        self.magnificationFilter_ = magnificationFilter_

    def getMagnificationFilter(self):
        if type(self.magnificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        return self.magnificationFilter_

    def setMetadata(self, metadata_ = None):
        super(TexturePropertiesObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setMinificationFilter(self, minificationFilter_ = "FASTEST"):
        super(TexturePropertiesObject, self).setMinificationFilter(minificationFilter_)
        if type(minificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        if 'AVG_PIXEL' == minificationFilter_:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == minificationFilter_:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == minificationFilter_:
            pass
        elif 'DEFAULT' == minificationFilter_:
            pass
        elif 'FASTEST' == minificationFilter_:
            pass
        elif 'NEAREST_PIXEL' == minificationFilter_:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == minificationFilter_:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == minificationFilter_:
            pass
        elif 'NICEST' == minificationFilter_:
            pass
        else:
            raise InvalidFieldValueException()
        self.minificationFilter_ = minificationFilter_

    def getMinificationFilter(self):
        if type(self.minificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        return self.minificationFilter_

    def setTextureCompression(self, textureCompression_ = "FASTEST"):
        super(TexturePropertiesObject, self).setTextureCompression(textureCompression_)
        if type(textureCompression_) is not SFString:
            raise InvalidFieldTypeException()
        if 'DEFAULT' == textureCompression_:
            pass
        elif 'FASTEST' == textureCompression_:
            pass
        elif 'HIGH' == textureCompression_:
            pass
        elif 'LOW' == textureCompression_:
            pass
        elif 'MEDIUM' == textureCompression_:
            pass
        elif 'NICEST' == textureCompression_:
            pass
        else:
            raise InvalidFieldValueException()
        self.textureCompression_ = textureCompression_

    def getTextureCompression(self):
        if type(self.textureCompression_) is not SFString:
            raise InvalidFieldTypeException()
        return self.textureCompression_

    def setTexturePriority(self, texturePriority_ = 0):
        super(TexturePropertiesObject, self).setTexturePriority(texturePriority_)
        if type(texturePriority_) is not SFFloat:
            raise InvalidFieldTypeException()
        if texturePriority_ < 0:
                raise InvalidFieldValueException()
        if texturePriority_ > 1:
                raise InvalidFieldValueException()
        self.texturePriority_ = texturePriority_

    def getTexturePriority(self):
        if type(self.texturePriority_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.texturePriority_

    def setDEF(self, DEF_):
        super(TexturePropertiesObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TexturePropertiesObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TexturePropertiesObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransformObject(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        return

    def setCenter(self, center_ = [0, 0]):
        super(TextureTransformObject, self).setCenter(center_)
        if type(center_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.center_

    def setMetadata(self, metadata_ = None):
        super(TextureTransformObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRotation(self, rotation_ = 0):
        super(TextureTransformObject, self).setRotation(rotation_)
        if type(rotation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1]):
        super(TextureTransformObject, self).setScale(scale_)
        if type(scale_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setTranslation(self, translation_ = [0, 0]):
        super(TextureTransformObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(TextureTransformObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureTransformObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureTransformObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransform3DObject(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(TextureTransform3DObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setMetadata(self, metadata_ = None):
        super(TextureTransform3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(TextureTransform3DObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(TextureTransform3DObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(TextureTransform3DObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(TextureTransform3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureTransform3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureTransform3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransformMatrix3DObject(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        return

    def setMatrix(self, matrix_ = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]):
        super(TextureTransformMatrix3DObject, self).setMatrix(matrix_)
        if type(matrix_) is not SFMatrix4f:
            raise InvalidFieldTypeException()
        self.matrix_ = matrix_

    def getMatrix(self):
        if type(self.matrix_) is not SFMatrix4f:
            raise InvalidFieldTypeException()
        return self.matrix_

    def setMetadata(self, metadata_ = None):
        super(TextureTransformMatrix3DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(TextureTransformMatrix3DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TextureTransformMatrix3DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TextureTransformMatrix3DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TimeSensorObject(X3DSensorNode, X3DTimeDependentNode):
    def __init__(self, **kwargs):
        return

    def setCycleInterval(self, cycleInterval_ = 1.0):
        super(TimeSensorObject, self).setCycleInterval(cycleInterval_)
        if type(cycleInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if cycleInterval_ < 0:
                raise InvalidFieldValueException()
        self.cycleInterval_ = cycleInterval_

    def getCycleInterval(self):
        if type(self.cycleInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.cycleInterval_


    def getCycleTime(self):
        if type(self.cycleTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.cycleTime_


    def getElapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_

    def setEnabled(self, enabled_ = True):
        super(TimeSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getFraction_changed(self):
        if type(self.fraction_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fraction_changed_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isPaused(self):
        if type(self.Paused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Paused_

    def setLoop(self, loop_ = False):
        super(TimeSensorObject, self).setLoop(loop_)
        if type(loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.loop_ = loop_

    def isLoop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def setMetadata(self, metadata_ = None):
        super(TimeSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setPauseTime(self, pauseTime_ = 0):
        super(TimeSensorObject, self).setPauseTime(pauseTime_)
        if type(pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.pauseTime_ = pauseTime_

    def getPauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def setResumeTime(self, resumeTime_ = 0):
        super(TimeSensorObject, self).setResumeTime(resumeTime_)
        if type(resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.resumeTime_ = resumeTime_

    def getResumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def setStartTime(self, startTime_ = 0):
        super(TimeSensorObject, self).setStartTime(startTime_)
        if type(startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.startTime_ = startTime_

    def getStartTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def setStopTime(self, stopTime_ = 0):
        super(TimeSensorObject, self).setStopTime(stopTime_)
        if type(stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.stopTime_ = stopTime_

    def getStopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_


    def getTime(self):
        if type(self.time_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.time_

    def setDEF(self, DEF_):
        super(TimeSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TimeSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TimeSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TimeTriggerObject(X3DTriggerNode):
    def __init__(self, **kwargs):
        return

    def setMetadata(self, metadata_ = None):
        super(TimeTriggerObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, _boolean_):
        super(TimeTriggerObject, self).set_boolean(_boolean_)
        if type(_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self._boolean_ = _boolean_

    def getTriggerTime(self):
        if type(self.triggerTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.triggerTime_

    def setDEF(self, DEF_):
        super(TimeTriggerObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TimeTriggerObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TimeTriggerObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ToneMappedVolumeStyleObject(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        return

    def setCoolColor(self, coolColor_ = [0, 0, 1, 0]):
        super(ToneMappedVolumeStyleObject, self).setCoolColor(coolColor_)
        if type(coolColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if coolColor_ < 0:
                raise InvalidFieldValueException()
        if coolColor_ > 1:
                raise InvalidFieldValueException()
        self.coolColor_ = coolColor_

    def getCoolColor(self):
        if type(self.coolColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.coolColor_

    def setEnabled(self, enabled_ = True):
        super(ToneMappedVolumeStyleObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setMetadata(self, metadata_ = None):
        super(ToneMappedVolumeStyleObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSurfaceNormals(self, surfaceNormals_ = None):
        super(ToneMappedVolumeStyleObject, self).setSurfaceNormals(surfaceNormals_)
        if type(surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surfaceNormals_ = surfaceNormals_

    def getSurfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def setWarmColor(self, warmColor_ = [1, 1, 0, 0]):
        super(ToneMappedVolumeStyleObject, self).setWarmColor(warmColor_)
        if type(warmColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if warmColor_ < 0:
                raise InvalidFieldValueException()
        if warmColor_ > 1:
                raise InvalidFieldValueException()
        self.warmColor_ = warmColor_

    def getWarmColor(self):
        if type(self.warmColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.warmColor_

    def setDEF(self, DEF_):
        super(ToneMappedVolumeStyleObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ToneMappedVolumeStyleObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ToneMappedVolumeStyleObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TouchSensorObject(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        return

    def setDescription(self, description_):
        super(TouchSensorObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setEnabled(self, enabled_ = True):
        super(TouchSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getHitNormal_changed(self):
        if type(self.hitNormal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitNormal_changed_


    def getHitPoint_changed(self):
        if type(self.hitPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitPoint_changed_


    def getHitTexCoord_changed(self):
        if type(self.hitTexCoord_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.hitTexCoord_changed_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isOver(self):
        if type(self.Over_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Over_

    def setMetadata(self, metadata_ = None):
        super(TouchSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getTouchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def setDEF(self, DEF_):
        super(TouchSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TouchSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TouchSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TransformObject(X3DGroupingNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(TransformObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setCenter(self, center_ = [0, 0, 0]):
        super(TransformObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(TransformObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setMetadata(self, metadata_ = None):
        super(TransformObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(TransformObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setRotation(self, rotation_ = [0, 0, 1, 0]):
        super(TransformObject, self).setRotation(rotation_)
        if type(rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.rotation_ = rotation_

    def getRotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def setScale(self, scale_ = [1, 1, 1]):
        super(TransformObject, self).setScale(scale_)
        if type(scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.scale_ = scale_

    def getScale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def setScaleOrientation(self, scaleOrientation_ = [0, 0, 1, 0]):
        super(TransformObject, self).setScaleOrientation(scaleOrientation_)
        if type(scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.scaleOrientation_ = scaleOrientation_

    def getScaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def setTranslation(self, translation_ = [0, 0, 0]):
        super(TransformObject, self).setTranslation(translation_)
        if type(translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.translation_ = translation_

    def getTranslation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def setDEF(self, DEF_):
        super(TransformObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TransformObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TransformObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TransformSensorObject(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(TransformSensorObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setEnabled(self, enabled_ = True):
        super(TransformSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getEnterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def getExitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(TransformSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def getOrientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def getPosition_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def setTargetObject(self, targetObject_ = None):
        super(TransformSensorObject, self).setTargetObject(targetObject_)
        if type(targetObject_) is not SFNode:
            raise InvalidFieldTypeException()
        self.targetObject_ = targetObject_

    def getTargetObject(self):
        if type(self.targetObject_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.targetObject_

    def setDEF(self, DEF_):
        super(TransformSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TransformSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TransformSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TransmitterPduObject(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def address(self, ress_ = "localhost"):
        super(TransmitterPduObject, self).address(ress_)
        if type(ress_) is not SFString:
            raise InvalidFieldTypeException()
        self.ress_ = ress_

    def getAddress(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def setAntennaLocation(self, antennaLocation_ = [0, 0, 0]):
        super(TransmitterPduObject, self).setAntennaLocation(antennaLocation_)
        if type(antennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.antennaLocation_ = antennaLocation_

    def getAntennaLocation(self):
        if type(self.antennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.antennaLocation_

    def setAntennaPatternLength(self, antennaPatternLength_ = 0):
        super(TransmitterPduObject, self).setAntennaPatternLength(antennaPatternLength_)
        if type(antennaPatternLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.antennaPatternLength_ = antennaPatternLength_

    def getAntennaPatternLength(self):
        if type(self.antennaPatternLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.antennaPatternLength_

    def setAntennaPatternType(self, antennaPatternType_ = 0):
        super(TransmitterPduObject, self).setAntennaPatternType(antennaPatternType_)
        if type(antennaPatternType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.antennaPatternType_ = antennaPatternType_

    def getAntennaPatternType(self):
        if type(self.antennaPatternType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.antennaPatternType_

    def setApplicationID(self, applicationID_ = 0):
        super(TransmitterPduObject, self).setApplicationID(applicationID_)
        if type(applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.applicationID_ = applicationID_

    def getApplicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def setCryptoKeyID(self, cryptoKeyID_ = 0):
        super(TransmitterPduObject, self).setCryptoKeyID(cryptoKeyID_)
        if type(cryptoKeyID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.cryptoKeyID_ = cryptoKeyID_

    def getCryptoKeyID(self):
        if type(self.cryptoKeyID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.cryptoKeyID_

    def setCryptoSystem(self, cryptoSystem_ = 0):
        super(TransmitterPduObject, self).setCryptoSystem(cryptoSystem_)
        if type(cryptoSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.cryptoSystem_ = cryptoSystem_

    def getCryptoSystem(self):
        if type(self.cryptoSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.cryptoSystem_

    def setEnabled(self, enabled_ = True):
        super(TransmitterPduObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setEntityID(self, entityID_ = 0):
        super(TransmitterPduObject, self).setEntityID(entityID_)
        if type(entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.entityID_ = entityID_

    def getEntityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def setFrequency(self, frequency_ = 0):
        super(TransmitterPduObject, self).setFrequency(frequency_)
        if type(frequency_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.frequency_ = frequency_

    def getFrequency(self):
        if type(self.frequency_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.frequency_

    def setGeoCoords(self, geoCoords_ = [0, 0, 0]):
        super(TransmitterPduObject, self).setGeoCoords(geoCoords_)
        if type(geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoCoords_ = geoCoords_

    def getGeoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def setInputSource(self, inputSource_ = 0):
        super(TransmitterPduObject, self).setInputSource(inputSource_)
        if type(inputSource_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.inputSource_ = inputSource_

    def getInputSource(self):
        if type(self.inputSource_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.inputSource_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_


    def isNetworkReader(self):
        if type(self.NetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkReader_


    def isNetworkWriter(self):
        if type(self.NetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.NetworkWriter_


    def isRtpHeaderHeard(self):
        if type(self.RtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.RtpHeaderHeard_


    def isStandAlone(self):
        if type(self.StandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.StandAlone_

    def setLengthOfModulationParameters(self, lengthOfModulationParameters_ = 0):
        super(TransmitterPduObject, self).setLengthOfModulationParameters(lengthOfModulationParameters_)
        if type(lengthOfModulationParameters_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.lengthOfModulationParameters_ = lengthOfModulationParameters_

    def getLengthOfModulationParameters(self):
        if type(self.lengthOfModulationParameters_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.lengthOfModulationParameters_

    def setMetadata(self, metadata_ = None):
        super(TransmitterPduObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setModulationTypeDetail(self, modulationTypeDetail_ = 0):
        super(TransmitterPduObject, self).setModulationTypeDetail(modulationTypeDetail_)
        if type(modulationTypeDetail_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.modulationTypeDetail_ = modulationTypeDetail_

    def getModulationTypeDetail(self):
        if type(self.modulationTypeDetail_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeDetail_

    def setModulationTypeMajor(self, modulationTypeMajor_ = 0):
        super(TransmitterPduObject, self).setModulationTypeMajor(modulationTypeMajor_)
        if type(modulationTypeMajor_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.modulationTypeMajor_ = modulationTypeMajor_

    def getModulationTypeMajor(self):
        if type(self.modulationTypeMajor_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeMajor_

    def setModulationTypeSpreadSpectrum(self, modulationTypeSpreadSpectrum_ = 0):
        super(TransmitterPduObject, self).setModulationTypeSpreadSpectrum(modulationTypeSpreadSpectrum_)
        if type(modulationTypeSpreadSpectrum_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.modulationTypeSpreadSpectrum_ = modulationTypeSpreadSpectrum_

    def getModulationTypeSpreadSpectrum(self):
        if type(self.modulationTypeSpreadSpectrum_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeSpreadSpectrum_

    def setModulationTypeSystem(self, modulationTypeSystem_ = 0):
        super(TransmitterPduObject, self).setModulationTypeSystem(modulationTypeSystem_)
        if type(modulationTypeSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.modulationTypeSystem_ = modulationTypeSystem_

    def getModulationTypeSystem(self):
        if type(self.modulationTypeSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeSystem_

    def setMulticastRelayHost(self, multicastRelayHost_):
        super(TransmitterPduObject, self).setMulticastRelayHost(multicastRelayHost_)
        if type(multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.multicastRelayHost_ = multicastRelayHost_

    def getMulticastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def setMulticastRelayPort(self, multicastRelayPort_ = 0):
        super(TransmitterPduObject, self).setMulticastRelayPort(multicastRelayPort_)
        if type(multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.multicastRelayPort_ = multicastRelayPort_

    def getMulticastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def setNetworkMode(self, networkMode_ = "standAlone"):
        super(TransmitterPduObject, self).setNetworkMode(networkMode_)
        if type(networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == networkMode_:
            pass
        elif 'networkReader' == networkMode_:
            pass
        elif 'networkWriter' == networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.networkMode_ = networkMode_

    def getNetworkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def setPort(self, port_ = 0):
        super(TransmitterPduObject, self).setPort(port_)
        if type(port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.port_ = port_

    def getPort(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def setPower(self, power_ = 0.0):
        super(TransmitterPduObject, self).setPower(power_)
        if type(power_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.power_ = power_

    def getPower(self):
        if type(self.power_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.power_

    def setRadioEntityTypeCategory(self, radioEntityTypeCategory_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeCategory(radioEntityTypeCategory_)
        if type(radioEntityTypeCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeCategory_ = radioEntityTypeCategory_

    def getRadioEntityTypeCategory(self):
        if type(self.radioEntityTypeCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeCategory_

    def setRadioEntityTypeCountry(self, radioEntityTypeCountry_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeCountry(radioEntityTypeCountry_)
        if type(radioEntityTypeCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeCountry_ = radioEntityTypeCountry_

    def getRadioEntityTypeCountry(self):
        if type(self.radioEntityTypeCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeCountry_

    def setRadioEntityTypeDomain(self, radioEntityTypeDomain_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeDomain(radioEntityTypeDomain_)
        if type(radioEntityTypeDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeDomain_ = radioEntityTypeDomain_

    def getRadioEntityTypeDomain(self):
        if type(self.radioEntityTypeDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeDomain_

    def setRadioEntityTypeKind(self, radioEntityTypeKind_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeKind(radioEntityTypeKind_)
        if type(radioEntityTypeKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeKind_ = radioEntityTypeKind_

    def getRadioEntityTypeKind(self):
        if type(self.radioEntityTypeKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeKind_

    def setRadioEntityTypeNomenclature(self, radioEntityTypeNomenclature_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeNomenclature(radioEntityTypeNomenclature_)
        if type(radioEntityTypeNomenclature_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeNomenclature_ = radioEntityTypeNomenclature_

    def getRadioEntityTypeNomenclature(self):
        if type(self.radioEntityTypeNomenclature_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeNomenclature_

    def setRadioEntityTypeNomenclatureVersion(self, radioEntityTypeNomenclatureVersion_ = 0):
        super(TransmitterPduObject, self).setRadioEntityTypeNomenclatureVersion(radioEntityTypeNomenclatureVersion_)
        if type(radioEntityTypeNomenclatureVersion_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioEntityTypeNomenclatureVersion_ = radioEntityTypeNomenclatureVersion_

    def getRadioEntityTypeNomenclatureVersion(self):
        if type(self.radioEntityTypeNomenclatureVersion_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeNomenclatureVersion_

    def setRadioID(self, radioID_ = 0):
        super(TransmitterPduObject, self).setRadioID(radioID_)
        if type(radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.radioID_ = radioID_

    def getRadioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def setReadInterval(self, readInterval_ = 0.1):
        super(TransmitterPduObject, self).setReadInterval(readInterval_)
        if type(readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if readInterval_ < 0:
                raise InvalidFieldValueException()
        self.readInterval_ = readInterval_

    def getReadInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def setRelativeAntennaLocation(self, relativeAntennaLocation_ = [0, 0, 0]):
        super(TransmitterPduObject, self).setRelativeAntennaLocation(relativeAntennaLocation_)
        if type(relativeAntennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.relativeAntennaLocation_ = relativeAntennaLocation_

    def getRelativeAntennaLocation(self):
        if type(self.relativeAntennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.relativeAntennaLocation_

    def setSiteID(self, siteID_ = 0):
        super(TransmitterPduObject, self).setSiteID(siteID_)
        if type(siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.siteID_ = siteID_

    def getSiteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def getTimestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def setTransmitFrequencyBandwidth(self, transmitFrequencyBandwidth_ = 0):
        super(TransmitterPduObject, self).setTransmitFrequencyBandwidth(transmitFrequencyBandwidth_)
        if type(transmitFrequencyBandwidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.transmitFrequencyBandwidth_ = transmitFrequencyBandwidth_

    def getTransmitFrequencyBandwidth(self):
        if type(self.transmitFrequencyBandwidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transmitFrequencyBandwidth_

    def setTransmitState(self, transmitState_ = 0):
        super(TransmitterPduObject, self).setTransmitState(transmitState_)
        if type(transmitState_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.transmitState_ = transmitState_

    def getTransmitState(self):
        if type(self.transmitState_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitState_

    def setWhichGeometry(self, whichGeometry_ = 1):
        super(TransmitterPduObject, self).setWhichGeometry(whichGeometry_)
        if type(whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.whichGeometry_ = whichGeometry_

    def getWhichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def setWriteInterval(self, writeInterval_ = 1.0):
        super(TransmitterPduObject, self).setWriteInterval(writeInterval_)
        if type(writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if writeInterval_ < 0:
                raise InvalidFieldValueException()
        self.writeInterval_ = writeInterval_

    def getWriteInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def setDEF(self, DEF_):
        super(TransmitterPduObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TransmitterPduObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TransmitterPduObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleFanSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(TriangleFanSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(TriangleFanSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(TriangleFanSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFanCount(self, fanCount_):
        super(TriangleFanSetObject, self).setFanCount(fanCount_)
        if type(fanCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if fanCount_ < 3:
                raise InvalidFieldValueException()
        self.fanCount_ = fanCount_

    def getFanCount(self):
        if type(self.fanCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.fanCount_

    def setFogCoord(self, fogCoord_ = None):
        super(TriangleFanSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(TriangleFanSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(TriangleFanSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def setTexCoord(self, texCoord_ = None):
        super(TriangleFanSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(TriangleFanSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TriangleFanSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TriangleFanSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(TriangleSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(TriangleSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(TriangleSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(TriangleSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(TriangleSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(TriangleSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def setTexCoord(self, texCoord_ = None):
        super(TriangleSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(TriangleSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TriangleSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TriangleSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleSet2DObject(X3DGeometryNode):
    def __init__(self, **kwargs):
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def setMetadata(self, metadata_ = None):
        super(TriangleSet2DObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setVertices(self, vertices_):
        super(TriangleSet2DObject, self).setVertices(vertices_)
        if type(vertices_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.vertices_ = vertices_

    def getVertices(self):
        if type(self.vertices_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.vertices_

    def setDEF(self, DEF_):
        super(TriangleSet2DObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TriangleSet2DObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TriangleSet2DObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleStripSetObject(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def setAttrib(self, attrib_):
        super(TriangleStripSetObject, self).setAttrib(attrib_)
        if type(attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.attrib_ = attrib_

    def getAttrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def setColor(self, color_ = None):
        super(TriangleStripSetObject, self).setColor(color_)
        if type(color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.color_ = color_

    def getColor(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def setCoord(self, coord_ = None):
        super(TriangleStripSetObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setFogCoord(self, fogCoord_ = None):
        super(TriangleStripSetObject, self).setFogCoord(fogCoord_)
        if type(fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.fogCoord_ = fogCoord_

    def getFogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def setMetadata(self, metadata_ = None):
        super(TriangleStripSetObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setNormal(self, normal_ = None):
        super(TriangleStripSetObject, self).setNormal(normal_)
        if type(normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.normal_ = normal_

    def getNormal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def setStripCount(self, stripCount_):
        super(TriangleStripSetObject, self).setStripCount(stripCount_)
        if type(stripCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if stripCount_ < 3:
                raise InvalidFieldValueException()
        self.stripCount_ = stripCount_

    def getStripCount(self):
        if type(self.stripCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.stripCount_

    def setTexCoord(self, texCoord_ = None):
        super(TriangleStripSetObject, self).setTexCoord(texCoord_)
        if type(texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoord_ = texCoord_

    def getTexCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def setDEF(self, DEF_):
        super(TriangleStripSetObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TriangleStripSetObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TriangleStripSetObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TwoSidedMaterialObject(X3DMaterialNode):
    def __init__(self, **kwargs):
        return

    def setAmbientIntensity(self, ambientIntensity_ = 0.2):
        super(TwoSidedMaterialObject, self).setAmbientIntensity(ambientIntensity_)
        if type(ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.ambientIntensity_ = ambientIntensity_

    def getAmbientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def setBackAmbientIntensity(self, backAmbientIntensity_ = 0.2):
        super(TwoSidedMaterialObject, self).setBackAmbientIntensity(backAmbientIntensity_)
        if type(backAmbientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if backAmbientIntensity_ < 0:
                raise InvalidFieldValueException()
        if backAmbientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.backAmbientIntensity_ = backAmbientIntensity_

    def getBackAmbientIntensity(self):
        if type(self.backAmbientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backAmbientIntensity_

    def setBackDiffuseColor(self, backDiffuseColor_ = [0.8, 0.8, 0.8]):
        super(TwoSidedMaterialObject, self).setBackDiffuseColor(backDiffuseColor_)
        if type(backDiffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if backDiffuseColor_ < 0:
                raise InvalidFieldValueException()
        if backDiffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.backDiffuseColor_ = backDiffuseColor_

    def getBackDiffuseColor(self):
        if type(self.backDiffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backDiffuseColor_

    def setBackEmissiveColor(self, backEmissiveColor_ = [0, 0, 0]):
        super(TwoSidedMaterialObject, self).setBackEmissiveColor(backEmissiveColor_)
        if type(backEmissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if backEmissiveColor_ < 0:
                raise InvalidFieldValueException()
        if backEmissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.backEmissiveColor_ = backEmissiveColor_

    def getBackEmissiveColor(self):
        if type(self.backEmissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backEmissiveColor_

    def setBackShininess(self, backShininess_ = 0.2):
        super(TwoSidedMaterialObject, self).setBackShininess(backShininess_)
        if type(backShininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if backShininess_ < 0:
                raise InvalidFieldValueException()
        if backShininess_ > 1:
                raise InvalidFieldValueException()
        self.backShininess_ = backShininess_

    def getBackShininess(self):
        if type(self.backShininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backShininess_

    def setBackSpecularColor(self, backSpecularColor_ = [0, 0, 0]):
        super(TwoSidedMaterialObject, self).setBackSpecularColor(backSpecularColor_)
        if type(backSpecularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if backSpecularColor_ < 0:
                raise InvalidFieldValueException()
        if backSpecularColor_ > 1:
                raise InvalidFieldValueException()
        self.backSpecularColor_ = backSpecularColor_

    def getBackSpecularColor(self):
        if type(self.backSpecularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backSpecularColor_

    def setBackTransparency(self, backTransparency_ = 0):
        super(TwoSidedMaterialObject, self).setBackTransparency(backTransparency_)
        if type(backTransparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if backTransparency_ < 0:
                raise InvalidFieldValueException()
        if backTransparency_ > 1:
                raise InvalidFieldValueException()
        self.backTransparency_ = backTransparency_

    def getBackTransparency(self):
        if type(self.backTransparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backTransparency_

    def setDiffuseColor(self, diffuseColor_ = [0.8, 0.8, 0.8]):
        super(TwoSidedMaterialObject, self).setDiffuseColor(diffuseColor_)
        if type(diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if diffuseColor_ < 0:
                raise InvalidFieldValueException()
        if diffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.diffuseColor_ = diffuseColor_

    def getDiffuseColor(self):
        if type(self.diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.diffuseColor_

    def setEmissiveColor(self, emissiveColor_ = [0, 0, 0]):
        super(TwoSidedMaterialObject, self).setEmissiveColor(emissiveColor_)
        if type(emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if emissiveColor_ < 0:
                raise InvalidFieldValueException()
        if emissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.emissiveColor_ = emissiveColor_

    def getEmissiveColor(self):
        if type(self.emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.emissiveColor_

    def setMetadata(self, metadata_ = None):
        super(TwoSidedMaterialObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSeparateBackColor(self, separateBackColor_ = False):
        super(TwoSidedMaterialObject, self).setSeparateBackColor(separateBackColor_)
        if type(separateBackColor_) is not SFBool:
            raise InvalidFieldTypeException()
        self.separateBackColor_ = separateBackColor_

    def isSeparateBackColor(self):
        if type(self.separateBackColor_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.separateBackColor_

    def setShininess(self, shininess_ = 0.2):
        super(TwoSidedMaterialObject, self).setShininess(shininess_)
        if type(shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if shininess_ < 0:
                raise InvalidFieldValueException()
        if shininess_ > 1:
                raise InvalidFieldValueException()
        self.shininess_ = shininess_

    def getShininess(self):
        if type(self.shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.shininess_

    def setSpecularColor(self, specularColor_ = [0, 0, 0]):
        super(TwoSidedMaterialObject, self).setSpecularColor(specularColor_)
        if type(specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if specularColor_ < 0:
                raise InvalidFieldValueException()
        if specularColor_ > 1:
                raise InvalidFieldValueException()
        self.specularColor_ = specularColor_

    def getSpecularColor(self):
        if type(self.specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.specularColor_

    def setTransparency(self, transparency_ = 0):
        super(TwoSidedMaterialObject, self).setTransparency(transparency_)
        if type(transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if transparency_ < 0:
                raise InvalidFieldValueException()
        if transparency_ > 1:
                raise InvalidFieldValueException()
        self.transparency_ = transparency_

    def getTransparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def setDEF(self, DEF_):
        super(TwoSidedMaterialObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(TwoSidedMaterialObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(TwoSidedMaterialObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class UniversalJointObject(X3DRigidJointNode):
    def __init__(self, **kwargs):
        return

    def setAnchorPoint(self, anchorPoint_ = [0, 0, 0]):
        super(UniversalJointObject, self).setAnchorPoint(anchorPoint_)
        if type(anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.anchorPoint_ = anchorPoint_

    def getAnchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def setAxis1(self, axis1_ = [0, 0, 0]):
        super(UniversalJointObject, self).setAxis1(axis1_)
        if type(axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis1_ = axis1_

    def getAxis1(self):
        if type(self.axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis1_

    def setAxis2(self, axis2_ = [0, 0, 0]):
        super(UniversalJointObject, self).setAxis2(axis2_)
        if type(axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.axis2_ = axis2_

    def getAxis2(self):
        if type(self.axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis2_

    def setBody1(self, body1_ = None):
        super(UniversalJointObject, self).setBody1(body1_)
        if type(body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body1_ = body1_

    def getBody1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def getBody1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_


    def getBody1Axis(self):
        if type(self.body1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1Axis_

    def setBody2(self, body2_ = None):
        super(UniversalJointObject, self).setBody2(body2_)
        if type(body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.body2_ = body2_

    def getBody2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def getBody2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_


    def getBody2Axis(self):
        if type(self.body2Axis_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.body2Axis_

    def setForceOutput(self, forceOutput_ = "NONE"):
        super(UniversalJointObject, self).setForceOutput(forceOutput_)
        if type(forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == forceOutput_:
            pass
        elif '"NONE"' == forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.forceOutput_ = forceOutput_

    def getForceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def setMetadata(self, metadata_ = None):
        super(UniversalJointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setStop1Bounce(self, stop1Bounce_ = 0):
        super(UniversalJointObject, self).setStop1Bounce(stop1Bounce_)
        if type(stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if stop1Bounce_ < 0:
                raise InvalidFieldValueException()
        if stop1Bounce_ > 1:
                raise InvalidFieldValueException()
        self.stop1Bounce_ = stop1Bounce_

    def getStop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def setStop1ErrorCorrection(self, stop1ErrorCorrection_ = 0.8):
        super(UniversalJointObject, self).setStop1ErrorCorrection(stop1ErrorCorrection_)
        if type(stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if stop1ErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if stop1ErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.stop1ErrorCorrection_ = stop1ErrorCorrection_

    def getStop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def setStop2Bounce(self, stop2Bounce_ = 0):
        super(UniversalJointObject, self).setStop2Bounce(stop2Bounce_)
        if type(stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if stop2Bounce_ < 0:
                raise InvalidFieldValueException()
        if stop2Bounce_ > 1:
                raise InvalidFieldValueException()
        self.stop2Bounce_ = stop2Bounce_

    def getStop2Bounce(self):
        if type(self.stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2Bounce_

    def setStop2ErrorCorrection(self, stop2ErrorCorrection_ = 0.8):
        super(UniversalJointObject, self).setStop2ErrorCorrection(stop2ErrorCorrection_)
        if type(stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if stop2ErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if stop2ErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.stop2ErrorCorrection_ = stop2ErrorCorrection_

    def getStop2ErrorCorrection(self):
        if type(self.stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2ErrorCorrection_

    def setDEF(self, DEF_):
        super(UniversalJointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(UniversalJointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(UniversalJointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ViewpointObject(X3DViewpointNode):
    def __init__(self, **kwargs):
        return


    def getBindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def setCenterOfRotation(self, centerOfRotation_ = [0, 0, 0]):
        super(ViewpointObject, self).setCenterOfRotation(centerOfRotation_)
        if type(centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.centerOfRotation_ = centerOfRotation_

    def getCenterOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def setDescription(self, description_):
        super(ViewpointObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setFieldOfView(self, fieldOfView_ = 0.7854):
        super(ViewpointObject, self).setFieldOfView(fieldOfView_)
        if type(fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        if fieldOfView_ <= 0:
                raise InvalidFieldValueException()
        if fieldOfView_ >= 3.1416:
                raise InvalidFieldValueException()
        self.fieldOfView_ = fieldOfView_

    def getFieldOfView(self):
        if type(self.fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def isBound(self):
        if type(self.Bound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Bound_

    def setJump(self, jump_ = True):
        super(ViewpointObject, self).setJump(jump_)
        if type(jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.jump_ = jump_

    def isJump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def setMetadata(self, metadata_ = None):
        super(ViewpointObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setOrientation(self, orientation_ = [0, 0, 1, 0]):
        super(ViewpointObject, self).setOrientation(orientation_)
        if type(orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.orientation_ = orientation_

    def getOrientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def setPosition(self, position_ = [0, 0, 10]):
        super(ViewpointObject, self).setPosition(position_)
        if type(position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.position_ = position_

    def getPosition(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def setRetainUserOffsets(self, retainUserOffsets_ = False):
        super(ViewpointObject, self).setRetainUserOffsets(retainUserOffsets_)
        if type(retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.retainUserOffsets_ = retainUserOffsets_

    def isRetainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, _bind_):
        super(ViewpointObject, self).set_bind(_bind_)
        if type(_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self._bind_ = _bind_
    def setDEF(self, DEF_):
        super(ViewpointObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ViewpointObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ViewpointObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ViewpointGroupObject(X3DChildNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(ViewpointGroupObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setChildren(self, children_):
        super(ViewpointGroupObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setDescription(self, description_):
        super(ViewpointGroupObject, self).setDescription(description_)
        if type(description_) is not SFString:
            raise InvalidFieldTypeException()
        self.description_ = description_

    def getDescription(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def setDisplayed(self, displayed_ = True):
        super(ViewpointGroupObject, self).setDisplayed(displayed_)
        if type(displayed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.displayed_ = displayed_

    def isDisplayed(self):
        if type(self.displayed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.displayed_

    def setMetadata(self, metadata_ = None):
        super(ViewpointGroupObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRetainUserOffsets(self, retainUserOffsets_ = False):
        super(ViewpointGroupObject, self).setRetainUserOffsets(retainUserOffsets_)
        if type(retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.retainUserOffsets_ = retainUserOffsets_

    def isRetainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def setDEF(self, DEF_):
        super(ViewpointGroupObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ViewpointGroupObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ViewpointGroupObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ViewportObject(X3DViewportNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def addChildren(self, Children_):
        super(ViewportObject, self).addChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setChildren(self, children_):
        super(ViewportObject, self).setChildren(children_)
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setClipBoundary(self, clipBoundary_ = [0, 1, 0, 1]):
        super(ViewportObject, self).setClipBoundary(clipBoundary_)
        if type(clipBoundary_) is not MFFloat:
            raise InvalidFieldTypeException()
        if clipBoundary_ < 0:
                raise InvalidFieldValueException()
        if clipBoundary_ > 1:
                raise InvalidFieldValueException()
        self.clipBoundary_ = clipBoundary_

    def getClipBoundary(self):
        if type(self.clipBoundary_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.clipBoundary_

    def setMetadata(self, metadata_ = None):
        super(ViewportObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeChildren(self, Children_):
        super(ViewportObject, self).removeChildren(Children_)
        if type(Children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.Children_ = Children_
    def setDEF(self, DEF_):
        super(ViewportObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(ViewportObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(ViewportObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VisibilitySensorObject(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def setCenter(self, center_ = [0, 0, 0]):
        super(VisibilitySensorObject, self).setCenter(center_)
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = center_

    def getCenter(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def setEnabled(self, enabled_ = True):
        super(VisibilitySensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def getEnterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def getExitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMetadata(self, metadata_ = None):
        super(VisibilitySensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setDEF(self, DEF_):
        super(VisibilitySensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(VisibilitySensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(VisibilitySensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumeDataObject(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def setDimensions(self, dimensions_ = [1, 1, 1]):
        super(VolumeDataObject, self).setDimensions(dimensions_)
        if type(dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.dimensions_ = dimensions_

    def getDimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def setMetadata(self, metadata_ = None):
        super(VolumeDataObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setRenderStyle(self, renderStyle_ = None):
        super(VolumeDataObject, self).setRenderStyle(renderStyle_)
        if type(renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.renderStyle_ = renderStyle_

    def getRenderStyle(self):
        if type(self.renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def setVoxels(self, voxels_ = None):
        super(VolumeDataObject, self).setVoxels(voxels_)
        if type(voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.voxels_ = voxels_

    def getVoxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def setDEF(self, DEF_):
        super(VolumeDataObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(VolumeDataObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(VolumeDataObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumeEmitterObject(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(internal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.internal_ = kwargs.pop("internal", True)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def setCoord(self, coord_ = None):
        super(VolumeEmitterObject, self).setCoord(coord_)
        if type(coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.coord_ = coord_

    def getCoord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def setDirection(self, direction_ = [0, 1, 0]):
        super(VolumeEmitterObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if direction_ < -1:
                raise InvalidFieldValueException()
        if direction_ > 1:
                raise InvalidFieldValueException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setMass(self, mass_ = 0):
        super(VolumeEmitterObject, self).setMass(mass_)
        if type(mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if mass_ < 0:
                raise InvalidFieldValueException()
        self.mass_ = mass_

    def getMass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def setMetadata(self, metadata_ = None):
        super(VolumeEmitterObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, _coordIndex_):
        super(VolumeEmitterObject, self).set_coordIndex(_coordIndex_)
        if type(_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if _coordIndex_ < -1:
                raise InvalidFieldValueException()
        self._coordIndex_ = _coordIndex_
    def setSpeed(self, speed_ = 0):
        super(VolumeEmitterObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setVariation(self, variation_ = 0.25):
        super(VolumeEmitterObject, self).setVariation(variation_)
        if type(variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if variation_ < 0:
                raise InvalidFieldValueException()
        self.variation_ = variation_

    def getVariation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def setDEF(self, DEF_):
        super(VolumeEmitterObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(VolumeEmitterObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(VolumeEmitterObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumePickSensorObject(X3DPickSensorNode):
    def __init__(self, **kwargs):
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def setEnabled(self, enabled_ = True):
        super(VolumePickSensorObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def isActive(self):
        if type(self.Active_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.Active_

    def setMatchCriterion(self, matchCriterion_ = "MATCH_ANY"):
        super(VolumePickSensorObject, self).setMatchCriterion(matchCriterion_)
        if type(matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == matchCriterion_:
            pass
        elif 'MATCH_EVERY' == matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.matchCriterion_ = matchCriterion_

    def getMatchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def setMetadata(self, metadata_ = None):
        super(VolumePickSensorObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setObjectType(self, objectType_ = "ALL"):
        super(VolumePickSensorObject, self).setObjectType(objectType_)
        if type(objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == objectType_:
            pass
        elif '"NONE"' == objectType_:
            pass
        elif '"TERRAIN"' == objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.objectType_ = objectType_

    def getObjectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def getPickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def setPickingGeometry(self, pickingGeometry_ = None):
        super(VolumePickSensorObject, self).setPickingGeometry(pickingGeometry_)
        if type(pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.pickingGeometry_ = pickingGeometry_

    def getPickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def setPickTarget(self, pickTarget_):
        super(VolumePickSensorObject, self).setPickTarget(pickTarget_)
        if type(pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.pickTarget_ = pickTarget_

    def getPickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def setDEF(self, DEF_):
        super(VolumePickSensorObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(VolumePickSensorObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(VolumePickSensorObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class WindPhysicsModelObject(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        return

    def setDirection(self, direction_ = [1, 0, 0]):
        super(WindPhysicsModelObject, self).setDirection(direction_)
        if type(direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.direction_ = direction_

    def getDirection(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def setEnabled(self, enabled_ = True):
        super(WindPhysicsModelObject, self).setEnabled(enabled_)
        if type(enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.enabled_ = enabled_

    def isEnabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def setGustiness(self, gustiness_ = 0.1):
        super(WindPhysicsModelObject, self).setGustiness(gustiness_)
        if type(gustiness_) is not SFFloat:
            raise InvalidFieldTypeException()
        if gustiness_ < 0:
                raise InvalidFieldValueException()
        self.gustiness_ = gustiness_

    def getGustiness(self):
        if type(self.gustiness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.gustiness_

    def setMetadata(self, metadata_ = None):
        super(WindPhysicsModelObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setSpeed(self, speed_ = 0.1):
        super(WindPhysicsModelObject, self).setSpeed(speed_)
        if type(speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speed_ < 0:
                raise InvalidFieldValueException()
        self.speed_ = speed_

    def getSpeed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def setTurbulence(self, turbulence_ = 0):
        super(WindPhysicsModelObject, self).setTurbulence(turbulence_)
        if type(turbulence_) is not SFFloat:
            raise InvalidFieldTypeException()
        if turbulence_ < 0:
                raise InvalidFieldValueException()
        if turbulence_ > 1:
                raise InvalidFieldValueException()
        self.turbulence_ = turbulence_

    def getTurbulence(self):
        if type(self.turbulence_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.turbulence_

    def setDEF(self, DEF_):
        super(WindPhysicsModelObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(WindPhysicsModelObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(WindPhysicsModelObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class WorldInfoObject(X3DInfoNode):
    def __init__(self, **kwargs):
        return

    def setInfo(self, info_):
        super(WorldInfoObject, self).setInfo(info_)
        if type(info_) is not MFString:
            raise InvalidFieldTypeException()
        self.info_ = info_

    def getInfo(self):
        if type(self.info_) is not MFString:
            raise InvalidFieldTypeException()
        return self.info_

    def setMetadata(self, metadata_ = None):
        super(WorldInfoObject, self).setMetadata(metadata_)
        if type(metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.metadata_ = metadata_

    def getMetadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def setTitle(self, title_):
        super(WorldInfoObject, self).setTitle(title_)
        if type(title_) is not SFString:
            raise InvalidFieldTypeException()
        self.title_ = title_

    def getTitle(self):
        if type(self.title_) is not SFString:
            raise InvalidFieldTypeException()
        return self.title_

    def setDEF(self, DEF_):
        super(WorldInfoObject, self).setDEF(DEF_)
        if type(DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.DEF_ = DEF_

    def getDEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def setUSE(self, USE_):
        super(WorldInfoObject, self).setUSE(USE_)
        if type(USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.USE_ = USE_

    def getUSE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def setClass(self, class_):
        super(WorldInfoObject, self).setClass(class_)
        if type(class_) is not SFString:
            raise InvalidFieldTypeException()
        self.class_ = class_

    def getClass(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class componentObject():
    def __init__(self, **kwargs):
        return

    def setLevel(self, level_ = 1):
        if type(level_) is not SFInt32:
            raise InvalidFieldTypeException()
        if level_ < 1:
                raise InvalidFieldValueException()
        if level_ > 5:
                raise InvalidFieldValueException()
        self.level_ = level_

    def getLevel(self):
        if type(self.level_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Core' == name_:
            pass
        elif 'CADGeometry' == name_:
            pass
        elif 'CubeMapTexturing' == name_:
            pass
        elif 'DIS' == name_:
            pass
        elif 'EnvironmentalEffects' == name_:
            pass
        elif 'EnvironmentalSensor' == name_:
            pass
        elif 'EventUtilities' == name_:
            pass
        elif 'Followers' == name_:
            pass
        elif 'Geometry2D' == name_:
            pass
        elif 'Geometry3D' == name_:
            pass
        elif 'Geospatial' == name_:
            pass
        elif 'Grouping' == name_:
            pass
        elif 'H-Anim' == name_:
            pass
        elif 'Interpolation' == name_:
            pass
        elif 'KeyDeviceSensor' == name_:
            pass
        elif 'Layering' == name_:
            pass
        elif 'Layout' == name_:
            pass
        elif 'Lighting' == name_:
            pass
        elif 'Navigation' == name_:
            pass
        elif 'Networking' == name_:
            pass
        elif 'NURBS' == name_:
            pass
        elif 'ParticleSystems' == name_:
            pass
        elif 'Picking' == name_:
            pass
        elif 'PointingDeviceSensor' == name_:
            pass
        elif 'Rendering' == name_:
            pass
        elif 'RigidBodyPhysics' == name_:
            pass
        elif 'Scripting' == name_:
            pass
        elif 'Shaders' == name_:
            pass
        elif 'Shape' == name_:
            pass
        elif 'Sound' == name_:
            pass
        elif 'Text' == name_:
            pass
        elif 'Texturing' == name_:
            pass
        elif 'Texturing3D' == name_:
            pass
        elif 'Time' == name_:
            pass
        elif 'VolumeRendering' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    pass


class connectObject():
    def __init__(self, **kwargs):
        return

    def setNodeField(self, nodeField_):
        if type(nodeField_) is not SFString:
            raise InvalidFieldTypeException()
        self.nodeField_ = nodeField_

    def getNodeField(self):
        if type(self.nodeField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.nodeField_

    def setProtoField(self, protoField_):
        if type(protoField_) is not SFString:
            raise InvalidFieldTypeException()
        self.protoField_ = protoField_

    def getProtoField(self):
        if type(self.protoField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.protoField_

    pass


class EXPORTObject():
    def __init__(self, **kwargs):
        return

    def setAS(self, AS_):
        if type(AS_) is not SFString:
            raise InvalidFieldTypeException()
        self.AS_ = AS_

    def getAS(self):
        if type(self.AS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.AS_

    def setLocalDEF(self, localDEF_):
        if type(localDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.localDEF_ = localDEF_

    def getLocalDEF(self):
        if type(self.localDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.localDEF_

    pass


class ExternProtoDeclareObject():
    def __init__(self, **kwargs):
        return

    def setAppinfo(self, appinfo_):
        if type(appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.appinfo_ = appinfo_

    def getAppinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def setDocumentation(self, documentation_):
        if type(documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.documentation_ = documentation_

    def getDocumentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def setField(self, field_):
        if type(field_) is not MFNode:
            raise InvalidFieldTypeException()
        self.field_ = field_

    def getField(self):
        if type(self.field_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.field_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setUrl(self, url_):
        if type(url_) is not MFString:
            raise InvalidFieldTypeException()
        self.url_ = url_

    def getUrl(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    pass


class fieldObject():
    def __init__(self, **kwargs):
        return

    def setAccessType(self, accessType_):
        if type(accessType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'initializeOnly' == accessType_:
            pass
        elif 'inputOnly' == accessType_:
            pass
        elif 'outputOnly' == accessType_:
            pass
        elif 'inputOutput' == accessType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.accessType_ = accessType_

    def getAccessType(self):
        if type(self.accessType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.accessType_

    def setAppinfo(self, appinfo_):
        if type(appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.appinfo_ = appinfo_

    def getAppinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def setChildren(self, children_):
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setDocumentation(self, documentation_):
        if type(documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.documentation_ = documentation_

    def getDocumentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setType(self, type_):
        if type(type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'SFBool' == type_:
            pass
        elif 'MFBool' == type_:
            pass
        elif 'SFColor' == type_:
            pass
        elif 'MFColor' == type_:
            pass
        elif 'SFColorRGBA' == type_:
            pass
        elif 'MFColorRGBA' == type_:
            pass
        elif 'SFDouble' == type_:
            pass
        elif 'MFDouble' == type_:
            pass
        elif 'SFFloat' == type_:
            pass
        elif 'MFFloat' == type_:
            pass
        elif 'SFImage' == type_:
            pass
        elif 'MFImage' == type_:
            pass
        elif 'SFInt32' == type_:
            pass
        elif 'SFNode' == type_:
            pass
        elif 'MFNode' == type_:
            pass
        elif 'MFInt32' == type_:
            pass
        elif 'SFRotation' == type_:
            pass
        elif 'MFRotation' == type_:
            pass
        elif 'SFString' == type_:
            pass
        elif 'MFString' == type_:
            pass
        elif 'SFTime' == type_:
            pass
        elif 'MFTime' == type_:
            pass
        elif 'SFVec2d' == type_:
            pass
        elif 'MFVec2d' == type_:
            pass
        elif 'SFVec2f' == type_:
            pass
        elif 'MFVec2f' == type_:
            pass
        elif 'SFVec3d' == type_:
            pass
        elif 'MFVec3d' == type_:
            pass
        elif 'SFVec3f' == type_:
            pass
        elif 'MFVec3f' == type_:
            pass
        elif 'SFVec4d' == type_:
            pass
        elif 'MFVec4d' == type_:
            pass
        elif 'SFVec4f' == type_:
            pass
        elif 'MFVec4f' == type_:
            pass
        elif 'SFMatrix3d' == type_:
            pass
        elif 'MFMatrix3d' == type_:
            pass
        elif 'SFMatrix3f' == type_:
            pass
        elif 'MFMatrix3f' == type_:
            pass
        elif 'SFMatrix4d' == type_:
            pass
        elif 'MFMatrix4d' == type_:
            pass
        elif 'SFMatrix4f' == type_:
            pass
        elif 'MFMatrix4f' == type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.type_ = type_

    def getType(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def setValue(self, value_):
        if type(value_) is not SFString:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not SFString:
            raise InvalidFieldTypeException()
        return self.value_

    pass


class fieldValueObject():
    def __init__(self, **kwargs):
        return

    def setChildren(self, children_):
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setValue(self, value_):
        if type(value_) is not SFString:
            raise InvalidFieldTypeException()
        self.value_ = value_

    def getValue(self):
        if type(self.value_) is not SFString:
            raise InvalidFieldTypeException()
        return self.value_

    pass


class headObject():
    def __init__(self, **kwargs):
        return

    def setComponent(self, component_):
        if type(component_) is not MFNode:
            raise InvalidFieldTypeException()
        self.component_ = component_

    def getComponent(self):
        if type(self.component_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.component_

    def setMeta(self, meta_):
        if type(meta_) is not MFNode:
            raise InvalidFieldTypeException()
        self.meta_ = meta_

    def getMeta(self):
        if type(self.meta_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.meta_

    def setUnit(self, unit_):
        if type(unit_) is not MFNode:
            raise InvalidFieldTypeException()
        self.unit_ = unit_

    def getUnit(self):
        if type(self.unit_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.unit_

    pass


class IMPORTObject():
    def __init__(self, **kwargs):
        return

    def setAS(self, AS_):
        if type(AS_) is not SFString:
            raise InvalidFieldTypeException()
        self.AS_ = AS_

    def getAS(self):
        if type(self.AS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.AS_

    def setImportedDEF(self, importedDEF_):
        if type(importedDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.importedDEF_ = importedDEF_

    def getImportedDEF(self):
        if type(self.importedDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.importedDEF_

    def setInlineDEF(self, inlineDEF_):
        if type(inlineDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.inlineDEF_ = inlineDEF_

    def getInlineDEF(self):
        if type(self.inlineDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.inlineDEF_

    pass


class ISObject():
    def __init__(self, **kwargs):
        return

    def setConnect(self, connect_):
        if type(connect_) is not MFNode:
            raise InvalidFieldTypeException()
        self.connect_ = connect_

    def getConnect(self):
        if type(self.connect_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.connect_

    pass


class metaObject():
    def __init__(self, **kwargs):
        return

    def setContent(self, content_):
        if type(content_) is not SFString:
            raise InvalidFieldTypeException()
        self.content_ = content_

    def getContent(self):
        if type(self.content_) is not SFString:
            raise InvalidFieldTypeException()
        return self.content_

    def setDir(self, dir_):
        if type(dir_) is not SFString:
            raise InvalidFieldTypeException()
        if 'rtl' == dir_:
            pass
        elif 'ltr' == dir_:
            pass
        else:
            raise InvalidFieldValueException()
        self.dir_ = dir_

    def getDir(self):
        if type(self.dir_) is not SFString:
            raise InvalidFieldTypeException()
        return self.dir_

    def setHttp_equiv(self, http_equiv_):
        if type(http_equiv_) is not SFString:
            raise InvalidFieldTypeException()
        self.http_equiv_ = http_equiv_

    def getHttp_equiv(self):
        if type(self.http_equiv_) is not SFString:
            raise InvalidFieldTypeException()
        return self.http_equiv_

    def setLang(self, lang_):
        if type(lang_) is not SFString:
            raise InvalidFieldTypeException()
        self.lang_ = lang_

    def getLang(self):
        if type(self.lang_) is not SFString:
            raise InvalidFieldTypeException()
        return self.lang_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'accessRights' == name_:
            pass
        elif 'author' == name_:
            pass
        elif 'contributor' == name_:
            pass
        elif 'created' == name_:
            pass
        elif 'creator' == name_:
            pass
        elif 'description' == name_:
            pass
        elif 'drawing' == name_:
            pass
        elif 'error' == name_:
            pass
        elif 'generator' == name_:
            pass
        elif 'hint' == name_:
            pass
        elif 'identifier' == name_:
            pass
        elif 'Image' == name_:
            pass
        elif 'info' == name_:
            pass
        elif 'isVersionOf' == name_:
            pass
        elif 'keywords' == name_:
            pass
        elif 'license' == name_:
            pass
        elif 'mediator' == name_:
            pass
        elif 'modified' == name_:
            pass
        elif 'MovingImage' == name_:
            pass
        elif 'original' == name_:
            pass
        elif 'photograph' == name_:
            pass
        elif 'publisher' == name_:
            pass
        elif 'reference' == name_:
            pass
        elif 'requires' == name_:
            pass
        elif 'rights' == name_:
            pass
        elif 'robots' == name_:
            pass
        elif 'Sound' == name_:
            pass
        elif 'source' == name_:
            pass
        elif 'specificationSection' == name_:
            pass
        elif 'specificationUrl' == name_:
            pass
        elif 'subject' == name_:
            pass
        elif 'Text' == name_:
            pass
        elif 'title' == name_:
            pass
        elif 'TODO' == name_:
            pass
        elif 'translator' == name_:
            pass
        elif 'translated' == name_:
            pass
        elif 'version' == name_:
            pass
        elif 'warning' == name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setScheme(self, scheme_):
        if type(scheme_) is not SFString:
            raise InvalidFieldTypeException()
        self.scheme_ = scheme_

    def getScheme(self):
        if type(self.scheme_) is not SFString:
            raise InvalidFieldTypeException()
        return self.scheme_

    pass


class ProtoBodyObject():
    def __init__(self, **kwargs):
        return

    def setChildren(self, children_):
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    pass


class ProtoDeclareObject():
    def __init__(self, **kwargs):
        return

    def setAppinfo(self, appinfo_):
        if type(appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.appinfo_ = appinfo_

    def getAppinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def setDocumentation(self, documentation_):
        if type(documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.documentation_ = documentation_

    def getDocumentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def setProtoBody(self, ProtoBody_ = None):
        if type(ProtoBody_) is not SFNode:
            raise InvalidFieldTypeException()
        self.ProtoBody_ = ProtoBody_

    def getProtoBody(self):
        if type(self.ProtoBody_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.ProtoBody_

    def setProtoInterface(self, ProtoInterface_ = None):
        if type(ProtoInterface_) is not SFNode:
            raise InvalidFieldTypeException()
        self.ProtoInterface_ = ProtoInterface_

    def getProtoInterface(self):
        if type(self.ProtoInterface_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.ProtoInterface_

    pass


class ProtoInterfaceObject():
    def __init__(self, **kwargs):
        return

    def setField(self, field_):
        if type(field_) is not MFNode:
            raise InvalidFieldTypeException()
        self.field_ = field_

    def getField(self):
        if type(self.field_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.field_

    pass


class ROUTEObject():
    def __init__(self, **kwargs):
        return

    def setFromField(self, fromField_):
        if type(fromField_) is not SFString:
            raise InvalidFieldTypeException()
        self.fromField_ = fromField_

    def getFromField(self):
        if type(self.fromField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fromField_

    def setFromNode(self, fromNode_):
        if type(fromNode_) is not SFString:
            raise InvalidFieldTypeException()
        self.fromNode_ = fromNode_

    def getFromNode(self):
        if type(self.fromNode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fromNode_

    def setToField(self, toField_):
        if type(toField_) is not SFString:
            raise InvalidFieldTypeException()
        self.toField_ = toField_

    def getToField(self):
        if type(self.toField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.toField_

    def setToNode(self, toNode_):
        if type(toNode_) is not SFString:
            raise InvalidFieldTypeException()
        self.toNode_ = toNode_

    def getToNode(self):
        if type(self.toNode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.toNode_

    pass


class SceneObject():
    def __init__(self, **kwargs):
        return

    def setChildren(self, children_):
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = children_

    def getChildren(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    pass


class unitObject():
    def __init__(self, **kwargs):
        if type(category_) is not SFString:
            raise InvalidFieldTypeException()
        if 'angle' == category_:
            pass
        elif 'force' == category_:
            pass
        elif 'length' == category_:
            pass
        elif 'mass' == category_:
            pass
        else:
            raise InvalidFieldValueException()
        self.category_ = kwargs.pop("category")
        return

    def setConversionFactor(self, conversionFactor_ = 1.0):
        if type(conversionFactor_) is not SFDouble:
            raise InvalidFieldTypeException()
        if conversionFactor_ <= 0:
                raise InvalidFieldValueException()
        self.conversionFactor_ = conversionFactor_

    def getConversionFactor(self):
        if type(self.conversionFactor_) is not SFDouble:
            raise InvalidFieldTypeException()
        return self.conversionFactor_

    def setName(self, name_):
        if type(name_) is not SFString:
            raise InvalidFieldTypeException()
        self.name_ = name_

    def getName(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    pass


class X3DObject():
    def __init__(self, **kwargs):
        return

    def setHead(self, head_ = None):
        if type(head_) is not SFNode:
            raise InvalidFieldTypeException()
        self.head_ = head_

    def getHead(self):
        if type(self.head_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.head_

    def setProfile(self, profile_ = "Immersive"):
        if type(profile_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Core' == profile_:
            pass
        elif 'Interchange' == profile_:
            pass
        elif 'CADInterchange' == profile_:
            pass
        elif 'Interactive' == profile_:
            pass
        elif 'Immersive' == profile_:
            pass
        elif 'MedicalInterchange' == profile_:
            pass
        elif 'MPEG4Interactive' == profile_:
            pass
        elif 'Full' == profile_:
            pass
        else:
            raise InvalidFieldValueException()
        self.profile_ = profile_

    def getProfile(self):
        if type(self.profile_) is not SFString:
            raise InvalidFieldTypeException()
        return self.profile_

    def setScene(self, Scene_ = None):
        if type(Scene_) is not SFNode:
            raise InvalidFieldTypeException()
        self.Scene_ = Scene_

    def getScene(self):
        if type(self.Scene_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.Scene_

    def setVersion(self, version_ = "3.3"):
        if type(version_) is not SFString:
            raise InvalidFieldTypeException()
        if '3.0' == version_:
            pass
        elif '3.1' == version_:
            pass
        elif '3.2' == version_:
            pass
        elif '3.3' == version_:
            pass
        elif '4.0' == version_:
            pass
        else:
            raise InvalidFieldValueException()
        self.version_ = version_

    def getVersion(self):
        if type(self.version_) is not SFString:
            raise InvalidFieldTypeException()
        return self.version_

    pass


