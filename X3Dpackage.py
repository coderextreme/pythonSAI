class X3DNode(object):
    def __init__(self, **kwargs):
        super(X3DNode, self).__init__()
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DAppearanceChildNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DAppearanceChildNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DAppearanceNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DAppearanceNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DChildNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DChildNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DBindableNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DBindableNode, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DBackgroundNode(X3DBindableNode):
    def __init__(self, **kwargs):
        super(X3DBackgroundNode, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.groundAngle = []
        if not self.groundAngle:
            self.groundAngle = kwargs.pop("groundAngle", [])
        if self.groundAngle == None or len(self.groundAngle) <= 0 or min(self.groundAngle)  <  0:
            return None
        if self.groundAngle == None or len(self.groundAngle) <= 0 or max(self.groundAngle)  >  1.5708:
            return None
    def setGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        try:
            super().setGroundAngle(groundAngle)
        except AttributeError:
           pass
        self.groundAngle = groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
        self.groundColor = []
        if not self.groundColor:
            self.groundColor = kwargs.pop("groundColor", [])
        if self.groundColor == None or len(self.groundColor) <= 0 or min(self.groundColor)  <  0:
            return None
        if self.groundColor == None or len(self.groundColor) <= 0 or max(self.groundColor)  >  1:
            return None
    def setGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        try:
            super().setGroundColor(groundColor)
        except AttributeError:
           pass
        self.groundColor = groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.skyAngle = []
        if not self.skyAngle:
            self.skyAngle = kwargs.pop("skyAngle", [])
        if self.skyAngle == None or len(self.skyAngle) <= 0 or min(self.skyAngle)  <  0:
            return None
        if self.skyAngle == None or len(self.skyAngle) <= 0 or max(self.skyAngle)  >  3.1416:
            return None
    def setSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        try:
            super().setSkyAngle(skyAngle)
        except AttributeError:
           pass
        self.skyAngle = skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
        self.skyColor = [0, 0, 0]
        if not self.skyColor:
            self.skyColor = kwargs.pop("skyColor", [0, 0, 0])
        if self.skyColor == None or len(self.skyColor) <= 0 or min(self.skyColor)  <  0:
            return None
        if self.skyColor == None or len(self.skyColor) <= 0 or max(self.skyColor)  >  1:
            return None
    def setSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        try:
            super().setSkyColor(skyColor)
        except AttributeError:
           pass
        self.skyColor = skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
        self.transparency = 0
        if not self.transparency:
            self.transparency = kwargs.pop("transparency", 0)
        if self.transparency == None or self.transparency  <  0:
            return None
        if self.transparency == None or self.transparency  >  1:
            return None
    def setTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        try:
            super().setTransparency(transparency)
        except AttributeError:
           pass
        self.transparency = transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DFollowerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DFollowerNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DChaserNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        super(X3DChaserNode, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DGeometricPropertyNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DGeometricPropertyNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DColorNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(X3DColorNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DVolumeRenderStyleNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DVolumeRenderStyleNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DComposableVolumeRenderStyleNode(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(X3DComposableVolumeRenderStyleNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DGeometryNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DGeometryNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DComposedGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(X3DComposedGeometryNode, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(X3DCoordinateNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DDamperNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        super(X3DDamperNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DSensorNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DSensorNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DPointingDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super(X3DPointingDeviceSensorNode, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DDragSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        super(X3DDragSensorNode, self).__init__(**kwargs)
        self.autoOffset = True
        if not self.autoOffset:
            self.autoOffset = kwargs.pop("autoOffset", True)
    def setAutoOffset(self, autoOffset = True):
        try:
            super().setAutoOffset(autoOffset)
        except AttributeError:
           pass
        self.autoOffset = autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.trackPoint_changed = []
        if not self.trackPoint_changed:
            self.trackPoint_changed = kwargs.pop("trackPoint_changed", [])
    def settrackPoint_changed(self, trackPoint_changed = []):
        try:
            super().settrackPoint_changed(trackPoint_changed)
        except AttributeError:
           pass
        self.trackPoint_changed = trackPoint_changed
        return self
    def addtrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
    def addSettrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DEnvironmentalSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super(X3DEnvironmentalSensorNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <  0:
            return None
    def setSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTextureNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(X3DTextureNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DEnvironmentTextureNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super(X3DEnvironmentTextureNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DFontStyleNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DFontStyleNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DBoundedObject(object):
    def __init__(self, **kwargs):
        super(X3DBoundedObject, self).__init__()
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DGroupingNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DGroupingNode, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DInfoNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DInfoNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DInterpolatorNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DInterpolatorNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DKeyDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super(X3DKeyDeviceSensorNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DPickableObject(object):
    def __init__(self, **kwargs):
        super(X3DPickableObject, self).__init__()
        self.pickable = True
        if not self.pickable:
            self.pickable = kwargs.pop("pickable", True)
    def setPickable(self, pickable = True):
        try:
            super().setPickable(pickable)
        except AttributeError:
           pass
        self.pickable = pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DLayerNode(X3DPickableObject, X3DNode):
    def __init__(self, **kwargs):
        super(X3DLayerNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickable = True
        if not self.pickable:
            self.pickable = kwargs.pop("pickable", True)
    def setPickable(self, pickable = True):
        try:
            super().setPickable(pickable)
        except AttributeError:
           pass
        self.pickable = pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
        self.viewport = None
        if not self.viewport:
            self.viewport = kwargs.pop("viewport", None)
    def setViewport(self, viewport = None):
        try:
            super().setViewport(viewport)
        except AttributeError:
           pass
        self.viewport = viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DLayoutNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DLayoutNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DLightNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DLightNode, self).__init__(**kwargs)
        self.ambientIntensity = 0
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.intensity = 1
        if not self.intensity:
            self.intensity = kwargs.pop("intensity", 1)
        if self.intensity == None or self.intensity  <  0:
            return None
        if self.intensity == None or self.intensity  >  1:
            return None
    def setIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        try:
            super().setIntensity(intensity)
        except AttributeError:
           pass
        self.intensity = intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.on = True
        if not self.on:
            self.on = kwargs.pop("on", True)
    def setOn(self, on = True):
        try:
            super().setOn(on)
        except AttributeError:
           pass
        self.on = on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DMaterialNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(X3DMaterialNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNBodyCollidableNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DNBodyCollidableNode, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNBodyCollisionSpaceNode(X3DBoundedObject, X3DNode):
    def __init__(self, **kwargs):
        super(X3DNBodyCollisionSpaceNode, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNetworkSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super(X3DNetworkSensorNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNormalNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(X3DNormalNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNurbsControlCurveNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DNurbsControlCurveNode, self).__init__(**kwargs)
        self.controlPoint = []
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", [])
    def setControlPoint(self, controlPoint = []):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DParametricGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(X3DParametricGeometryNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DNurbsSurfaceGeometryNode(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super(X3DNurbsSurfaceGeometryNode, self).__init__(**kwargs)
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.uClosed = False
        if not self.uClosed:
            self.uClosed = kwargs.pop("uClosed", False)
    def setUClosed(self, uClosed = False):
        try:
            super().setUClosed(uClosed)
        except AttributeError:
           pass
        self.uClosed = uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
        self.uDimension = 0
        if not self.uDimension:
            self.uDimension = kwargs.pop("uDimension", 0)
        if self.uDimension == None or self.uDimension  <  0:
            return None
    def setUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        try:
            super().setUDimension(uDimension)
        except AttributeError:
           pass
        self.uDimension = uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
        self.uKnot = []
        if not self.uKnot:
            self.uKnot = kwargs.pop("uKnot", [])
    def setUKnot(self, uKnot = []):
        try:
            super().setUKnot(uKnot)
        except AttributeError:
           pass
        self.uKnot = uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
        self.uOrder = 3
        if not self.uOrder:
            self.uOrder = kwargs.pop("uOrder", 3)
        if self.uOrder == None or self.uOrder  <  2:
            return None
    def setUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        try:
            super().setUOrder(uOrder)
        except AttributeError:
           pass
        self.uOrder = uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
        self.uTessellation = 0
        if not self.uTessellation:
            self.uTessellation = kwargs.pop("uTessellation", 0)
    def setUTessellation(self, uTessellation = 0):
        try:
            super().setUTessellation(uTessellation)
        except AttributeError:
           pass
        self.uTessellation = uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
        self.vClosed = False
        if not self.vClosed:
            self.vClosed = kwargs.pop("vClosed", False)
    def setVClosed(self, vClosed = False):
        try:
            super().setVClosed(vClosed)
        except AttributeError:
           pass
        self.vClosed = vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
        self.vDimension = 0
        if not self.vDimension:
            self.vDimension = kwargs.pop("vDimension", 0)
        if self.vDimension == None or self.vDimension  <  0:
            return None
    def setVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        try:
            super().setVDimension(vDimension)
        except AttributeError:
           pass
        self.vDimension = vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
        self.vKnot = []
        if not self.vKnot:
            self.vKnot = kwargs.pop("vKnot", [])
    def setVKnot(self, vKnot = []):
        try:
            super().setVKnot(vKnot)
        except AttributeError:
           pass
        self.vKnot = vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
        self.vOrder = 3
        if not self.vOrder:
            self.vOrder = kwargs.pop("vOrder", 3)
        if self.vOrder == None or self.vOrder  <  2:
            return None
    def setVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        try:
            super().setVOrder(vOrder)
        except AttributeError:
           pass
        self.vOrder = vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
        self.vTessellation = 0
        if not self.vTessellation:
            self.vTessellation = kwargs.pop("vTessellation", 0)
    def setVTessellation(self, vTessellation = 0):
        try:
            super().setVTessellation(vTessellation)
        except AttributeError:
           pass
        self.vTessellation = vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DParticleEmitterNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DParticleEmitterNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DParticlePhysicsModelNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DParticlePhysicsModelNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DPickSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super(X3DPickSensorNode, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersectionType = "BOUNDS"
        if not self.intersectionType:
            self.intersectionType = kwargs.pop("intersectionType", "BOUNDS")
    def setIntersectionType(self, intersectionType = "BOUNDS"):
        try:
            super().setIntersectionType(intersectionType)
        except AttributeError:
           pass
        self.intersectionType = intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.matchCriterion = "MATCH_ANY"
        if not self.matchCriterion:
            self.matchCriterion = kwargs.pop("matchCriterion", "MATCH_ANY")
        if 'MATCH_ANY' == self.matchCriterion:
            pass
        elif 'MATCH_EVERY' == self.matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == self.matchCriterion:
            pass
        else:
            return None
    def setMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        try:
            super().setMatchCriterion(matchCriterion)
        except AttributeError:
           pass
        self.matchCriterion = matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickedGeometry = []
        if not self.pickedGeometry:
            self.pickedGeometry = kwargs.pop("pickedGeometry", [])
    def setPickedGeometry(self, pickedGeometry = []):
        try:
            super().setPickedGeometry(pickedGeometry)
        except AttributeError:
           pass
        self.pickedGeometry = pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
        self.pickingGeometry = None
        if not self.pickingGeometry:
            self.pickingGeometry = kwargs.pop("pickingGeometry", None)
    def setPickingGeometry(self, pickingGeometry = None):
        try:
            super().setPickingGeometry(pickingGeometry)
        except AttributeError:
           pass
        self.pickingGeometry = pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
        self.pickTarget = []
        if not self.pickTarget:
            self.pickTarget = kwargs.pop("pickTarget", [])
    def setPickTarget(self, pickTarget = []):
        try:
            super().setPickTarget(pickTarget)
        except AttributeError:
           pass
        self.pickTarget = pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
        self.sortOrder = "CLOSEST"
        if not self.sortOrder:
            self.sortOrder = kwargs.pop("sortOrder", "CLOSEST")
    def setSortOrder(self, sortOrder = "CLOSEST"):
        try:
            super().setSortOrder(sortOrder)
        except AttributeError:
           pass
        self.sortOrder = sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DProductStructureChildNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DProductStructureChildNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DPrototypeInstance(X3DNode):
    def __init__(self, **kwargs):
        super(X3DPrototypeInstance, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DRigidJointNode(X3DNode):
    def __init__(self, **kwargs):
        super(X3DRigidJointNode, self).__init__(**kwargs)
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DUrlObject(object):
    def __init__(self, **kwargs):
        super(X3DUrlObject, self).__init__()
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DScriptNode(X3DUrlObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DScriptNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DSequencerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DSequencerNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.next = None
        if not self.next:
            self.next = kwargs.pop("next", None)
    def setNext(self, next = None):
        try:
            super().setNext(next)
        except AttributeError:
           pass
        self.next = next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
        self.previous = None
        if not self.previous:
            self.previous = kwargs.pop("previous", None)
    def setPrevious(self, previous = None):
        try:
            super().setPrevious(previous)
        except AttributeError:
           pass
        self.previous = previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DShaderNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(X3DShaderNode, self).__init__(**kwargs)
        self.activate = None
        if not self.activate:
            self.activate = kwargs.pop("activate", None)
    def setActivate(self, activate = None):
        try:
            super().setActivate(activate)
        except AttributeError:
           pass
        self.activate = activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Selected = None
        if not self.Selected:
            self.Selected = kwargs.pop("Selected", None)
    def setIsSelected(self, Selected = None):
        try:
            super().setIsSelected(Selected)
        except AttributeError:
           pass
        self.Selected = Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
        self.Valid = None
        if not self.Valid:
            self.Valid = kwargs.pop("Valid", None)
    def setIsValid(self, Valid = None):
        try:
            super().setIsValid(Valid)
        except AttributeError:
           pass
        self.Valid = Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DShapeNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DShapeNode, self).__init__(**kwargs)
        self.appearance = None
        if not self.appearance:
            self.appearance = kwargs.pop("appearance", None)
    def setAppearance(self, appearance = None):
        try:
            super().setAppearance(appearance)
        except AttributeError:
           pass
        self.appearance = appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geometry = None
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", None)
    def setGeometry(self, geometry = None):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DSoundNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DSoundNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTimeDependentNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DTimeDependentNode, self).__init__(**kwargs)
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Paused = None
        if not self.Paused:
            self.Paused = kwargs.pop("Paused", None)
    def setIsPaused(self, Paused = None):
        try:
            super().setIsPaused(Paused)
        except AttributeError:
           pass
        self.Paused = Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pauseTime = 0
        if not self.pauseTime:
            self.pauseTime = kwargs.pop("pauseTime", 0)
    def setPauseTime(self, pauseTime = 0):
        try:
            super().setPauseTime(pauseTime)
        except AttributeError:
           pass
        self.pauseTime = pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
        self.resumeTime = 0
        if not self.resumeTime:
            self.resumeTime = kwargs.pop("resumeTime", 0)
    def setResumeTime(self, resumeTime = 0):
        try:
            super().setResumeTime(resumeTime)
        except AttributeError:
           pass
        self.resumeTime = resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
        self.startTime = 0
        if not self.startTime:
            self.startTime = kwargs.pop("startTime", 0)
    def setStartTime(self, startTime = 0):
        try:
            super().setStartTime(startTime)
        except AttributeError:
           pass
        self.startTime = startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
        self.stopTime = 0
        if not self.stopTime:
            self.stopTime = kwargs.pop("stopTime", 0)
    def setStopTime(self, stopTime = 0):
        try:
            super().setStopTime(stopTime)
        except AttributeError:
           pass
        self.stopTime = stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DSoundSourceNode(X3DTimeDependentNode):
    def __init__(self, **kwargs):
        super(X3DSoundSourceNode, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.duration_changed = None
        if not self.duration_changed:
            self.duration_changed = kwargs.pop("duration_changed", None)
        if self.duration_changed == None or self.duration_changed  <  -1:
            return None
    def setduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        try:
            super().setduration_changed(duration_changed)
        except AttributeError:
           pass
        self.duration_changed = duration_changed
        return self
    def addduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
    def addSetduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Paused = None
        if not self.Paused:
            self.Paused = kwargs.pop("Paused", None)
    def setIsPaused(self, Paused = None):
        try:
            super().setIsPaused(Paused)
        except AttributeError:
           pass
        self.Paused = Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pauseTime = 0
        if not self.pauseTime:
            self.pauseTime = kwargs.pop("pauseTime", 0)
    def setPauseTime(self, pauseTime = 0):
        try:
            super().setPauseTime(pauseTime)
        except AttributeError:
           pass
        self.pauseTime = pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
        self.pitch = 1.0
        if not self.pitch:
            self.pitch = kwargs.pop("pitch", 1.0)
        if self.pitch == None or self.pitch  <=  0:
            return None
    def setPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        try:
            super().setPitch(pitch)
        except AttributeError:
           pass
        self.pitch = pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
        self.resumeTime = 0
        if not self.resumeTime:
            self.resumeTime = kwargs.pop("resumeTime", 0)
    def setResumeTime(self, resumeTime = 0):
        try:
            super().setResumeTime(resumeTime)
        except AttributeError:
           pass
        self.resumeTime = resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
        self.startTime = 0
        if not self.startTime:
            self.startTime = kwargs.pop("startTime", 0)
    def setStartTime(self, startTime = 0):
        try:
            super().setStartTime(startTime)
        except AttributeError:
           pass
        self.startTime = startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
        self.stopTime = 0
        if not self.stopTime:
            self.stopTime = kwargs.pop("stopTime", 0)
    def setStopTime(self, stopTime = 0):
        try:
            super().setStopTime(stopTime)
        except AttributeError:
           pass
        self.stopTime = stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTexture2DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super(X3DTexture2DNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatS = True
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", True)
    def setRepeatS(self, repeatS = True):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = True
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", True)
    def setRepeatT(self, repeatT = True):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTexture3DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super(X3DTexture3DNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatR = False
        if not self.repeatR:
            self.repeatR = kwargs.pop("repeatR", False)
    def setRepeatR(self, repeatR = False):
        try:
            super().setRepeatR(repeatR)
        except AttributeError:
           pass
        self.repeatR = repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
        self.repeatS = False
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", False)
    def setRepeatS(self, repeatS = False):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = False
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", False)
    def setRepeatT(self, repeatT = False):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTextureCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(X3DTextureCoordinateNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTextureTransformNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(X3DTextureTransformNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTouchSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        super(X3DTouchSensorNode, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.touchTime = None
        if not self.touchTime:
            self.touchTime = kwargs.pop("touchTime", None)
    def setTouchTime(self, touchTime = None):
        try:
            super().setTouchTime(touchTime)
        except AttributeError:
           pass
        self.touchTime = touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DTriggerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DTriggerNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DVertexAttributeNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(X3DVertexAttributeNode, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DViewpointNode(X3DBindableNode):
    def __init__(self, **kwargs):
        super(X3DViewpointNode, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.jump = True
        if not self.jump:
            self.jump = kwargs.pop("jump", True)
    def setJump(self, jump = True):
        try:
            super().setJump(jump)
        except AttributeError:
           pass
        self.jump = jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.retainUserOffsets = False
        if not self.retainUserOffsets:
            self.retainUserOffsets = kwargs.pop("retainUserOffsets", False)
    def setRetainUserOffsets(self, retainUserOffsets = False):
        try:
            super().setRetainUserOffsets(retainUserOffsets)
        except AttributeError:
           pass
        self.retainUserOffsets = retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DViewportNode(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(X3DViewportNode, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DVolumeDataNode(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(X3DVolumeDataNode, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.dimensions = [1, 1, 1]
        if not self.dimensions:
            self.dimensions = kwargs.pop("dimensions", [1, 1, 1])
        if self.dimensions == None or len(self.dimensions) <= 0 or min(self.dimensions)  <=  0:
            return None
    def setDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        try:
            super().setDimensions(dimensions)
        except AttributeError:
           pass
        self.dimensions = dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DFogObject(object):
    def __init__(self, **kwargs):
        super(X3DFogObject, self).__init__()
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.fogType = "LINEAR"
        if not self.fogType:
            self.fogType = kwargs.pop("fogType", "LINEAR")
        if 'LINEAR' == self.fogType:
            pass
        elif 'EXPONENTIAL' == self.fogType:
            pass
        else:
            return None
    def setFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        try:
            super().setFogType(fogType)
        except AttributeError:
           pass
        self.fogType = fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
        self.visibilityRange = 0
        if not self.visibilityRange:
            self.visibilityRange = kwargs.pop("visibilityRange", 0)
        if self.visibilityRange == None or self.visibilityRange  <  0:
            return None
    def setVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        try:
            super().setVisibilityRange(visibilityRange)
        except AttributeError:
           pass
        self.visibilityRange = visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DMetadataObject(object):
    def __init__(self, **kwargs):
        super(X3DMetadataObject, self).__init__()
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3DProgrammableShaderObject(object):
    def __init__(self, **kwargs):
        super(X3DProgrammableShaderObject, self).__init__()
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Anchor(X3DUrlObject, X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Anchor, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.parameter = []
        if not self.parameter:
            self.parameter = kwargs.pop("parameter", [])
    def setParameter(self, parameter = []):
        try:
            super().setParameter(parameter)
        except AttributeError:
           pass
        self.parameter = parameter
        return self
    def addParameter(self, parameter = []):
        if not isinstance(parameter, list):
            parameter = [parameter]
            self.parameter = []
            self.parameter = self.parameter + parameter
        return self
    def addParameter(self, parameter = []):
        if not isinstance(parameter, list):
            parameter = [parameter]
            self.parameter = []
            self.parameter = self.parameter + parameter
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Appearance(X3DAppearanceNode):
    def __init__(self, **kwargs):
        super(Appearance, self).__init__(**kwargs)
        self.fillProperties = None
        if not self.fillProperties:
            self.fillProperties = kwargs.pop("fillProperties", None)
    def setFillProperties(self, fillProperties = None):
        try:
            super().setFillProperties(fillProperties)
        except AttributeError:
           pass
        self.fillProperties = fillProperties
        return self
    def addFillProperties(self, fillProperties = None):
        if not isinstance(fillProperties, list):
            fillProperties = [fillProperties]
            self.fillProperties = []
            self.fillProperties = self.fillProperties + fillProperties
        return self
    def addFillProperties(self, fillProperties = None):
        if not isinstance(fillProperties, list):
            fillProperties = [fillProperties]
            self.fillProperties = []
            self.fillProperties = self.fillProperties + fillProperties
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.lineProperties = None
        if not self.lineProperties:
            self.lineProperties = kwargs.pop("lineProperties", None)
    def setLineProperties(self, lineProperties = None):
        try:
            super().setLineProperties(lineProperties)
        except AttributeError:
           pass
        self.lineProperties = lineProperties
        return self
    def addLineProperties(self, lineProperties = None):
        if not isinstance(lineProperties, list):
            lineProperties = [lineProperties]
            self.lineProperties = []
            self.lineProperties = self.lineProperties + lineProperties
        return self
    def addLineProperties(self, lineProperties = None):
        if not isinstance(lineProperties, list):
            lineProperties = [lineProperties]
            self.lineProperties = []
            self.lineProperties = self.lineProperties + lineProperties
        return self
        self.material = None
        if not self.material:
            self.material = kwargs.pop("material", None)
    def setMaterial(self, material = None):
        try:
            super().setMaterial(material)
        except AttributeError:
           pass
        self.material = material
        return self
    def addMaterial(self, material = None):
        if not isinstance(material, list):
            material = [material]
            self.material = []
            self.material = self.material + material
        return self
    def addMaterial(self, material = None):
        if not isinstance(material, list):
            material = [material]
            self.material = []
            self.material = self.material + material
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pointProperties = None
        if not self.pointProperties:
            self.pointProperties = kwargs.pop("pointProperties", None)
    def setPointProperties(self, pointProperties = None):
        try:
            super().setPointProperties(pointProperties)
        except AttributeError:
           pass
        self.pointProperties = pointProperties
        return self
    def addPointProperties(self, pointProperties = None):
        if not isinstance(pointProperties, list):
            pointProperties = [pointProperties]
            self.pointProperties = []
            self.pointProperties = self.pointProperties + pointProperties
        return self
    def addPointProperties(self, pointProperties = None):
        if not isinstance(pointProperties, list):
            pointProperties = [pointProperties]
            self.pointProperties = []
            self.pointProperties = self.pointProperties + pointProperties
        return self
        self.shaders = []
        if not self.shaders:
            self.shaders = kwargs.pop("shaders", [])
    def setShaders(self, shaders = []):
        try:
            super().setShaders(shaders)
        except AttributeError:
           pass
        self.shaders = shaders
        return self
    def addShaders(self, shaders = []):
        if not isinstance(shaders, list):
            shaders = [shaders]
            self.shaders = []
            self.shaders = self.shaders + shaders
        return self
    def addShaders(self, shaders = []):
        if not isinstance(shaders, list):
            shaders = [shaders]
            self.shaders = []
            self.shaders = self.shaders + shaders
        return self
        self.texture = None
        if not self.texture:
            self.texture = kwargs.pop("texture", None)
    def setTexture(self, texture = None):
        try:
            super().setTexture(texture)
        except AttributeError:
           pass
        self.texture = texture
        return self
    def addTexture(self, texture = None):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
    def addTexture(self, texture = None):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
        self.textureTransform = None
        if not self.textureTransform:
            self.textureTransform = kwargs.pop("textureTransform", None)
    def setTextureTransform(self, textureTransform = None):
        try:
            super().setTextureTransform(textureTransform)
        except AttributeError:
           pass
        self.textureTransform = textureTransform
        return self
    def addTextureTransform(self, textureTransform = None):
        if not isinstance(textureTransform, list):
            textureTransform = [textureTransform]
            self.textureTransform = []
            self.textureTransform = self.textureTransform + textureTransform
        return self
    def addTextureTransform(self, textureTransform = None):
        if not isinstance(textureTransform, list):
            textureTransform = [textureTransform]
            self.textureTransform = []
            self.textureTransform = self.textureTransform + textureTransform
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Arc2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Arc2D, self).__init__(**kwargs)
        self.endAngle = 1.570796
        if not self.endAngle:
            self.endAngle = kwargs.pop("endAngle", 1.570796)
        if self.endAngle == None or self.endAngle  <=  -6.2832:
            return None
        if self.endAngle == None or self.endAngle  >=  6.2832:
            return None
    def setEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        try:
            super().setEndAngle(endAngle)
        except AttributeError:
           pass
        self.endAngle = endAngle
        return self
    def addEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        if not isinstance(endAngle, list):
            endAngle = [endAngle]
            self.endAngle = []
            self.endAngle = self.endAngle + endAngle
        return self
    def addEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        if not isinstance(endAngle, list):
            endAngle = [endAngle]
            self.endAngle = []
            self.endAngle = self.endAngle + endAngle
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.radius = 1
        if not self.radius:
            self.radius = kwargs.pop("radius", 1)
        if self.radius == None or self.radius  <=  0:
            return None
    def setRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.startAngle = 0
        if not self.startAngle:
            self.startAngle = kwargs.pop("startAngle", 0)
        if self.startAngle == None or self.startAngle  <=  -6.2832:
            return None
        if self.startAngle == None or self.startAngle  >=  6.2832:
            return None
    def setStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        try:
            super().setStartAngle(startAngle)
        except AttributeError:
           pass
        self.startAngle = startAngle
        return self
    def addStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        if not isinstance(startAngle, list):
            startAngle = [startAngle]
            self.startAngle = []
            self.startAngle = self.startAngle + startAngle
        return self
    def addStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        if not isinstance(startAngle, list):
            startAngle = [startAngle]
            self.startAngle = []
            self.startAngle = self.startAngle + startAngle
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ArcClose2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(ArcClose2D, self).__init__(**kwargs)
        self.closureType = "PIE"
        if not self.closureType:
            self.closureType = kwargs.pop("closureType", "PIE")
        if 'PIE' == self.closureType:
            pass
        elif 'CHORD' == self.closureType:
            pass
        else:
            return None
    def setClosureType(self, closureType = "PIE"):
        if 'PIE' == closureType:
            pass
        elif 'CHORD' == closureType:
            pass
        else:
            return None
        try:
            super().setClosureType(closureType)
        except AttributeError:
           pass
        self.closureType = closureType
        return self
    def addClosureType(self, closureType = "PIE"):
        if 'PIE' == closureType:
            pass
        elif 'CHORD' == closureType:
            pass
        else:
            return None
        if not isinstance(closureType, list):
            closureType = [closureType]
            self.closureType = []
            self.closureType = self.closureType + closureType
        return self
    def addClosureType(self, closureType = "PIE"):
        if 'PIE' == closureType:
            pass
        elif 'CHORD' == closureType:
            pass
        else:
            return None
        if not isinstance(closureType, list):
            closureType = [closureType]
            self.closureType = []
            self.closureType = self.closureType + closureType
        return self
        self.endAngle = 1.570796
        if not self.endAngle:
            self.endAngle = kwargs.pop("endAngle", 1.570796)
        if self.endAngle == None or self.endAngle  <=  -6.2832:
            return None
        if self.endAngle == None or self.endAngle  >=  6.2832:
            return None
    def setEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        try:
            super().setEndAngle(endAngle)
        except AttributeError:
           pass
        self.endAngle = endAngle
        return self
    def addEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        if not isinstance(endAngle, list):
            endAngle = [endAngle]
            self.endAngle = []
            self.endAngle = self.endAngle + endAngle
        return self
    def addEndAngle(self, endAngle = 1.570796):
        if endAngle == None or endAngle  <=  -6.2832:
            return None
        if endAngle == None or endAngle  >=  6.2832:
            return None
        if not isinstance(endAngle, list):
            endAngle = [endAngle]
            self.endAngle = []
            self.endAngle = self.endAngle + endAngle
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.radius = 1
        if not self.radius:
            self.radius = kwargs.pop("radius", 1)
        if self.radius == None or self.radius  <=  0:
            return None
    def setRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.solid = False
        if not self.solid:
            self.solid = kwargs.pop("solid", False)
    def setSolid(self, solid = False):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.startAngle = 0
        if not self.startAngle:
            self.startAngle = kwargs.pop("startAngle", 0)
        if self.startAngle == None or self.startAngle  <=  -6.2832:
            return None
        if self.startAngle == None or self.startAngle  >=  6.2832:
            return None
    def setStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        try:
            super().setStartAngle(startAngle)
        except AttributeError:
           pass
        self.startAngle = startAngle
        return self
    def addStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        if not isinstance(startAngle, list):
            startAngle = [startAngle]
            self.startAngle = []
            self.startAngle = self.startAngle + startAngle
        return self
    def addStartAngle(self, startAngle = 0):
        if startAngle == None or startAngle  <=  -6.2832:
            return None
        if startAngle == None or startAngle  >=  6.2832:
            return None
        if not isinstance(startAngle, list):
            startAngle = [startAngle]
            self.startAngle = []
            self.startAngle = self.startAngle + startAngle
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class AudioClip(X3DUrlObject, X3DSoundSourceNode):
    def __init__(self, **kwargs):
        super(AudioClip, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.duration_changed = None
        if not self.duration_changed:
            self.duration_changed = kwargs.pop("duration_changed", None)
        if self.duration_changed == None or self.duration_changed  <  -1:
            return None
    def setduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        try:
            super().setduration_changed(duration_changed)
        except AttributeError:
           pass
        self.duration_changed = duration_changed
        return self
    def addduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
    def addSetduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Paused = None
        if not self.Paused:
            self.Paused = kwargs.pop("Paused", None)
    def setIsPaused(self, Paused = None):
        try:
            super().setIsPaused(Paused)
        except AttributeError:
           pass
        self.Paused = Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pauseTime = 0
        if not self.pauseTime:
            self.pauseTime = kwargs.pop("pauseTime", 0)
    def setPauseTime(self, pauseTime = 0):
        try:
            super().setPauseTime(pauseTime)
        except AttributeError:
           pass
        self.pauseTime = pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
        self.pitch = 1.0
        if not self.pitch:
            self.pitch = kwargs.pop("pitch", 1.0)
        if self.pitch == None or self.pitch  <=  0:
            return None
    def setPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        try:
            super().setPitch(pitch)
        except AttributeError:
           pass
        self.pitch = pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
        self.resumeTime = 0
        if not self.resumeTime:
            self.resumeTime = kwargs.pop("resumeTime", 0)
    def setResumeTime(self, resumeTime = 0):
        try:
            super().setResumeTime(resumeTime)
        except AttributeError:
           pass
        self.resumeTime = resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
        self.startTime = 0
        if not self.startTime:
            self.startTime = kwargs.pop("startTime", 0)
    def setStartTime(self, startTime = 0):
        try:
            super().setStartTime(startTime)
        except AttributeError:
           pass
        self.startTime = startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
        self.stopTime = 0
        if not self.stopTime:
            self.stopTime = kwargs.pop("stopTime", 0)
    def setStopTime(self, stopTime = 0):
        try:
            super().setStopTime(stopTime)
        except AttributeError:
           pass
        self.stopTime = stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Background(X3DBackgroundNode):
    def __init__(self, **kwargs):
        super(Background, self).__init__(**kwargs)
        self.backUrl = []
        if not self.backUrl:
            self.backUrl = kwargs.pop("backUrl", [])
    def setBackUrl(self, backUrl = []):
        try:
            super().setBackUrl(backUrl)
        except AttributeError:
           pass
        self.backUrl = backUrl
        return self
    def addBackUrl(self, backUrl = []):
        if not isinstance(backUrl, list):
            backUrl = [backUrl]
            self.backUrl = []
            self.backUrl = self.backUrl + backUrl
        return self
    def addBackUrl(self, backUrl = []):
        if not isinstance(backUrl, list):
            backUrl = [backUrl]
            self.backUrl = []
            self.backUrl = self.backUrl + backUrl
        return self
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.bottomUrl = []
        if not self.bottomUrl:
            self.bottomUrl = kwargs.pop("bottomUrl", [])
    def setBottomUrl(self, bottomUrl = []):
        try:
            super().setBottomUrl(bottomUrl)
        except AttributeError:
           pass
        self.bottomUrl = bottomUrl
        return self
    def addBottomUrl(self, bottomUrl = []):
        if not isinstance(bottomUrl, list):
            bottomUrl = [bottomUrl]
            self.bottomUrl = []
            self.bottomUrl = self.bottomUrl + bottomUrl
        return self
    def addBottomUrl(self, bottomUrl = []):
        if not isinstance(bottomUrl, list):
            bottomUrl = [bottomUrl]
            self.bottomUrl = []
            self.bottomUrl = self.bottomUrl + bottomUrl
        return self
        self.frontUrl = []
        if not self.frontUrl:
            self.frontUrl = kwargs.pop("frontUrl", [])
    def setFrontUrl(self, frontUrl = []):
        try:
            super().setFrontUrl(frontUrl)
        except AttributeError:
           pass
        self.frontUrl = frontUrl
        return self
    def addFrontUrl(self, frontUrl = []):
        if not isinstance(frontUrl, list):
            frontUrl = [frontUrl]
            self.frontUrl = []
            self.frontUrl = self.frontUrl + frontUrl
        return self
    def addFrontUrl(self, frontUrl = []):
        if not isinstance(frontUrl, list):
            frontUrl = [frontUrl]
            self.frontUrl = []
            self.frontUrl = self.frontUrl + frontUrl
        return self
        self.groundAngle = []
        if not self.groundAngle:
            self.groundAngle = kwargs.pop("groundAngle", [])
        if self.groundAngle == None or len(self.groundAngle) <= 0 or min(self.groundAngle)  <  0:
            return None
        if self.groundAngle == None or len(self.groundAngle) <= 0 or max(self.groundAngle)  >  1.5708:
            return None
    def setGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        try:
            super().setGroundAngle(groundAngle)
        except AttributeError:
           pass
        self.groundAngle = groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
        self.groundColor = []
        if not self.groundColor:
            self.groundColor = kwargs.pop("groundColor", [])
        if self.groundColor == None or len(self.groundColor) <= 0 or min(self.groundColor)  <  0:
            return None
        if self.groundColor == None or len(self.groundColor) <= 0 or max(self.groundColor)  >  1:
            return None
    def setGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        try:
            super().setGroundColor(groundColor)
        except AttributeError:
           pass
        self.groundColor = groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.leftUrl = []
        if not self.leftUrl:
            self.leftUrl = kwargs.pop("leftUrl", [])
    def setLeftUrl(self, leftUrl = []):
        try:
            super().setLeftUrl(leftUrl)
        except AttributeError:
           pass
        self.leftUrl = leftUrl
        return self
    def addLeftUrl(self, leftUrl = []):
        if not isinstance(leftUrl, list):
            leftUrl = [leftUrl]
            self.leftUrl = []
            self.leftUrl = self.leftUrl + leftUrl
        return self
    def addLeftUrl(self, leftUrl = []):
        if not isinstance(leftUrl, list):
            leftUrl = [leftUrl]
            self.leftUrl = []
            self.leftUrl = self.leftUrl + leftUrl
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rightUrl = []
        if not self.rightUrl:
            self.rightUrl = kwargs.pop("rightUrl", [])
    def setRightUrl(self, rightUrl = []):
        try:
            super().setRightUrl(rightUrl)
        except AttributeError:
           pass
        self.rightUrl = rightUrl
        return self
    def addRightUrl(self, rightUrl = []):
        if not isinstance(rightUrl, list):
            rightUrl = [rightUrl]
            self.rightUrl = []
            self.rightUrl = self.rightUrl + rightUrl
        return self
    def addRightUrl(self, rightUrl = []):
        if not isinstance(rightUrl, list):
            rightUrl = [rightUrl]
            self.rightUrl = []
            self.rightUrl = self.rightUrl + rightUrl
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.skyAngle = []
        if not self.skyAngle:
            self.skyAngle = kwargs.pop("skyAngle", [])
        if self.skyAngle == None or len(self.skyAngle) <= 0 or min(self.skyAngle)  <  0:
            return None
        if self.skyAngle == None or len(self.skyAngle) <= 0 or max(self.skyAngle)  >  3.1416:
            return None
    def setSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        try:
            super().setSkyAngle(skyAngle)
        except AttributeError:
           pass
        self.skyAngle = skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
        self.skyColor = [0, 0, 0]
        if not self.skyColor:
            self.skyColor = kwargs.pop("skyColor", [0, 0, 0])
        if self.skyColor == None or len(self.skyColor) <= 0 or min(self.skyColor)  <  0:
            return None
        if self.skyColor == None or len(self.skyColor) <= 0 or max(self.skyColor)  >  1:
            return None
    def setSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        try:
            super().setSkyColor(skyColor)
        except AttributeError:
           pass
        self.skyColor = skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
        self.topUrl = []
        if not self.topUrl:
            self.topUrl = kwargs.pop("topUrl", [])
    def setTopUrl(self, topUrl = []):
        try:
            super().setTopUrl(topUrl)
        except AttributeError:
           pass
        self.topUrl = topUrl
        return self
    def addTopUrl(self, topUrl = []):
        if not isinstance(topUrl, list):
            topUrl = [topUrl]
            self.topUrl = []
            self.topUrl = self.topUrl + topUrl
        return self
    def addTopUrl(self, topUrl = []):
        if not isinstance(topUrl, list):
            topUrl = [topUrl]
            self.topUrl = []
            self.topUrl = self.topUrl + topUrl
        return self
        self.transparency = 0
        if not self.transparency:
            self.transparency = kwargs.pop("transparency", 0)
        if self.transparency == None or self.transparency  <  0:
            return None
        if self.transparency == None or self.transparency  >  1:
            return None
    def setTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        try:
            super().setTransparency(transparency)
        except AttributeError:
           pass
        self.transparency = transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BallJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(BallJoint, self).__init__(**kwargs)
        self.anchorPoint = [0, 0, 0]
        if not self.anchorPoint:
            self.anchorPoint = kwargs.pop("anchorPoint", [0, 0, 0])
    def setAnchorPoint(self, anchorPoint = [0, 0, 0]):
        try:
            super().setAnchorPoint(anchorPoint)
        except AttributeError:
           pass
        self.anchorPoint = anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body1AnchorPoint = []
        if not self.body1AnchorPoint:
            self.body1AnchorPoint = kwargs.pop("body1AnchorPoint", [])
    def setBody1AnchorPoint(self, body1AnchorPoint = []):
        try:
            super().setBody1AnchorPoint(body1AnchorPoint)
        except AttributeError:
           pass
        self.body1AnchorPoint = body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.body2AnchorPoint = []
        if not self.body2AnchorPoint:
            self.body2AnchorPoint = kwargs.pop("body2AnchorPoint", [])
    def setBody2AnchorPoint(self, body2AnchorPoint = []):
        try:
            super().setBody2AnchorPoint(body2AnchorPoint)
        except AttributeError:
           pass
        self.body2AnchorPoint = body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Billboard(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Billboard, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.axisOfRotation = [0, 1, 0]
        if not self.axisOfRotation:
            self.axisOfRotation = kwargs.pop("axisOfRotation", [0, 1, 0])
    def setAxisOfRotation(self, axisOfRotation = [0, 1, 0]):
        try:
            super().setAxisOfRotation(axisOfRotation)
        except AttributeError:
           pass
        self.axisOfRotation = axisOfRotation
        return self
    def addAxisOfRotation(self, axisOfRotation = [0, 1, 0]):
        if not isinstance(axisOfRotation, list):
            axisOfRotation = [axisOfRotation]
            self.axisOfRotation = []
            self.axisOfRotation = self.axisOfRotation + axisOfRotation
        return self
    def addAxisOfRotation(self, axisOfRotation = [0, 1, 0]):
        if not isinstance(axisOfRotation, list):
            axisOfRotation = [axisOfRotation]
            self.axisOfRotation = []
            self.axisOfRotation = self.axisOfRotation + axisOfRotation
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BlendedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(BlendedVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.renderStyle = None
        if not self.renderStyle:
            self.renderStyle = kwargs.pop("renderStyle", None)
    def setRenderStyle(self, renderStyle = None):
        try:
            super().setRenderStyle(renderStyle)
        except AttributeError:
           pass
        self.renderStyle = renderStyle
        return self
    def addRenderStyle(self, renderStyle = None):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
    def addRenderStyle(self, renderStyle = None):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
        self.voxels = None
        if not self.voxels:
            self.voxels = kwargs.pop("voxels", None)
    def setVoxels(self, voxels = None):
        try:
            super().setVoxels(voxels)
        except AttributeError:
           pass
        self.voxels = voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
        self.weightConstant1 = 0.5
        if not self.weightConstant1:
            self.weightConstant1 = kwargs.pop("weightConstant1", 0.5)
        if self.weightConstant1 == None or self.weightConstant1  <  0:
            return None
        if self.weightConstant1 == None or self.weightConstant1  >  1:
            return None
    def setWeightConstant1(self, weightConstant1 = 0.5):
        if weightConstant1 == None or weightConstant1  <  0:
            return None
        if weightConstant1 == None or weightConstant1  >  1:
            return None
        try:
            super().setWeightConstant1(weightConstant1)
        except AttributeError:
           pass
        self.weightConstant1 = weightConstant1
        return self
    def addWeightConstant1(self, weightConstant1 = 0.5):
        if weightConstant1 == None or weightConstant1  <  0:
            return None
        if weightConstant1 == None or weightConstant1  >  1:
            return None
        if not isinstance(weightConstant1, list):
            weightConstant1 = [weightConstant1]
            self.weightConstant1 = []
            self.weightConstant1 = self.weightConstant1 + weightConstant1
        return self
    def addWeightConstant1(self, weightConstant1 = 0.5):
        if weightConstant1 == None or weightConstant1  <  0:
            return None
        if weightConstant1 == None or weightConstant1  >  1:
            return None
        if not isinstance(weightConstant1, list):
            weightConstant1 = [weightConstant1]
            self.weightConstant1 = []
            self.weightConstant1 = self.weightConstant1 + weightConstant1
        return self
        self.weightConstant2 = 0.5
        if not self.weightConstant2:
            self.weightConstant2 = kwargs.pop("weightConstant2", 0.5)
        if self.weightConstant2 == None or self.weightConstant2  <  0:
            return None
        if self.weightConstant2 == None or self.weightConstant2  >  1:
            return None
    def setWeightConstant2(self, weightConstant2 = 0.5):
        if weightConstant2 == None or weightConstant2  <  0:
            return None
        if weightConstant2 == None or weightConstant2  >  1:
            return None
        try:
            super().setWeightConstant2(weightConstant2)
        except AttributeError:
           pass
        self.weightConstant2 = weightConstant2
        return self
    def addWeightConstant2(self, weightConstant2 = 0.5):
        if weightConstant2 == None or weightConstant2  <  0:
            return None
        if weightConstant2 == None or weightConstant2  >  1:
            return None
        if not isinstance(weightConstant2, list):
            weightConstant2 = [weightConstant2]
            self.weightConstant2 = []
            self.weightConstant2 = self.weightConstant2 + weightConstant2
        return self
    def addWeightConstant2(self, weightConstant2 = 0.5):
        if weightConstant2 == None or weightConstant2  <  0:
            return None
        if weightConstant2 == None or weightConstant2  >  1:
            return None
        if not isinstance(weightConstant2, list):
            weightConstant2 = [weightConstant2]
            self.weightConstant2 = []
            self.weightConstant2 = self.weightConstant2 + weightConstant2
        return self
        self.weightFunction1 = "CONSTANT"
        if not self.weightFunction1:
            self.weightFunction1 = kwargs.pop("weightFunction1", "CONSTANT")
        if 'CONSTANT' == self.weightFunction1:
            pass
        elif 'ALPHA1' == self.weightFunction1:
            pass
        elif 'ALPHA2' == self.weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA1' == self.weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA2' == self.weightFunction1:
            pass
        elif 'TABLE' == self.weightFunction1:
            pass
        else:
            return None
    def setWeightFunction1(self, weightFunction1 = "CONSTANT"):
        if 'CONSTANT' == weightFunction1:
            pass
        elif 'ALPHA1' == weightFunction1:
            pass
        elif 'ALPHA2' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction1:
            pass
        elif 'TABLE' == weightFunction1:
            pass
        else:
            return None
        try:
            super().setWeightFunction1(weightFunction1)
        except AttributeError:
           pass
        self.weightFunction1 = weightFunction1
        return self
    def addWeightFunction1(self, weightFunction1 = "CONSTANT"):
        if 'CONSTANT' == weightFunction1:
            pass
        elif 'ALPHA1' == weightFunction1:
            pass
        elif 'ALPHA2' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction1:
            pass
        elif 'TABLE' == weightFunction1:
            pass
        else:
            return None
        if not isinstance(weightFunction1, list):
            weightFunction1 = [weightFunction1]
            self.weightFunction1 = []
            self.weightFunction1 = self.weightFunction1 + weightFunction1
        return self
    def addWeightFunction1(self, weightFunction1 = "CONSTANT"):
        if 'CONSTANT' == weightFunction1:
            pass
        elif 'ALPHA1' == weightFunction1:
            pass
        elif 'ALPHA2' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction1:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction1:
            pass
        elif 'TABLE' == weightFunction1:
            pass
        else:
            return None
        if not isinstance(weightFunction1, list):
            weightFunction1 = [weightFunction1]
            self.weightFunction1 = []
            self.weightFunction1 = self.weightFunction1 + weightFunction1
        return self
        self.weightFunction2 = "CONSTANT"
        if not self.weightFunction2:
            self.weightFunction2 = kwargs.pop("weightFunction2", "CONSTANT")
        if 'CONSTANT' == self.weightFunction2:
            pass
        elif 'ALPHA1' == self.weightFunction2:
            pass
        elif 'ALPHA2' == self.weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA1' == self.weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA2' == self.weightFunction2:
            pass
        elif 'TABLE' == self.weightFunction2:
            pass
        else:
            return None
    def setWeightFunction2(self, weightFunction2 = "CONSTANT"):
        if 'CONSTANT' == weightFunction2:
            pass
        elif 'ALPHA1' == weightFunction2:
            pass
        elif 'ALPHA2' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction2:
            pass
        elif 'TABLE' == weightFunction2:
            pass
        else:
            return None
        try:
            super().setWeightFunction2(weightFunction2)
        except AttributeError:
           pass
        self.weightFunction2 = weightFunction2
        return self
    def addWeightFunction2(self, weightFunction2 = "CONSTANT"):
        if 'CONSTANT' == weightFunction2:
            pass
        elif 'ALPHA1' == weightFunction2:
            pass
        elif 'ALPHA2' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction2:
            pass
        elif 'TABLE' == weightFunction2:
            pass
        else:
            return None
        if not isinstance(weightFunction2, list):
            weightFunction2 = [weightFunction2]
            self.weightFunction2 = []
            self.weightFunction2 = self.weightFunction2 + weightFunction2
        return self
    def addWeightFunction2(self, weightFunction2 = "CONSTANT"):
        if 'CONSTANT' == weightFunction2:
            pass
        elif 'ALPHA1' == weightFunction2:
            pass
        elif 'ALPHA2' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA1' == weightFunction2:
            pass
        elif 'ONE_MINUS_ALPHA2' == weightFunction2:
            pass
        elif 'TABLE' == weightFunction2:
            pass
        else:
            return None
        if not isinstance(weightFunction2, list):
            weightFunction2 = [weightFunction2]
            self.weightFunction2 = []
            self.weightFunction2 = self.weightFunction2 + weightFunction2
        return self
        self.weightTransferFunction1 = None
        if not self.weightTransferFunction1:
            self.weightTransferFunction1 = kwargs.pop("weightTransferFunction1", None)
    def setWeightTransferFunction1(self, weightTransferFunction1 = None):
        try:
            super().setWeightTransferFunction1(weightTransferFunction1)
        except AttributeError:
           pass
        self.weightTransferFunction1 = weightTransferFunction1
        return self
    def addWeightTransferFunction1(self, weightTransferFunction1 = None):
        if not isinstance(weightTransferFunction1, list):
            weightTransferFunction1 = [weightTransferFunction1]
            self.weightTransferFunction1 = []
            self.weightTransferFunction1 = self.weightTransferFunction1 + weightTransferFunction1
        return self
    def addWeightTransferFunction1(self, weightTransferFunction1 = None):
        if not isinstance(weightTransferFunction1, list):
            weightTransferFunction1 = [weightTransferFunction1]
            self.weightTransferFunction1 = []
            self.weightTransferFunction1 = self.weightTransferFunction1 + weightTransferFunction1
        return self
        self.weightTransferFunction2 = None
        if not self.weightTransferFunction2:
            self.weightTransferFunction2 = kwargs.pop("weightTransferFunction2", None)
    def setWeightTransferFunction2(self, weightTransferFunction2 = None):
        try:
            super().setWeightTransferFunction2(weightTransferFunction2)
        except AttributeError:
           pass
        self.weightTransferFunction2 = weightTransferFunction2
        return self
    def addWeightTransferFunction2(self, weightTransferFunction2 = None):
        if not isinstance(weightTransferFunction2, list):
            weightTransferFunction2 = [weightTransferFunction2]
            self.weightTransferFunction2 = []
            self.weightTransferFunction2 = self.weightTransferFunction2 + weightTransferFunction2
        return self
    def addWeightTransferFunction2(self, weightTransferFunction2 = None):
        if not isinstance(weightTransferFunction2, list):
            weightTransferFunction2 = [weightTransferFunction2]
            self.weightTransferFunction2 = []
            self.weightTransferFunction2 = self.weightTransferFunction2 + weightTransferFunction2
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BooleanFilter(X3DChildNode):
    def __init__(self, **kwargs):
        super(BooleanFilter, self).__init__(**kwargs)
        self.inputFalse = None
        if not self.inputFalse:
            self.inputFalse = kwargs.pop("inputFalse", None)
    def setInputFalse(self, inputFalse = None):
        try:
            super().setInputFalse(inputFalse)
        except AttributeError:
           pass
        self.inputFalse = inputFalse
        return self
    def addInputFalse(self, inputFalse = None):
        if not isinstance(inputFalse, list):
            inputFalse = [inputFalse]
            self.inputFalse = []
            self.inputFalse = self.inputFalse + inputFalse
        return self
    def addInputFalse(self, inputFalse = None):
        if not isinstance(inputFalse, list):
            inputFalse = [inputFalse]
            self.inputFalse = []
            self.inputFalse = self.inputFalse + inputFalse
        return self
        self.inputNegate = None
        if not self.inputNegate:
            self.inputNegate = kwargs.pop("inputNegate", None)
    def setInputNegate(self, inputNegate = None):
        try:
            super().setInputNegate(inputNegate)
        except AttributeError:
           pass
        self.inputNegate = inputNegate
        return self
    def addInputNegate(self, inputNegate = None):
        if not isinstance(inputNegate, list):
            inputNegate = [inputNegate]
            self.inputNegate = []
            self.inputNegate = self.inputNegate + inputNegate
        return self
    def addInputNegate(self, inputNegate = None):
        if not isinstance(inputNegate, list):
            inputNegate = [inputNegate]
            self.inputNegate = []
            self.inputNegate = self.inputNegate + inputNegate
        return self
        self.inputTrue = None
        if not self.inputTrue:
            self.inputTrue = kwargs.pop("inputTrue", None)
    def setInputTrue(self, inputTrue = None):
        try:
            super().setInputTrue(inputTrue)
        except AttributeError:
           pass
        self.inputTrue = inputTrue
        return self
    def addInputTrue(self, inputTrue = None):
        if not isinstance(inputTrue, list):
            inputTrue = [inputTrue]
            self.inputTrue = []
            self.inputTrue = self.inputTrue + inputTrue
        return self
    def addInputTrue(self, inputTrue = None):
        if not isinstance(inputTrue, list):
            inputTrue = [inputTrue]
            self.inputTrue = []
            self.inputTrue = self.inputTrue + inputTrue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Boolean = None
        if not self.Boolean:
            self.Boolean = kwargs.pop("Boolean", None)
    def setSet_boolean(self, Boolean = None):
        try:
            super().setSet_boolean(Boolean)
        except AttributeError:
           pass
        self.Boolean = Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BooleanSequencer(X3DSequencerNode):
    def __init__(self, **kwargs):
        super(BooleanSequencer, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.next = None
        if not self.next:
            self.next = kwargs.pop("next", None)
    def setNext(self, next = None):
        try:
            super().setNext(next)
        except AttributeError:
           pass
        self.next = next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
        self.previous = None
        if not self.previous:
            self.previous = kwargs.pop("previous", None)
    def setPrevious(self, previous = None):
        try:
            super().setPrevious(previous)
        except AttributeError:
           pass
        self.previous = previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BooleanToggle(X3DChildNode):
    def __init__(self, **kwargs):
        super(BooleanToggle, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Boolean = None
        if not self.Boolean:
            self.Boolean = kwargs.pop("Boolean", None)
    def setSet_boolean(self, Boolean = None):
        try:
            super().setSet_boolean(Boolean)
        except AttributeError:
           pass
        self.Boolean = Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
        self.toggle = False
        if not self.toggle:
            self.toggle = kwargs.pop("toggle", False)
    def setToggle(self, toggle = False):
        try:
            super().setToggle(toggle)
        except AttributeError:
           pass
        self.toggle = toggle
        return self
    def addToggle(self, toggle = False):
        if not isinstance(toggle, list):
            toggle = [toggle]
            self.toggle = []
            self.toggle = self.toggle + toggle
        return self
    def addToggle(self, toggle = False):
        if not isinstance(toggle, list):
            toggle = [toggle]
            self.toggle = []
            self.toggle = self.toggle + toggle
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BooleanTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super(BooleanTrigger, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.TriggerTime = None
        if not self.TriggerTime:
            self.TriggerTime = kwargs.pop("TriggerTime", None)
    def setSet_triggerTime(self, TriggerTime = None):
        try:
            super().setSet_triggerTime(TriggerTime)
        except AttributeError:
           pass
        self.TriggerTime = TriggerTime
        return self
    def addSet_triggerTime(self, TriggerTime = None):
        if not isinstance(TriggerTime, list):
            TriggerTime = [TriggerTime]
            self.TriggerTime = []
            self.TriggerTime = self.TriggerTime + TriggerTime
        return self
    def addSet_triggerTime(self, TriggerTime = None):
        if not isinstance(TriggerTime, list):
            TriggerTime = [TriggerTime]
            self.TriggerTime = []
            self.TriggerTime = self.TriggerTime + TriggerTime
        return self
        self.triggerTrue = None
        if not self.triggerTrue:
            self.triggerTrue = kwargs.pop("triggerTrue", None)
    def setTriggerTrue(self, triggerTrue = None):
        try:
            super().setTriggerTrue(triggerTrue)
        except AttributeError:
           pass
        self.triggerTrue = triggerTrue
        return self
    def addTriggerTrue(self, triggerTrue = None):
        if not isinstance(triggerTrue, list):
            triggerTrue = [triggerTrue]
            self.triggerTrue = []
            self.triggerTrue = self.triggerTrue + triggerTrue
        return self
    def addTriggerTrue(self, triggerTrue = None):
        if not isinstance(triggerTrue, list):
            triggerTrue = [triggerTrue]
            self.triggerTrue = []
            self.triggerTrue = self.triggerTrue + triggerTrue
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BoundaryEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(BoundaryEnhancementVolumeStyle, self).__init__(**kwargs)
        self.boundaryOpacity = 0.9
        if not self.boundaryOpacity:
            self.boundaryOpacity = kwargs.pop("boundaryOpacity", 0.9)
        if self.boundaryOpacity == None or self.boundaryOpacity  <  0:
            return None
        if self.boundaryOpacity == None or self.boundaryOpacity  >  1:
            return None
    def setBoundaryOpacity(self, boundaryOpacity = 0.9):
        if boundaryOpacity == None or boundaryOpacity  <  0:
            return None
        if boundaryOpacity == None or boundaryOpacity  >  1:
            return None
        try:
            super().setBoundaryOpacity(boundaryOpacity)
        except AttributeError:
           pass
        self.boundaryOpacity = boundaryOpacity
        return self
    def addBoundaryOpacity(self, boundaryOpacity = 0.9):
        if boundaryOpacity == None or boundaryOpacity  <  0:
            return None
        if boundaryOpacity == None or boundaryOpacity  >  1:
            return None
        if not isinstance(boundaryOpacity, list):
            boundaryOpacity = [boundaryOpacity]
            self.boundaryOpacity = []
            self.boundaryOpacity = self.boundaryOpacity + boundaryOpacity
        return self
    def addBoundaryOpacity(self, boundaryOpacity = 0.9):
        if boundaryOpacity == None or boundaryOpacity  <  0:
            return None
        if boundaryOpacity == None or boundaryOpacity  >  1:
            return None
        if not isinstance(boundaryOpacity, list):
            boundaryOpacity = [boundaryOpacity]
            self.boundaryOpacity = []
            self.boundaryOpacity = self.boundaryOpacity + boundaryOpacity
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.opacityFactor = 2
        if not self.opacityFactor:
            self.opacityFactor = kwargs.pop("opacityFactor", 2)
        if self.opacityFactor == None or self.opacityFactor  <  0:
            return None
    def setOpacityFactor(self, opacityFactor = 2):
        if opacityFactor == None or opacityFactor  <  0:
            return None
        try:
            super().setOpacityFactor(opacityFactor)
        except AttributeError:
           pass
        self.opacityFactor = opacityFactor
        return self
    def addOpacityFactor(self, opacityFactor = 2):
        if opacityFactor == None or opacityFactor  <  0:
            return None
        if not isinstance(opacityFactor, list):
            opacityFactor = [opacityFactor]
            self.opacityFactor = []
            self.opacityFactor = self.opacityFactor + opacityFactor
        return self
    def addOpacityFactor(self, opacityFactor = 2):
        if opacityFactor == None or opacityFactor  <  0:
            return None
        if not isinstance(opacityFactor, list):
            opacityFactor = [opacityFactor]
            self.opacityFactor = []
            self.opacityFactor = self.opacityFactor + opacityFactor
        return self
        self.retainedOpacity = 0.2
        if not self.retainedOpacity:
            self.retainedOpacity = kwargs.pop("retainedOpacity", 0.2)
        if self.retainedOpacity == None or self.retainedOpacity  <  0:
            return None
        if self.retainedOpacity == None or self.retainedOpacity  >  1:
            return None
    def setRetainedOpacity(self, retainedOpacity = 0.2):
        if retainedOpacity == None or retainedOpacity  <  0:
            return None
        if retainedOpacity == None or retainedOpacity  >  1:
            return None
        try:
            super().setRetainedOpacity(retainedOpacity)
        except AttributeError:
           pass
        self.retainedOpacity = retainedOpacity
        return self
    def addRetainedOpacity(self, retainedOpacity = 0.2):
        if retainedOpacity == None or retainedOpacity  <  0:
            return None
        if retainedOpacity == None or retainedOpacity  >  1:
            return None
        if not isinstance(retainedOpacity, list):
            retainedOpacity = [retainedOpacity]
            self.retainedOpacity = []
            self.retainedOpacity = self.retainedOpacity + retainedOpacity
        return self
    def addRetainedOpacity(self, retainedOpacity = 0.2):
        if retainedOpacity == None or retainedOpacity  <  0:
            return None
        if retainedOpacity == None or retainedOpacity  >  1:
            return None
        if not isinstance(retainedOpacity, list):
            retainedOpacity = [retainedOpacity]
            self.retainedOpacity = []
            self.retainedOpacity = self.retainedOpacity + retainedOpacity
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class BoundedPhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super(BoundedPhysicsModel, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.geometry = None
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", None)
    def setGeometry(self, geometry = None):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Box(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Box, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = [2, 2, 2]
        if not self.size:
            self.size = kwargs.pop("size", [2, 2, 2])
    def setSize(self, size = [2, 2, 2]):
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [2, 2, 2]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [2, 2, 2]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CADAssembly(X3DProductStructureChildNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        super(CADAssembly, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CADFace(X3DBoundedObject, X3DProductStructureChildNode):
    def __init__(self, **kwargs):
        super(CADFace, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.shape = None
        if not self.shape:
            self.shape = kwargs.pop("shape", None)
    def setShape(self, shape = None):
        try:
            super().setShape(shape)
        except AttributeError:
           pass
        self.shape = shape
        return self
    def addShape(self, shape = None):
        if not isinstance(shape, list):
            shape = [shape]
            self.shape = []
            self.shape = self.shape + shape
        return self
    def addShape(self, shape = None):
        if not isinstance(shape, list):
            shape = [shape]
            self.shape = []
            self.shape = self.shape + shape
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CADLayer(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(CADLayer, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CADPart(X3DGroupingNode, X3DProductStructureChildNode):
    def __init__(self, **kwargs):
        super(CADPart, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
    def setScale(self, scale = [1, 1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CartoonVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(CartoonVolumeStyle, self).__init__(**kwargs)
        self.colorSteps = 4
        if not self.colorSteps:
            self.colorSteps = kwargs.pop("colorSteps", 4)
        if self.colorSteps == None or self.colorSteps  <  1:
            return None
        if self.colorSteps == None or self.colorSteps  >  64:
            return None
    def setColorSteps(self, colorSteps = 4):
        if colorSteps == None or colorSteps  <  1:
            return None
        if colorSteps == None or colorSteps  >  64:
            return None
        try:
            super().setColorSteps(colorSteps)
        except AttributeError:
           pass
        self.colorSteps = colorSteps
        return self
    def addColorSteps(self, colorSteps = 4):
        if colorSteps == None or colorSteps  <  1:
            return None
        if colorSteps == None or colorSteps  >  64:
            return None
        if not isinstance(colorSteps, list):
            colorSteps = [colorSteps]
            self.colorSteps = []
            self.colorSteps = self.colorSteps + colorSteps
        return self
    def addColorSteps(self, colorSteps = 4):
        if colorSteps == None or colorSteps  <  1:
            return None
        if colorSteps == None or colorSteps  >  64:
            return None
        if not isinstance(colorSteps, list):
            colorSteps = [colorSteps]
            self.colorSteps = []
            self.colorSteps = self.colorSteps + colorSteps
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orthogonalColor = [1, 1, 1, 1]
        if not self.orthogonalColor:
            self.orthogonalColor = kwargs.pop("orthogonalColor", [1, 1, 1, 1])
        if self.orthogonalColor == None or self.orthogonalColor  <  0:
            return None
        if self.orthogonalColor == None or self.orthogonalColor  >  1:
            return None
    def setOrthogonalColor(self, orthogonalColor = [1, 1, 1, 1]):
        if orthogonalColor == None or orthogonalColor  <  0:
            return None
        if orthogonalColor == None or orthogonalColor  >  1:
            return None
        try:
            super().setOrthogonalColor(orthogonalColor)
        except AttributeError:
           pass
        self.orthogonalColor = orthogonalColor
        return self
    def addOrthogonalColor(self, orthogonalColor = [1, 1, 1, 1]):
        if orthogonalColor == None or orthogonalColor  <  0:
            return None
        if orthogonalColor == None or orthogonalColor  >  1:
            return None
        if not isinstance(orthogonalColor, list):
            orthogonalColor = [orthogonalColor]
            self.orthogonalColor = []
            self.orthogonalColor = self.orthogonalColor + orthogonalColor
        return self
    def addOrthogonalColor(self, orthogonalColor = [1, 1, 1, 1]):
        if orthogonalColor == None or orthogonalColor  <  0:
            return None
        if orthogonalColor == None or orthogonalColor  >  1:
            return None
        if not isinstance(orthogonalColor, list):
            orthogonalColor = [orthogonalColor]
            self.orthogonalColor = []
            self.orthogonalColor = self.orthogonalColor + orthogonalColor
        return self
        self.parallelColor = [0, 0, 0, 1]
        if not self.parallelColor:
            self.parallelColor = kwargs.pop("parallelColor", [0, 0, 0, 1])
        if self.parallelColor == None or self.parallelColor  <  0:
            return None
        if self.parallelColor == None or self.parallelColor  >  1:
            return None
    def setParallelColor(self, parallelColor = [0, 0, 0, 1]):
        if parallelColor == None or parallelColor  <  0:
            return None
        if parallelColor == None or parallelColor  >  1:
            return None
        try:
            super().setParallelColor(parallelColor)
        except AttributeError:
           pass
        self.parallelColor = parallelColor
        return self
    def addParallelColor(self, parallelColor = [0, 0, 0, 1]):
        if parallelColor == None or parallelColor  <  0:
            return None
        if parallelColor == None or parallelColor  >  1:
            return None
        if not isinstance(parallelColor, list):
            parallelColor = [parallelColor]
            self.parallelColor = []
            self.parallelColor = self.parallelColor + parallelColor
        return self
    def addParallelColor(self, parallelColor = [0, 0, 0, 1]):
        if parallelColor == None or parallelColor  <  0:
            return None
        if parallelColor == None or parallelColor  >  1:
            return None
        if not isinstance(parallelColor, list):
            parallelColor = [parallelColor]
            self.parallelColor = []
            self.parallelColor = self.parallelColor + parallelColor
        return self
        self.surfaceNormals = None
        if not self.surfaceNormals:
            self.surfaceNormals = kwargs.pop("surfaceNormals", None)
    def setSurfaceNormals(self, surfaceNormals = None):
        try:
            super().setSurfaceNormals(surfaceNormals)
        except AttributeError:
           pass
        self.surfaceNormals = surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Circle2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Circle2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.radius = 1
        if not self.radius:
            self.radius = kwargs.pop("radius", 1)
        if self.radius == None or self.radius  <=  0:
            return None
    def setRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ClipPlane(X3DChildNode):
    def __init__(self, **kwargs):
        super(ClipPlane, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.plane = [0, 1, 0, 0]
        if not self.plane:
            self.plane = kwargs.pop("plane", [0, 1, 0, 0])
        if self.plane == None or self.plane  <  -1:
            return None
        if self.plane == None or self.plane  >  1:
            return None
    def setPlane(self, plane = [0, 1, 0, 0]):
        if plane == None or plane  <  -1:
            return None
        if plane == None or plane  >  1:
            return None
        try:
            super().setPlane(plane)
        except AttributeError:
           pass
        self.plane = plane
        return self
    def addPlane(self, plane = [0, 1, 0, 0]):
        if plane == None or plane  <  -1:
            return None
        if plane == None or plane  >  1:
            return None
        if not isinstance(plane, list):
            plane = [plane]
            self.plane = []
            self.plane = self.plane + plane
        return self
    def addPlane(self, plane = [0, 1, 0, 0]):
        if plane == None or plane  <  -1:
            return None
        if plane == None or plane  >  1:
            return None
        if not isinstance(plane, list):
            plane = [plane]
            self.plane = []
            self.plane = self.plane + plane
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CollidableOffset(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        super(CollidableOffset, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.collidable = None
        if not self.collidable:
            self.collidable = kwargs.pop("collidable", None)
    def setCollidable(self, collidable = None):
        try:
            super().setCollidable(collidable)
        except AttributeError:
           pass
        self.collidable = collidable
        return self
    def addCollidable(self, collidable = None):
        if not isinstance(collidable, list):
            collidable = [collidable]
            self.collidable = []
            self.collidable = self.collidable + collidable
        return self
    def addCollidable(self, collidable = None):
        if not isinstance(collidable, list):
            collidable = [collidable]
            self.collidable = []
            self.collidable = self.collidable + collidable
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CollidableShape(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        super(CollidableShape, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.shape = None
        if not self.shape:
            self.shape = kwargs.pop("shape", None)
    def setShape(self, shape = None):
        try:
            super().setShape(shape)
        except AttributeError:
           pass
        self.shape = shape
        return self
    def addShape(self, shape = None):
        if not isinstance(shape, list):
            shape = [shape]
            self.shape = []
            self.shape = self.shape + shape
        return self
    def addShape(self, shape = None):
        if not isinstance(shape, list):
            shape = [shape]
            self.shape = []
            self.shape = self.shape + shape
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Collision(X3DSensorNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Collision, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.collideTime = None
        if not self.collideTime:
            self.collideTime = kwargs.pop("collideTime", None)
    def setCollideTime(self, collideTime = None):
        try:
            super().setCollideTime(collideTime)
        except AttributeError:
           pass
        self.collideTime = collideTime
        return self
    def addCollideTime(self, collideTime = None):
        if not isinstance(collideTime, list):
            collideTime = [collideTime]
            self.collideTime = []
            self.collideTime = self.collideTime + collideTime
        return self
    def addCollideTime(self, collideTime = None):
        if not isinstance(collideTime, list):
            collideTime = [collideTime]
            self.collideTime = []
            self.collideTime = self.collideTime + collideTime
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.proxy = None
        if not self.proxy:
            self.proxy = kwargs.pop("proxy", None)
    def setProxy(self, proxy = None):
        try:
            super().setProxy(proxy)
        except AttributeError:
           pass
        self.proxy = proxy
        return self
    def addProxy(self, proxy = None):
        if not isinstance(proxy, list):
            proxy = [proxy]
            self.proxy = []
            self.proxy = self.proxy + proxy
        return self
    def addProxy(self, proxy = None):
        if not isinstance(proxy, list):
            proxy = [proxy]
            self.proxy = []
            self.proxy = self.proxy + proxy
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CollisionCollection(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(CollisionCollection, self).__init__(**kwargs)
        self.appliedParameters = "BOUNCE"
        if not self.appliedParameters:
            self.appliedParameters = kwargs.pop("appliedParameters", "BOUNCE")
        if '"BOUNCE"' == self.appliedParameters:
            pass
        elif '"USER_FRICTION"' == self.appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == self.appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == self.appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == self.appliedParameters:
            pass
        elif '"SPEED-1"' == self.appliedParameters:
            pass
        elif '"SPEED-2"' == self.appliedParameters:
            pass
        elif '"SLIP-1"' == self.appliedParameters:
            pass
        elif '"SLIP-2"' == self.appliedParameters:
            pass
        else:
            return None
    def setAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        try:
            super().setAppliedParameters(appliedParameters)
        except AttributeError:
           pass
        self.appliedParameters = appliedParameters
        return self
    def addAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        if not isinstance(appliedParameters, list):
            appliedParameters = [appliedParameters]
            self.appliedParameters = []
            self.appliedParameters = self.appliedParameters + appliedParameters
        return self
    def addAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        if not isinstance(appliedParameters, list):
            appliedParameters = [appliedParameters]
            self.appliedParameters = []
            self.appliedParameters = self.appliedParameters + appliedParameters
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.bounce = 0
        if not self.bounce:
            self.bounce = kwargs.pop("bounce", 0)
        if self.bounce == None or self.bounce  <  0:
            return None
        if self.bounce == None or self.bounce  >  1:
            return None
    def setBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        try:
            super().setBounce(bounce)
        except AttributeError:
           pass
        self.bounce = bounce
        return self
    def addBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        if not isinstance(bounce, list):
            bounce = [bounce]
            self.bounce = []
            self.bounce = self.bounce + bounce
        return self
    def addBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        if not isinstance(bounce, list):
            bounce = [bounce]
            self.bounce = []
            self.bounce = self.bounce + bounce
        return self
        self.collidables = []
        if not self.collidables:
            self.collidables = kwargs.pop("collidables", [])
    def setCollidables(self, collidables = []):
        try:
            super().setCollidables(collidables)
        except AttributeError:
           pass
        self.collidables = collidables
        return self
    def addCollidables(self, collidables = []):
        if not isinstance(collidables, list):
            collidables = [collidables]
            self.collidables = []
            self.collidables = self.collidables + collidables
        return self
    def addCollidables(self, collidables = []):
        if not isinstance(collidables, list):
            collidables = [collidables]
            self.collidables = []
            self.collidables = self.collidables + collidables
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.frictionCoefficients = [0, 0]
        if not self.frictionCoefficients:
            self.frictionCoefficients = kwargs.pop("frictionCoefficients", [0, 0])
        if self.frictionCoefficients == None or len(self.frictionCoefficients) <= 0 or min(self.frictionCoefficients)  <  0:
            return None
    def setFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        try:
            super().setFrictionCoefficients(frictionCoefficients)
        except AttributeError:
           pass
        self.frictionCoefficients = frictionCoefficients
        return self
    def addFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        if not isinstance(frictionCoefficients, list):
            frictionCoefficients = [frictionCoefficients]
            self.frictionCoefficients = []
            self.frictionCoefficients = self.frictionCoefficients + frictionCoefficients
        return self
    def addFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        if not isinstance(frictionCoefficients, list):
            frictionCoefficients = [frictionCoefficients]
            self.frictionCoefficients = []
            self.frictionCoefficients = self.frictionCoefficients + frictionCoefficients
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minBounceSpeed = 0.1
        if not self.minBounceSpeed:
            self.minBounceSpeed = kwargs.pop("minBounceSpeed", 0.1)
        if self.minBounceSpeed == None or self.minBounceSpeed  <  0:
            return None
    def setMinBounceSpeed(self, minBounceSpeed = 0.1):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        try:
            super().setMinBounceSpeed(minBounceSpeed)
        except AttributeError:
           pass
        self.minBounceSpeed = minBounceSpeed
        return self
    def addMinBounceSpeed(self, minBounceSpeed = 0.1):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        if not isinstance(minBounceSpeed, list):
            minBounceSpeed = [minBounceSpeed]
            self.minBounceSpeed = []
            self.minBounceSpeed = self.minBounceSpeed + minBounceSpeed
        return self
    def addMinBounceSpeed(self, minBounceSpeed = 0.1):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        if not isinstance(minBounceSpeed, list):
            minBounceSpeed = [minBounceSpeed]
            self.minBounceSpeed = []
            self.minBounceSpeed = self.minBounceSpeed + minBounceSpeed
        return self
        self.slipFactors = [0, 0]
        if not self.slipFactors:
            self.slipFactors = kwargs.pop("slipFactors", [0, 0])
    def setSlipFactors(self, slipFactors = [0, 0]):
        try:
            super().setSlipFactors(slipFactors)
        except AttributeError:
           pass
        self.slipFactors = slipFactors
        return self
    def addSlipFactors(self, slipFactors = [0, 0]):
        if not isinstance(slipFactors, list):
            slipFactors = [slipFactors]
            self.slipFactors = []
            self.slipFactors = self.slipFactors + slipFactors
        return self
    def addSlipFactors(self, slipFactors = [0, 0]):
        if not isinstance(slipFactors, list):
            slipFactors = [slipFactors]
            self.slipFactors = []
            self.slipFactors = self.slipFactors + slipFactors
        return self
        self.softnessConstantForceMix = 0.0001
        if not self.softnessConstantForceMix:
            self.softnessConstantForceMix = kwargs.pop("softnessConstantForceMix", 0.0001)
        if self.softnessConstantForceMix == None or self.softnessConstantForceMix  <  0:
            return None
        if self.softnessConstantForceMix == None or self.softnessConstantForceMix  >  1:
            return None
    def setSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        try:
            super().setSoftnessConstantForceMix(softnessConstantForceMix)
        except AttributeError:
           pass
        self.softnessConstantForceMix = softnessConstantForceMix
        return self
    def addSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        if not isinstance(softnessConstantForceMix, list):
            softnessConstantForceMix = [softnessConstantForceMix]
            self.softnessConstantForceMix = []
            self.softnessConstantForceMix = self.softnessConstantForceMix + softnessConstantForceMix
        return self
    def addSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        if not isinstance(softnessConstantForceMix, list):
            softnessConstantForceMix = [softnessConstantForceMix]
            self.softnessConstantForceMix = []
            self.softnessConstantForceMix = self.softnessConstantForceMix + softnessConstantForceMix
        return self
        self.softnessErrorCorrection = 0.8
        if not self.softnessErrorCorrection:
            self.softnessErrorCorrection = kwargs.pop("softnessErrorCorrection", 0.8)
        if self.softnessErrorCorrection == None or self.softnessErrorCorrection  <  0:
            return None
        if self.softnessErrorCorrection == None or self.softnessErrorCorrection  >  1:
            return None
    def setSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        try:
            super().setSoftnessErrorCorrection(softnessErrorCorrection)
        except AttributeError:
           pass
        self.softnessErrorCorrection = softnessErrorCorrection
        return self
    def addSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        if not isinstance(softnessErrorCorrection, list):
            softnessErrorCorrection = [softnessErrorCorrection]
            self.softnessErrorCorrection = []
            self.softnessErrorCorrection = self.softnessErrorCorrection + softnessErrorCorrection
        return self
    def addSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        if not isinstance(softnessErrorCorrection, list):
            softnessErrorCorrection = [softnessErrorCorrection]
            self.softnessErrorCorrection = []
            self.softnessErrorCorrection = self.softnessErrorCorrection + softnessErrorCorrection
        return self
        self.surfaceSpeed = [0, 0]
        if not self.surfaceSpeed:
            self.surfaceSpeed = kwargs.pop("surfaceSpeed", [0, 0])
    def setSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        try:
            super().setSurfaceSpeed(surfaceSpeed)
        except AttributeError:
           pass
        self.surfaceSpeed = surfaceSpeed
        return self
    def addSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        if not isinstance(surfaceSpeed, list):
            surfaceSpeed = [surfaceSpeed]
            self.surfaceSpeed = []
            self.surfaceSpeed = self.surfaceSpeed + surfaceSpeed
        return self
    def addSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        if not isinstance(surfaceSpeed, list):
            surfaceSpeed = [surfaceSpeed]
            self.surfaceSpeed = []
            self.surfaceSpeed = self.surfaceSpeed + surfaceSpeed
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CollisionSensor(X3DSensorNode):
    def __init__(self, **kwargs):
        super(CollisionSensor, self).__init__(**kwargs)
        self.collider = None
        if not self.collider:
            self.collider = kwargs.pop("collider", None)
    def setCollider(self, collider = None):
        try:
            super().setCollider(collider)
        except AttributeError:
           pass
        self.collider = collider
        return self
    def addCollider(self, collider = None):
        if not isinstance(collider, list):
            collider = [collider]
            self.collider = []
            self.collider = self.collider + collider
        return self
    def addCollider(self, collider = None):
        if not isinstance(collider, list):
            collider = [collider]
            self.collider = []
            self.collider = self.collider + collider
        return self
        self.contacts = []
        if not self.contacts:
            self.contacts = kwargs.pop("contacts", [])
    def setContacts(self, contacts = []):
        try:
            super().setContacts(contacts)
        except AttributeError:
           pass
        self.contacts = contacts
        return self
    def addContacts(self, contacts = []):
        if not isinstance(contacts, list):
            contacts = [contacts]
            self.contacts = []
            self.contacts = self.contacts + contacts
        return self
    def addContacts(self, contacts = []):
        if not isinstance(contacts, list):
            contacts = [contacts]
            self.contacts = []
            self.contacts = self.contacts + contacts
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersections = []
        if not self.intersections:
            self.intersections = kwargs.pop("intersections", [])
    def setIntersections(self, intersections = []):
        try:
            super().setIntersections(intersections)
        except AttributeError:
           pass
        self.intersections = intersections
        return self
    def addIntersections(self, intersections = []):
        if not isinstance(intersections, list):
            intersections = [intersections]
            self.intersections = []
            self.intersections = self.intersections + intersections
        return self
    def addIntersections(self, intersections = []):
        if not isinstance(intersections, list):
            intersections = [intersections]
            self.intersections = []
            self.intersections = self.intersections + intersections
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CollisionSpace(X3DNBodyCollisionSpaceNode):
    def __init__(self, **kwargs):
        super(CollisionSpace, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.collidables = []
        if not self.collidables:
            self.collidables = kwargs.pop("collidables", [])
    def setCollidables(self, collidables = []):
        try:
            super().setCollidables(collidables)
        except AttributeError:
           pass
        self.collidables = collidables
        return self
    def addCollidables(self, collidables = []):
        if not isinstance(collidables, list):
            collidables = [collidables]
            self.collidables = []
            self.collidables = self.collidables + collidables
        return self
    def addCollidables(self, collidables = []):
        if not isinstance(collidables, list):
            collidables = [collidables]
            self.collidables = []
            self.collidables = self.collidables + collidables
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.useGeometry = False
        if not self.useGeometry:
            self.useGeometry = kwargs.pop("useGeometry", False)
    def setUseGeometry(self, useGeometry = False):
        try:
            super().setUseGeometry(useGeometry)
        except AttributeError:
           pass
        self.useGeometry = useGeometry
        return self
    def addUseGeometry(self, useGeometry = False):
        if not isinstance(useGeometry, list):
            useGeometry = [useGeometry]
            self.useGeometry = []
            self.useGeometry = self.useGeometry + useGeometry
        return self
    def addUseGeometry(self, useGeometry = False):
        if not isinstance(useGeometry, list):
            useGeometry = [useGeometry]
            self.useGeometry = []
            self.useGeometry = self.useGeometry + useGeometry
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Color(X3DColorNode):
    def __init__(self, **kwargs):
        super(Color, self).__init__(**kwargs)
        self.color = []
        if not self.color:
            self.color = kwargs.pop("color", [])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ColorChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super(ColorChaser, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = [0.8, 0.8, 0.8]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if self.initialDestination == None or len(self.initialDestination) <= 0 or min(self.initialDestination)  <  0:
            return None
        if self.initialDestination == None or len(self.initialDestination) <= 0 or max(self.initialDestination)  >  1:
            return None
    def setInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0.8, 0.8, 0.8]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        if self.initialValue == None or len(self.initialValue) <= 0 or min(self.initialValue)  <  0:
            return None
        if self.initialValue == None or len(self.initialValue) <= 0 or max(self.initialValue)  >  1:
            return None
    def setInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
        if self.Destination == None or len(self.Destination) <= 0 or min(self.Destination)  <  0:
            return None
        if self.Destination == None or len(self.Destination) <= 0 or max(self.Destination)  >  1:
            return None
    def setSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
        if self.Value == None or len(self.Value) <= 0 or min(self.Value)  <  0:
            return None
        if self.Value == None or len(self.Value) <= 0 or max(self.Value)  >  1:
            return None
    def setSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
        if self.value_changed == None or len(self.value_changed) <= 0 or min(self.value_changed)  <  0:
            return None
        if self.value_changed == None or len(self.value_changed) <= 0 or max(self.value_changed)  >  1:
            return None
    def setvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ColorDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super(ColorDamper, self).__init__(**kwargs)
        self.initialDestination = [0.8, 0.8, 0.8]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if self.initialDestination == None or len(self.initialDestination) <= 0 or min(self.initialDestination)  <  0:
            return None
        if self.initialDestination == None or len(self.initialDestination) <= 0 or max(self.initialDestination)  >  1:
            return None
    def setInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0.8, 0.8, 0.8]):
        if initialDestination == None or len(initialDestination) <= 0 or min(initialDestination)  <  0:
            return None
        if initialDestination == None or len(initialDestination) <= 0 or max(initialDestination)  >  1:
            return None
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0.8, 0.8, 0.8]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        if self.initialValue == None or len(self.initialValue) <= 0 or min(self.initialValue)  <  0:
            return None
        if self.initialValue == None or len(self.initialValue) <= 0 or max(self.initialValue)  >  1:
            return None
    def setInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0.8, 0.8, 0.8]):
        if initialValue == None or len(initialValue) <= 0 or min(initialValue)  <  0:
            return None
        if initialValue == None or len(initialValue) <= 0 or max(initialValue)  >  1:
            return None
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
        if self.Destination == None or len(self.Destination) <= 0 or min(self.Destination)  <  0:
            return None
        if self.Destination == None or len(self.Destination) <= 0 or max(self.Destination)  >  1:
            return None
    def setSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if Destination == None or len(Destination) <= 0 or min(Destination)  <  0:
            return None
        if Destination == None or len(Destination) <= 0 or max(Destination)  >  1:
            return None
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
        if self.Value == None or len(self.Value) <= 0 or min(self.Value)  <  0:
            return None
        if self.Value == None or len(self.Value) <= 0 or max(self.Value)  >  1:
            return None
    def setSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if Value == None or len(Value) <= 0 or min(Value)  <  0:
            return None
        if Value == None or len(Value) <= 0 or max(Value)  >  1:
            return None
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
        if self.value_changed == None or len(self.value_changed) <= 0 or min(self.value_changed)  <  0:
            return None
        if self.value_changed == None or len(self.value_changed) <= 0 or max(self.value_changed)  >  1:
            return None
    def setvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ColorInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(ColorInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
        if self.keyValue == None or len(self.keyValue) <= 0 or min(self.keyValue)  <  0:
            return None
        if self.keyValue == None or len(self.keyValue) <= 0 or max(self.keyValue)  >  1:
            return None
    def setKeyValue(self, keyValue = []):
        if keyValue == None or len(keyValue) <= 0 or min(keyValue)  <  0:
            return None
        if keyValue == None or len(keyValue) <= 0 or max(keyValue)  >  1:
            return None
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if keyValue == None or len(keyValue) <= 0 or min(keyValue)  <  0:
            return None
        if keyValue == None or len(keyValue) <= 0 or max(keyValue)  >  1:
            return None
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if keyValue == None or len(keyValue) <= 0 or min(keyValue)  <  0:
            return None
        if keyValue == None or len(keyValue) <= 0 or max(keyValue)  >  1:
            return None
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
        if self.value_changed == None or len(self.value_changed) <= 0 or min(self.value_changed)  <  0:
            return None
        if self.value_changed == None or len(self.value_changed) <= 0 or max(self.value_changed)  >  1:
            return None
    def setvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if value_changed == None or len(value_changed) <= 0 or min(value_changed)  <  0:
            return None
        if value_changed == None or len(value_changed) <= 0 or max(value_changed)  >  1:
            return None
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ColorRGBA(X3DColorNode):
    def __init__(self, **kwargs):
        super(ColorRGBA, self).__init__(**kwargs)
        self.color = []
        if not self.color:
            self.color = kwargs.pop("color", [])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = []):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ComposedCubeMapTexture(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        super(ComposedCubeMapTexture, self).__init__(**kwargs)
        self.back = None
        if not self.back:
            self.back = kwargs.pop("back", None)
    def setBack(self, back = None):
        try:
            super().setBack(back)
        except AttributeError:
           pass
        self.back = back
        return self
    def addBack(self, back = None):
        if not isinstance(back, list):
            back = [back]
            self.back = []
            self.back = self.back + back
        return self
    def addBack(self, back = None):
        if not isinstance(back, list):
            back = [back]
            self.back = []
            self.back = self.back + back
        return self
        self.bottom = None
        if not self.bottom:
            self.bottom = kwargs.pop("bottom", None)
    def setBottom(self, bottom = None):
        try:
            super().setBottom(bottom)
        except AttributeError:
           pass
        self.bottom = bottom
        return self
    def addBottom(self, bottom = None):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
    def addBottom(self, bottom = None):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
        self.front = None
        if not self.front:
            self.front = kwargs.pop("front", None)
    def setFront(self, front = None):
        try:
            super().setFront(front)
        except AttributeError:
           pass
        self.front = front
        return self
    def addFront(self, front = None):
        if not isinstance(front, list):
            front = [front]
            self.front = []
            self.front = self.front + front
        return self
    def addFront(self, front = None):
        if not isinstance(front, list):
            front = [front]
            self.front = []
            self.front = self.front + front
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.left = None
        if not self.left:
            self.left = kwargs.pop("left", None)
    def setLeft(self, left = None):
        try:
            super().setLeft(left)
        except AttributeError:
           pass
        self.left = left
        return self
    def addLeft(self, left = None):
        if not isinstance(left, list):
            left = [left]
            self.left = []
            self.left = self.left + left
        return self
    def addLeft(self, left = None):
        if not isinstance(left, list):
            left = [left]
            self.left = []
            self.left = self.left + left
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.right = None
        if not self.right:
            self.right = kwargs.pop("right", None)
    def setRight(self, right = None):
        try:
            super().setRight(right)
        except AttributeError:
           pass
        self.right = right
        return self
    def addRight(self, right = None):
        if not isinstance(right, list):
            right = [right]
            self.right = []
            self.right = self.right + right
        return self
    def addRight(self, right = None):
        if not isinstance(right, list):
            right = [right]
            self.right = []
            self.right = self.right + right
        return self
        self.top = None
        if not self.top:
            self.top = kwargs.pop("top", None)
    def setTop(self, top = None):
        try:
            super().setTop(top)
        except AttributeError:
           pass
        self.top = top
        return self
    def addTop(self, top = None):
        if not isinstance(top, list):
            top = [top]
            self.top = []
            self.top = self.top + top
        return self
    def addTop(self, top = None):
        if not isinstance(top, list):
            top = [top]
            self.top = []
            self.top = self.top + top
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ComposedShader(X3DProgrammableShaderObject, X3DShaderNode):
    def __init__(self, **kwargs):
        super(ComposedShader, self).__init__(**kwargs)
        self.activate = None
        if not self.activate:
            self.activate = kwargs.pop("activate", None)
    def setActivate(self, activate = None):
        try:
            super().setActivate(activate)
        except AttributeError:
           pass
        self.activate = activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Selected = None
        if not self.Selected:
            self.Selected = kwargs.pop("Selected", None)
    def setIsSelected(self, Selected = None):
        try:
            super().setIsSelected(Selected)
        except AttributeError:
           pass
        self.Selected = Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
        self.Valid = None
        if not self.Valid:
            self.Valid = kwargs.pop("Valid", None)
    def setIsValid(self, Valid = None):
        try:
            super().setIsValid(Valid)
        except AttributeError:
           pass
        self.Valid = Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.parts = []
        if not self.parts:
            self.parts = kwargs.pop("parts", [])
    def setParts(self, parts = []):
        try:
            super().setParts(parts)
        except AttributeError:
           pass
        self.parts = parts
        return self
    def addParts(self, parts = []):
        if not isinstance(parts, list):
            parts = [parts]
            self.parts = []
            self.parts = self.parts + parts
        return self
    def addParts(self, parts = []):
        if not isinstance(parts, list):
            parts = [parts]
            self.parts = []
            self.parts = self.parts + parts
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setSourceCode(self, sourceCode = None):
        try:
            super().setSourceCode(sourceCode)
        except AttributeError:
           pass
        self.sourceCode = sourceCode
        return self
    def addSourceCode(self, sourceCode = None):
        if not isinstance(sourceCode, list):
            sourceCode = [sourceCode]
            self.sourceCode = []
            self.sourceCode = self.sourceCode + sourceCode
        return self
    def addSourceCode(self, sourceCode = None):
        if not isinstance(sourceCode, list):
            sourceCode = [sourceCode]
            self.sourceCode = []
            self.sourceCode = self.sourceCode + sourceCode
        return self
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def removeField(self, field):
        self.field = [x for x in self.field if x not in field]
        return self.field
    def removeField(self, field):
        self.field = [x for x in self.field if x not in field]
        return self.field
    def getField(self, field = []):
        return self.field
    def field_changed(self, field = []):
        return self.field
    def getField(self, field = []):
        return self.field


class ComposedTexture3D(X3DTexture3DNode):
    def __init__(self, **kwargs):
        super(ComposedTexture3D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatR = False
        if not self.repeatR:
            self.repeatR = kwargs.pop("repeatR", False)
    def setRepeatR(self, repeatR = False):
        try:
            super().setRepeatR(repeatR)
        except AttributeError:
           pass
        self.repeatR = repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
        self.repeatS = False
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", False)
    def setRepeatS(self, repeatS = False):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = False
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", False)
    def setRepeatT(self, repeatT = False):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.texture = []
        if not self.texture:
            self.texture = kwargs.pop("texture", [])
    def setTexture(self, texture = []):
        try:
            super().setTexture(texture)
        except AttributeError:
           pass
        self.texture = texture
        return self
    def addTexture(self, texture = []):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
    def addTexture(self, texture = []):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ComposedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(ComposedVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.renderStyle = []
        if not self.renderStyle:
            self.renderStyle = kwargs.pop("renderStyle", [])
    def setRenderStyle(self, renderStyle = []):
        try:
            super().setRenderStyle(renderStyle)
        except AttributeError:
           pass
        self.renderStyle = renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Cone(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Cone, self).__init__(**kwargs)
        self.bottom = True
        if not self.bottom:
            self.bottom = kwargs.pop("bottom", True)
    def setBottom(self, bottom = True):
        try:
            super().setBottom(bottom)
        except AttributeError:
           pass
        self.bottom = bottom
        return self
    def addBottom(self, bottom = True):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
    def addBottom(self, bottom = True):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
        self.bottomRadius = 1
        if not self.bottomRadius:
            self.bottomRadius = kwargs.pop("bottomRadius", 1)
        if self.bottomRadius == None or self.bottomRadius  <=  0:
            return None
    def setBottomRadius(self, bottomRadius = 1):
        if bottomRadius == None or bottomRadius  <=  0:
            return None
        try:
            super().setBottomRadius(bottomRadius)
        except AttributeError:
           pass
        self.bottomRadius = bottomRadius
        return self
    def addBottomRadius(self, bottomRadius = 1):
        if bottomRadius == None or bottomRadius  <=  0:
            return None
        if not isinstance(bottomRadius, list):
            bottomRadius = [bottomRadius]
            self.bottomRadius = []
            self.bottomRadius = self.bottomRadius + bottomRadius
        return self
    def addBottomRadius(self, bottomRadius = 1):
        if bottomRadius == None or bottomRadius  <=  0:
            return None
        if not isinstance(bottomRadius, list):
            bottomRadius = [bottomRadius]
            self.bottomRadius = []
            self.bottomRadius = self.bottomRadius + bottomRadius
        return self
        self.height = 2
        if not self.height:
            self.height = kwargs.pop("height", 2)
        if self.height == None or self.height  <=  0:
            return None
    def setHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        try:
            super().setHeight(height)
        except AttributeError:
           pass
        self.height = height
        return self
    def addHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
    def addHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.side = True
        if not self.side:
            self.side = kwargs.pop("side", True)
    def setSide(self, side = True):
        try:
            super().setSide(side)
        except AttributeError:
           pass
        self.side = side
        return self
    def addSide(self, side = True):
        if not isinstance(side, list):
            side = [side]
            self.side = []
            self.side = self.side + side
        return self
    def addSide(self, side = True):
        if not isinstance(side, list):
            side = [side]
            self.side = []
            self.side = self.side + side
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ConeEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(ConeEmitter, self).__init__(**kwargs)
        self.angle = 0.7854
        if not self.angle:
            self.angle = kwargs.pop("angle", 0.7854)
        if self.angle == None or self.angle  <  0:
            return None
        if self.angle == None or self.angle  >  3.1416:
            return None
    def setAngle(self, angle = 0.7854):
        if angle == None or angle  <  0:
            return None
        if angle == None or angle  >  3.1416:
            return None
        try:
            super().setAngle(angle)
        except AttributeError:
           pass
        self.angle = angle
        return self
    def addAngle(self, angle = 0.7854):
        if angle == None or angle  <  0:
            return None
        if angle == None or angle  >  3.1416:
            return None
        if not isinstance(angle, list):
            angle = [angle]
            self.angle = []
            self.angle = self.angle + angle
        return self
    def addAngle(self, angle = 0.7854):
        if angle == None or angle  <  0:
            return None
        if angle == None or angle  >  3.1416:
            return None
        if not isinstance(angle, list):
            angle = [angle]
            self.angle = []
            self.angle = self.angle + angle
        return self
        self.direction = [0, 1, 0]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 1, 0])
        if self.direction == None or len(self.direction) <= 0 or min(self.direction)  <  -1:
            return None
        if self.direction == None or len(self.direction) <= 0 or max(self.direction)  >  1:
            return None
    def setDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.position = [0, 0, 0]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 0])
    def setPosition(self, position = [0, 0, 0]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Contact(X3DNode):
    def __init__(self, **kwargs):
        super(Contact, self).__init__(**kwargs)
        self.appliedParameters = "BOUNCE"
        if not self.appliedParameters:
            self.appliedParameters = kwargs.pop("appliedParameters", "BOUNCE")
        if '"BOUNCE"' == self.appliedParameters:
            pass
        elif '"USER_FRICTION"' == self.appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == self.appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == self.appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == self.appliedParameters:
            pass
        elif '"SPEED-1"' == self.appliedParameters:
            pass
        elif '"SPEED-2"' == self.appliedParameters:
            pass
        elif '"SLIP-1"' == self.appliedParameters:
            pass
        elif '"SLIP-2"' == self.appliedParameters:
            pass
        else:
            return None
    def setAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        try:
            super().setAppliedParameters(appliedParameters)
        except AttributeError:
           pass
        self.appliedParameters = appliedParameters
        return self
    def addAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        if not isinstance(appliedParameters, list):
            appliedParameters = [appliedParameters]
            self.appliedParameters = []
            self.appliedParameters = self.appliedParameters + appliedParameters
        return self
    def addAppliedParameters(self, appliedParameters = "BOUNCE"):
        if '"BOUNCE"' == appliedParameters:
            pass
        elif '"USER_FRICTION"' == appliedParameters:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == appliedParameters:
            pass
        elif '"ERROR_REDUCTION"' == appliedParameters:
            pass
        elif '"CONSTANT_FORCE"' == appliedParameters:
            pass
        elif '"SPEED-1"' == appliedParameters:
            pass
        elif '"SPEED-2"' == appliedParameters:
            pass
        elif '"SLIP-1"' == appliedParameters:
            pass
        elif '"SLIP-2"' == appliedParameters:
            pass
        else:
            return None
        if not isinstance(appliedParameters, list):
            appliedParameters = [appliedParameters]
            self.appliedParameters = []
            self.appliedParameters = self.appliedParameters + appliedParameters
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.bounce = 0
        if not self.bounce:
            self.bounce = kwargs.pop("bounce", 0)
        if self.bounce == None or self.bounce  <  0:
            return None
        if self.bounce == None or self.bounce  >  1:
            return None
    def setBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        try:
            super().setBounce(bounce)
        except AttributeError:
           pass
        self.bounce = bounce
        return self
    def addBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        if not isinstance(bounce, list):
            bounce = [bounce]
            self.bounce = []
            self.bounce = self.bounce + bounce
        return self
    def addBounce(self, bounce = 0):
        if bounce == None or bounce  <  0:
            return None
        if bounce == None or bounce  >  1:
            return None
        if not isinstance(bounce, list):
            bounce = [bounce]
            self.bounce = []
            self.bounce = self.bounce + bounce
        return self
        self.contactNormal = [0, 1, 0]
        if not self.contactNormal:
            self.contactNormal = kwargs.pop("contactNormal", [0, 1, 0])
    def setContactNormal(self, contactNormal = [0, 1, 0]):
        try:
            super().setContactNormal(contactNormal)
        except AttributeError:
           pass
        self.contactNormal = contactNormal
        return self
    def addContactNormal(self, contactNormal = [0, 1, 0]):
        if not isinstance(contactNormal, list):
            contactNormal = [contactNormal]
            self.contactNormal = []
            self.contactNormal = self.contactNormal + contactNormal
        return self
    def addContactNormal(self, contactNormal = [0, 1, 0]):
        if not isinstance(contactNormal, list):
            contactNormal = [contactNormal]
            self.contactNormal = []
            self.contactNormal = self.contactNormal + contactNormal
        return self
        self.depth = 0
        if not self.depth:
            self.depth = kwargs.pop("depth", 0)
    def setDepth(self, depth = 0):
        try:
            super().setDepth(depth)
        except AttributeError:
           pass
        self.depth = depth
        return self
    def addDepth(self, depth = 0):
        if not isinstance(depth, list):
            depth = [depth]
            self.depth = []
            self.depth = self.depth + depth
        return self
    def addDepth(self, depth = 0):
        if not isinstance(depth, list):
            depth = [depth]
            self.depth = []
            self.depth = self.depth + depth
        return self
        self.frictionCoefficients = [0, 0]
        if not self.frictionCoefficients:
            self.frictionCoefficients = kwargs.pop("frictionCoefficients", [0, 0])
        if self.frictionCoefficients == None or len(self.frictionCoefficients) <= 0 or min(self.frictionCoefficients)  <  0:
            return None
    def setFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        try:
            super().setFrictionCoefficients(frictionCoefficients)
        except AttributeError:
           pass
        self.frictionCoefficients = frictionCoefficients
        return self
    def addFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        if not isinstance(frictionCoefficients, list):
            frictionCoefficients = [frictionCoefficients]
            self.frictionCoefficients = []
            self.frictionCoefficients = self.frictionCoefficients + frictionCoefficients
        return self
    def addFrictionCoefficients(self, frictionCoefficients = [0, 0]):
        if frictionCoefficients == None or len(frictionCoefficients) <= 0 or min(frictionCoefficients)  <  0:
            return None
        if not isinstance(frictionCoefficients, list):
            frictionCoefficients = [frictionCoefficients]
            self.frictionCoefficients = []
            self.frictionCoefficients = self.frictionCoefficients + frictionCoefficients
        return self
        self.frictionDirection = [0, 1, 0]
        if not self.frictionDirection:
            self.frictionDirection = kwargs.pop("frictionDirection", [0, 1, 0])
    def setFrictionDirection(self, frictionDirection = [0, 1, 0]):
        try:
            super().setFrictionDirection(frictionDirection)
        except AttributeError:
           pass
        self.frictionDirection = frictionDirection
        return self
    def addFrictionDirection(self, frictionDirection = [0, 1, 0]):
        if not isinstance(frictionDirection, list):
            frictionDirection = [frictionDirection]
            self.frictionDirection = []
            self.frictionDirection = self.frictionDirection + frictionDirection
        return self
    def addFrictionDirection(self, frictionDirection = [0, 1, 0]):
        if not isinstance(frictionDirection, list):
            frictionDirection = [frictionDirection]
            self.frictionDirection = []
            self.frictionDirection = self.frictionDirection + frictionDirection
        return self
        self.geometry1 = None
        if not self.geometry1:
            self.geometry1 = kwargs.pop("geometry1", None)
    def setGeometry1(self, geometry1 = None):
        try:
            super().setGeometry1(geometry1)
        except AttributeError:
           pass
        self.geometry1 = geometry1
        return self
    def addGeometry1(self, geometry1 = None):
        if not isinstance(geometry1, list):
            geometry1 = [geometry1]
            self.geometry1 = []
            self.geometry1 = self.geometry1 + geometry1
        return self
    def addGeometry1(self, geometry1 = None):
        if not isinstance(geometry1, list):
            geometry1 = [geometry1]
            self.geometry1 = []
            self.geometry1 = self.geometry1 + geometry1
        return self
        self.geometry2 = None
        if not self.geometry2:
            self.geometry2 = kwargs.pop("geometry2", None)
    def setGeometry2(self, geometry2 = None):
        try:
            super().setGeometry2(geometry2)
        except AttributeError:
           pass
        self.geometry2 = geometry2
        return self
    def addGeometry2(self, geometry2 = None):
        if not isinstance(geometry2, list):
            geometry2 = [geometry2]
            self.geometry2 = []
            self.geometry2 = self.geometry2 + geometry2
        return self
    def addGeometry2(self, geometry2 = None):
        if not isinstance(geometry2, list):
            geometry2 = [geometry2]
            self.geometry2 = []
            self.geometry2 = self.geometry2 + geometry2
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minBounceSpeed = 0
        if not self.minBounceSpeed:
            self.minBounceSpeed = kwargs.pop("minBounceSpeed", 0)
        if self.minBounceSpeed == None or self.minBounceSpeed  <  0:
            return None
    def setMinBounceSpeed(self, minBounceSpeed = 0):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        try:
            super().setMinBounceSpeed(minBounceSpeed)
        except AttributeError:
           pass
        self.minBounceSpeed = minBounceSpeed
        return self
    def addMinBounceSpeed(self, minBounceSpeed = 0):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        if not isinstance(minBounceSpeed, list):
            minBounceSpeed = [minBounceSpeed]
            self.minBounceSpeed = []
            self.minBounceSpeed = self.minBounceSpeed + minBounceSpeed
        return self
    def addMinBounceSpeed(self, minBounceSpeed = 0):
        if minBounceSpeed == None or minBounceSpeed  <  0:
            return None
        if not isinstance(minBounceSpeed, list):
            minBounceSpeed = [minBounceSpeed]
            self.minBounceSpeed = []
            self.minBounceSpeed = self.minBounceSpeed + minBounceSpeed
        return self
        self.position = [0, 0, 0]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 0])
    def setPosition(self, position = [0, 0, 0]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.slipCoefficients = [0, 0]
        if not self.slipCoefficients:
            self.slipCoefficients = kwargs.pop("slipCoefficients", [0, 0])
    def setSlipCoefficients(self, slipCoefficients = [0, 0]):
        try:
            super().setSlipCoefficients(slipCoefficients)
        except AttributeError:
           pass
        self.slipCoefficients = slipCoefficients
        return self
    def addSlipCoefficients(self, slipCoefficients = [0, 0]):
        if not isinstance(slipCoefficients, list):
            slipCoefficients = [slipCoefficients]
            self.slipCoefficients = []
            self.slipCoefficients = self.slipCoefficients + slipCoefficients
        return self
    def addSlipCoefficients(self, slipCoefficients = [0, 0]):
        if not isinstance(slipCoefficients, list):
            slipCoefficients = [slipCoefficients]
            self.slipCoefficients = []
            self.slipCoefficients = self.slipCoefficients + slipCoefficients
        return self
        self.softnessConstantForceMix = 0.0001
        if not self.softnessConstantForceMix:
            self.softnessConstantForceMix = kwargs.pop("softnessConstantForceMix", 0.0001)
        if self.softnessConstantForceMix == None or self.softnessConstantForceMix  <  0:
            return None
        if self.softnessConstantForceMix == None or self.softnessConstantForceMix  >  1:
            return None
    def setSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        try:
            super().setSoftnessConstantForceMix(softnessConstantForceMix)
        except AttributeError:
           pass
        self.softnessConstantForceMix = softnessConstantForceMix
        return self
    def addSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        if not isinstance(softnessConstantForceMix, list):
            softnessConstantForceMix = [softnessConstantForceMix]
            self.softnessConstantForceMix = []
            self.softnessConstantForceMix = self.softnessConstantForceMix + softnessConstantForceMix
        return self
    def addSoftnessConstantForceMix(self, softnessConstantForceMix = 0.0001):
        if softnessConstantForceMix == None or softnessConstantForceMix  <  0:
            return None
        if softnessConstantForceMix == None or softnessConstantForceMix  >  1:
            return None
        if not isinstance(softnessConstantForceMix, list):
            softnessConstantForceMix = [softnessConstantForceMix]
            self.softnessConstantForceMix = []
            self.softnessConstantForceMix = self.softnessConstantForceMix + softnessConstantForceMix
        return self
        self.softnessErrorCorrection = 0.8
        if not self.softnessErrorCorrection:
            self.softnessErrorCorrection = kwargs.pop("softnessErrorCorrection", 0.8)
        if self.softnessErrorCorrection == None or self.softnessErrorCorrection  <  0:
            return None
        if self.softnessErrorCorrection == None or self.softnessErrorCorrection  >  1:
            return None
    def setSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        try:
            super().setSoftnessErrorCorrection(softnessErrorCorrection)
        except AttributeError:
           pass
        self.softnessErrorCorrection = softnessErrorCorrection
        return self
    def addSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        if not isinstance(softnessErrorCorrection, list):
            softnessErrorCorrection = [softnessErrorCorrection]
            self.softnessErrorCorrection = []
            self.softnessErrorCorrection = self.softnessErrorCorrection + softnessErrorCorrection
        return self
    def addSoftnessErrorCorrection(self, softnessErrorCorrection = 0.8):
        if softnessErrorCorrection == None or softnessErrorCorrection  <  0:
            return None
        if softnessErrorCorrection == None or softnessErrorCorrection  >  1:
            return None
        if not isinstance(softnessErrorCorrection, list):
            softnessErrorCorrection = [softnessErrorCorrection]
            self.softnessErrorCorrection = []
            self.softnessErrorCorrection = self.softnessErrorCorrection + softnessErrorCorrection
        return self
        self.surfaceSpeed = [0, 0]
        if not self.surfaceSpeed:
            self.surfaceSpeed = kwargs.pop("surfaceSpeed", [0, 0])
    def setSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        try:
            super().setSurfaceSpeed(surfaceSpeed)
        except AttributeError:
           pass
        self.surfaceSpeed = surfaceSpeed
        return self
    def addSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        if not isinstance(surfaceSpeed, list):
            surfaceSpeed = [surfaceSpeed]
            self.surfaceSpeed = []
            self.surfaceSpeed = self.surfaceSpeed + surfaceSpeed
        return self
    def addSurfaceSpeed(self, surfaceSpeed = [0, 0]):
        if not isinstance(surfaceSpeed, list):
            surfaceSpeed = [surfaceSpeed]
            self.surfaceSpeed = []
            self.surfaceSpeed = self.surfaceSpeed + surfaceSpeed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Contour2D(X3DNode):
    def __init__(self, **kwargs):
        super(Contour2D, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ContourPolyline2D(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        super(ContourPolyline2D, self).__init__(**kwargs)
        self.controlPoint = []
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", [])
    def setControlPoint(self, controlPoint = []):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Coordinate(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super(Coordinate, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CoordinateChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super(CoordinateChaser, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = [0, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0, 0])
    def setInitialValue(self, initialValue = [0, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CoordinateDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super(CoordinateDamper, self).__init__(**kwargs)
        self.initialDestination = [0, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0, 0])
    def setInitialValue(self, initialValue = [0, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CoordinateDouble(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super(CoordinateDouble, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CoordinateInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(CoordinateInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CoordinateInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(CoordinateInterpolator2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Cylinder(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Cylinder, self).__init__(**kwargs)
        self.bottom = True
        if not self.bottom:
            self.bottom = kwargs.pop("bottom", True)
    def setBottom(self, bottom = True):
        try:
            super().setBottom(bottom)
        except AttributeError:
           pass
        self.bottom = bottom
        return self
    def addBottom(self, bottom = True):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
    def addBottom(self, bottom = True):
        if not isinstance(bottom, list):
            bottom = [bottom]
            self.bottom = []
            self.bottom = self.bottom + bottom
        return self
        self.height = 2
        if not self.height:
            self.height = kwargs.pop("height", 2)
        if self.height == None or self.height  <=  0:
            return None
    def setHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        try:
            super().setHeight(height)
        except AttributeError:
           pass
        self.height = height
        return self
    def addHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
    def addHeight(self, height = 2):
        if height == None or height  <=  0:
            return None
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.radius = 1
        if not self.radius:
            self.radius = kwargs.pop("radius", 1)
        if self.radius == None or self.radius  <=  0:
            return None
    def setRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.side = True
        if not self.side:
            self.side = kwargs.pop("side", True)
    def setSide(self, side = True):
        try:
            super().setSide(side)
        except AttributeError:
           pass
        self.side = side
        return self
    def addSide(self, side = True):
        if not isinstance(side, list):
            side = [side]
            self.side = []
            self.side = self.side + side
        return self
    def addSide(self, side = True):
        if not isinstance(side, list):
            side = [side]
            self.side = []
            self.side = self.side + side
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.top = True
        if not self.top:
            self.top = kwargs.pop("top", True)
    def setTop(self, top = True):
        try:
            super().setTop(top)
        except AttributeError:
           pass
        self.top = top
        return self
    def addTop(self, top = True):
        if not isinstance(top, list):
            top = [top]
            self.top = []
            self.top = self.top + top
        return self
    def addTop(self, top = True):
        if not isinstance(top, list):
            top = [top]
            self.top = []
            self.top = self.top + top
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class CylinderSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super(CylinderSensor, self).__init__(**kwargs)
        self.autoOffset = True
        if not self.autoOffset:
            self.autoOffset = kwargs.pop("autoOffset", True)
    def setAutoOffset(self, autoOffset = True):
        try:
            super().setAutoOffset(autoOffset)
        except AttributeError:
           pass
        self.autoOffset = autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
        self.axisRotation = [0, 1, 0, 0]
        if not self.axisRotation:
            self.axisRotation = kwargs.pop("axisRotation", [0, 1, 0, 0])
    def setAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        try:
            super().setAxisRotation(axisRotation)
        except AttributeError:
           pass
        self.axisRotation = axisRotation
        return self
    def addAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        if not isinstance(axisRotation, list):
            axisRotation = [axisRotation]
            self.axisRotation = []
            self.axisRotation = self.axisRotation + axisRotation
        return self
    def addAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        if not isinstance(axisRotation, list):
            axisRotation = [axisRotation]
            self.axisRotation = []
            self.axisRotation = self.axisRotation + axisRotation
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.diskAngle = 0.26179167
        if not self.diskAngle:
            self.diskAngle = kwargs.pop("diskAngle", 0.26179167)
        if self.diskAngle == None or self.diskAngle  <  0:
            return None
        if self.diskAngle == None or self.diskAngle  >  1.5708:
            return None
    def setDiskAngle(self, diskAngle = 0.26179167):
        if diskAngle == None or diskAngle  <  0:
            return None
        if diskAngle == None or diskAngle  >  1.5708:
            return None
        try:
            super().setDiskAngle(diskAngle)
        except AttributeError:
           pass
        self.diskAngle = diskAngle
        return self
    def addDiskAngle(self, diskAngle = 0.26179167):
        if diskAngle == None or diskAngle  <  0:
            return None
        if diskAngle == None or diskAngle  >  1.5708:
            return None
        if not isinstance(diskAngle, list):
            diskAngle = [diskAngle]
            self.diskAngle = []
            self.diskAngle = self.diskAngle + diskAngle
        return self
    def addDiskAngle(self, diskAngle = 0.26179167):
        if diskAngle == None or diskAngle  <  0:
            return None
        if diskAngle == None or diskAngle  >  1.5708:
            return None
        if not isinstance(diskAngle, list):
            diskAngle = [diskAngle]
            self.diskAngle = []
            self.diskAngle = self.diskAngle + diskAngle
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.maxAngle = -1
        if not self.maxAngle:
            self.maxAngle = kwargs.pop("maxAngle", -1)
        if self.maxAngle == None or self.maxAngle  <=  -6.2832:
            return None
        if self.maxAngle == None or self.maxAngle  >=  6.2832:
            return None
    def setMaxAngle(self, maxAngle = -1):
        if maxAngle == None or maxAngle  <=  -6.2832:
            return None
        if maxAngle == None or maxAngle  >=  6.2832:
            return None
        try:
            super().setMaxAngle(maxAngle)
        except AttributeError:
           pass
        self.maxAngle = maxAngle
        return self
    def addMaxAngle(self, maxAngle = -1):
        if maxAngle == None or maxAngle  <=  -6.2832:
            return None
        if maxAngle == None or maxAngle  >=  6.2832:
            return None
        if not isinstance(maxAngle, list):
            maxAngle = [maxAngle]
            self.maxAngle = []
            self.maxAngle = self.maxAngle + maxAngle
        return self
    def addMaxAngle(self, maxAngle = -1):
        if maxAngle == None or maxAngle  <=  -6.2832:
            return None
        if maxAngle == None or maxAngle  >=  6.2832:
            return None
        if not isinstance(maxAngle, list):
            maxAngle = [maxAngle]
            self.maxAngle = []
            self.maxAngle = self.maxAngle + maxAngle
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minAngle = 0
        if not self.minAngle:
            self.minAngle = kwargs.pop("minAngle", 0)
        if self.minAngle == None or self.minAngle  <=  -6.2832:
            return None
        if self.minAngle == None or self.minAngle  >=  6.2832:
            return None
    def setMinAngle(self, minAngle = 0):
        if minAngle == None or minAngle  <=  -6.2832:
            return None
        if minAngle == None or minAngle  >=  6.2832:
            return None
        try:
            super().setMinAngle(minAngle)
        except AttributeError:
           pass
        self.minAngle = minAngle
        return self
    def addMinAngle(self, minAngle = 0):
        if minAngle == None or minAngle  <=  -6.2832:
            return None
        if minAngle == None or minAngle  >=  6.2832:
            return None
        if not isinstance(minAngle, list):
            minAngle = [minAngle]
            self.minAngle = []
            self.minAngle = self.minAngle + minAngle
        return self
    def addMinAngle(self, minAngle = 0):
        if minAngle == None or minAngle  <=  -6.2832:
            return None
        if minAngle == None or minAngle  >=  6.2832:
            return None
        if not isinstance(minAngle, list):
            minAngle = [minAngle]
            self.minAngle = []
            self.minAngle = self.minAngle + minAngle
        return self
        self.offset = 0
        if not self.offset:
            self.offset = kwargs.pop("offset", 0)
    def setOffset(self, offset = 0):
        try:
            super().setOffset(offset)
        except AttributeError:
           pass
        self.offset = offset
        return self
    def addOffset(self, offset = 0):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
    def addOffset(self, offset = 0):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
        self.rotation_changed = None
        if not self.rotation_changed:
            self.rotation_changed = kwargs.pop("rotation_changed", None)
    def setrotation_changed(self, rotation_changed = None):
        try:
            super().setrotation_changed(rotation_changed)
        except AttributeError:
           pass
        self.rotation_changed = rotation_changed
        return self
    def addrotation_changed(self, rotation_changed = None):
        if not isinstance(rotation_changed, list):
            rotation_changed = [rotation_changed]
            self.rotation_changed = []
            self.rotation_changed = self.rotation_changed + rotation_changed
        return self
    def addSetrotation_changed(self, rotation_changed = None):
        if not isinstance(rotation_changed, list):
            rotation_changed = [rotation_changed]
            self.rotation_changed = []
            self.rotation_changed = self.rotation_changed + rotation_changed
        return self
        self.trackPoint_changed = []
        if not self.trackPoint_changed:
            self.trackPoint_changed = kwargs.pop("trackPoint_changed", [])
    def settrackPoint_changed(self, trackPoint_changed = []):
        try:
            super().settrackPoint_changed(trackPoint_changed)
        except AttributeError:
           pass
        self.trackPoint_changed = trackPoint_changed
        return self
    def addtrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
    def addSettrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class DirectionalLight(X3DLightNode):
    def __init__(self, **kwargs):
        super(DirectionalLight, self).__init__(**kwargs)
        self.ambientIntensity = 0
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.direction = [0, 0, -1]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 0, -1])
    def setDirection(self, direction = [0, 0, -1]):
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 0, -1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 0, -1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.global_ = False
        if not self.global_:
            self.global_ = kwargs.pop("global_", False)
    def setGlobal(self, global_ = False):
        try:
            super().setGlobal(global_)
        except AttributeError:
           pass
        self.global_ = global_
        return self
    def addGlobal(self, global_ = False):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
    def addGlobal(self, global_ = False):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
        self.intensity = 1
        if not self.intensity:
            self.intensity = kwargs.pop("intensity", 1)
        if self.intensity == None or self.intensity  <  0:
            return None
        if self.intensity == None or self.intensity  >  1:
            return None
    def setIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        try:
            super().setIntensity(intensity)
        except AttributeError:
           pass
        self.intensity = intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.on = True
        if not self.on:
            self.on = kwargs.pop("on", True)
    def setOn(self, on = True):
        try:
            super().setOn(on)
        except AttributeError:
           pass
        self.on = on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class DISEntityManager(X3DChildNode):
    def __init__(self, **kwargs):
        super(DISEntityManager, self).__init__(**kwargs)
        self.EdEntities = []
        if not self.EdEntities:
            self.EdEntities = kwargs.pop("EdEntities", [])
    def setAddedEntities(self, EdEntities = []):
        try:
            super().setAddedEntities(EdEntities)
        except AttributeError:
           pass
        self.EdEntities = EdEntities
        return self
    def addAddedEntities(self, EdEntities = []):
        if not isinstance(EdEntities, list):
            EdEntities = [EdEntities]
            self.EdEntities = []
            self.EdEntities = self.EdEntities + EdEntities
        return self
    def addAddedEntities(self, EdEntities = []):
        if not isinstance(EdEntities, list):
            EdEntities = [EdEntities]
            self.EdEntities = []
            self.EdEntities = self.EdEntities + EdEntities
        return self
        self.address = "localhost"
        if not self.address:
            self.address = kwargs.pop("address", "localhost")
    def setAddress(self, address = "localhost"):
        try:
            super().setAddress(address)
        except AttributeError:
           pass
        self.address = address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
        self.applicationID = 0
        if not self.applicationID:
            self.applicationID = kwargs.pop("applicationID", 0)
    def setApplicationID(self, applicationID = 0):
        try:
            super().setApplicationID(applicationID)
        except AttributeError:
           pass
        self.applicationID = applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mapping = []
        if not self.mapping:
            self.mapping = kwargs.pop("mapping", [])
    def setMapping(self, mapping = []):
        try:
            super().setMapping(mapping)
        except AttributeError:
           pass
        self.mapping = mapping
        return self
    def addMapping(self, mapping = []):
        if not isinstance(mapping, list):
            mapping = [mapping]
            self.mapping = []
            self.mapping = self.mapping + mapping
        return self
    def addMapping(self, mapping = []):
        if not isinstance(mapping, list):
            mapping = [mapping]
            self.mapping = []
            self.mapping = self.mapping + mapping
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.port = 0
        if not self.port:
            self.port = kwargs.pop("port", 0)
    def setPort(self, port = 0):
        try:
            super().setPort(port)
        except AttributeError:
           pass
        self.port = port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
        self.DEntities = []
        if not self.DEntities:
            self.DEntities = kwargs.pop("DEntities", [])
    def setRemovedEntities(self, DEntities = []):
        try:
            super().setRemovedEntities(DEntities)
        except AttributeError:
           pass
        self.DEntities = DEntities
        return self
    def addRemovedEntities(self, DEntities = []):
        if not isinstance(DEntities, list):
            DEntities = [DEntities]
            self.DEntities = []
            self.DEntities = self.DEntities + DEntities
        return self
    def addRemovedEntities(self, DEntities = []):
        if not isinstance(DEntities, list):
            DEntities = [DEntities]
            self.DEntities = []
            self.DEntities = self.DEntities + DEntities
        return self
        self.siteID = 0
        if not self.siteID:
            self.siteID = kwargs.pop("siteID", 0)
    def setSiteID(self, siteID = 0):
        try:
            super().setSiteID(siteID)
        except AttributeError:
           pass
        self.siteID = siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class DISEntityTypeMapping(X3DUrlObject, X3DInfoNode):
    def __init__(self, **kwargs):
        super(DISEntityTypeMapping, self).__init__(**kwargs)
        self.category = 0
        if not self.category:
            self.category = kwargs.pop("category", 0)
        if self.category == None or self.category  <  0:
            return None
        if self.category == None or self.category  >  255:
            return None
    def setCategory(self, category = 0):
        if category == None or category  <  0:
            return None
        if category == None or category  >  255:
            return None
        try:
            super().setCategory(category)
        except AttributeError:
           pass
        self.category = category
        return self
    def addCategory(self, category = 0):
        if category == None or category  <  0:
            return None
        if category == None or category  >  255:
            return None
        if not isinstance(category, list):
            category = [category]
            self.category = []
            self.category = self.category + category
        return self
    def addCategory(self, category = 0):
        if category == None or category  <  0:
            return None
        if category == None or category  >  255:
            return None
        if not isinstance(category, list):
            category = [category]
            self.category = []
            self.category = self.category + category
        return self
        self.country = 0
        if not self.country:
            self.country = kwargs.pop("country", 0)
        if self.country == None or self.country  <  0:
            return None
        if self.country == None or self.country  >  65535:
            return None
    def setCountry(self, country = 0):
        if country == None or country  <  0:
            return None
        if country == None or country  >  65535:
            return None
        try:
            super().setCountry(country)
        except AttributeError:
           pass
        self.country = country
        return self
    def addCountry(self, country = 0):
        if country == None or country  <  0:
            return None
        if country == None or country  >  65535:
            return None
        if not isinstance(country, list):
            country = [country]
            self.country = []
            self.country = self.country + country
        return self
    def addCountry(self, country = 0):
        if country == None or country  <  0:
            return None
        if country == None or country  >  65535:
            return None
        if not isinstance(country, list):
            country = [country]
            self.country = []
            self.country = self.country + country
        return self
        self.domain = 0
        if not self.domain:
            self.domain = kwargs.pop("domain", 0)
        if self.domain == None or self.domain  <  0:
            return None
        if self.domain == None or self.domain  >  255:
            return None
    def setDomain(self, domain = 0):
        if domain == None or domain  <  0:
            return None
        if domain == None or domain  >  255:
            return None
        try:
            super().setDomain(domain)
        except AttributeError:
           pass
        self.domain = domain
        return self
    def addDomain(self, domain = 0):
        if domain == None or domain  <  0:
            return None
        if domain == None or domain  >  255:
            return None
        if not isinstance(domain, list):
            domain = [domain]
            self.domain = []
            self.domain = self.domain + domain
        return self
    def addDomain(self, domain = 0):
        if domain == None or domain  <  0:
            return None
        if domain == None or domain  >  255:
            return None
        if not isinstance(domain, list):
            domain = [domain]
            self.domain = []
            self.domain = self.domain + domain
        return self
        self.extra = 0
        if not self.extra:
            self.extra = kwargs.pop("extra", 0)
        if self.extra == None or self.extra  <  0:
            return None
        if self.extra == None or self.extra  >  255:
            return None
    def setExtra(self, extra = 0):
        if extra == None or extra  <  0:
            return None
        if extra == None or extra  >  255:
            return None
        try:
            super().setExtra(extra)
        except AttributeError:
           pass
        self.extra = extra
        return self
    def addExtra(self, extra = 0):
        if extra == None or extra  <  0:
            return None
        if extra == None or extra  >  255:
            return None
        if not isinstance(extra, list):
            extra = [extra]
            self.extra = []
            self.extra = self.extra + extra
        return self
    def addExtra(self, extra = 0):
        if extra == None or extra  <  0:
            return None
        if extra == None or extra  >  255:
            return None
        if not isinstance(extra, list):
            extra = [extra]
            self.extra = []
            self.extra = self.extra + extra
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.kind = 0
        if not self.kind:
            self.kind = kwargs.pop("kind", 0)
        if self.kind == None or self.kind  <  0:
            return None
        if self.kind == None or self.kind  >  255:
            return None
    def setKind(self, kind = 0):
        if kind == None or kind  <  0:
            return None
        if kind == None or kind  >  255:
            return None
        try:
            super().setKind(kind)
        except AttributeError:
           pass
        self.kind = kind
        return self
    def addKind(self, kind = 0):
        if kind == None or kind  <  0:
            return None
        if kind == None or kind  >  255:
            return None
        if not isinstance(kind, list):
            kind = [kind]
            self.kind = []
            self.kind = self.kind + kind
        return self
    def addKind(self, kind = 0):
        if kind == None or kind  <  0:
            return None
        if kind == None or kind  >  255:
            return None
        if not isinstance(kind, list):
            kind = [kind]
            self.kind = []
            self.kind = self.kind + kind
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.specific = 0
        if not self.specific:
            self.specific = kwargs.pop("specific", 0)
        if self.specific == None or self.specific  <  0:
            return None
        if self.specific == None or self.specific  >  255:
            return None
    def setSpecific(self, specific = 0):
        if specific == None or specific  <  0:
            return None
        if specific == None or specific  >  255:
            return None
        try:
            super().setSpecific(specific)
        except AttributeError:
           pass
        self.specific = specific
        return self
    def addSpecific(self, specific = 0):
        if specific == None or specific  <  0:
            return None
        if specific == None or specific  >  255:
            return None
        if not isinstance(specific, list):
            specific = [specific]
            self.specific = []
            self.specific = self.specific + specific
        return self
    def addSpecific(self, specific = 0):
        if specific == None or specific  <  0:
            return None
        if specific == None or specific  >  255:
            return None
        if not isinstance(specific, list):
            specific = [specific]
            self.specific = []
            self.specific = self.specific + specific
        return self
        self.subcategory = 0
        if not self.subcategory:
            self.subcategory = kwargs.pop("subcategory", 0)
        if self.subcategory == None or self.subcategory  <  0:
            return None
        if self.subcategory == None or self.subcategory  >  255:
            return None
    def setSubcategory(self, subcategory = 0):
        if subcategory == None or subcategory  <  0:
            return None
        if subcategory == None or subcategory  >  255:
            return None
        try:
            super().setSubcategory(subcategory)
        except AttributeError:
           pass
        self.subcategory = subcategory
        return self
    def addSubcategory(self, subcategory = 0):
        if subcategory == None or subcategory  <  0:
            return None
        if subcategory == None or subcategory  >  255:
            return None
        if not isinstance(subcategory, list):
            subcategory = [subcategory]
            self.subcategory = []
            self.subcategory = self.subcategory + subcategory
        return self
    def addSubcategory(self, subcategory = 0):
        if subcategory == None or subcategory  <  0:
            return None
        if subcategory == None or subcategory  >  255:
            return None
        if not isinstance(subcategory, list):
            subcategory = [subcategory]
            self.subcategory = []
            self.subcategory = self.subcategory + subcategory
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Disk2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Disk2D, self).__init__(**kwargs)
        self.innerRadius = 0
        if not self.innerRadius:
            self.innerRadius = kwargs.pop("innerRadius", 0)
        if self.innerRadius == None or self.innerRadius  <  0:
            return None
    def setInnerRadius(self, innerRadius = 0):
        if innerRadius == None or innerRadius  <  0:
            return None
        try:
            super().setInnerRadius(innerRadius)
        except AttributeError:
           pass
        self.innerRadius = innerRadius
        return self
    def addInnerRadius(self, innerRadius = 0):
        if innerRadius == None or innerRadius  <  0:
            return None
        if not isinstance(innerRadius, list):
            innerRadius = [innerRadius]
            self.innerRadius = []
            self.innerRadius = self.innerRadius + innerRadius
        return self
    def addInnerRadius(self, innerRadius = 0):
        if innerRadius == None or innerRadius  <  0:
            return None
        if not isinstance(innerRadius, list):
            innerRadius = [innerRadius]
            self.innerRadius = []
            self.innerRadius = self.innerRadius + innerRadius
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.outerRadius = 1
        if not self.outerRadius:
            self.outerRadius = kwargs.pop("outerRadius", 1)
        if self.outerRadius == None or self.outerRadius  <=  0:
            return None
    def setOuterRadius(self, outerRadius = 1):
        if outerRadius == None or outerRadius  <=  0:
            return None
        try:
            super().setOuterRadius(outerRadius)
        except AttributeError:
           pass
        self.outerRadius = outerRadius
        return self
    def addOuterRadius(self, outerRadius = 1):
        if outerRadius == None or outerRadius  <=  0:
            return None
        if not isinstance(outerRadius, list):
            outerRadius = [outerRadius]
            self.outerRadius = []
            self.outerRadius = self.outerRadius + outerRadius
        return self
    def addOuterRadius(self, outerRadius = 1):
        if outerRadius == None or outerRadius  <=  0:
            return None
        if not isinstance(outerRadius, list):
            outerRadius = [outerRadius]
            self.outerRadius = []
            self.outerRadius = self.outerRadius + outerRadius
        return self
        self.solid = False
        if not self.solid:
            self.solid = kwargs.pop("solid", False)
    def setSolid(self, solid = False):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class DoubleAxisHingeJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(DoubleAxisHingeJoint, self).__init__(**kwargs)
        self.anchorPoint = [0, 0, 0]
        if not self.anchorPoint:
            self.anchorPoint = kwargs.pop("anchorPoint", [0, 0, 0])
    def setAnchorPoint(self, anchorPoint = [0, 0, 0]):
        try:
            super().setAnchorPoint(anchorPoint)
        except AttributeError:
           pass
        self.anchorPoint = anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
        self.axis1 = [0, 0, 0]
        if not self.axis1:
            self.axis1 = kwargs.pop("axis1", [0, 0, 0])
    def setAxis1(self, axis1 = [0, 0, 0]):
        try:
            super().setAxis1(axis1)
        except AttributeError:
           pass
        self.axis1 = axis1
        return self
    def addAxis1(self, axis1 = [0, 0, 0]):
        if not isinstance(axis1, list):
            axis1 = [axis1]
            self.axis1 = []
            self.axis1 = self.axis1 + axis1
        return self
    def addAxis1(self, axis1 = [0, 0, 0]):
        if not isinstance(axis1, list):
            axis1 = [axis1]
            self.axis1 = []
            self.axis1 = self.axis1 + axis1
        return self
        self.axis2 = [0, 0, 0]
        if not self.axis2:
            self.axis2 = kwargs.pop("axis2", [0, 0, 0])
    def setAxis2(self, axis2 = [0, 0, 0]):
        try:
            super().setAxis2(axis2)
        except AttributeError:
           pass
        self.axis2 = axis2
        return self
    def addAxis2(self, axis2 = [0, 0, 0]):
        if not isinstance(axis2, list):
            axis2 = [axis2]
            self.axis2 = []
            self.axis2 = self.axis2 + axis2
        return self
    def addAxis2(self, axis2 = [0, 0, 0]):
        if not isinstance(axis2, list):
            axis2 = [axis2]
            self.axis2 = []
            self.axis2 = self.axis2 + axis2
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body1AnchorPoint = []
        if not self.body1AnchorPoint:
            self.body1AnchorPoint = kwargs.pop("body1AnchorPoint", [])
    def setBody1AnchorPoint(self, body1AnchorPoint = []):
        try:
            super().setBody1AnchorPoint(body1AnchorPoint)
        except AttributeError:
           pass
        self.body1AnchorPoint = body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
        self.body1Axis = []
        if not self.body1Axis:
            self.body1Axis = kwargs.pop("body1Axis", [])
    def setBody1Axis(self, body1Axis = []):
        try:
            super().setBody1Axis(body1Axis)
        except AttributeError:
           pass
        self.body1Axis = body1Axis
        return self
    def addBody1Axis(self, body1Axis = []):
        if not isinstance(body1Axis, list):
            body1Axis = [body1Axis]
            self.body1Axis = []
            self.body1Axis = self.body1Axis + body1Axis
        return self
    def addBody1Axis(self, body1Axis = []):
        if not isinstance(body1Axis, list):
            body1Axis = [body1Axis]
            self.body1Axis = []
            self.body1Axis = self.body1Axis + body1Axis
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.body2AnchorPoint = []
        if not self.body2AnchorPoint:
            self.body2AnchorPoint = kwargs.pop("body2AnchorPoint", [])
    def setBody2AnchorPoint(self, body2AnchorPoint = []):
        try:
            super().setBody2AnchorPoint(body2AnchorPoint)
        except AttributeError:
           pass
        self.body2AnchorPoint = body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
        self.body2Axis = []
        if not self.body2Axis:
            self.body2Axis = kwargs.pop("body2Axis", [])
    def setBody2Axis(self, body2Axis = []):
        try:
            super().setBody2Axis(body2Axis)
        except AttributeError:
           pass
        self.body2Axis = body2Axis
        return self
    def addBody2Axis(self, body2Axis = []):
        if not isinstance(body2Axis, list):
            body2Axis = [body2Axis]
            self.body2Axis = []
            self.body2Axis = self.body2Axis + body2Axis
        return self
    def addBody2Axis(self, body2Axis = []):
        if not isinstance(body2Axis, list):
            body2Axis = [body2Axis]
            self.body2Axis = []
            self.body2Axis = self.body2Axis + body2Axis
        return self
        self.desiredAngularVelocity1 = 0
        if not self.desiredAngularVelocity1:
            self.desiredAngularVelocity1 = kwargs.pop("desiredAngularVelocity1", 0)
    def setDesiredAngularVelocity1(self, desiredAngularVelocity1 = 0):
        try:
            super().setDesiredAngularVelocity1(desiredAngularVelocity1)
        except AttributeError:
           pass
        self.desiredAngularVelocity1 = desiredAngularVelocity1
        return self
    def addDesiredAngularVelocity1(self, desiredAngularVelocity1 = 0):
        if not isinstance(desiredAngularVelocity1, list):
            desiredAngularVelocity1 = [desiredAngularVelocity1]
            self.desiredAngularVelocity1 = []
            self.desiredAngularVelocity1 = self.desiredAngularVelocity1 + desiredAngularVelocity1
        return self
    def addDesiredAngularVelocity1(self, desiredAngularVelocity1 = 0):
        if not isinstance(desiredAngularVelocity1, list):
            desiredAngularVelocity1 = [desiredAngularVelocity1]
            self.desiredAngularVelocity1 = []
            self.desiredAngularVelocity1 = self.desiredAngularVelocity1 + desiredAngularVelocity1
        return self
        self.desiredAngularVelocity2 = 0
        if not self.desiredAngularVelocity2:
            self.desiredAngularVelocity2 = kwargs.pop("desiredAngularVelocity2", 0)
    def setDesiredAngularVelocity2(self, desiredAngularVelocity2 = 0):
        try:
            super().setDesiredAngularVelocity2(desiredAngularVelocity2)
        except AttributeError:
           pass
        self.desiredAngularVelocity2 = desiredAngularVelocity2
        return self
    def addDesiredAngularVelocity2(self, desiredAngularVelocity2 = 0):
        if not isinstance(desiredAngularVelocity2, list):
            desiredAngularVelocity2 = [desiredAngularVelocity2]
            self.desiredAngularVelocity2 = []
            self.desiredAngularVelocity2 = self.desiredAngularVelocity2 + desiredAngularVelocity2
        return self
    def addDesiredAngularVelocity2(self, desiredAngularVelocity2 = 0):
        if not isinstance(desiredAngularVelocity2, list):
            desiredAngularVelocity2 = [desiredAngularVelocity2]
            self.desiredAngularVelocity2 = []
            self.desiredAngularVelocity2 = self.desiredAngularVelocity2 + desiredAngularVelocity2
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.hinge1Angle = None
        if not self.hinge1Angle:
            self.hinge1Angle = kwargs.pop("hinge1Angle", None)
    def setHinge1Angle(self, hinge1Angle = None):
        try:
            super().setHinge1Angle(hinge1Angle)
        except AttributeError:
           pass
        self.hinge1Angle = hinge1Angle
        return self
    def addHinge1Angle(self, hinge1Angle = None):
        if not isinstance(hinge1Angle, list):
            hinge1Angle = [hinge1Angle]
            self.hinge1Angle = []
            self.hinge1Angle = self.hinge1Angle + hinge1Angle
        return self
    def addHinge1Angle(self, hinge1Angle = None):
        if not isinstance(hinge1Angle, list):
            hinge1Angle = [hinge1Angle]
            self.hinge1Angle = []
            self.hinge1Angle = self.hinge1Angle + hinge1Angle
        return self
        self.hinge1AngleRate = None
        if not self.hinge1AngleRate:
            self.hinge1AngleRate = kwargs.pop("hinge1AngleRate", None)
    def setHinge1AngleRate(self, hinge1AngleRate = None):
        try:
            super().setHinge1AngleRate(hinge1AngleRate)
        except AttributeError:
           pass
        self.hinge1AngleRate = hinge1AngleRate
        return self
    def addHinge1AngleRate(self, hinge1AngleRate = None):
        if not isinstance(hinge1AngleRate, list):
            hinge1AngleRate = [hinge1AngleRate]
            self.hinge1AngleRate = []
            self.hinge1AngleRate = self.hinge1AngleRate + hinge1AngleRate
        return self
    def addHinge1AngleRate(self, hinge1AngleRate = None):
        if not isinstance(hinge1AngleRate, list):
            hinge1AngleRate = [hinge1AngleRate]
            self.hinge1AngleRate = []
            self.hinge1AngleRate = self.hinge1AngleRate + hinge1AngleRate
        return self
        self.hinge2Angle = None
        if not self.hinge2Angle:
            self.hinge2Angle = kwargs.pop("hinge2Angle", None)
    def setHinge2Angle(self, hinge2Angle = None):
        try:
            super().setHinge2Angle(hinge2Angle)
        except AttributeError:
           pass
        self.hinge2Angle = hinge2Angle
        return self
    def addHinge2Angle(self, hinge2Angle = None):
        if not isinstance(hinge2Angle, list):
            hinge2Angle = [hinge2Angle]
            self.hinge2Angle = []
            self.hinge2Angle = self.hinge2Angle + hinge2Angle
        return self
    def addHinge2Angle(self, hinge2Angle = None):
        if not isinstance(hinge2Angle, list):
            hinge2Angle = [hinge2Angle]
            self.hinge2Angle = []
            self.hinge2Angle = self.hinge2Angle + hinge2Angle
        return self
        self.hinge2AngleRate = None
        if not self.hinge2AngleRate:
            self.hinge2AngleRate = kwargs.pop("hinge2AngleRate", None)
    def setHinge2AngleRate(self, hinge2AngleRate = None):
        try:
            super().setHinge2AngleRate(hinge2AngleRate)
        except AttributeError:
           pass
        self.hinge2AngleRate = hinge2AngleRate
        return self
    def addHinge2AngleRate(self, hinge2AngleRate = None):
        if not isinstance(hinge2AngleRate, list):
            hinge2AngleRate = [hinge2AngleRate]
            self.hinge2AngleRate = []
            self.hinge2AngleRate = self.hinge2AngleRate + hinge2AngleRate
        return self
    def addHinge2AngleRate(self, hinge2AngleRate = None):
        if not isinstance(hinge2AngleRate, list):
            hinge2AngleRate = [hinge2AngleRate]
            self.hinge2AngleRate = []
            self.hinge2AngleRate = self.hinge2AngleRate + hinge2AngleRate
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.maxAngle1 = 3.141592653
        if not self.maxAngle1:
            self.maxAngle1 = kwargs.pop("maxAngle1", 3.141592653)
    def setMaxAngle1(self, maxAngle1 = 3.141592653):
        try:
            super().setMaxAngle1(maxAngle1)
        except AttributeError:
           pass
        self.maxAngle1 = maxAngle1
        return self
    def addMaxAngle1(self, maxAngle1 = 3.141592653):
        if not isinstance(maxAngle1, list):
            maxAngle1 = [maxAngle1]
            self.maxAngle1 = []
            self.maxAngle1 = self.maxAngle1 + maxAngle1
        return self
    def addMaxAngle1(self, maxAngle1 = 3.141592653):
        if not isinstance(maxAngle1, list):
            maxAngle1 = [maxAngle1]
            self.maxAngle1 = []
            self.maxAngle1 = self.maxAngle1 + maxAngle1
        return self
        self.maxTorque1 = 0
        if not self.maxTorque1:
            self.maxTorque1 = kwargs.pop("maxTorque1", 0)
    def setMaxTorque1(self, maxTorque1 = 0):
        try:
            super().setMaxTorque1(maxTorque1)
        except AttributeError:
           pass
        self.maxTorque1 = maxTorque1
        return self
    def addMaxTorque1(self, maxTorque1 = 0):
        if not isinstance(maxTorque1, list):
            maxTorque1 = [maxTorque1]
            self.maxTorque1 = []
            self.maxTorque1 = self.maxTorque1 + maxTorque1
        return self
    def addMaxTorque1(self, maxTorque1 = 0):
        if not isinstance(maxTorque1, list):
            maxTorque1 = [maxTorque1]
            self.maxTorque1 = []
            self.maxTorque1 = self.maxTorque1 + maxTorque1
        return self
        self.maxTorque2 = 0
        if not self.maxTorque2:
            self.maxTorque2 = kwargs.pop("maxTorque2", 0)
    def setMaxTorque2(self, maxTorque2 = 0):
        try:
            super().setMaxTorque2(maxTorque2)
        except AttributeError:
           pass
        self.maxTorque2 = maxTorque2
        return self
    def addMaxTorque2(self, maxTorque2 = 0):
        if not isinstance(maxTorque2, list):
            maxTorque2 = [maxTorque2]
            self.maxTorque2 = []
            self.maxTorque2 = self.maxTorque2 + maxTorque2
        return self
    def addMaxTorque2(self, maxTorque2 = 0):
        if not isinstance(maxTorque2, list):
            maxTorque2 = [maxTorque2]
            self.maxTorque2 = []
            self.maxTorque2 = self.maxTorque2 + maxTorque2
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minAngle1 = -3.141592653
        if not self.minAngle1:
            self.minAngle1 = kwargs.pop("minAngle1", -3.141592653)
    def setMinAngle1(self, minAngle1 = -3.141592653):
        try:
            super().setMinAngle1(minAngle1)
        except AttributeError:
           pass
        self.minAngle1 = minAngle1
        return self
    def addMinAngle1(self, minAngle1 = -3.141592653):
        if not isinstance(minAngle1, list):
            minAngle1 = [minAngle1]
            self.minAngle1 = []
            self.minAngle1 = self.minAngle1 + minAngle1
        return self
    def addMinAngle1(self, minAngle1 = -3.141592653):
        if not isinstance(minAngle1, list):
            minAngle1 = [minAngle1]
            self.minAngle1 = []
            self.minAngle1 = self.minAngle1 + minAngle1
        return self
        self.stop1Bounce = 0
        if not self.stop1Bounce:
            self.stop1Bounce = kwargs.pop("stop1Bounce", 0)
    def setStop1Bounce(self, stop1Bounce = 0):
        try:
            super().setStop1Bounce(stop1Bounce)
        except AttributeError:
           pass
        self.stop1Bounce = stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
        self.stop1ConstantForceMix = 0.001
        if not self.stop1ConstantForceMix:
            self.stop1ConstantForceMix = kwargs.pop("stop1ConstantForceMix", 0.001)
    def setStop1ConstantForceMix(self, stop1ConstantForceMix = 0.001):
        try:
            super().setStop1ConstantForceMix(stop1ConstantForceMix)
        except AttributeError:
           pass
        self.stop1ConstantForceMix = stop1ConstantForceMix
        return self
    def addStop1ConstantForceMix(self, stop1ConstantForceMix = 0.001):
        if not isinstance(stop1ConstantForceMix, list):
            stop1ConstantForceMix = [stop1ConstantForceMix]
            self.stop1ConstantForceMix = []
            self.stop1ConstantForceMix = self.stop1ConstantForceMix + stop1ConstantForceMix
        return self
    def addStop1ConstantForceMix(self, stop1ConstantForceMix = 0.001):
        if not isinstance(stop1ConstantForceMix, list):
            stop1ConstantForceMix = [stop1ConstantForceMix]
            self.stop1ConstantForceMix = []
            self.stop1ConstantForceMix = self.stop1ConstantForceMix + stop1ConstantForceMix
        return self
        self.stop1ErrorCorrection = 0.8
        if not self.stop1ErrorCorrection:
            self.stop1ErrorCorrection = kwargs.pop("stop1ErrorCorrection", 0.8)
    def setStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        try:
            super().setStop1ErrorCorrection(stop1ErrorCorrection)
        except AttributeError:
           pass
        self.stop1ErrorCorrection = stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
        self.suspensionErrorCorrection = 0.8
        if not self.suspensionErrorCorrection:
            self.suspensionErrorCorrection = kwargs.pop("suspensionErrorCorrection", 0.8)
    def setSuspensionErrorCorrection(self, suspensionErrorCorrection = 0.8):
        try:
            super().setSuspensionErrorCorrection(suspensionErrorCorrection)
        except AttributeError:
           pass
        self.suspensionErrorCorrection = suspensionErrorCorrection
        return self
    def addSuspensionErrorCorrection(self, suspensionErrorCorrection = 0.8):
        if not isinstance(suspensionErrorCorrection, list):
            suspensionErrorCorrection = [suspensionErrorCorrection]
            self.suspensionErrorCorrection = []
            self.suspensionErrorCorrection = self.suspensionErrorCorrection + suspensionErrorCorrection
        return self
    def addSuspensionErrorCorrection(self, suspensionErrorCorrection = 0.8):
        if not isinstance(suspensionErrorCorrection, list):
            suspensionErrorCorrection = [suspensionErrorCorrection]
            self.suspensionErrorCorrection = []
            self.suspensionErrorCorrection = self.suspensionErrorCorrection + suspensionErrorCorrection
        return self
        self.suspensionForce = 0
        if not self.suspensionForce:
            self.suspensionForce = kwargs.pop("suspensionForce", 0)
    def setSuspensionForce(self, suspensionForce = 0):
        try:
            super().setSuspensionForce(suspensionForce)
        except AttributeError:
           pass
        self.suspensionForce = suspensionForce
        return self
    def addSuspensionForce(self, suspensionForce = 0):
        if not isinstance(suspensionForce, list):
            suspensionForce = [suspensionForce]
            self.suspensionForce = []
            self.suspensionForce = self.suspensionForce + suspensionForce
        return self
    def addSuspensionForce(self, suspensionForce = 0):
        if not isinstance(suspensionForce, list):
            suspensionForce = [suspensionForce]
            self.suspensionForce = []
            self.suspensionForce = self.suspensionForce + suspensionForce
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class EaseInEaseOut(X3DChildNode):
    def __init__(self, **kwargs):
        super(EaseInEaseOut, self).__init__(**kwargs)
        self.easeInEaseOut = []
        if not self.easeInEaseOut:
            self.easeInEaseOut = kwargs.pop("easeInEaseOut", [])
    def setEaseInEaseOut(self, easeInEaseOut = []):
        try:
            super().setEaseInEaseOut(easeInEaseOut)
        except AttributeError:
           pass
        self.easeInEaseOut = easeInEaseOut
        return self
    def addEaseInEaseOut(self, easeInEaseOut = []):
        if not isinstance(easeInEaseOut, list):
            easeInEaseOut = [easeInEaseOut]
            self.easeInEaseOut = []
            self.easeInEaseOut = self.easeInEaseOut + easeInEaseOut
        return self
    def addEaseInEaseOut(self, easeInEaseOut = []):
        if not isinstance(easeInEaseOut, list):
            easeInEaseOut = [easeInEaseOut]
            self.easeInEaseOut = []
            self.easeInEaseOut = self.easeInEaseOut + easeInEaseOut
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.modifiedFraction_changed = None
        if not self.modifiedFraction_changed:
            self.modifiedFraction_changed = kwargs.pop("modifiedFraction_changed", None)
    def setmodifiedFraction_changed(self, modifiedFraction_changed = None):
        try:
            super().setmodifiedFraction_changed(modifiedFraction_changed)
        except AttributeError:
           pass
        self.modifiedFraction_changed = modifiedFraction_changed
        return self
    def addmodifiedFraction_changed(self, modifiedFraction_changed = None):
        if not isinstance(modifiedFraction_changed, list):
            modifiedFraction_changed = [modifiedFraction_changed]
            self.modifiedFraction_changed = []
            self.modifiedFraction_changed = self.modifiedFraction_changed + modifiedFraction_changed
        return self
    def addSetmodifiedFraction_changed(self, modifiedFraction_changed = None):
        if not isinstance(modifiedFraction_changed, list):
            modifiedFraction_changed = [modifiedFraction_changed]
            self.modifiedFraction_changed = []
            self.modifiedFraction_changed = self.modifiedFraction_changed + modifiedFraction_changed
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class EdgeEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(EdgeEnhancementVolumeStyle, self).__init__(**kwargs)
        self.edgeColor = [0, 0, 0, 1]
        if not self.edgeColor:
            self.edgeColor = kwargs.pop("edgeColor", [0, 0, 0, 1])
        if self.edgeColor == None or self.edgeColor  <  0:
            return None
        if self.edgeColor == None or self.edgeColor  >  1:
            return None
    def setEdgeColor(self, edgeColor = [0, 0, 0, 1]):
        if edgeColor == None or edgeColor  <  0:
            return None
        if edgeColor == None or edgeColor  >  1:
            return None
        try:
            super().setEdgeColor(edgeColor)
        except AttributeError:
           pass
        self.edgeColor = edgeColor
        return self
    def addEdgeColor(self, edgeColor = [0, 0, 0, 1]):
        if edgeColor == None or edgeColor  <  0:
            return None
        if edgeColor == None or edgeColor  >  1:
            return None
        if not isinstance(edgeColor, list):
            edgeColor = [edgeColor]
            self.edgeColor = []
            self.edgeColor = self.edgeColor + edgeColor
        return self
    def addEdgeColor(self, edgeColor = [0, 0, 0, 1]):
        if edgeColor == None or edgeColor  <  0:
            return None
        if edgeColor == None or edgeColor  >  1:
            return None
        if not isinstance(edgeColor, list):
            edgeColor = [edgeColor]
            self.edgeColor = []
            self.edgeColor = self.edgeColor + edgeColor
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.gradientThreshold = 0.4
        if not self.gradientThreshold:
            self.gradientThreshold = kwargs.pop("gradientThreshold", 0.4)
        if self.gradientThreshold == None or self.gradientThreshold  <  0:
            return None
        if self.gradientThreshold == None or self.gradientThreshold  >  3.1416:
            return None
    def setGradientThreshold(self, gradientThreshold = 0.4):
        if gradientThreshold == None or gradientThreshold  <  0:
            return None
        if gradientThreshold == None or gradientThreshold  >  3.1416:
            return None
        try:
            super().setGradientThreshold(gradientThreshold)
        except AttributeError:
           pass
        self.gradientThreshold = gradientThreshold
        return self
    def addGradientThreshold(self, gradientThreshold = 0.4):
        if gradientThreshold == None or gradientThreshold  <  0:
            return None
        if gradientThreshold == None or gradientThreshold  >  3.1416:
            return None
        if not isinstance(gradientThreshold, list):
            gradientThreshold = [gradientThreshold]
            self.gradientThreshold = []
            self.gradientThreshold = self.gradientThreshold + gradientThreshold
        return self
    def addGradientThreshold(self, gradientThreshold = 0.4):
        if gradientThreshold == None or gradientThreshold  <  0:
            return None
        if gradientThreshold == None or gradientThreshold  >  3.1416:
            return None
        if not isinstance(gradientThreshold, list):
            gradientThreshold = [gradientThreshold]
            self.gradientThreshold = []
            self.gradientThreshold = self.gradientThreshold + gradientThreshold
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.surfaceNormals = None
        if not self.surfaceNormals:
            self.surfaceNormals = kwargs.pop("surfaceNormals", None)
    def setSurfaceNormals(self, surfaceNormals = None):
        try:
            super().setSurfaceNormals(surfaceNormals)
        except AttributeError:
           pass
        self.surfaceNormals = surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ElevationGrid(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(ElevationGrid, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.creaseAngle = 0
        if not self.creaseAngle:
            self.creaseAngle = kwargs.pop("creaseAngle", 0)
        if self.creaseAngle == None or self.creaseAngle  <  0:
            return None
    def setCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        try:
            super().setCreaseAngle(creaseAngle)
        except AttributeError:
           pass
        self.creaseAngle = creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.height = [0, 0, 0, 0]
        if not self.height:
            self.height = kwargs.pop("height", [0, 0, 0, 0])
    def setHeight(self, height = [0, 0, 0, 0]):
        try:
            super().setHeight(height)
        except AttributeError:
           pass
        self.height = height
        return self
    def addHeight(self, height = [0, 0, 0, 0]):
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
    def addHeight(self, height = [0, 0, 0, 0]):
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Height = []
        if not self.Height:
            self.Height = kwargs.pop("Height", [])
    def setSet_height(self, Height = []):
        try:
            super().setSet_height(Height)
        except AttributeError:
           pass
        self.Height = Height
        return self
    def addSet_height(self, Height = []):
        if not isinstance(Height, list):
            Height = [Height]
            self.Height = []
            self.Height = self.Height + Height
        return self
    def addSet_height(self, Height = []):
        if not isinstance(Height, list):
            Height = [Height]
            self.Height = []
            self.Height = self.Height + Height
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.xDimension = 2
        if not self.xDimension:
            self.xDimension = kwargs.pop("xDimension", 2)
        if self.xDimension == None or self.xDimension  <  0:
            return None
    def setXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        try:
            super().setXDimension(xDimension)
        except AttributeError:
           pass
        self.xDimension = xDimension
        return self
    def addXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        if not isinstance(xDimension, list):
            xDimension = [xDimension]
            self.xDimension = []
            self.xDimension = self.xDimension + xDimension
        return self
    def addXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        if not isinstance(xDimension, list):
            xDimension = [xDimension]
            self.xDimension = []
            self.xDimension = self.xDimension + xDimension
        return self
        self.xSpacing = 1.0
        if not self.xSpacing:
            self.xSpacing = kwargs.pop("xSpacing", 1.0)
        if self.xSpacing == None or self.xSpacing  <=  0:
            return None
    def setXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        try:
            super().setXSpacing(xSpacing)
        except AttributeError:
           pass
        self.xSpacing = xSpacing
        return self
    def addXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        if not isinstance(xSpacing, list):
            xSpacing = [xSpacing]
            self.xSpacing = []
            self.xSpacing = self.xSpacing + xSpacing
        return self
    def addXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        if not isinstance(xSpacing, list):
            xSpacing = [xSpacing]
            self.xSpacing = []
            self.xSpacing = self.xSpacing + xSpacing
        return self
        self.zDimension = 2
        if not self.zDimension:
            self.zDimension = kwargs.pop("zDimension", 2)
        if self.zDimension == None or self.zDimension  <  0:
            return None
    def setZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        try:
            super().setZDimension(zDimension)
        except AttributeError:
           pass
        self.zDimension = zDimension
        return self
    def addZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        if not isinstance(zDimension, list):
            zDimension = [zDimension]
            self.zDimension = []
            self.zDimension = self.zDimension + zDimension
        return self
    def addZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        if not isinstance(zDimension, list):
            zDimension = [zDimension]
            self.zDimension = []
            self.zDimension = self.zDimension + zDimension
        return self
        self.zSpacing = 1.0
        if not self.zSpacing:
            self.zSpacing = kwargs.pop("zSpacing", 1.0)
        if self.zSpacing == None or self.zSpacing  <=  0:
            return None
    def setZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        try:
            super().setZSpacing(zSpacing)
        except AttributeError:
           pass
        self.zSpacing = zSpacing
        return self
    def addZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        if not isinstance(zSpacing, list):
            zSpacing = [zSpacing]
            self.zSpacing = []
            self.zSpacing = self.zSpacing + zSpacing
        return self
    def addZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        if not isinstance(zSpacing, list):
            zSpacing = [zSpacing]
            self.zSpacing = []
            self.zSpacing = self.zSpacing + zSpacing
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class EspduTransform(X3DNetworkSensorNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        super(EspduTransform, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.address = "localhost"
        if not self.address:
            self.address = kwargs.pop("address", "localhost")
    def setAddress(self, address = "localhost"):
        try:
            super().setAddress(address)
        except AttributeError:
           pass
        self.address = address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
        self.applicationID = 0
        if not self.applicationID:
            self.applicationID = kwargs.pop("applicationID", 0)
    def setApplicationID(self, applicationID = 0):
        try:
            super().setApplicationID(applicationID)
        except AttributeError:
           pass
        self.applicationID = applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
        self.articulationParameterArray = []
        if not self.articulationParameterArray:
            self.articulationParameterArray = kwargs.pop("articulationParameterArray", [])
    def setArticulationParameterArray(self, articulationParameterArray = []):
        try:
            super().setArticulationParameterArray(articulationParameterArray)
        except AttributeError:
           pass
        self.articulationParameterArray = articulationParameterArray
        return self
    def addArticulationParameterArray(self, articulationParameterArray = []):
        if not isinstance(articulationParameterArray, list):
            articulationParameterArray = [articulationParameterArray]
            self.articulationParameterArray = []
            self.articulationParameterArray = self.articulationParameterArray + articulationParameterArray
        return self
    def addArticulationParameterArray(self, articulationParameterArray = []):
        if not isinstance(articulationParameterArray, list):
            articulationParameterArray = [articulationParameterArray]
            self.articulationParameterArray = []
            self.articulationParameterArray = self.articulationParameterArray + articulationParameterArray
        return self
        self.articulationParameterChangeIndicatorArray = []
        if not self.articulationParameterChangeIndicatorArray:
            self.articulationParameterChangeIndicatorArray = kwargs.pop("articulationParameterChangeIndicatorArray", [])
    def setArticulationParameterChangeIndicatorArray(self, articulationParameterChangeIndicatorArray = []):
        try:
            super().setArticulationParameterChangeIndicatorArray(articulationParameterChangeIndicatorArray)
        except AttributeError:
           pass
        self.articulationParameterChangeIndicatorArray = articulationParameterChangeIndicatorArray
        return self
    def addArticulationParameterChangeIndicatorArray(self, articulationParameterChangeIndicatorArray = []):
        if not isinstance(articulationParameterChangeIndicatorArray, list):
            articulationParameterChangeIndicatorArray = [articulationParameterChangeIndicatorArray]
            self.articulationParameterChangeIndicatorArray = []
            self.articulationParameterChangeIndicatorArray = self.articulationParameterChangeIndicatorArray + articulationParameterChangeIndicatorArray
        return self
    def addArticulationParameterChangeIndicatorArray(self, articulationParameterChangeIndicatorArray = []):
        if not isinstance(articulationParameterChangeIndicatorArray, list):
            articulationParameterChangeIndicatorArray = [articulationParameterChangeIndicatorArray]
            self.articulationParameterChangeIndicatorArray = []
            self.articulationParameterChangeIndicatorArray = self.articulationParameterChangeIndicatorArray + articulationParameterChangeIndicatorArray
        return self
        self.articulationParameterCount = 0
        if not self.articulationParameterCount:
            self.articulationParameterCount = kwargs.pop("articulationParameterCount", 0)
    def setArticulationParameterCount(self, articulationParameterCount = 0):
        try:
            super().setArticulationParameterCount(articulationParameterCount)
        except AttributeError:
           pass
        self.articulationParameterCount = articulationParameterCount
        return self
    def addArticulationParameterCount(self, articulationParameterCount = 0):
        if not isinstance(articulationParameterCount, list):
            articulationParameterCount = [articulationParameterCount]
            self.articulationParameterCount = []
            self.articulationParameterCount = self.articulationParameterCount + articulationParameterCount
        return self
    def addArticulationParameterCount(self, articulationParameterCount = 0):
        if not isinstance(articulationParameterCount, list):
            articulationParameterCount = [articulationParameterCount]
            self.articulationParameterCount = []
            self.articulationParameterCount = self.articulationParameterCount + articulationParameterCount
        return self
        self.articulationParameterDesignatorArray = []
        if not self.articulationParameterDesignatorArray:
            self.articulationParameterDesignatorArray = kwargs.pop("articulationParameterDesignatorArray", [])
    def setArticulationParameterDesignatorArray(self, articulationParameterDesignatorArray = []):
        try:
            super().setArticulationParameterDesignatorArray(articulationParameterDesignatorArray)
        except AttributeError:
           pass
        self.articulationParameterDesignatorArray = articulationParameterDesignatorArray
        return self
    def addArticulationParameterDesignatorArray(self, articulationParameterDesignatorArray = []):
        if not isinstance(articulationParameterDesignatorArray, list):
            articulationParameterDesignatorArray = [articulationParameterDesignatorArray]
            self.articulationParameterDesignatorArray = []
            self.articulationParameterDesignatorArray = self.articulationParameterDesignatorArray + articulationParameterDesignatorArray
        return self
    def addArticulationParameterDesignatorArray(self, articulationParameterDesignatorArray = []):
        if not isinstance(articulationParameterDesignatorArray, list):
            articulationParameterDesignatorArray = [articulationParameterDesignatorArray]
            self.articulationParameterDesignatorArray = []
            self.articulationParameterDesignatorArray = self.articulationParameterDesignatorArray + articulationParameterDesignatorArray
        return self
        self.articulationParameterIdPartAttachedToArray = []
        if not self.articulationParameterIdPartAttachedToArray:
            self.articulationParameterIdPartAttachedToArray = kwargs.pop("articulationParameterIdPartAttachedToArray", [])
    def setArticulationParameterIdPartAttachedToArray(self, articulationParameterIdPartAttachedToArray = []):
        try:
            super().setArticulationParameterIdPartAttachedToArray(articulationParameterIdPartAttachedToArray)
        except AttributeError:
           pass
        self.articulationParameterIdPartAttachedToArray = articulationParameterIdPartAttachedToArray
        return self
    def addArticulationParameterIdPartAttachedToArray(self, articulationParameterIdPartAttachedToArray = []):
        if not isinstance(articulationParameterIdPartAttachedToArray, list):
            articulationParameterIdPartAttachedToArray = [articulationParameterIdPartAttachedToArray]
            self.articulationParameterIdPartAttachedToArray = []
            self.articulationParameterIdPartAttachedToArray = self.articulationParameterIdPartAttachedToArray + articulationParameterIdPartAttachedToArray
        return self
    def addArticulationParameterIdPartAttachedToArray(self, articulationParameterIdPartAttachedToArray = []):
        if not isinstance(articulationParameterIdPartAttachedToArray, list):
            articulationParameterIdPartAttachedToArray = [articulationParameterIdPartAttachedToArray]
            self.articulationParameterIdPartAttachedToArray = []
            self.articulationParameterIdPartAttachedToArray = self.articulationParameterIdPartAttachedToArray + articulationParameterIdPartAttachedToArray
        return self
        self.articulationParameterTypeArray = []
        if not self.articulationParameterTypeArray:
            self.articulationParameterTypeArray = kwargs.pop("articulationParameterTypeArray", [])
    def setArticulationParameterTypeArray(self, articulationParameterTypeArray = []):
        try:
            super().setArticulationParameterTypeArray(articulationParameterTypeArray)
        except AttributeError:
           pass
        self.articulationParameterTypeArray = articulationParameterTypeArray
        return self
    def addArticulationParameterTypeArray(self, articulationParameterTypeArray = []):
        if not isinstance(articulationParameterTypeArray, list):
            articulationParameterTypeArray = [articulationParameterTypeArray]
            self.articulationParameterTypeArray = []
            self.articulationParameterTypeArray = self.articulationParameterTypeArray + articulationParameterTypeArray
        return self
    def addArticulationParameterTypeArray(self, articulationParameterTypeArray = []):
        if not isinstance(articulationParameterTypeArray, list):
            articulationParameterTypeArray = [articulationParameterTypeArray]
            self.articulationParameterTypeArray = []
            self.articulationParameterTypeArray = self.articulationParameterTypeArray + articulationParameterTypeArray
        return self
        self.articulationParameterValue0_changed = None
        if not self.articulationParameterValue0_changed:
            self.articulationParameterValue0_changed = kwargs.pop("articulationParameterValue0_changed", None)
    def setarticulationParameterValue0_changed(self, articulationParameterValue0_changed = None):
        try:
            super().setarticulationParameterValue0_changed(articulationParameterValue0_changed)
        except AttributeError:
           pass
        self.articulationParameterValue0_changed = articulationParameterValue0_changed
        return self
    def addarticulationParameterValue0_changed(self, articulationParameterValue0_changed = None):
        if not isinstance(articulationParameterValue0_changed, list):
            articulationParameterValue0_changed = [articulationParameterValue0_changed]
            self.articulationParameterValue0_changed = []
            self.articulationParameterValue0_changed = self.articulationParameterValue0_changed + articulationParameterValue0_changed
        return self
    def addSetarticulationParameterValue0_changed(self, articulationParameterValue0_changed = None):
        if not isinstance(articulationParameterValue0_changed, list):
            articulationParameterValue0_changed = [articulationParameterValue0_changed]
            self.articulationParameterValue0_changed = []
            self.articulationParameterValue0_changed = self.articulationParameterValue0_changed + articulationParameterValue0_changed
        return self
        self.articulationParameterValue1_changed = None
        if not self.articulationParameterValue1_changed:
            self.articulationParameterValue1_changed = kwargs.pop("articulationParameterValue1_changed", None)
    def setarticulationParameterValue1_changed(self, articulationParameterValue1_changed = None):
        try:
            super().setarticulationParameterValue1_changed(articulationParameterValue1_changed)
        except AttributeError:
           pass
        self.articulationParameterValue1_changed = articulationParameterValue1_changed
        return self
    def addarticulationParameterValue1_changed(self, articulationParameterValue1_changed = None):
        if not isinstance(articulationParameterValue1_changed, list):
            articulationParameterValue1_changed = [articulationParameterValue1_changed]
            self.articulationParameterValue1_changed = []
            self.articulationParameterValue1_changed = self.articulationParameterValue1_changed + articulationParameterValue1_changed
        return self
    def addSetarticulationParameterValue1_changed(self, articulationParameterValue1_changed = None):
        if not isinstance(articulationParameterValue1_changed, list):
            articulationParameterValue1_changed = [articulationParameterValue1_changed]
            self.articulationParameterValue1_changed = []
            self.articulationParameterValue1_changed = self.articulationParameterValue1_changed + articulationParameterValue1_changed
        return self
        self.articulationParameterValue2_changed = None
        if not self.articulationParameterValue2_changed:
            self.articulationParameterValue2_changed = kwargs.pop("articulationParameterValue2_changed", None)
    def setarticulationParameterValue2_changed(self, articulationParameterValue2_changed = None):
        try:
            super().setarticulationParameterValue2_changed(articulationParameterValue2_changed)
        except AttributeError:
           pass
        self.articulationParameterValue2_changed = articulationParameterValue2_changed
        return self
    def addarticulationParameterValue2_changed(self, articulationParameterValue2_changed = None):
        if not isinstance(articulationParameterValue2_changed, list):
            articulationParameterValue2_changed = [articulationParameterValue2_changed]
            self.articulationParameterValue2_changed = []
            self.articulationParameterValue2_changed = self.articulationParameterValue2_changed + articulationParameterValue2_changed
        return self
    def addSetarticulationParameterValue2_changed(self, articulationParameterValue2_changed = None):
        if not isinstance(articulationParameterValue2_changed, list):
            articulationParameterValue2_changed = [articulationParameterValue2_changed]
            self.articulationParameterValue2_changed = []
            self.articulationParameterValue2_changed = self.articulationParameterValue2_changed + articulationParameterValue2_changed
        return self
        self.articulationParameterValue3_changed = None
        if not self.articulationParameterValue3_changed:
            self.articulationParameterValue3_changed = kwargs.pop("articulationParameterValue3_changed", None)
    def setarticulationParameterValue3_changed(self, articulationParameterValue3_changed = None):
        try:
            super().setarticulationParameterValue3_changed(articulationParameterValue3_changed)
        except AttributeError:
           pass
        self.articulationParameterValue3_changed = articulationParameterValue3_changed
        return self
    def addarticulationParameterValue3_changed(self, articulationParameterValue3_changed = None):
        if not isinstance(articulationParameterValue3_changed, list):
            articulationParameterValue3_changed = [articulationParameterValue3_changed]
            self.articulationParameterValue3_changed = []
            self.articulationParameterValue3_changed = self.articulationParameterValue3_changed + articulationParameterValue3_changed
        return self
    def addSetarticulationParameterValue3_changed(self, articulationParameterValue3_changed = None):
        if not isinstance(articulationParameterValue3_changed, list):
            articulationParameterValue3_changed = [articulationParameterValue3_changed]
            self.articulationParameterValue3_changed = []
            self.articulationParameterValue3_changed = self.articulationParameterValue3_changed + articulationParameterValue3_changed
        return self
        self.articulationParameterValue4_changed = None
        if not self.articulationParameterValue4_changed:
            self.articulationParameterValue4_changed = kwargs.pop("articulationParameterValue4_changed", None)
    def setarticulationParameterValue4_changed(self, articulationParameterValue4_changed = None):
        try:
            super().setarticulationParameterValue4_changed(articulationParameterValue4_changed)
        except AttributeError:
           pass
        self.articulationParameterValue4_changed = articulationParameterValue4_changed
        return self
    def addarticulationParameterValue4_changed(self, articulationParameterValue4_changed = None):
        if not isinstance(articulationParameterValue4_changed, list):
            articulationParameterValue4_changed = [articulationParameterValue4_changed]
            self.articulationParameterValue4_changed = []
            self.articulationParameterValue4_changed = self.articulationParameterValue4_changed + articulationParameterValue4_changed
        return self
    def addSetarticulationParameterValue4_changed(self, articulationParameterValue4_changed = None):
        if not isinstance(articulationParameterValue4_changed, list):
            articulationParameterValue4_changed = [articulationParameterValue4_changed]
            self.articulationParameterValue4_changed = []
            self.articulationParameterValue4_changed = self.articulationParameterValue4_changed + articulationParameterValue4_changed
        return self
        self.articulationParameterValue5_changed = None
        if not self.articulationParameterValue5_changed:
            self.articulationParameterValue5_changed = kwargs.pop("articulationParameterValue5_changed", None)
    def setarticulationParameterValue5_changed(self, articulationParameterValue5_changed = None):
        try:
            super().setarticulationParameterValue5_changed(articulationParameterValue5_changed)
        except AttributeError:
           pass
        self.articulationParameterValue5_changed = articulationParameterValue5_changed
        return self
    def addarticulationParameterValue5_changed(self, articulationParameterValue5_changed = None):
        if not isinstance(articulationParameterValue5_changed, list):
            articulationParameterValue5_changed = [articulationParameterValue5_changed]
            self.articulationParameterValue5_changed = []
            self.articulationParameterValue5_changed = self.articulationParameterValue5_changed + articulationParameterValue5_changed
        return self
    def addSetarticulationParameterValue5_changed(self, articulationParameterValue5_changed = None):
        if not isinstance(articulationParameterValue5_changed, list):
            articulationParameterValue5_changed = [articulationParameterValue5_changed]
            self.articulationParameterValue5_changed = []
            self.articulationParameterValue5_changed = self.articulationParameterValue5_changed + articulationParameterValue5_changed
        return self
        self.articulationParameterValue6_changed = None
        if not self.articulationParameterValue6_changed:
            self.articulationParameterValue6_changed = kwargs.pop("articulationParameterValue6_changed", None)
    def setarticulationParameterValue6_changed(self, articulationParameterValue6_changed = None):
        try:
            super().setarticulationParameterValue6_changed(articulationParameterValue6_changed)
        except AttributeError:
           pass
        self.articulationParameterValue6_changed = articulationParameterValue6_changed
        return self
    def addarticulationParameterValue6_changed(self, articulationParameterValue6_changed = None):
        if not isinstance(articulationParameterValue6_changed, list):
            articulationParameterValue6_changed = [articulationParameterValue6_changed]
            self.articulationParameterValue6_changed = []
            self.articulationParameterValue6_changed = self.articulationParameterValue6_changed + articulationParameterValue6_changed
        return self
    def addSetarticulationParameterValue6_changed(self, articulationParameterValue6_changed = None):
        if not isinstance(articulationParameterValue6_changed, list):
            articulationParameterValue6_changed = [articulationParameterValue6_changed]
            self.articulationParameterValue6_changed = []
            self.articulationParameterValue6_changed = self.articulationParameterValue6_changed + articulationParameterValue6_changed
        return self
        self.articulationParameterValue7_changed = None
        if not self.articulationParameterValue7_changed:
            self.articulationParameterValue7_changed = kwargs.pop("articulationParameterValue7_changed", None)
    def setarticulationParameterValue7_changed(self, articulationParameterValue7_changed = None):
        try:
            super().setarticulationParameterValue7_changed(articulationParameterValue7_changed)
        except AttributeError:
           pass
        self.articulationParameterValue7_changed = articulationParameterValue7_changed
        return self
    def addarticulationParameterValue7_changed(self, articulationParameterValue7_changed = None):
        if not isinstance(articulationParameterValue7_changed, list):
            articulationParameterValue7_changed = [articulationParameterValue7_changed]
            self.articulationParameterValue7_changed = []
            self.articulationParameterValue7_changed = self.articulationParameterValue7_changed + articulationParameterValue7_changed
        return self
    def addSetarticulationParameterValue7_changed(self, articulationParameterValue7_changed = None):
        if not isinstance(articulationParameterValue7_changed, list):
            articulationParameterValue7_changed = [articulationParameterValue7_changed]
            self.articulationParameterValue7_changed = []
            self.articulationParameterValue7_changed = self.articulationParameterValue7_changed + articulationParameterValue7_changed
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.collideTime = None
        if not self.collideTime:
            self.collideTime = kwargs.pop("collideTime", None)
    def setCollideTime(self, collideTime = None):
        try:
            super().setCollideTime(collideTime)
        except AttributeError:
           pass
        self.collideTime = collideTime
        return self
    def addCollideTime(self, collideTime = None):
        if not isinstance(collideTime, list):
            collideTime = [collideTime]
            self.collideTime = []
            self.collideTime = self.collideTime + collideTime
        return self
    def addCollideTime(self, collideTime = None):
        if not isinstance(collideTime, list):
            collideTime = [collideTime]
            self.collideTime = []
            self.collideTime = self.collideTime + collideTime
        return self
        self.collisionType = 0
        if not self.collisionType:
            self.collisionType = kwargs.pop("collisionType", 0)
    def setCollisionType(self, collisionType = 0):
        try:
            super().setCollisionType(collisionType)
        except AttributeError:
           pass
        self.collisionType = collisionType
        return self
    def addCollisionType(self, collisionType = 0):
        if not isinstance(collisionType, list):
            collisionType = [collisionType]
            self.collisionType = []
            self.collisionType = self.collisionType + collisionType
        return self
    def addCollisionType(self, collisionType = 0):
        if not isinstance(collisionType, list):
            collisionType = [collisionType]
            self.collisionType = []
            self.collisionType = self.collisionType + collisionType
        return self
        self.deadReckoning = 0
        if not self.deadReckoning:
            self.deadReckoning = kwargs.pop("deadReckoning", 0)
    def setDeadReckoning(self, deadReckoning = 0):
        try:
            super().setDeadReckoning(deadReckoning)
        except AttributeError:
           pass
        self.deadReckoning = deadReckoning
        return self
    def addDeadReckoning(self, deadReckoning = 0):
        if not isinstance(deadReckoning, list):
            deadReckoning = [deadReckoning]
            self.deadReckoning = []
            self.deadReckoning = self.deadReckoning + deadReckoning
        return self
    def addDeadReckoning(self, deadReckoning = 0):
        if not isinstance(deadReckoning, list):
            deadReckoning = [deadReckoning]
            self.deadReckoning = []
            self.deadReckoning = self.deadReckoning + deadReckoning
        return self
        self.detonateTime = None
        if not self.detonateTime:
            self.detonateTime = kwargs.pop("detonateTime", None)
    def setDetonateTime(self, detonateTime = None):
        try:
            super().setDetonateTime(detonateTime)
        except AttributeError:
           pass
        self.detonateTime = detonateTime
        return self
    def addDetonateTime(self, detonateTime = None):
        if not isinstance(detonateTime, list):
            detonateTime = [detonateTime]
            self.detonateTime = []
            self.detonateTime = self.detonateTime + detonateTime
        return self
    def addDetonateTime(self, detonateTime = None):
        if not isinstance(detonateTime, list):
            detonateTime = [detonateTime]
            self.detonateTime = []
            self.detonateTime = self.detonateTime + detonateTime
        return self
        self.detonationLocation = [0, 0, 0]
        if not self.detonationLocation:
            self.detonationLocation = kwargs.pop("detonationLocation", [0, 0, 0])
    def setDetonationLocation(self, detonationLocation = [0, 0, 0]):
        try:
            super().setDetonationLocation(detonationLocation)
        except AttributeError:
           pass
        self.detonationLocation = detonationLocation
        return self
    def addDetonationLocation(self, detonationLocation = [0, 0, 0]):
        if not isinstance(detonationLocation, list):
            detonationLocation = [detonationLocation]
            self.detonationLocation = []
            self.detonationLocation = self.detonationLocation + detonationLocation
        return self
    def addDetonationLocation(self, detonationLocation = [0, 0, 0]):
        if not isinstance(detonationLocation, list):
            detonationLocation = [detonationLocation]
            self.detonationLocation = []
            self.detonationLocation = self.detonationLocation + detonationLocation
        return self
        self.detonationRelativeLocation = [0, 0, 0]
        if not self.detonationRelativeLocation:
            self.detonationRelativeLocation = kwargs.pop("detonationRelativeLocation", [0, 0, 0])
    def setDetonationRelativeLocation(self, detonationRelativeLocation = [0, 0, 0]):
        try:
            super().setDetonationRelativeLocation(detonationRelativeLocation)
        except AttributeError:
           pass
        self.detonationRelativeLocation = detonationRelativeLocation
        return self
    def addDetonationRelativeLocation(self, detonationRelativeLocation = [0, 0, 0]):
        if not isinstance(detonationRelativeLocation, list):
            detonationRelativeLocation = [detonationRelativeLocation]
            self.detonationRelativeLocation = []
            self.detonationRelativeLocation = self.detonationRelativeLocation + detonationRelativeLocation
        return self
    def addDetonationRelativeLocation(self, detonationRelativeLocation = [0, 0, 0]):
        if not isinstance(detonationRelativeLocation, list):
            detonationRelativeLocation = [detonationRelativeLocation]
            self.detonationRelativeLocation = []
            self.detonationRelativeLocation = self.detonationRelativeLocation + detonationRelativeLocation
        return self
        self.detonationResult = 0
        if not self.detonationResult:
            self.detonationResult = kwargs.pop("detonationResult", 0)
    def setDetonationResult(self, detonationResult = 0):
        try:
            super().setDetonationResult(detonationResult)
        except AttributeError:
           pass
        self.detonationResult = detonationResult
        return self
    def addDetonationResult(self, detonationResult = 0):
        if not isinstance(detonationResult, list):
            detonationResult = [detonationResult]
            self.detonationResult = []
            self.detonationResult = self.detonationResult + detonationResult
        return self
    def addDetonationResult(self, detonationResult = 0):
        if not isinstance(detonationResult, list):
            detonationResult = [detonationResult]
            self.detonationResult = []
            self.detonationResult = self.detonationResult + detonationResult
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.entityCategory = 0
        if not self.entityCategory:
            self.entityCategory = kwargs.pop("entityCategory", 0)
    def setEntityCategory(self, entityCategory = 0):
        try:
            super().setEntityCategory(entityCategory)
        except AttributeError:
           pass
        self.entityCategory = entityCategory
        return self
    def addEntityCategory(self, entityCategory = 0):
        if not isinstance(entityCategory, list):
            entityCategory = [entityCategory]
            self.entityCategory = []
            self.entityCategory = self.entityCategory + entityCategory
        return self
    def addEntityCategory(self, entityCategory = 0):
        if not isinstance(entityCategory, list):
            entityCategory = [entityCategory]
            self.entityCategory = []
            self.entityCategory = self.entityCategory + entityCategory
        return self
        self.entityCountry = 0
        if not self.entityCountry:
            self.entityCountry = kwargs.pop("entityCountry", 0)
    def setEntityCountry(self, entityCountry = 0):
        try:
            super().setEntityCountry(entityCountry)
        except AttributeError:
           pass
        self.entityCountry = entityCountry
        return self
    def addEntityCountry(self, entityCountry = 0):
        if not isinstance(entityCountry, list):
            entityCountry = [entityCountry]
            self.entityCountry = []
            self.entityCountry = self.entityCountry + entityCountry
        return self
    def addEntityCountry(self, entityCountry = 0):
        if not isinstance(entityCountry, list):
            entityCountry = [entityCountry]
            self.entityCountry = []
            self.entityCountry = self.entityCountry + entityCountry
        return self
        self.entityDomain = 0
        if not self.entityDomain:
            self.entityDomain = kwargs.pop("entityDomain", 0)
    def setEntityDomain(self, entityDomain = 0):
        try:
            super().setEntityDomain(entityDomain)
        except AttributeError:
           pass
        self.entityDomain = entityDomain
        return self
    def addEntityDomain(self, entityDomain = 0):
        if not isinstance(entityDomain, list):
            entityDomain = [entityDomain]
            self.entityDomain = []
            self.entityDomain = self.entityDomain + entityDomain
        return self
    def addEntityDomain(self, entityDomain = 0):
        if not isinstance(entityDomain, list):
            entityDomain = [entityDomain]
            self.entityDomain = []
            self.entityDomain = self.entityDomain + entityDomain
        return self
        self.entityExtra = 0
        if not self.entityExtra:
            self.entityExtra = kwargs.pop("entityExtra", 0)
    def setEntityExtra(self, entityExtra = 0):
        try:
            super().setEntityExtra(entityExtra)
        except AttributeError:
           pass
        self.entityExtra = entityExtra
        return self
    def addEntityExtra(self, entityExtra = 0):
        if not isinstance(entityExtra, list):
            entityExtra = [entityExtra]
            self.entityExtra = []
            self.entityExtra = self.entityExtra + entityExtra
        return self
    def addEntityExtra(self, entityExtra = 0):
        if not isinstance(entityExtra, list):
            entityExtra = [entityExtra]
            self.entityExtra = []
            self.entityExtra = self.entityExtra + entityExtra
        return self
        self.entityID = 0
        if not self.entityID:
            self.entityID = kwargs.pop("entityID", 0)
    def setEntityID(self, entityID = 0):
        try:
            super().setEntityID(entityID)
        except AttributeError:
           pass
        self.entityID = entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
        self.entityKind = 0
        if not self.entityKind:
            self.entityKind = kwargs.pop("entityKind", 0)
    def setEntityKind(self, entityKind = 0):
        try:
            super().setEntityKind(entityKind)
        except AttributeError:
           pass
        self.entityKind = entityKind
        return self
    def addEntityKind(self, entityKind = 0):
        if not isinstance(entityKind, list):
            entityKind = [entityKind]
            self.entityKind = []
            self.entityKind = self.entityKind + entityKind
        return self
    def addEntityKind(self, entityKind = 0):
        if not isinstance(entityKind, list):
            entityKind = [entityKind]
            self.entityKind = []
            self.entityKind = self.entityKind + entityKind
        return self
        self.entitySpecific = 0
        if not self.entitySpecific:
            self.entitySpecific = kwargs.pop("entitySpecific", 0)
    def setEntitySpecific(self, entitySpecific = 0):
        try:
            super().setEntitySpecific(entitySpecific)
        except AttributeError:
           pass
        self.entitySpecific = entitySpecific
        return self
    def addEntitySpecific(self, entitySpecific = 0):
        if not isinstance(entitySpecific, list):
            entitySpecific = [entitySpecific]
            self.entitySpecific = []
            self.entitySpecific = self.entitySpecific + entitySpecific
        return self
    def addEntitySpecific(self, entitySpecific = 0):
        if not isinstance(entitySpecific, list):
            entitySpecific = [entitySpecific]
            self.entitySpecific = []
            self.entitySpecific = self.entitySpecific + entitySpecific
        return self
        self.entitySubcategory = 0
        if not self.entitySubcategory:
            self.entitySubcategory = kwargs.pop("entitySubcategory", 0)
    def setEntitySubcategory(self, entitySubcategory = 0):
        try:
            super().setEntitySubcategory(entitySubcategory)
        except AttributeError:
           pass
        self.entitySubcategory = entitySubcategory
        return self
    def addEntitySubcategory(self, entitySubcategory = 0):
        if not isinstance(entitySubcategory, list):
            entitySubcategory = [entitySubcategory]
            self.entitySubcategory = []
            self.entitySubcategory = self.entitySubcategory + entitySubcategory
        return self
    def addEntitySubcategory(self, entitySubcategory = 0):
        if not isinstance(entitySubcategory, list):
            entitySubcategory = [entitySubcategory]
            self.entitySubcategory = []
            self.entitySubcategory = self.entitySubcategory + entitySubcategory
        return self
        self.eventApplicationID = 0
        if not self.eventApplicationID:
            self.eventApplicationID = kwargs.pop("eventApplicationID", 0)
    def setEventApplicationID(self, eventApplicationID = 0):
        try:
            super().setEventApplicationID(eventApplicationID)
        except AttributeError:
           pass
        self.eventApplicationID = eventApplicationID
        return self
    def addEventApplicationID(self, eventApplicationID = 0):
        if not isinstance(eventApplicationID, list):
            eventApplicationID = [eventApplicationID]
            self.eventApplicationID = []
            self.eventApplicationID = self.eventApplicationID + eventApplicationID
        return self
    def addEventApplicationID(self, eventApplicationID = 0):
        if not isinstance(eventApplicationID, list):
            eventApplicationID = [eventApplicationID]
            self.eventApplicationID = []
            self.eventApplicationID = self.eventApplicationID + eventApplicationID
        return self
        self.eventEntityID = 0
        if not self.eventEntityID:
            self.eventEntityID = kwargs.pop("eventEntityID", 0)
    def setEventEntityID(self, eventEntityID = 0):
        try:
            super().setEventEntityID(eventEntityID)
        except AttributeError:
           pass
        self.eventEntityID = eventEntityID
        return self
    def addEventEntityID(self, eventEntityID = 0):
        if not isinstance(eventEntityID, list):
            eventEntityID = [eventEntityID]
            self.eventEntityID = []
            self.eventEntityID = self.eventEntityID + eventEntityID
        return self
    def addEventEntityID(self, eventEntityID = 0):
        if not isinstance(eventEntityID, list):
            eventEntityID = [eventEntityID]
            self.eventEntityID = []
            self.eventEntityID = self.eventEntityID + eventEntityID
        return self
        self.eventNumber = 0
        if not self.eventNumber:
            self.eventNumber = kwargs.pop("eventNumber", 0)
    def setEventNumber(self, eventNumber = 0):
        try:
            super().setEventNumber(eventNumber)
        except AttributeError:
           pass
        self.eventNumber = eventNumber
        return self
    def addEventNumber(self, eventNumber = 0):
        if not isinstance(eventNumber, list):
            eventNumber = [eventNumber]
            self.eventNumber = []
            self.eventNumber = self.eventNumber + eventNumber
        return self
    def addEventNumber(self, eventNumber = 0):
        if not isinstance(eventNumber, list):
            eventNumber = [eventNumber]
            self.eventNumber = []
            self.eventNumber = self.eventNumber + eventNumber
        return self
        self.eventSiteID = 0
        if not self.eventSiteID:
            self.eventSiteID = kwargs.pop("eventSiteID", 0)
    def setEventSiteID(self, eventSiteID = 0):
        try:
            super().setEventSiteID(eventSiteID)
        except AttributeError:
           pass
        self.eventSiteID = eventSiteID
        return self
    def addEventSiteID(self, eventSiteID = 0):
        if not isinstance(eventSiteID, list):
            eventSiteID = [eventSiteID]
            self.eventSiteID = []
            self.eventSiteID = self.eventSiteID + eventSiteID
        return self
    def addEventSiteID(self, eventSiteID = 0):
        if not isinstance(eventSiteID, list):
            eventSiteID = [eventSiteID]
            self.eventSiteID = []
            self.eventSiteID = self.eventSiteID + eventSiteID
        return self
        self.fired1 = False
        if not self.fired1:
            self.fired1 = kwargs.pop("fired1", False)
    def setFired1(self, fired1 = False):
        try:
            super().setFired1(fired1)
        except AttributeError:
           pass
        self.fired1 = fired1
        return self
    def addFired1(self, fired1 = False):
        if not isinstance(fired1, list):
            fired1 = [fired1]
            self.fired1 = []
            self.fired1 = self.fired1 + fired1
        return self
    def addFired1(self, fired1 = False):
        if not isinstance(fired1, list):
            fired1 = [fired1]
            self.fired1 = []
            self.fired1 = self.fired1 + fired1
        return self
        self.fired2 = False
        if not self.fired2:
            self.fired2 = kwargs.pop("fired2", False)
    def setFired2(self, fired2 = False):
        try:
            super().setFired2(fired2)
        except AttributeError:
           pass
        self.fired2 = fired2
        return self
    def addFired2(self, fired2 = False):
        if not isinstance(fired2, list):
            fired2 = [fired2]
            self.fired2 = []
            self.fired2 = self.fired2 + fired2
        return self
    def addFired2(self, fired2 = False):
        if not isinstance(fired2, list):
            fired2 = [fired2]
            self.fired2 = []
            self.fired2 = self.fired2 + fired2
        return self
        self.firedTime = None
        if not self.firedTime:
            self.firedTime = kwargs.pop("firedTime", None)
    def setFiredTime(self, firedTime = None):
        try:
            super().setFiredTime(firedTime)
        except AttributeError:
           pass
        self.firedTime = firedTime
        return self
    def addFiredTime(self, firedTime = None):
        if not isinstance(firedTime, list):
            firedTime = [firedTime]
            self.firedTime = []
            self.firedTime = self.firedTime + firedTime
        return self
    def addFiredTime(self, firedTime = None):
        if not isinstance(firedTime, list):
            firedTime = [firedTime]
            self.firedTime = []
            self.firedTime = self.firedTime + firedTime
        return self
        self.fireMissionIndex = 0
        if not self.fireMissionIndex:
            self.fireMissionIndex = kwargs.pop("fireMissionIndex", 0)
    def setFireMissionIndex(self, fireMissionIndex = 0):
        try:
            super().setFireMissionIndex(fireMissionIndex)
        except AttributeError:
           pass
        self.fireMissionIndex = fireMissionIndex
        return self
    def addFireMissionIndex(self, fireMissionIndex = 0):
        if not isinstance(fireMissionIndex, list):
            fireMissionIndex = [fireMissionIndex]
            self.fireMissionIndex = []
            self.fireMissionIndex = self.fireMissionIndex + fireMissionIndex
        return self
    def addFireMissionIndex(self, fireMissionIndex = 0):
        if not isinstance(fireMissionIndex, list):
            fireMissionIndex = [fireMissionIndex]
            self.fireMissionIndex = []
            self.fireMissionIndex = self.fireMissionIndex + fireMissionIndex
        return self
        self.firingRange = 0
        if not self.firingRange:
            self.firingRange = kwargs.pop("firingRange", 0)
    def setFiringRange(self, firingRange = 0):
        try:
            super().setFiringRange(firingRange)
        except AttributeError:
           pass
        self.firingRange = firingRange
        return self
    def addFiringRange(self, firingRange = 0):
        if not isinstance(firingRange, list):
            firingRange = [firingRange]
            self.firingRange = []
            self.firingRange = self.firingRange + firingRange
        return self
    def addFiringRange(self, firingRange = 0):
        if not isinstance(firingRange, list):
            firingRange = [firingRange]
            self.firingRange = []
            self.firingRange = self.firingRange + firingRange
        return self
        self.firingRate = 0
        if not self.firingRate:
            self.firingRate = kwargs.pop("firingRate", 0)
    def setFiringRate(self, firingRate = 0):
        try:
            super().setFiringRate(firingRate)
        except AttributeError:
           pass
        self.firingRate = firingRate
        return self
    def addFiringRate(self, firingRate = 0):
        if not isinstance(firingRate, list):
            firingRate = [firingRate]
            self.firingRate = []
            self.firingRate = self.firingRate + firingRate
        return self
    def addFiringRate(self, firingRate = 0):
        if not isinstance(firingRate, list):
            firingRate = [firingRate]
            self.firingRate = []
            self.firingRate = self.firingRate + firingRate
        return self
        self.forceID = 0
        if not self.forceID:
            self.forceID = kwargs.pop("forceID", 0)
    def setForceID(self, forceID = 0):
        try:
            super().setForceID(forceID)
        except AttributeError:
           pass
        self.forceID = forceID
        return self
    def addForceID(self, forceID = 0):
        if not isinstance(forceID, list):
            forceID = [forceID]
            self.forceID = []
            self.forceID = self.forceID + forceID
        return self
    def addForceID(self, forceID = 0):
        if not isinstance(forceID, list):
            forceID = [forceID]
            self.forceID = []
            self.forceID = self.forceID + forceID
        return self
        self.fuse = 0
        if not self.fuse:
            self.fuse = kwargs.pop("fuse", 0)
    def setFuse(self, fuse = 0):
        try:
            super().setFuse(fuse)
        except AttributeError:
           pass
        self.fuse = fuse
        return self
    def addFuse(self, fuse = 0):
        if not isinstance(fuse, list):
            fuse = [fuse]
            self.fuse = []
            self.fuse = self.fuse + fuse
        return self
    def addFuse(self, fuse = 0):
        if not isinstance(fuse, list):
            fuse = [fuse]
            self.fuse = []
            self.fuse = self.fuse + fuse
        return self
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Collided = None
        if not self.Collided:
            self.Collided = kwargs.pop("Collided", None)
    def setIsCollided(self, Collided = None):
        try:
            super().setIsCollided(Collided)
        except AttributeError:
           pass
        self.Collided = Collided
        return self
    def addIsCollided(self, Collided = None):
        if not isinstance(Collided, list):
            Collided = [Collided]
            self.Collided = []
            self.Collided = self.Collided + Collided
        return self
    def addIsCollided(self, Collided = None):
        if not isinstance(Collided, list):
            Collided = [Collided]
            self.Collided = []
            self.Collided = self.Collided + Collided
        return self
        self.Detonated = None
        if not self.Detonated:
            self.Detonated = kwargs.pop("Detonated", None)
    def setIsDetonated(self, Detonated = None):
        try:
            super().setIsDetonated(Detonated)
        except AttributeError:
           pass
        self.Detonated = Detonated
        return self
    def addIsDetonated(self, Detonated = None):
        if not isinstance(Detonated, list):
            Detonated = [Detonated]
            self.Detonated = []
            self.Detonated = self.Detonated + Detonated
        return self
    def addIsDetonated(self, Detonated = None):
        if not isinstance(Detonated, list):
            Detonated = [Detonated]
            self.Detonated = []
            self.Detonated = self.Detonated + Detonated
        return self
        self.NetworkReader = None
        if not self.NetworkReader:
            self.NetworkReader = kwargs.pop("NetworkReader", None)
    def setIsNetworkReader(self, NetworkReader = None):
        try:
            super().setIsNetworkReader(NetworkReader)
        except AttributeError:
           pass
        self.NetworkReader = NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
        self.NetworkWriter = None
        if not self.NetworkWriter:
            self.NetworkWriter = kwargs.pop("NetworkWriter", None)
    def setIsNetworkWriter(self, NetworkWriter = None):
        try:
            super().setIsNetworkWriter(NetworkWriter)
        except AttributeError:
           pass
        self.NetworkWriter = NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
        self.RtpHeaderHeard = None
        if not self.RtpHeaderHeard:
            self.RtpHeaderHeard = kwargs.pop("RtpHeaderHeard", None)
    def setIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        try:
            super().setIsRtpHeaderHeard(RtpHeaderHeard)
        except AttributeError:
           pass
        self.RtpHeaderHeard = RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
        self.StandAlone = None
        if not self.StandAlone:
            self.StandAlone = kwargs.pop("StandAlone", None)
    def setIsStandAlone(self, StandAlone = None):
        try:
            super().setIsStandAlone(StandAlone)
        except AttributeError:
           pass
        self.StandAlone = StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
        self.linearAcceleration = [0, 0, 0]
        if not self.linearAcceleration:
            self.linearAcceleration = kwargs.pop("linearAcceleration", [0, 0, 0])
    def setLinearAcceleration(self, linearAcceleration = [0, 0, 0]):
        try:
            super().setLinearAcceleration(linearAcceleration)
        except AttributeError:
           pass
        self.linearAcceleration = linearAcceleration
        return self
    def addLinearAcceleration(self, linearAcceleration = [0, 0, 0]):
        if not isinstance(linearAcceleration, list):
            linearAcceleration = [linearAcceleration]
            self.linearAcceleration = []
            self.linearAcceleration = self.linearAcceleration + linearAcceleration
        return self
    def addLinearAcceleration(self, linearAcceleration = [0, 0, 0]):
        if not isinstance(linearAcceleration, list):
            linearAcceleration = [linearAcceleration]
            self.linearAcceleration = []
            self.linearAcceleration = self.linearAcceleration + linearAcceleration
        return self
        self.linearVelocity = [0, 0, 0]
        if not self.linearVelocity:
            self.linearVelocity = kwargs.pop("linearVelocity", [0, 0, 0])
    def setLinearVelocity(self, linearVelocity = [0, 0, 0]):
        try:
            super().setLinearVelocity(linearVelocity)
        except AttributeError:
           pass
        self.linearVelocity = linearVelocity
        return self
    def addLinearVelocity(self, linearVelocity = [0, 0, 0]):
        if not isinstance(linearVelocity, list):
            linearVelocity = [linearVelocity]
            self.linearVelocity = []
            self.linearVelocity = self.linearVelocity + linearVelocity
        return self
    def addLinearVelocity(self, linearVelocity = [0, 0, 0]):
        if not isinstance(linearVelocity, list):
            linearVelocity = [linearVelocity]
            self.linearVelocity = []
            self.linearVelocity = self.linearVelocity + linearVelocity
        return self
        self.marking = None
        if not self.marking:
            self.marking = kwargs.pop("marking", None)
    def setMarking(self, marking = None):
        try:
            super().setMarking(marking)
        except AttributeError:
           pass
        self.marking = marking
        return self
    def addMarking(self, marking = None):
        if not isinstance(marking, list):
            marking = [marking]
            self.marking = []
            self.marking = self.marking + marking
        return self
    def addMarking(self, marking = None):
        if not isinstance(marking, list):
            marking = [marking]
            self.marking = []
            self.marking = self.marking + marking
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.multicastRelayHost = None
        if not self.multicastRelayHost:
            self.multicastRelayHost = kwargs.pop("multicastRelayHost", None)
    def setMulticastRelayHost(self, multicastRelayHost = None):
        try:
            super().setMulticastRelayHost(multicastRelayHost)
        except AttributeError:
           pass
        self.multicastRelayHost = multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
        self.multicastRelayPort = 0
        if not self.multicastRelayPort:
            self.multicastRelayPort = kwargs.pop("multicastRelayPort", 0)
    def setMulticastRelayPort(self, multicastRelayPort = 0):
        try:
            super().setMulticastRelayPort(multicastRelayPort)
        except AttributeError:
           pass
        self.multicastRelayPort = multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
        self.munitionApplicationID = 0
        if not self.munitionApplicationID:
            self.munitionApplicationID = kwargs.pop("munitionApplicationID", 0)
    def setMunitionApplicationID(self, munitionApplicationID = 0):
        try:
            super().setMunitionApplicationID(munitionApplicationID)
        except AttributeError:
           pass
        self.munitionApplicationID = munitionApplicationID
        return self
    def addMunitionApplicationID(self, munitionApplicationID = 0):
        if not isinstance(munitionApplicationID, list):
            munitionApplicationID = [munitionApplicationID]
            self.munitionApplicationID = []
            self.munitionApplicationID = self.munitionApplicationID + munitionApplicationID
        return self
    def addMunitionApplicationID(self, munitionApplicationID = 0):
        if not isinstance(munitionApplicationID, list):
            munitionApplicationID = [munitionApplicationID]
            self.munitionApplicationID = []
            self.munitionApplicationID = self.munitionApplicationID + munitionApplicationID
        return self
        self.munitionEndPoint = [0, 0, 0]
        if not self.munitionEndPoint:
            self.munitionEndPoint = kwargs.pop("munitionEndPoint", [0, 0, 0])
    def setMunitionEndPoint(self, munitionEndPoint = [0, 0, 0]):
        try:
            super().setMunitionEndPoint(munitionEndPoint)
        except AttributeError:
           pass
        self.munitionEndPoint = munitionEndPoint
        return self
    def addMunitionEndPoint(self, munitionEndPoint = [0, 0, 0]):
        if not isinstance(munitionEndPoint, list):
            munitionEndPoint = [munitionEndPoint]
            self.munitionEndPoint = []
            self.munitionEndPoint = self.munitionEndPoint + munitionEndPoint
        return self
    def addMunitionEndPoint(self, munitionEndPoint = [0, 0, 0]):
        if not isinstance(munitionEndPoint, list):
            munitionEndPoint = [munitionEndPoint]
            self.munitionEndPoint = []
            self.munitionEndPoint = self.munitionEndPoint + munitionEndPoint
        return self
        self.munitionEntityID = 0
        if not self.munitionEntityID:
            self.munitionEntityID = kwargs.pop("munitionEntityID", 0)
    def setMunitionEntityID(self, munitionEntityID = 0):
        try:
            super().setMunitionEntityID(munitionEntityID)
        except AttributeError:
           pass
        self.munitionEntityID = munitionEntityID
        return self
    def addMunitionEntityID(self, munitionEntityID = 0):
        if not isinstance(munitionEntityID, list):
            munitionEntityID = [munitionEntityID]
            self.munitionEntityID = []
            self.munitionEntityID = self.munitionEntityID + munitionEntityID
        return self
    def addMunitionEntityID(self, munitionEntityID = 0):
        if not isinstance(munitionEntityID, list):
            munitionEntityID = [munitionEntityID]
            self.munitionEntityID = []
            self.munitionEntityID = self.munitionEntityID + munitionEntityID
        return self
        self.munitionQuantity = 0
        if not self.munitionQuantity:
            self.munitionQuantity = kwargs.pop("munitionQuantity", 0)
    def setMunitionQuantity(self, munitionQuantity = 0):
        try:
            super().setMunitionQuantity(munitionQuantity)
        except AttributeError:
           pass
        self.munitionQuantity = munitionQuantity
        return self
    def addMunitionQuantity(self, munitionQuantity = 0):
        if not isinstance(munitionQuantity, list):
            munitionQuantity = [munitionQuantity]
            self.munitionQuantity = []
            self.munitionQuantity = self.munitionQuantity + munitionQuantity
        return self
    def addMunitionQuantity(self, munitionQuantity = 0):
        if not isinstance(munitionQuantity, list):
            munitionQuantity = [munitionQuantity]
            self.munitionQuantity = []
            self.munitionQuantity = self.munitionQuantity + munitionQuantity
        return self
        self.munitionSiteID = 0
        if not self.munitionSiteID:
            self.munitionSiteID = kwargs.pop("munitionSiteID", 0)
    def setMunitionSiteID(self, munitionSiteID = 0):
        try:
            super().setMunitionSiteID(munitionSiteID)
        except AttributeError:
           pass
        self.munitionSiteID = munitionSiteID
        return self
    def addMunitionSiteID(self, munitionSiteID = 0):
        if not isinstance(munitionSiteID, list):
            munitionSiteID = [munitionSiteID]
            self.munitionSiteID = []
            self.munitionSiteID = self.munitionSiteID + munitionSiteID
        return self
    def addMunitionSiteID(self, munitionSiteID = 0):
        if not isinstance(munitionSiteID, list):
            munitionSiteID = [munitionSiteID]
            self.munitionSiteID = []
            self.munitionSiteID = self.munitionSiteID + munitionSiteID
        return self
        self.munitionStartPoint = [0, 0, 0]
        if not self.munitionStartPoint:
            self.munitionStartPoint = kwargs.pop("munitionStartPoint", [0, 0, 0])
    def setMunitionStartPoint(self, munitionStartPoint = [0, 0, 0]):
        try:
            super().setMunitionStartPoint(munitionStartPoint)
        except AttributeError:
           pass
        self.munitionStartPoint = munitionStartPoint
        return self
    def addMunitionStartPoint(self, munitionStartPoint = [0, 0, 0]):
        if not isinstance(munitionStartPoint, list):
            munitionStartPoint = [munitionStartPoint]
            self.munitionStartPoint = []
            self.munitionStartPoint = self.munitionStartPoint + munitionStartPoint
        return self
    def addMunitionStartPoint(self, munitionStartPoint = [0, 0, 0]):
        if not isinstance(munitionStartPoint, list):
            munitionStartPoint = [munitionStartPoint]
            self.munitionStartPoint = []
            self.munitionStartPoint = self.munitionStartPoint + munitionStartPoint
        return self
        self.networkMode = "standAlone"
        if not self.networkMode:
            self.networkMode = kwargs.pop("networkMode", "standAlone")
        if 'standAlone' == self.networkMode:
            pass
        elif 'networkReader' == self.networkMode:
            pass
        elif 'networkWriter' == self.networkMode:
            pass
        else:
            return None
    def setNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        try:
            super().setNetworkMode(networkMode)
        except AttributeError:
           pass
        self.networkMode = networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
        self.port = 0
        if not self.port:
            self.port = kwargs.pop("port", 0)
    def setPort(self, port = 0):
        try:
            super().setPort(port)
        except AttributeError:
           pass
        self.port = port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
        self.readInterval = 0.1
        if not self.readInterval:
            self.readInterval = kwargs.pop("readInterval", 0.1)
        if self.readInterval == None or self.readInterval  <  0:
            return None
    def setReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        try:
            super().setReadInterval(readInterval)
        except AttributeError:
           pass
        self.readInterval = readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.rtpHeaderExpected = False
        if not self.rtpHeaderExpected:
            self.rtpHeaderExpected = kwargs.pop("rtpHeaderExpected", False)
    def setRtpHeaderExpected(self, rtpHeaderExpected = False):
        try:
            super().setRtpHeaderExpected(rtpHeaderExpected)
        except AttributeError:
           pass
        self.rtpHeaderExpected = rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
    def setScale(self, scale = [1, 1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.ArticulationParameterValue0 = None
        if not self.ArticulationParameterValue0:
            self.ArticulationParameterValue0 = kwargs.pop("ArticulationParameterValue0", None)
    def setSet_articulationParameterValue0(self, ArticulationParameterValue0 = None):
        try:
            super().setSet_articulationParameterValue0(ArticulationParameterValue0)
        except AttributeError:
           pass
        self.ArticulationParameterValue0 = ArticulationParameterValue0
        return self
    def addSet_articulationParameterValue0(self, ArticulationParameterValue0 = None):
        if not isinstance(ArticulationParameterValue0, list):
            ArticulationParameterValue0 = [ArticulationParameterValue0]
            self.ArticulationParameterValue0 = []
            self.ArticulationParameterValue0 = self.ArticulationParameterValue0 + ArticulationParameterValue0
        return self
    def addSet_articulationParameterValue0(self, ArticulationParameterValue0 = None):
        if not isinstance(ArticulationParameterValue0, list):
            ArticulationParameterValue0 = [ArticulationParameterValue0]
            self.ArticulationParameterValue0 = []
            self.ArticulationParameterValue0 = self.ArticulationParameterValue0 + ArticulationParameterValue0
        return self
        self.ArticulationParameterValue1 = None
        if not self.ArticulationParameterValue1:
            self.ArticulationParameterValue1 = kwargs.pop("ArticulationParameterValue1", None)
    def setSet_articulationParameterValue1(self, ArticulationParameterValue1 = None):
        try:
            super().setSet_articulationParameterValue1(ArticulationParameterValue1)
        except AttributeError:
           pass
        self.ArticulationParameterValue1 = ArticulationParameterValue1
        return self
    def addSet_articulationParameterValue1(self, ArticulationParameterValue1 = None):
        if not isinstance(ArticulationParameterValue1, list):
            ArticulationParameterValue1 = [ArticulationParameterValue1]
            self.ArticulationParameterValue1 = []
            self.ArticulationParameterValue1 = self.ArticulationParameterValue1 + ArticulationParameterValue1
        return self
    def addSet_articulationParameterValue1(self, ArticulationParameterValue1 = None):
        if not isinstance(ArticulationParameterValue1, list):
            ArticulationParameterValue1 = [ArticulationParameterValue1]
            self.ArticulationParameterValue1 = []
            self.ArticulationParameterValue1 = self.ArticulationParameterValue1 + ArticulationParameterValue1
        return self
        self.ArticulationParameterValue2 = None
        if not self.ArticulationParameterValue2:
            self.ArticulationParameterValue2 = kwargs.pop("ArticulationParameterValue2", None)
    def setSet_articulationParameterValue2(self, ArticulationParameterValue2 = None):
        try:
            super().setSet_articulationParameterValue2(ArticulationParameterValue2)
        except AttributeError:
           pass
        self.ArticulationParameterValue2 = ArticulationParameterValue2
        return self
    def addSet_articulationParameterValue2(self, ArticulationParameterValue2 = None):
        if not isinstance(ArticulationParameterValue2, list):
            ArticulationParameterValue2 = [ArticulationParameterValue2]
            self.ArticulationParameterValue2 = []
            self.ArticulationParameterValue2 = self.ArticulationParameterValue2 + ArticulationParameterValue2
        return self
    def addSet_articulationParameterValue2(self, ArticulationParameterValue2 = None):
        if not isinstance(ArticulationParameterValue2, list):
            ArticulationParameterValue2 = [ArticulationParameterValue2]
            self.ArticulationParameterValue2 = []
            self.ArticulationParameterValue2 = self.ArticulationParameterValue2 + ArticulationParameterValue2
        return self
        self.ArticulationParameterValue3 = None
        if not self.ArticulationParameterValue3:
            self.ArticulationParameterValue3 = kwargs.pop("ArticulationParameterValue3", None)
    def setSet_articulationParameterValue3(self, ArticulationParameterValue3 = None):
        try:
            super().setSet_articulationParameterValue3(ArticulationParameterValue3)
        except AttributeError:
           pass
        self.ArticulationParameterValue3 = ArticulationParameterValue3
        return self
    def addSet_articulationParameterValue3(self, ArticulationParameterValue3 = None):
        if not isinstance(ArticulationParameterValue3, list):
            ArticulationParameterValue3 = [ArticulationParameterValue3]
            self.ArticulationParameterValue3 = []
            self.ArticulationParameterValue3 = self.ArticulationParameterValue3 + ArticulationParameterValue3
        return self
    def addSet_articulationParameterValue3(self, ArticulationParameterValue3 = None):
        if not isinstance(ArticulationParameterValue3, list):
            ArticulationParameterValue3 = [ArticulationParameterValue3]
            self.ArticulationParameterValue3 = []
            self.ArticulationParameterValue3 = self.ArticulationParameterValue3 + ArticulationParameterValue3
        return self
        self.ArticulationParameterValue4 = None
        if not self.ArticulationParameterValue4:
            self.ArticulationParameterValue4 = kwargs.pop("ArticulationParameterValue4", None)
    def setSet_articulationParameterValue4(self, ArticulationParameterValue4 = None):
        try:
            super().setSet_articulationParameterValue4(ArticulationParameterValue4)
        except AttributeError:
           pass
        self.ArticulationParameterValue4 = ArticulationParameterValue4
        return self
    def addSet_articulationParameterValue4(self, ArticulationParameterValue4 = None):
        if not isinstance(ArticulationParameterValue4, list):
            ArticulationParameterValue4 = [ArticulationParameterValue4]
            self.ArticulationParameterValue4 = []
            self.ArticulationParameterValue4 = self.ArticulationParameterValue4 + ArticulationParameterValue4
        return self
    def addSet_articulationParameterValue4(self, ArticulationParameterValue4 = None):
        if not isinstance(ArticulationParameterValue4, list):
            ArticulationParameterValue4 = [ArticulationParameterValue4]
            self.ArticulationParameterValue4 = []
            self.ArticulationParameterValue4 = self.ArticulationParameterValue4 + ArticulationParameterValue4
        return self
        self.ArticulationParameterValue5 = None
        if not self.ArticulationParameterValue5:
            self.ArticulationParameterValue5 = kwargs.pop("ArticulationParameterValue5", None)
    def setSet_articulationParameterValue5(self, ArticulationParameterValue5 = None):
        try:
            super().setSet_articulationParameterValue5(ArticulationParameterValue5)
        except AttributeError:
           pass
        self.ArticulationParameterValue5 = ArticulationParameterValue5
        return self
    def addSet_articulationParameterValue5(self, ArticulationParameterValue5 = None):
        if not isinstance(ArticulationParameterValue5, list):
            ArticulationParameterValue5 = [ArticulationParameterValue5]
            self.ArticulationParameterValue5 = []
            self.ArticulationParameterValue5 = self.ArticulationParameterValue5 + ArticulationParameterValue5
        return self
    def addSet_articulationParameterValue5(self, ArticulationParameterValue5 = None):
        if not isinstance(ArticulationParameterValue5, list):
            ArticulationParameterValue5 = [ArticulationParameterValue5]
            self.ArticulationParameterValue5 = []
            self.ArticulationParameterValue5 = self.ArticulationParameterValue5 + ArticulationParameterValue5
        return self
        self.ArticulationParameterValue6 = None
        if not self.ArticulationParameterValue6:
            self.ArticulationParameterValue6 = kwargs.pop("ArticulationParameterValue6", None)
    def setSet_articulationParameterValue6(self, ArticulationParameterValue6 = None):
        try:
            super().setSet_articulationParameterValue6(ArticulationParameterValue6)
        except AttributeError:
           pass
        self.ArticulationParameterValue6 = ArticulationParameterValue6
        return self
    def addSet_articulationParameterValue6(self, ArticulationParameterValue6 = None):
        if not isinstance(ArticulationParameterValue6, list):
            ArticulationParameterValue6 = [ArticulationParameterValue6]
            self.ArticulationParameterValue6 = []
            self.ArticulationParameterValue6 = self.ArticulationParameterValue6 + ArticulationParameterValue6
        return self
    def addSet_articulationParameterValue6(self, ArticulationParameterValue6 = None):
        if not isinstance(ArticulationParameterValue6, list):
            ArticulationParameterValue6 = [ArticulationParameterValue6]
            self.ArticulationParameterValue6 = []
            self.ArticulationParameterValue6 = self.ArticulationParameterValue6 + ArticulationParameterValue6
        return self
        self.ArticulationParameterValue7 = None
        if not self.ArticulationParameterValue7:
            self.ArticulationParameterValue7 = kwargs.pop("ArticulationParameterValue7", None)
    def setSet_articulationParameterValue7(self, ArticulationParameterValue7 = None):
        try:
            super().setSet_articulationParameterValue7(ArticulationParameterValue7)
        except AttributeError:
           pass
        self.ArticulationParameterValue7 = ArticulationParameterValue7
        return self
    def addSet_articulationParameterValue7(self, ArticulationParameterValue7 = None):
        if not isinstance(ArticulationParameterValue7, list):
            ArticulationParameterValue7 = [ArticulationParameterValue7]
            self.ArticulationParameterValue7 = []
            self.ArticulationParameterValue7 = self.ArticulationParameterValue7 + ArticulationParameterValue7
        return self
    def addSet_articulationParameterValue7(self, ArticulationParameterValue7 = None):
        if not isinstance(ArticulationParameterValue7, list):
            ArticulationParameterValue7 = [ArticulationParameterValue7]
            self.ArticulationParameterValue7 = []
            self.ArticulationParameterValue7 = self.ArticulationParameterValue7 + ArticulationParameterValue7
        return self
        self.siteID = 0
        if not self.siteID:
            self.siteID = kwargs.pop("siteID", 0)
    def setSiteID(self, siteID = 0):
        try:
            super().setSiteID(siteID)
        except AttributeError:
           pass
        self.siteID = siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
        self.timestamp = None
        if not self.timestamp:
            self.timestamp = kwargs.pop("timestamp", None)
        if self.timestamp == None or self.timestamp  <  0:
            return None
    def setTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        try:
            super().setTimestamp(timestamp)
        except AttributeError:
           pass
        self.timestamp = timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.warhead = 0
        if not self.warhead:
            self.warhead = kwargs.pop("warhead", 0)
    def setWarhead(self, warhead = 0):
        try:
            super().setWarhead(warhead)
        except AttributeError:
           pass
        self.warhead = warhead
        return self
    def addWarhead(self, warhead = 0):
        if not isinstance(warhead, list):
            warhead = [warhead]
            self.warhead = []
            self.warhead = self.warhead + warhead
        return self
    def addWarhead(self, warhead = 0):
        if not isinstance(warhead, list):
            warhead = [warhead]
            self.warhead = []
            self.warhead = self.warhead + warhead
        return self
        self.writeInterval = 1.0
        if not self.writeInterval:
            self.writeInterval = kwargs.pop("writeInterval", 1.0)
        if self.writeInterval == None or self.writeInterval  <  0:
            return None
    def setWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        try:
            super().setWriteInterval(writeInterval)
        except AttributeError:
           pass
        self.writeInterval = writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ExplosionEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(ExplosionEmitter, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.position = [0, 0, 0]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 0])
    def setPosition(self, position = [0, 0, 0]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Extrusion(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Extrusion, self).__init__(**kwargs)
        self.beginCap = True
        if not self.beginCap:
            self.beginCap = kwargs.pop("beginCap", True)
    def setBeginCap(self, beginCap = True):
        try:
            super().setBeginCap(beginCap)
        except AttributeError:
           pass
        self.beginCap = beginCap
        return self
    def addBeginCap(self, beginCap = True):
        if not isinstance(beginCap, list):
            beginCap = [beginCap]
            self.beginCap = []
            self.beginCap = self.beginCap + beginCap
        return self
    def addBeginCap(self, beginCap = True):
        if not isinstance(beginCap, list):
            beginCap = [beginCap]
            self.beginCap = []
            self.beginCap = self.beginCap + beginCap
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.convex = True
        if not self.convex:
            self.convex = kwargs.pop("convex", True)
    def setConvex(self, convex = True):
        try:
            super().setConvex(convex)
        except AttributeError:
           pass
        self.convex = convex
        return self
    def addConvex(self, convex = True):
        if not isinstance(convex, list):
            convex = [convex]
            self.convex = []
            self.convex = self.convex + convex
        return self
    def addConvex(self, convex = True):
        if not isinstance(convex, list):
            convex = [convex]
            self.convex = []
            self.convex = self.convex + convex
        return self
        self.creaseAngle = 0.0
        if not self.creaseAngle:
            self.creaseAngle = kwargs.pop("creaseAngle", 0.0)
        if self.creaseAngle == None or self.creaseAngle  <  0:
            return None
    def setCreaseAngle(self, creaseAngle = 0.0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        try:
            super().setCreaseAngle(creaseAngle)
        except AttributeError:
           pass
        self.creaseAngle = creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0.0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0.0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
        self.crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1]
        if not self.crossSection:
            self.crossSection = kwargs.pop("crossSection", [1, 1, 1, -1, -1, -1, -1, 1, 1, 1])
    def setCrossSection(self, crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1]):
        try:
            super().setCrossSection(crossSection)
        except AttributeError:
           pass
        self.crossSection = crossSection
        return self
    def addCrossSection(self, crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1]):
        if not isinstance(crossSection, list):
            crossSection = [crossSection]
            self.crossSection = []
            self.crossSection = self.crossSection + crossSection
        return self
    def addCrossSection(self, crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1]):
        if not isinstance(crossSection, list):
            crossSection = [crossSection]
            self.crossSection = []
            self.crossSection = self.crossSection + crossSection
        return self
        self.endCap = True
        if not self.endCap:
            self.endCap = kwargs.pop("endCap", True)
    def setEndCap(self, endCap = True):
        try:
            super().setEndCap(endCap)
        except AttributeError:
           pass
        self.endCap = endCap
        return self
    def addEndCap(self, endCap = True):
        if not isinstance(endCap, list):
            endCap = [endCap]
            self.endCap = []
            self.endCap = self.endCap + endCap
        return self
    def addEndCap(self, endCap = True):
        if not isinstance(endCap, list):
            endCap = [endCap]
            self.endCap = []
            self.endCap = self.endCap + endCap
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.scale = [1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1])
    def setScale(self, scale = [1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.CrossSection = []
        if not self.CrossSection:
            self.CrossSection = kwargs.pop("CrossSection", [])
    def setSet_crossSection(self, CrossSection = []):
        try:
            super().setSet_crossSection(CrossSection)
        except AttributeError:
           pass
        self.CrossSection = CrossSection
        return self
    def addSet_crossSection(self, CrossSection = []):
        if not isinstance(CrossSection, list):
            CrossSection = [CrossSection]
            self.CrossSection = []
            self.CrossSection = self.CrossSection + CrossSection
        return self
    def addSet_crossSection(self, CrossSection = []):
        if not isinstance(CrossSection, list):
            CrossSection = [CrossSection]
            self.CrossSection = []
            self.CrossSection = self.CrossSection + CrossSection
        return self
        self.Orientation = []
        if not self.Orientation:
            self.Orientation = kwargs.pop("Orientation", [])
    def setSet_orientation(self, Orientation = []):
        try:
            super().setSet_orientation(Orientation)
        except AttributeError:
           pass
        self.Orientation = Orientation
        return self
    def addSet_orientation(self, Orientation = []):
        if not isinstance(Orientation, list):
            Orientation = [Orientation]
            self.Orientation = []
            self.Orientation = self.Orientation + Orientation
        return self
    def addSet_orientation(self, Orientation = []):
        if not isinstance(Orientation, list):
            Orientation = [Orientation]
            self.Orientation = []
            self.Orientation = self.Orientation + Orientation
        return self
        self.Scale = []
        if not self.Scale:
            self.Scale = kwargs.pop("Scale", [])
    def setSet_scale(self, Scale = []):
        try:
            super().setSet_scale(Scale)
        except AttributeError:
           pass
        self.Scale = Scale
        return self
    def addSet_scale(self, Scale = []):
        if not isinstance(Scale, list):
            Scale = [Scale]
            self.Scale = []
            self.Scale = self.Scale + Scale
        return self
    def addSet_scale(self, Scale = []):
        if not isinstance(Scale, list):
            Scale = [Scale]
            self.Scale = []
            self.Scale = self.Scale + Scale
        return self
        self.Spine = []
        if not self.Spine:
            self.Spine = kwargs.pop("Spine", [])
    def setSet_spine(self, Spine = []):
        try:
            super().setSet_spine(Spine)
        except AttributeError:
           pass
        self.Spine = Spine
        return self
    def addSet_spine(self, Spine = []):
        if not isinstance(Spine, list):
            Spine = [Spine]
            self.Spine = []
            self.Spine = self.Spine + Spine
        return self
    def addSet_spine(self, Spine = []):
        if not isinstance(Spine, list):
            Spine = [Spine]
            self.Spine = []
            self.Spine = self.Spine + Spine
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.spine = [0, 0, 0, 0, 1, 0]
        if not self.spine:
            self.spine = kwargs.pop("spine", [0, 0, 0, 0, 1, 0])
    def setSpine(self, spine = [0, 0, 0, 0, 1, 0]):
        try:
            super().setSpine(spine)
        except AttributeError:
           pass
        self.spine = spine
        return self
    def addSpine(self, spine = [0, 0, 0, 0, 1, 0]):
        if not isinstance(spine, list):
            spine = [spine]
            self.spine = []
            self.spine = self.spine + spine
        return self
    def addSpine(self, spine = [0, 0, 0, 0, 1, 0]):
        if not isinstance(spine, list):
            spine = [spine]
            self.spine = []
            self.spine = self.spine + spine
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class FillProperties(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(FillProperties, self).__init__(**kwargs)
        self.filled = True
        if not self.filled:
            self.filled = kwargs.pop("filled", True)
    def setFilled(self, filled = True):
        try:
            super().setFilled(filled)
        except AttributeError:
           pass
        self.filled = filled
        return self
    def addFilled(self, filled = True):
        if not isinstance(filled, list):
            filled = [filled]
            self.filled = []
            self.filled = self.filled + filled
        return self
    def addFilled(self, filled = True):
        if not isinstance(filled, list):
            filled = [filled]
            self.filled = []
            self.filled = self.filled + filled
        return self
        self.hatchColor = [1, 1, 1]
        if not self.hatchColor:
            self.hatchColor = kwargs.pop("hatchColor", [1, 1, 1])
        if self.hatchColor == None or len(self.hatchColor) <= 0 or min(self.hatchColor)  <  0:
            return None
        if self.hatchColor == None or len(self.hatchColor) <= 0 or max(self.hatchColor)  >  1:
            return None
    def setHatchColor(self, hatchColor = [1, 1, 1]):
        if hatchColor == None or len(hatchColor) <= 0 or min(hatchColor)  <  0:
            return None
        if hatchColor == None or len(hatchColor) <= 0 or max(hatchColor)  >  1:
            return None
        try:
            super().setHatchColor(hatchColor)
        except AttributeError:
           pass
        self.hatchColor = hatchColor
        return self
    def addHatchColor(self, hatchColor = [1, 1, 1]):
        if hatchColor == None or len(hatchColor) <= 0 or min(hatchColor)  <  0:
            return None
        if hatchColor == None or len(hatchColor) <= 0 or max(hatchColor)  >  1:
            return None
        if not isinstance(hatchColor, list):
            hatchColor = [hatchColor]
            self.hatchColor = []
            self.hatchColor = self.hatchColor + hatchColor
        return self
    def addHatchColor(self, hatchColor = [1, 1, 1]):
        if hatchColor == None or len(hatchColor) <= 0 or min(hatchColor)  <  0:
            return None
        if hatchColor == None or len(hatchColor) <= 0 or max(hatchColor)  >  1:
            return None
        if not isinstance(hatchColor, list):
            hatchColor = [hatchColor]
            self.hatchColor = []
            self.hatchColor = self.hatchColor + hatchColor
        return self
        self.hatched = True
        if not self.hatched:
            self.hatched = kwargs.pop("hatched", True)
    def setHatched(self, hatched = True):
        try:
            super().setHatched(hatched)
        except AttributeError:
           pass
        self.hatched = hatched
        return self
    def addHatched(self, hatched = True):
        if not isinstance(hatched, list):
            hatched = [hatched]
            self.hatched = []
            self.hatched = self.hatched + hatched
        return self
    def addHatched(self, hatched = True):
        if not isinstance(hatched, list):
            hatched = [hatched]
            self.hatched = []
            self.hatched = self.hatched + hatched
        return self
        self.hatchStyle = 1
        if not self.hatchStyle:
            self.hatchStyle = kwargs.pop("hatchStyle", 1)
    def setHatchStyle(self, hatchStyle = 1):
        try:
            super().setHatchStyle(hatchStyle)
        except AttributeError:
           pass
        self.hatchStyle = hatchStyle
        return self
    def addHatchStyle(self, hatchStyle = 1):
        if not isinstance(hatchStyle, list):
            hatchStyle = [hatchStyle]
            self.hatchStyle = []
            self.hatchStyle = self.hatchStyle + hatchStyle
        return self
    def addHatchStyle(self, hatchStyle = 1):
        if not isinstance(hatchStyle, list):
            hatchStyle = [hatchStyle]
            self.hatchStyle = []
            self.hatchStyle = self.hatchStyle + hatchStyle
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class FloatVertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super(FloatVertexAttribute, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.numComponents = 4
        if not self.numComponents:
            self.numComponents = kwargs.pop("numComponents", 4)
        if self.numComponents == None or self.numComponents  <  1:
            return None
        if self.numComponents == None or self.numComponents  >  4:
            return None
    def setNumComponents(self, numComponents = 4):
        if numComponents == None or numComponents  <  1:
            return None
        if numComponents == None or numComponents  >  4:
            return None
        try:
            super().setNumComponents(numComponents)
        except AttributeError:
           pass
        self.numComponents = numComponents
        return self
    def addNumComponents(self, numComponents = 4):
        if numComponents == None or numComponents  <  1:
            return None
        if numComponents == None or numComponents  >  4:
            return None
        if not isinstance(numComponents, list):
            numComponents = [numComponents]
            self.numComponents = []
            self.numComponents = self.numComponents + numComponents
        return self
    def addNumComponents(self, numComponents = 4):
        if numComponents == None or numComponents  <  1:
            return None
        if numComponents == None or numComponents  >  4:
            return None
        if not isinstance(numComponents, list):
            numComponents = [numComponents]
            self.numComponents = []
            self.numComponents = self.numComponents + numComponents
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Fog(X3DFogObject, X3DBindableNode):
    def __init__(self, **kwargs):
        super(Fog, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.fogType = "LINEAR"
        if not self.fogType:
            self.fogType = kwargs.pop("fogType", "LINEAR")
        if 'LINEAR' == self.fogType:
            pass
        elif 'EXPONENTIAL' == self.fogType:
            pass
        else:
            return None
    def setFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        try:
            super().setFogType(fogType)
        except AttributeError:
           pass
        self.fogType = fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.visibilityRange = 0
        if not self.visibilityRange:
            self.visibilityRange = kwargs.pop("visibilityRange", 0)
        if self.visibilityRange == None or self.visibilityRange  <  0:
            return None
    def setVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        try:
            super().setVisibilityRange(visibilityRange)
        except AttributeError:
           pass
        self.visibilityRange = visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class FogCoordinate(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(FogCoordinate, self).__init__(**kwargs)
        self.depth = []
        if not self.depth:
            self.depth = kwargs.pop("depth", [])
        if self.depth == None or len(self.depth) <= 0 or min(self.depth)  <  0:
            return None
        if self.depth == None or len(self.depth) <= 0 or max(self.depth)  >  1:
            return None
    def setDepth(self, depth = []):
        if depth == None or len(depth) <= 0 or min(depth)  <  0:
            return None
        if depth == None or len(depth) <= 0 or max(depth)  >  1:
            return None
        try:
            super().setDepth(depth)
        except AttributeError:
           pass
        self.depth = depth
        return self
    def addDepth(self, depth = []):
        if depth == None or len(depth) <= 0 or min(depth)  <  0:
            return None
        if depth == None or len(depth) <= 0 or max(depth)  >  1:
            return None
        if not isinstance(depth, list):
            depth = [depth]
            self.depth = []
            self.depth = self.depth + depth
        return self
    def addDepth(self, depth = []):
        if depth == None or len(depth) <= 0 or min(depth)  <  0:
            return None
        if depth == None or len(depth) <= 0 or max(depth)  >  1:
            return None
        if not isinstance(depth, list):
            depth = [depth]
            self.depth = []
            self.depth = self.depth + depth
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class FontStyle(X3DFontStyleNode):
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(**kwargs)
        self.family = "SERIF"
        if not self.family:
            self.family = kwargs.pop("family", "SERIF")
    def setFamily(self, family = "SERIF"):
        try:
            super().setFamily(family)
        except AttributeError:
           pass
        self.family = family
        return self
    def addFamily(self, family = "SERIF"):
        if not isinstance(family, list):
            family = [family]
            self.family = []
            self.family = self.family + family
        return self
    def addFamily(self, family = "SERIF"):
        if not isinstance(family, list):
            family = [family]
            self.family = []
            self.family = self.family + family
        return self
        self.horizontal = True
        if not self.horizontal:
            self.horizontal = kwargs.pop("horizontal", True)
    def setHorizontal(self, horizontal = True):
        try:
            super().setHorizontal(horizontal)
        except AttributeError:
           pass
        self.horizontal = horizontal
        return self
    def addHorizontal(self, horizontal = True):
        if not isinstance(horizontal, list):
            horizontal = [horizontal]
            self.horizontal = []
            self.horizontal = self.horizontal + horizontal
        return self
    def addHorizontal(self, horizontal = True):
        if not isinstance(horizontal, list):
            horizontal = [horizontal]
            self.horizontal = []
            self.horizontal = self.horizontal + horizontal
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.justify = "BEGIN"
        if not self.justify:
            self.justify = kwargs.pop("justify", "BEGIN")
        if '"MIDDLE"' == self.justify:
            pass
        elif '"MIDDLE" "BEGIN"' == self.justify:
            pass
        elif '"MIDDLE" "END"' == self.justify:
            pass
        elif '"MIDDLE" "FIRST"' == self.justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == self.justify:
            pass
        elif '"BEGIN"' == self.justify:
            pass
        elif '"BEGIN" "BEGIN"' == self.justify:
            pass
        elif '"BEGIN" "END"' == self.justify:
            pass
        elif '"BEGIN" "FIRST"' == self.justify:
            pass
        elif '"BEGIN" "MIDDLE"' == self.justify:
            pass
        elif '"END"' == self.justify:
            pass
        elif '"END" "BEGIN"' == self.justify:
            pass
        elif '"END" "END"' == self.justify:
            pass
        elif '"END" "FIRST"' == self.justify:
            pass
        elif '"END" "MIDDLE"' == self.justify:
            pass
        elif '"FIRST"' == self.justify:
            pass
        elif '"FIRST" "BEGIN"' == self.justify:
            pass
        elif '"FIRST" "END"' == self.justify:
            pass
        elif '"FIRST" "FIRST"' == self.justify:
            pass
        elif '"FIRST" "MIDDLE"' == self.justify:
            pass
        else:
            return None
    def setJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        try:
            super().setJustify(justify)
        except AttributeError:
           pass
        self.justify = justify
        return self
    def addJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        if not isinstance(justify, list):
            justify = [justify]
            self.justify = []
            self.justify = self.justify + justify
        return self
    def addJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        if not isinstance(justify, list):
            justify = [justify]
            self.justify = []
            self.justify = self.justify + justify
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.leftToRight = True
        if not self.leftToRight:
            self.leftToRight = kwargs.pop("leftToRight", True)
    def setLeftToRight(self, leftToRight = True):
        try:
            super().setLeftToRight(leftToRight)
        except AttributeError:
           pass
        self.leftToRight = leftToRight
        return self
    def addLeftToRight(self, leftToRight = True):
        if not isinstance(leftToRight, list):
            leftToRight = [leftToRight]
            self.leftToRight = []
            self.leftToRight = self.leftToRight + leftToRight
        return self
    def addLeftToRight(self, leftToRight = True):
        if not isinstance(leftToRight, list):
            leftToRight = [leftToRight]
            self.leftToRight = []
            self.leftToRight = self.leftToRight + leftToRight
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = 1.0
        if not self.size:
            self.size = kwargs.pop("size", 1.0)
        if self.size == None or self.size  <=  0:
            return None
    def setSize(self, size = 1.0):
        if size == None or size  <=  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = 1.0):
        if size == None or size  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = 1.0):
        if size == None or size  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.spacing = 1.0
        if not self.spacing:
            self.spacing = kwargs.pop("spacing", 1.0)
        if self.spacing == None or self.spacing  <  0:
            return None
    def setSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        try:
            super().setSpacing(spacing)
        except AttributeError:
           pass
        self.spacing = spacing
        return self
    def addSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        if not isinstance(spacing, list):
            spacing = [spacing]
            self.spacing = []
            self.spacing = self.spacing + spacing
        return self
    def addSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        if not isinstance(spacing, list):
            spacing = [spacing]
            self.spacing = []
            self.spacing = self.spacing + spacing
        return self
        self.style = "PLAIN"
        if not self.style:
            self.style = kwargs.pop("style", "PLAIN")
        if 'PLAIN' == self.style:
            pass
        elif 'BOLD' == self.style:
            pass
        elif 'ITALIC' == self.style:
            pass
        elif 'BOLDITALIC' == self.style:
            pass
        else:
            return None
    def setStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        try:
            super().setStyle(style)
        except AttributeError:
           pass
        self.style = style
        return self
    def addStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        if not isinstance(style, list):
            style = [style]
            self.style = []
            self.style = self.style + style
        return self
    def addStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        if not isinstance(style, list):
            style = [style]
            self.style = []
            self.style = self.style + style
        return self
        self.topToBottom = True
        if not self.topToBottom:
            self.topToBottom = kwargs.pop("topToBottom", True)
    def setTopToBottom(self, topToBottom = True):
        try:
            super().setTopToBottom(topToBottom)
        except AttributeError:
           pass
        self.topToBottom = topToBottom
        return self
    def addTopToBottom(self, topToBottom = True):
        if not isinstance(topToBottom, list):
            topToBottom = [topToBottom]
            self.topToBottom = []
            self.topToBottom = self.topToBottom + topToBottom
        return self
    def addTopToBottom(self, topToBottom = True):
        if not isinstance(topToBottom, list):
            topToBottom = [topToBottom]
            self.topToBottom = []
            self.topToBottom = self.topToBottom + topToBottom
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ForcePhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super(ForcePhysicsModel, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.force = [0, -9.8, 0]
        if not self.force:
            self.force = kwargs.pop("force", [0, -9.8, 0])
    def setForce(self, force = [0, -9.8, 0]):
        try:
            super().setForce(force)
        except AttributeError:
           pass
        self.force = force
        return self
    def addForce(self, force = [0, -9.8, 0]):
        if not isinstance(force, list):
            force = [force]
            self.force = []
            self.force = self.force + force
        return self
    def addForce(self, force = [0, -9.8, 0]):
        if not isinstance(force, list):
            force = [force]
            self.force = []
            self.force = self.force + force
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeneratedCubeMapTexture(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        super(GeneratedCubeMapTexture, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = 128
        if not self.size:
            self.size = kwargs.pop("size", 128)
        if self.size == None or self.size  <=  0:
            return None
    def setSize(self, size = 128):
        if size == None or size  <=  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = 128):
        if size == None or size  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = 128):
        if size == None or size  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.update = "NONE"
        if not self.update:
            self.update = kwargs.pop("update", "NONE")
        if 'NONE' == self.update:
            pass
        elif 'NEXT_FRAME_ONLY' == self.update:
            pass
        elif 'ALWAYS' == self.update:
            pass
        else:
            return None
    def setUpdate(self, update = "NONE"):
        if 'NONE' == update:
            pass
        elif 'NEXT_FRAME_ONLY' == update:
            pass
        elif 'ALWAYS' == update:
            pass
        else:
            return None
        try:
            super().setUpdate(update)
        except AttributeError:
           pass
        self.update = update
        return self
    def addUpdate(self, update = "NONE"):
        if 'NONE' == update:
            pass
        elif 'NEXT_FRAME_ONLY' == update:
            pass
        elif 'ALWAYS' == update:
            pass
        else:
            return None
        if not isinstance(update, list):
            update = [update]
            self.update = []
            self.update = self.update + update
        return self
    def addUpdate(self, update = "NONE"):
        if 'NONE' == update:
            pass
        elif 'NEXT_FRAME_ONLY' == update:
            pass
        elif 'ALWAYS' == update:
            pass
        else:
            return None
        if not isinstance(update, list):
            update = [update]
            self.update = []
            self.update = self.update + update
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoCoordinate(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super(GeoCoordinate, self).__init__(**kwargs)
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoElevationGrid(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(GeoElevationGrid, self).__init__(**kwargs)
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.creaseAngle = 0
        if not self.creaseAngle:
            self.creaseAngle = kwargs.pop("creaseAngle", 0)
        if self.creaseAngle == None or self.creaseAngle  <  0:
            return None
    def setCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        try:
            super().setCreaseAngle(creaseAngle)
        except AttributeError:
           pass
        self.creaseAngle = creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
        self.geoGridOrigin = [0, 0, 0]
        if not self.geoGridOrigin:
            self.geoGridOrigin = kwargs.pop("geoGridOrigin", [0, 0, 0])
    def setGeoGridOrigin(self, geoGridOrigin = [0, 0, 0]):
        try:
            super().setGeoGridOrigin(geoGridOrigin)
        except AttributeError:
           pass
        self.geoGridOrigin = geoGridOrigin
        return self
    def addGeoGridOrigin(self, geoGridOrigin = [0, 0, 0]):
        if not isinstance(geoGridOrigin, list):
            geoGridOrigin = [geoGridOrigin]
            self.geoGridOrigin = []
            self.geoGridOrigin = self.geoGridOrigin + geoGridOrigin
        return self
    def addGeoGridOrigin(self, geoGridOrigin = [0, 0, 0]):
        if not isinstance(geoGridOrigin, list):
            geoGridOrigin = [geoGridOrigin]
            self.geoGridOrigin = []
            self.geoGridOrigin = self.geoGridOrigin + geoGridOrigin
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.height = [0, 0, 0, 0]
        if not self.height:
            self.height = kwargs.pop("height", [0, 0, 0, 0])
    def setHeight(self, height = [0, 0, 0, 0]):
        try:
            super().setHeight(height)
        except AttributeError:
           pass
        self.height = height
        return self
    def addHeight(self, height = [0, 0, 0, 0]):
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
    def addHeight(self, height = [0, 0, 0, 0]):
        if not isinstance(height, list):
            height = [height]
            self.height = []
            self.height = self.height + height
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Height = []
        if not self.Height:
            self.Height = kwargs.pop("Height", [])
    def setSet_height(self, Height = []):
        try:
            super().setSet_height(Height)
        except AttributeError:
           pass
        self.Height = Height
        return self
    def addSet_height(self, Height = []):
        if not isinstance(Height, list):
            Height = [Height]
            self.Height = []
            self.Height = self.Height + Height
        return self
    def addSet_height(self, Height = []):
        if not isinstance(Height, list):
            Height = [Height]
            self.Height = []
            self.Height = self.Height + Height
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.xDimension = 2
        if not self.xDimension:
            self.xDimension = kwargs.pop("xDimension", 2)
        if self.xDimension == None or self.xDimension  <  0:
            return None
    def setXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        try:
            super().setXDimension(xDimension)
        except AttributeError:
           pass
        self.xDimension = xDimension
        return self
    def addXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        if not isinstance(xDimension, list):
            xDimension = [xDimension]
            self.xDimension = []
            self.xDimension = self.xDimension + xDimension
        return self
    def addXDimension(self, xDimension = 2):
        if xDimension == None or xDimension  <  0:
            return None
        if not isinstance(xDimension, list):
            xDimension = [xDimension]
            self.xDimension = []
            self.xDimension = self.xDimension + xDimension
        return self
        self.xSpacing = 1.0
        if not self.xSpacing:
            self.xSpacing = kwargs.pop("xSpacing", 1.0)
        if self.xSpacing == None or self.xSpacing  <=  0:
            return None
    def setXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        try:
            super().setXSpacing(xSpacing)
        except AttributeError:
           pass
        self.xSpacing = xSpacing
        return self
    def addXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        if not isinstance(xSpacing, list):
            xSpacing = [xSpacing]
            self.xSpacing = []
            self.xSpacing = self.xSpacing + xSpacing
        return self
    def addXSpacing(self, xSpacing = 1.0):
        if xSpacing == None or xSpacing  <=  0:
            return None
        if not isinstance(xSpacing, list):
            xSpacing = [xSpacing]
            self.xSpacing = []
            self.xSpacing = self.xSpacing + xSpacing
        return self
        self.yScale = 1
        if not self.yScale:
            self.yScale = kwargs.pop("yScale", 1)
        if self.yScale == None or self.yScale  <  0:
            return None
    def setYScale(self, yScale = 1):
        if yScale == None or yScale  <  0:
            return None
        try:
            super().setYScale(yScale)
        except AttributeError:
           pass
        self.yScale = yScale
        return self
    def addYScale(self, yScale = 1):
        if yScale == None or yScale  <  0:
            return None
        if not isinstance(yScale, list):
            yScale = [yScale]
            self.yScale = []
            self.yScale = self.yScale + yScale
        return self
    def addYScale(self, yScale = 1):
        if yScale == None or yScale  <  0:
            return None
        if not isinstance(yScale, list):
            yScale = [yScale]
            self.yScale = []
            self.yScale = self.yScale + yScale
        return self
        self.zDimension = 2
        if not self.zDimension:
            self.zDimension = kwargs.pop("zDimension", 2)
        if self.zDimension == None or self.zDimension  <  0:
            return None
    def setZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        try:
            super().setZDimension(zDimension)
        except AttributeError:
           pass
        self.zDimension = zDimension
        return self
    def addZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        if not isinstance(zDimension, list):
            zDimension = [zDimension]
            self.zDimension = []
            self.zDimension = self.zDimension + zDimension
        return self
    def addZDimension(self, zDimension = 2):
        if zDimension == None or zDimension  <  0:
            return None
        if not isinstance(zDimension, list):
            zDimension = [zDimension]
            self.zDimension = []
            self.zDimension = self.zDimension + zDimension
        return self
        self.zSpacing = 1.0
        if not self.zSpacing:
            self.zSpacing = kwargs.pop("zSpacing", 1.0)
        if self.zSpacing == None or self.zSpacing  <=  0:
            return None
    def setZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        try:
            super().setZSpacing(zSpacing)
        except AttributeError:
           pass
        self.zSpacing = zSpacing
        return self
    def addZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        if not isinstance(zSpacing, list):
            zSpacing = [zSpacing]
            self.zSpacing = []
            self.zSpacing = self.zSpacing + zSpacing
        return self
    def addZSpacing(self, zSpacing = 1.0):
        if zSpacing == None or zSpacing  <=  0:
            return None
        if not isinstance(zSpacing, list):
            zSpacing = [zSpacing]
            self.zSpacing = []
            self.zSpacing = self.zSpacing + zSpacing
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoLocation(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(GeoLocation, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoLOD(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(GeoLOD, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.child1Url = []
        if not self.child1Url:
            self.child1Url = kwargs.pop("child1Url", [])
    def setChild1Url(self, child1Url = []):
        try:
            super().setChild1Url(child1Url)
        except AttributeError:
           pass
        self.child1Url = child1Url
        return self
    def addChild1Url(self, child1Url = []):
        if not isinstance(child1Url, list):
            child1Url = [child1Url]
            self.child1Url = []
            self.child1Url = self.child1Url + child1Url
        return self
    def addChild1Url(self, child1Url = []):
        if not isinstance(child1Url, list):
            child1Url = [child1Url]
            self.child1Url = []
            self.child1Url = self.child1Url + child1Url
        return self
        self.child2Url = []
        if not self.child2Url:
            self.child2Url = kwargs.pop("child2Url", [])
    def setChild2Url(self, child2Url = []):
        try:
            super().setChild2Url(child2Url)
        except AttributeError:
           pass
        self.child2Url = child2Url
        return self
    def addChild2Url(self, child2Url = []):
        if not isinstance(child2Url, list):
            child2Url = [child2Url]
            self.child2Url = []
            self.child2Url = self.child2Url + child2Url
        return self
    def addChild2Url(self, child2Url = []):
        if not isinstance(child2Url, list):
            child2Url = [child2Url]
            self.child2Url = []
            self.child2Url = self.child2Url + child2Url
        return self
        self.child3Url = []
        if not self.child3Url:
            self.child3Url = kwargs.pop("child3Url", [])
    def setChild3Url(self, child3Url = []):
        try:
            super().setChild3Url(child3Url)
        except AttributeError:
           pass
        self.child3Url = child3Url
        return self
    def addChild3Url(self, child3Url = []):
        if not isinstance(child3Url, list):
            child3Url = [child3Url]
            self.child3Url = []
            self.child3Url = self.child3Url + child3Url
        return self
    def addChild3Url(self, child3Url = []):
        if not isinstance(child3Url, list):
            child3Url = [child3Url]
            self.child3Url = []
            self.child3Url = self.child3Url + child3Url
        return self
        self.child4Url = []
        if not self.child4Url:
            self.child4Url = kwargs.pop("child4Url", [])
    def setChild4Url(self, child4Url = []):
        try:
            super().setChild4Url(child4Url)
        except AttributeError:
           pass
        self.child4Url = child4Url
        return self
    def addChild4Url(self, child4Url = []):
        if not isinstance(child4Url, list):
            child4Url = [child4Url]
            self.child4Url = []
            self.child4Url = self.child4Url + child4Url
        return self
    def addChild4Url(self, child4Url = []):
        if not isinstance(child4Url, list):
            child4Url = [child4Url]
            self.child4Url = []
            self.child4Url = self.child4Url + child4Url
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.level_changed = None
        if not self.level_changed:
            self.level_changed = kwargs.pop("level_changed", None)
        if self.level_changed == None or self.level_changed  <  0:
            return None
        if self.level_changed == None or self.level_changed  >  1:
            return None
    def setlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        if level_changed == None or level_changed  >  1:
            return None
        try:
            super().setlevel_changed(level_changed)
        except AttributeError:
           pass
        self.level_changed = level_changed
        return self
    def addlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        if level_changed == None or level_changed  >  1:
            return None
        if not isinstance(level_changed, list):
            level_changed = [level_changed]
            self.level_changed = []
            self.level_changed = self.level_changed + level_changed
        return self
    def addSetlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        if level_changed == None or level_changed  >  1:
            return None
        if not isinstance(level_changed, list):
            level_changed = [level_changed]
            self.level_changed = []
            self.level_changed = self.level_changed + level_changed
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.range = 10
        if not self.range:
            self.range = kwargs.pop("range", 10)
        if self.range == None or self.range  <  0:
            return None
    def setRange(self, range = 10):
        if range == None or range  <  0:
            return None
        try:
            super().setRange(range)
        except AttributeError:
           pass
        self.range = range
        return self
    def addRange(self, range = 10):
        if range == None or range  <  0:
            return None
        if not isinstance(range, list):
            range = [range]
            self.range = []
            self.range = self.range + range
        return self
    def addRange(self, range = 10):
        if range == None or range  <  0:
            return None
        if not isinstance(range, list):
            range = [range]
            self.range = []
            self.range = self.range + range
        return self
        self.rootNode = []
        if not self.rootNode:
            self.rootNode = kwargs.pop("rootNode", [])
    def setRootNode(self, rootNode = []):
        try:
            super().setRootNode(rootNode)
        except AttributeError:
           pass
        self.rootNode = rootNode
        return self
    def addRootNode(self, rootNode = []):
        if not isinstance(rootNode, list):
            rootNode = [rootNode]
            self.rootNode = []
            self.rootNode = self.rootNode + rootNode
        return self
    def addRootNode(self, rootNode = []):
        if not isinstance(rootNode, list):
            rootNode = [rootNode]
            self.rootNode = []
            self.rootNode = self.rootNode + rootNode
        return self
        self.rootUrl = []
        if not self.rootUrl:
            self.rootUrl = kwargs.pop("rootUrl", [])
    def setRootUrl(self, rootUrl = []):
        try:
            super().setRootUrl(rootUrl)
        except AttributeError:
           pass
        self.rootUrl = rootUrl
        return self
    def addRootUrl(self, rootUrl = []):
        if not isinstance(rootUrl, list):
            rootUrl = [rootUrl]
            self.rootUrl = []
            self.rootUrl = self.rootUrl + rootUrl
        return self
    def addRootUrl(self, rootUrl = []):
        if not isinstance(rootUrl, list):
            rootUrl = [rootUrl]
            self.rootUrl = []
            self.rootUrl = self.rootUrl + rootUrl
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoMetadata(X3DUrlObject, X3DInfoNode):
    def __init__(self, **kwargs):
        super(GeoMetadata, self).__init__(**kwargs)
        self.data = []
        if not self.data:
            self.data = kwargs.pop("data", [])
    def setData(self, data = []):
        try:
            super().setData(data)
        except AttributeError:
           pass
        self.data = data
        return self
    def addData(self, data = []):
        if not isinstance(data, list):
            data = [data]
            self.data = []
            self.data = self.data + data
        return self
    def addData(self, data = []):
        if not isinstance(data, list):
            data = [data]
            self.data = []
            self.data = self.data + data
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.summary = []
        if not self.summary:
            self.summary = kwargs.pop("summary", [])
    def setSummary(self, summary = []):
        try:
            super().setSummary(summary)
        except AttributeError:
           pass
        self.summary = summary
        return self
    def addSummary(self, summary = []):
        if not isinstance(summary, list):
            summary = [summary]
            self.summary = []
            self.summary = self.summary + summary
        return self
    def addSummary(self, summary = []):
        if not isinstance(summary, list):
            summary = [summary]
            self.summary = []
            self.summary = self.summary + summary
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoOrigin(X3DNode):
    def __init__(self, **kwargs):
        super(GeoOrigin, self).__init__(**kwargs)
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotateYUp = False
        if not self.rotateYUp:
            self.rotateYUp = kwargs.pop("rotateYUp", False)
    def setRotateYUp(self, rotateYUp = False):
        try:
            super().setRotateYUp(rotateYUp)
        except AttributeError:
           pass
        self.rotateYUp = rotateYUp
        return self
    def addRotateYUp(self, rotateYUp = False):
        if not isinstance(rotateYUp, list):
            rotateYUp = [rotateYUp]
            self.rotateYUp = []
            self.rotateYUp = self.rotateYUp + rotateYUp
        return self
    def addRotateYUp(self, rotateYUp = False):
        if not isinstance(rotateYUp, list):
            rotateYUp = [rotateYUp]
            self.rotateYUp = []
            self.rotateYUp = self.rotateYUp + rotateYUp
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoPositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(GeoPositionInterpolator, self).__init__(**kwargs)
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.geovalue_changed = None
        if not self.geovalue_changed:
            self.geovalue_changed = kwargs.pop("geovalue_changed", None)
    def setgeovalue_changed(self, geovalue_changed = None):
        try:
            super().setgeovalue_changed(geovalue_changed)
        except AttributeError:
           pass
        self.geovalue_changed = geovalue_changed
        return self
    def addgeovalue_changed(self, geovalue_changed = None):
        if not isinstance(geovalue_changed, list):
            geovalue_changed = [geovalue_changed]
            self.geovalue_changed = []
            self.geovalue_changed = self.geovalue_changed + geovalue_changed
        return self
    def addSetgeovalue_changed(self, geovalue_changed = None):
        if not isinstance(geovalue_changed, list):
            geovalue_changed = [geovalue_changed]
            self.geovalue_changed = []
            self.geovalue_changed = self.geovalue_changed + geovalue_changed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoProximitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super(GeoProximitySensor, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.centerOfRotation_changed = []
        if not self.centerOfRotation_changed:
            self.centerOfRotation_changed = kwargs.pop("centerOfRotation_changed", [])
    def setcenterOfRotation_changed(self, centerOfRotation_changed = []):
        try:
            super().setcenterOfRotation_changed(centerOfRotation_changed)
        except AttributeError:
           pass
        self.centerOfRotation_changed = centerOfRotation_changed
        return self
    def addcenterOfRotation_changed(self, centerOfRotation_changed = []):
        if not isinstance(centerOfRotation_changed, list):
            centerOfRotation_changed = [centerOfRotation_changed]
            self.centerOfRotation_changed = []
            self.centerOfRotation_changed = self.centerOfRotation_changed + centerOfRotation_changed
        return self
    def addSetcenterOfRotation_changed(self, centerOfRotation_changed = []):
        if not isinstance(centerOfRotation_changed, list):
            centerOfRotation_changed = [centerOfRotation_changed]
            self.centerOfRotation_changed = []
            self.centerOfRotation_changed = self.centerOfRotation_changed + centerOfRotation_changed
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.enterTime = None
        if not self.enterTime:
            self.enterTime = kwargs.pop("enterTime", None)
    def setEnterTime(self, enterTime = None):
        try:
            super().setEnterTime(enterTime)
        except AttributeError:
           pass
        self.enterTime = enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
        self.exitTime = None
        if not self.exitTime:
            self.exitTime = kwargs.pop("exitTime", None)
    def setExitTime(self, exitTime = None):
        try:
            super().setExitTime(exitTime)
        except AttributeError:
           pass
        self.exitTime = exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
        self.geoCenter = [0, 0, 0]
        if not self.geoCenter:
            self.geoCenter = kwargs.pop("geoCenter", [0, 0, 0])
    def setGeoCenter(self, geoCenter = [0, 0, 0]):
        try:
            super().setGeoCenter(geoCenter)
        except AttributeError:
           pass
        self.geoCenter = geoCenter
        return self
    def addGeoCenter(self, geoCenter = [0, 0, 0]):
        if not isinstance(geoCenter, list):
            geoCenter = [geoCenter]
            self.geoCenter = []
            self.geoCenter = self.geoCenter + geoCenter
        return self
    def addGeoCenter(self, geoCenter = [0, 0, 0]):
        if not isinstance(geoCenter, list):
            geoCenter = [geoCenter]
            self.geoCenter = []
            self.geoCenter = self.geoCenter + geoCenter
        return self
        self.geoCoord_changed = None
        if not self.geoCoord_changed:
            self.geoCoord_changed = kwargs.pop("geoCoord_changed", None)
    def setgeoCoord_changed(self, geoCoord_changed = None):
        try:
            super().setgeoCoord_changed(geoCoord_changed)
        except AttributeError:
           pass
        self.geoCoord_changed = geoCoord_changed
        return self
    def addgeoCoord_changed(self, geoCoord_changed = None):
        if not isinstance(geoCoord_changed, list):
            geoCoord_changed = [geoCoord_changed]
            self.geoCoord_changed = []
            self.geoCoord_changed = self.geoCoord_changed + geoCoord_changed
        return self
    def addSetgeoCoord_changed(self, geoCoord_changed = None):
        if not isinstance(geoCoord_changed, list):
            geoCoord_changed = [geoCoord_changed]
            self.geoCoord_changed = []
            self.geoCoord_changed = self.geoCoord_changed + geoCoord_changed
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation_changed = None
        if not self.orientation_changed:
            self.orientation_changed = kwargs.pop("orientation_changed", None)
    def setorientation_changed(self, orientation_changed = None):
        try:
            super().setorientation_changed(orientation_changed)
        except AttributeError:
           pass
        self.orientation_changed = orientation_changed
        return self
    def addorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
    def addSetorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
        self.position_changed = []
        if not self.position_changed:
            self.position_changed = kwargs.pop("position_changed", [])
    def setposition_changed(self, position_changed = []):
        try:
            super().setposition_changed(position_changed)
        except AttributeError:
           pass
        self.position_changed = position_changed
        return self
    def addposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
    def addSetposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <  0:
            return None
    def setSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoTouchSensor(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        super(GeoTouchSensor, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.hitGeoCoord_changed = None
        if not self.hitGeoCoord_changed:
            self.hitGeoCoord_changed = kwargs.pop("hitGeoCoord_changed", None)
    def sethitGeoCoord_changed(self, hitGeoCoord_changed = None):
        try:
            super().sethitGeoCoord_changed(hitGeoCoord_changed)
        except AttributeError:
           pass
        self.hitGeoCoord_changed = hitGeoCoord_changed
        return self
    def addhitGeoCoord_changed(self, hitGeoCoord_changed = None):
        if not isinstance(hitGeoCoord_changed, list):
            hitGeoCoord_changed = [hitGeoCoord_changed]
            self.hitGeoCoord_changed = []
            self.hitGeoCoord_changed = self.hitGeoCoord_changed + hitGeoCoord_changed
        return self
    def addSethitGeoCoord_changed(self, hitGeoCoord_changed = None):
        if not isinstance(hitGeoCoord_changed, list):
            hitGeoCoord_changed = [hitGeoCoord_changed]
            self.hitGeoCoord_changed = []
            self.hitGeoCoord_changed = self.hitGeoCoord_changed + hitGeoCoord_changed
        return self
        self.hitNormal_changed = []
        if not self.hitNormal_changed:
            self.hitNormal_changed = kwargs.pop("hitNormal_changed", [])
    def sethitNormal_changed(self, hitNormal_changed = []):
        try:
            super().sethitNormal_changed(hitNormal_changed)
        except AttributeError:
           pass
        self.hitNormal_changed = hitNormal_changed
        return self
    def addhitNormal_changed(self, hitNormal_changed = []):
        if not isinstance(hitNormal_changed, list):
            hitNormal_changed = [hitNormal_changed]
            self.hitNormal_changed = []
            self.hitNormal_changed = self.hitNormal_changed + hitNormal_changed
        return self
    def addSethitNormal_changed(self, hitNormal_changed = []):
        if not isinstance(hitNormal_changed, list):
            hitNormal_changed = [hitNormal_changed]
            self.hitNormal_changed = []
            self.hitNormal_changed = self.hitNormal_changed + hitNormal_changed
        return self
        self.hitPoint_changed = []
        if not self.hitPoint_changed:
            self.hitPoint_changed = kwargs.pop("hitPoint_changed", [])
    def sethitPoint_changed(self, hitPoint_changed = []):
        try:
            super().sethitPoint_changed(hitPoint_changed)
        except AttributeError:
           pass
        self.hitPoint_changed = hitPoint_changed
        return self
    def addhitPoint_changed(self, hitPoint_changed = []):
        if not isinstance(hitPoint_changed, list):
            hitPoint_changed = [hitPoint_changed]
            self.hitPoint_changed = []
            self.hitPoint_changed = self.hitPoint_changed + hitPoint_changed
        return self
    def addSethitPoint_changed(self, hitPoint_changed = []):
        if not isinstance(hitPoint_changed, list):
            hitPoint_changed = [hitPoint_changed]
            self.hitPoint_changed = []
            self.hitPoint_changed = self.hitPoint_changed + hitPoint_changed
        return self
        self.hitTexCoord_changed = []
        if not self.hitTexCoord_changed:
            self.hitTexCoord_changed = kwargs.pop("hitTexCoord_changed", [])
    def sethitTexCoord_changed(self, hitTexCoord_changed = []):
        try:
            super().sethitTexCoord_changed(hitTexCoord_changed)
        except AttributeError:
           pass
        self.hitTexCoord_changed = hitTexCoord_changed
        return self
    def addhitTexCoord_changed(self, hitTexCoord_changed = []):
        if not isinstance(hitTexCoord_changed, list):
            hitTexCoord_changed = [hitTexCoord_changed]
            self.hitTexCoord_changed = []
            self.hitTexCoord_changed = self.hitTexCoord_changed + hitTexCoord_changed
        return self
    def addSethitTexCoord_changed(self, hitTexCoord_changed = []):
        if not isinstance(hitTexCoord_changed, list):
            hitTexCoord_changed = [hitTexCoord_changed]
            self.hitTexCoord_changed = []
            self.hitTexCoord_changed = self.hitTexCoord_changed + hitTexCoord_changed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.touchTime = None
        if not self.touchTime:
            self.touchTime = kwargs.pop("touchTime", None)
    def setTouchTime(self, touchTime = None):
        try:
            super().setTouchTime(touchTime)
        except AttributeError:
           pass
        self.touchTime = touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoTransform(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(GeoTransform, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geoCenter = [0, 0, 0]
        if not self.geoCenter:
            self.geoCenter = kwargs.pop("geoCenter", [0, 0, 0])
    def setGeoCenter(self, geoCenter = [0, 0, 0]):
        try:
            super().setGeoCenter(geoCenter)
        except AttributeError:
           pass
        self.geoCenter = geoCenter
        return self
    def addGeoCenter(self, geoCenter = [0, 0, 0]):
        if not isinstance(geoCenter, list):
            geoCenter = [geoCenter]
            self.geoCenter = []
            self.geoCenter = self.geoCenter + geoCenter
        return self
    def addGeoCenter(self, geoCenter = [0, 0, 0]):
        if not isinstance(geoCenter, list):
            geoCenter = [geoCenter]
            self.geoCenter = []
            self.geoCenter = self.geoCenter + geoCenter
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
        if self.scale == None or len(self.scale) <= 0 or min(self.scale)  <=  0:
            return None
    def setScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class GeoViewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super(GeoViewpoint, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.centerOfRotation = [0, 0, 0]
        if not self.centerOfRotation:
            self.centerOfRotation = kwargs.pop("centerOfRotation", [0, 0, 0])
    def setCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        try:
            super().setCenterOfRotation(centerOfRotation)
        except AttributeError:
           pass
        self.centerOfRotation = centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.fieldOfView = 0.7854
        if not self.fieldOfView:
            self.fieldOfView = kwargs.pop("fieldOfView", 0.7854)
        if self.fieldOfView == None or self.fieldOfView  <=  0:
            return None
        if self.fieldOfView == None or self.fieldOfView  >=  3.1416:
            return None
    def setFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        try:
            super().setFieldOfView(fieldOfView)
        except AttributeError:
           pass
        self.fieldOfView = fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
        self.geoOrigin = None
        if not self.geoOrigin:
            self.geoOrigin = kwargs.pop("geoOrigin", None)
    def setGeoOrigin(self, geoOrigin = None):
        try:
            super().setGeoOrigin(geoOrigin)
        except AttributeError:
           pass
        self.geoOrigin = geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
    def addGeoOrigin(self, geoOrigin = None):
        if not isinstance(geoOrigin, list):
            geoOrigin = [geoOrigin]
            self.geoOrigin = []
            self.geoOrigin = self.geoOrigin + geoOrigin
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.jump = True
        if not self.jump:
            self.jump = kwargs.pop("jump", True)
    def setJump(self, jump = True):
        try:
            super().setJump(jump)
        except AttributeError:
           pass
        self.jump = jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.position = [0, 0, 100000]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 100000])
    def setPosition(self, position = [0, 0, 100000]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 100000]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 100000]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.retainUserOffsets = False
        if not self.retainUserOffsets:
            self.retainUserOffsets = kwargs.pop("retainUserOffsets", False)
    def setRetainUserOffsets(self, retainUserOffsets = False):
        try:
            super().setRetainUserOffsets(retainUserOffsets)
        except AttributeError:
           pass
        self.retainUserOffsets = retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.speedFactor = 1.0
        if not self.speedFactor:
            self.speedFactor = kwargs.pop("speedFactor", 1.0)
        if self.speedFactor == None or self.speedFactor  <  0:
            return None
    def setSpeedFactor(self, speedFactor = 1.0):
        if speedFactor == None or speedFactor  <  0:
            return None
        try:
            super().setSpeedFactor(speedFactor)
        except AttributeError:
           pass
        self.speedFactor = speedFactor
        return self
    def addSpeedFactor(self, speedFactor = 1.0):
        if speedFactor == None or speedFactor  <  0:
            return None
        if not isinstance(speedFactor, list):
            speedFactor = [speedFactor]
            self.speedFactor = []
            self.speedFactor = self.speedFactor + speedFactor
        return self
    def addSpeedFactor(self, speedFactor = 1.0):
        if speedFactor == None or speedFactor  <  0:
            return None
        if not isinstance(speedFactor, list):
            speedFactor = [speedFactor]
            self.speedFactor = []
            self.speedFactor = self.speedFactor + speedFactor
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Group(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Group, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class HAnimDisplacer(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super(HAnimDisplacer, self).__init__(**kwargs)
        self.coordIndex = []
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", [])
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  0:
            return None
    def setCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  0:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  0:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  0:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displacements = []
        if not self.displacements:
            self.displacements = kwargs.pop("displacements", [])
    def setDisplacements(self, displacements = []):
        try:
            super().setDisplacements(displacements)
        except AttributeError:
           pass
        self.displacements = displacements
        return self
    def addDisplacements(self, displacements = []):
        if not isinstance(displacements, list):
            displacements = [displacements]
            self.displacements = []
            self.displacements = self.displacements + displacements
        return self
    def addDisplacements(self, displacements = []):
        if not isinstance(displacements, list):
            displacements = [displacements]
            self.displacements = []
            self.displacements = self.displacements + displacements
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.weight = 0.0
        if not self.weight:
            self.weight = kwargs.pop("weight", 0.0)
    def setWeight(self, weight = 0.0):
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = 0.0):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = 0.0):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class HAnimHumanoid(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(HAnimHumanoid, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.info = []
        if not self.info:
            self.info = kwargs.pop("info", [])
    def setInfo(self, info = []):
        try:
            super().setInfo(info)
        except AttributeError:
           pass
        self.info = info
        return self
    def addInfo(self, info = []):
        if not isinstance(info, list):
            info = [info]
            self.info = []
            self.info = self.info + info
        return self
    def addInfo(self, info = []):
        if not isinstance(info, list):
            info = [info]
            self.info = []
            self.info = self.info + info
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.jointBindingPositions = [0, 0, 0]
        if not self.jointBindingPositions:
            self.jointBindingPositions = kwargs.pop("jointBindingPositions", [0, 0, 0])
    def setJointBindingPositions(self, jointBindingPositions = [0, 0, 0]):
        try:
            super().setJointBindingPositions(jointBindingPositions)
        except AttributeError:
           pass
        self.jointBindingPositions = jointBindingPositions
        return self
    def addJointBindingPositions(self, jointBindingPositions = [0, 0, 0]):
        if not isinstance(jointBindingPositions, list):
            jointBindingPositions = [jointBindingPositions]
            self.jointBindingPositions = []
            self.jointBindingPositions = self.jointBindingPositions + jointBindingPositions
        return self
    def addJointBindingPositions(self, jointBindingPositions = [0, 0, 0]):
        if not isinstance(jointBindingPositions, list):
            jointBindingPositions = [jointBindingPositions]
            self.jointBindingPositions = []
            self.jointBindingPositions = self.jointBindingPositions + jointBindingPositions
        return self
        self.jointBindingRotations = [0, 0, 1, 0]
        if not self.jointBindingRotations:
            self.jointBindingRotations = kwargs.pop("jointBindingRotations", [0, 0, 1, 0])
    def setJointBindingRotations(self, jointBindingRotations = [0, 0, 1, 0]):
        try:
            super().setJointBindingRotations(jointBindingRotations)
        except AttributeError:
           pass
        self.jointBindingRotations = jointBindingRotations
        return self
    def addJointBindingRotations(self, jointBindingRotations = [0, 0, 1, 0]):
        if not isinstance(jointBindingRotations, list):
            jointBindingRotations = [jointBindingRotations]
            self.jointBindingRotations = []
            self.jointBindingRotations = self.jointBindingRotations + jointBindingRotations
        return self
    def addJointBindingRotations(self, jointBindingRotations = [0, 0, 1, 0]):
        if not isinstance(jointBindingRotations, list):
            jointBindingRotations = [jointBindingRotations]
            self.jointBindingRotations = []
            self.jointBindingRotations = self.jointBindingRotations + jointBindingRotations
        return self
        self.jointBindingScales = [0, 0, 0]
        if not self.jointBindingScales:
            self.jointBindingScales = kwargs.pop("jointBindingScales", [0, 0, 0])
    def setJointBindingScales(self, jointBindingScales = [0, 0, 0]):
        try:
            super().setJointBindingScales(jointBindingScales)
        except AttributeError:
           pass
        self.jointBindingScales = jointBindingScales
        return self
    def addJointBindingScales(self, jointBindingScales = [0, 0, 0]):
        if not isinstance(jointBindingScales, list):
            jointBindingScales = [jointBindingScales]
            self.jointBindingScales = []
            self.jointBindingScales = self.jointBindingScales + jointBindingScales
        return self
    def addJointBindingScales(self, jointBindingScales = [0, 0, 0]):
        if not isinstance(jointBindingScales, list):
            jointBindingScales = [jointBindingScales]
            self.jointBindingScales = []
            self.jointBindingScales = self.jointBindingScales + jointBindingScales
        return self
        self.joints = []
        if not self.joints:
            self.joints = kwargs.pop("joints", [])
    def setJoints(self, joints = []):
        try:
            super().setJoints(joints)
        except AttributeError:
           pass
        self.joints = joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
        self.loa = -1
        if not self.loa:
            self.loa = kwargs.pop("loa", -1)
        if self.loa == None or self.loa  <  -1:
            return None
        if self.loa == None or self.loa  >  4:
            return None
    def setLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        try:
            super().setLoa(loa)
        except AttributeError:
           pass
        self.loa = loa
        return self
    def addLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        if not isinstance(loa, list):
            loa = [loa]
            self.loa = []
            self.loa = self.loa + loa
        return self
    def addLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        if not isinstance(loa, list):
            loa = [loa]
            self.loa = []
            self.loa = self.loa + loa
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.motions = []
        if not self.motions:
            self.motions = kwargs.pop("motions", [])
    def setMotions(self, motions = []):
        try:
            super().setMotions(motions)
        except AttributeError:
           pass
        self.motions = motions
        return self
    def addMotions(self, motions = []):
        if not isinstance(motions, list):
            motions = [motions]
            self.motions = []
            self.motions = self.motions + motions
        return self
    def addMotions(self, motions = []):
        if not isinstance(motions, list):
            motions = [motions]
            self.motions = []
            self.motions = self.motions + motions
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
        if self.scale == None or len(self.scale) <= 0 or min(self.scale)  <=  0:
            return None
    def setScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.segments = []
        if not self.segments:
            self.segments = kwargs.pop("segments", [])
    def setSegments(self, segments = []):
        try:
            super().setSegments(segments)
        except AttributeError:
           pass
        self.segments = segments
        return self
    def addSegments(self, segments = []):
        if not isinstance(segments, list):
            segments = [segments]
            self.segments = []
            self.segments = self.segments + segments
        return self
    def addSegments(self, segments = []):
        if not isinstance(segments, list):
            segments = [segments]
            self.segments = []
            self.segments = self.segments + segments
        return self
        self.sites = []
        if not self.sites:
            self.sites = kwargs.pop("sites", [])
    def setSites(self, sites = []):
        try:
            super().setSites(sites)
        except AttributeError:
           pass
        self.sites = sites
        return self
    def addSites(self, sites = []):
        if not isinstance(sites, list):
            sites = [sites]
            self.sites = []
            self.sites = self.sites + sites
        return self
    def addSites(self, sites = []):
        if not isinstance(sites, list):
            sites = [sites]
            self.sites = []
            self.sites = self.sites + sites
        return self
        self.skeletalConfiguration = "BASIC"
        if not self.skeletalConfiguration:
            self.skeletalConfiguration = kwargs.pop("skeletalConfiguration", "BASIC")
    def setSkeletalConfiguration(self, skeletalConfiguration = "BASIC"):
        try:
            super().setSkeletalConfiguration(skeletalConfiguration)
        except AttributeError:
           pass
        self.skeletalConfiguration = skeletalConfiguration
        return self
    def addSkeletalConfiguration(self, skeletalConfiguration = "BASIC"):
        if not isinstance(skeletalConfiguration, list):
            skeletalConfiguration = [skeletalConfiguration]
            self.skeletalConfiguration = []
            self.skeletalConfiguration = self.skeletalConfiguration + skeletalConfiguration
        return self
    def addSkeletalConfiguration(self, skeletalConfiguration = "BASIC"):
        if not isinstance(skeletalConfiguration, list):
            skeletalConfiguration = [skeletalConfiguration]
            self.skeletalConfiguration = []
            self.skeletalConfiguration = self.skeletalConfiguration + skeletalConfiguration
        return self
        self.skeleton = []
        if not self.skeleton:
            self.skeleton = kwargs.pop("skeleton", [])
    def setSkeleton(self, skeleton = []):
        try:
            super().setSkeleton(skeleton)
        except AttributeError:
           pass
        self.skeleton = skeleton
        return self
    def addSkeleton(self, skeleton = []):
        if not isinstance(skeleton, list):
            skeleton = [skeleton]
            self.skeleton = []
            self.skeleton = self.skeleton + skeleton
        return self
    def addSkeleton(self, skeleton = []):
        if not isinstance(skeleton, list):
            skeleton = [skeleton]
            self.skeleton = []
            self.skeleton = self.skeleton + skeleton
        return self
        self.skin = []
        if not self.skin:
            self.skin = kwargs.pop("skin", [])
    def setSkin(self, skin = []):
        try:
            super().setSkin(skin)
        except AttributeError:
           pass
        self.skin = skin
        return self
    def addSkin(self, skin = []):
        if not isinstance(skin, list):
            skin = [skin]
            self.skin = []
            self.skin = self.skin + skin
        return self
    def addSkin(self, skin = []):
        if not isinstance(skin, list):
            skin = [skin]
            self.skin = []
            self.skin = self.skin + skin
        return self
        self.skinBindingCoords = None
        if not self.skinBindingCoords:
            self.skinBindingCoords = kwargs.pop("skinBindingCoords", None)
    def setSkinBindingCoords(self, skinBindingCoords = None):
        try:
            super().setSkinBindingCoords(skinBindingCoords)
        except AttributeError:
           pass
        self.skinBindingCoords = skinBindingCoords
        return self
    def addSkinBindingCoords(self, skinBindingCoords = None):
        if not isinstance(skinBindingCoords, list):
            skinBindingCoords = [skinBindingCoords]
            self.skinBindingCoords = []
            self.skinBindingCoords = self.skinBindingCoords + skinBindingCoords
        return self
    def addSkinBindingCoords(self, skinBindingCoords = None):
        if not isinstance(skinBindingCoords, list):
            skinBindingCoords = [skinBindingCoords]
            self.skinBindingCoords = []
            self.skinBindingCoords = self.skinBindingCoords + skinBindingCoords
        return self
        self.skinBindingNormals = None
        if not self.skinBindingNormals:
            self.skinBindingNormals = kwargs.pop("skinBindingNormals", None)
    def setSkinBindingNormals(self, skinBindingNormals = None):
        try:
            super().setSkinBindingNormals(skinBindingNormals)
        except AttributeError:
           pass
        self.skinBindingNormals = skinBindingNormals
        return self
    def addSkinBindingNormals(self, skinBindingNormals = None):
        if not isinstance(skinBindingNormals, list):
            skinBindingNormals = [skinBindingNormals]
            self.skinBindingNormals = []
            self.skinBindingNormals = self.skinBindingNormals + skinBindingNormals
        return self
    def addSkinBindingNormals(self, skinBindingNormals = None):
        if not isinstance(skinBindingNormals, list):
            skinBindingNormals = [skinBindingNormals]
            self.skinBindingNormals = []
            self.skinBindingNormals = self.skinBindingNormals + skinBindingNormals
        return self
        self.skinCoord = None
        if not self.skinCoord:
            self.skinCoord = kwargs.pop("skinCoord", None)
    def setSkinCoord(self, skinCoord = None):
        try:
            super().setSkinCoord(skinCoord)
        except AttributeError:
           pass
        self.skinCoord = skinCoord
        return self
    def addSkinCoord(self, skinCoord = None):
        if not isinstance(skinCoord, list):
            skinCoord = [skinCoord]
            self.skinCoord = []
            self.skinCoord = self.skinCoord + skinCoord
        return self
    def addSkinCoord(self, skinCoord = None):
        if not isinstance(skinCoord, list):
            skinCoord = [skinCoord]
            self.skinCoord = []
            self.skinCoord = self.skinCoord + skinCoord
        return self
        self.skinNormal = None
        if not self.skinNormal:
            self.skinNormal = kwargs.pop("skinNormal", None)
    def setSkinNormal(self, skinNormal = None):
        try:
            super().setSkinNormal(skinNormal)
        except AttributeError:
           pass
        self.skinNormal = skinNormal
        return self
    def addSkinNormal(self, skinNormal = None):
        if not isinstance(skinNormal, list):
            skinNormal = [skinNormal]
            self.skinNormal = []
            self.skinNormal = self.skinNormal + skinNormal
        return self
    def addSkinNormal(self, skinNormal = None):
        if not isinstance(skinNormal, list):
            skinNormal = [skinNormal]
            self.skinNormal = []
            self.skinNormal = self.skinNormal + skinNormal
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.version = "2.0"
        if not self.version:
            self.version = kwargs.pop("version", "2.0")
        if '1.0' == self.version:
            pass
        elif '1.1' == self.version:
            pass
        elif '2.0' == self.version:
            pass
        else:
            return None
    def setVersion(self, version = "2.0"):
        if '1.0' == version:
            pass
        elif '1.1' == version:
            pass
        elif '2.0' == version:
            pass
        else:
            return None
        try:
            super().setVersion(version)
        except AttributeError:
           pass
        self.version = version
        return self
    def addVersion(self, version = "2.0"):
        if '1.0' == version:
            pass
        elif '1.1' == version:
            pass
        elif '2.0' == version:
            pass
        else:
            return None
        if not isinstance(version, list):
            version = [version]
            self.version = []
            self.version = self.version + version
        return self
    def addVersion(self, version = "2.0"):
        if '1.0' == version:
            pass
        elif '1.1' == version:
            pass
        elif '2.0' == version:
            pass
        else:
            return None
        if not isinstance(version, list):
            version = [version]
            self.version = []
            self.version = self.version + version
        return self
        self.viewpoints = []
        if not self.viewpoints:
            self.viewpoints = kwargs.pop("viewpoints", [])
    def setViewpoints(self, viewpoints = []):
        try:
            super().setViewpoints(viewpoints)
        except AttributeError:
           pass
        self.viewpoints = viewpoints
        return self
    def addViewpoints(self, viewpoints = []):
        if not isinstance(viewpoints, list):
            viewpoints = [viewpoints]
            self.viewpoints = []
            self.viewpoints = self.viewpoints + viewpoints
        return self
    def addViewpoints(self, viewpoints = []):
        if not isinstance(viewpoints, list):
            viewpoints = [viewpoints]
            self.viewpoints = []
            self.viewpoints = self.viewpoints + viewpoints
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class HAnimJoint(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(HAnimJoint, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displacers = []
        if not self.displacers:
            self.displacers = kwargs.pop("displacers", [])
    def setDisplacers(self, displacers = []):
        try:
            super().setDisplacers(displacers)
        except AttributeError:
           pass
        self.displacers = displacers
        return self
    def addDisplacers(self, displacers = []):
        if not isinstance(displacers, list):
            displacers = [displacers]
            self.displacers = []
            self.displacers = self.displacers + displacers
        return self
    def addDisplacers(self, displacers = []):
        if not isinstance(displacers, list):
            displacers = [displacers]
            self.displacers = []
            self.displacers = self.displacers + displacers
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.limitOrientation = [0, 0, 1, 0]
        if not self.limitOrientation:
            self.limitOrientation = kwargs.pop("limitOrientation", [0, 0, 1, 0])
    def setLimitOrientation(self, limitOrientation = [0, 0, 1, 0]):
        try:
            super().setLimitOrientation(limitOrientation)
        except AttributeError:
           pass
        self.limitOrientation = limitOrientation
        return self
    def addLimitOrientation(self, limitOrientation = [0, 0, 1, 0]):
        if not isinstance(limitOrientation, list):
            limitOrientation = [limitOrientation]
            self.limitOrientation = []
            self.limitOrientation = self.limitOrientation + limitOrientation
        return self
    def addLimitOrientation(self, limitOrientation = [0, 0, 1, 0]):
        if not isinstance(limitOrientation, list):
            limitOrientation = [limitOrientation]
            self.limitOrientation = []
            self.limitOrientation = self.limitOrientation + limitOrientation
        return self
        self.llimit = [0, 0, 0]
        if not self.llimit:
            self.llimit = kwargs.pop("llimit", [0, 0, 0])
    def setLlimit(self, llimit = [0, 0, 0]):
        try:
            super().setLlimit(llimit)
        except AttributeError:
           pass
        self.llimit = llimit
        return self
    def addLlimit(self, llimit = [0, 0, 0]):
        if not isinstance(llimit, list):
            llimit = [llimit]
            self.llimit = []
            self.llimit = self.llimit + llimit
        return self
    def addLlimit(self, llimit = [0, 0, 0]):
        if not isinstance(llimit, list):
            llimit = [llimit]
            self.llimit = []
            self.llimit = self.llimit + llimit
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
        if self.scale == None or len(self.scale) <= 0 or min(self.scale)  <=  0:
            return None
    def setScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.skinCoordIndex = []
        if not self.skinCoordIndex:
            self.skinCoordIndex = kwargs.pop("skinCoordIndex", [])
        if self.skinCoordIndex == None or len(self.skinCoordIndex) <= 0 or min(self.skinCoordIndex)  <  0:
            return None
    def setSkinCoordIndex(self, skinCoordIndex = []):
        if skinCoordIndex == None or len(skinCoordIndex) <= 0 or min(skinCoordIndex)  <  0:
            return None
        try:
            super().setSkinCoordIndex(skinCoordIndex)
        except AttributeError:
           pass
        self.skinCoordIndex = skinCoordIndex
        return self
    def addSkinCoordIndex(self, skinCoordIndex = []):
        if skinCoordIndex == None or len(skinCoordIndex) <= 0 or min(skinCoordIndex)  <  0:
            return None
        if not isinstance(skinCoordIndex, list):
            skinCoordIndex = [skinCoordIndex]
            self.skinCoordIndex = []
            self.skinCoordIndex = self.skinCoordIndex + skinCoordIndex
        return self
    def addSkinCoordIndex(self, skinCoordIndex = []):
        if skinCoordIndex == None or len(skinCoordIndex) <= 0 or min(skinCoordIndex)  <  0:
            return None
        if not isinstance(skinCoordIndex, list):
            skinCoordIndex = [skinCoordIndex]
            self.skinCoordIndex = []
            self.skinCoordIndex = self.skinCoordIndex + skinCoordIndex
        return self
        self.skinCoordWeight = []
        if not self.skinCoordWeight:
            self.skinCoordWeight = kwargs.pop("skinCoordWeight", [])
    def setSkinCoordWeight(self, skinCoordWeight = []):
        try:
            super().setSkinCoordWeight(skinCoordWeight)
        except AttributeError:
           pass
        self.skinCoordWeight = skinCoordWeight
        return self
    def addSkinCoordWeight(self, skinCoordWeight = []):
        if not isinstance(skinCoordWeight, list):
            skinCoordWeight = [skinCoordWeight]
            self.skinCoordWeight = []
            self.skinCoordWeight = self.skinCoordWeight + skinCoordWeight
        return self
    def addSkinCoordWeight(self, skinCoordWeight = []):
        if not isinstance(skinCoordWeight, list):
            skinCoordWeight = [skinCoordWeight]
            self.skinCoordWeight = []
            self.skinCoordWeight = self.skinCoordWeight + skinCoordWeight
        return self
        self.stiffness = [1, 1, 1]
        if not self.stiffness:
            self.stiffness = kwargs.pop("stiffness", [1, 1, 1])
        if self.stiffness == None or len(self.stiffness) <= 0 or min(self.stiffness)  <  0:
            return None
        if self.stiffness == None or len(self.stiffness) <= 0 or max(self.stiffness)  >  1:
            return None
    def setStiffness(self, stiffness = [1, 1, 1]):
        if stiffness == None or len(stiffness) <= 0 or min(stiffness)  <  0:
            return None
        if stiffness == None or len(stiffness) <= 0 or max(stiffness)  >  1:
            return None
        try:
            super().setStiffness(stiffness)
        except AttributeError:
           pass
        self.stiffness = stiffness
        return self
    def addStiffness(self, stiffness = [1, 1, 1]):
        if stiffness == None or len(stiffness) <= 0 or min(stiffness)  <  0:
            return None
        if stiffness == None or len(stiffness) <= 0 or max(stiffness)  >  1:
            return None
        if not isinstance(stiffness, list):
            stiffness = [stiffness]
            self.stiffness = []
            self.stiffness = self.stiffness + stiffness
        return self
    def addStiffness(self, stiffness = [1, 1, 1]):
        if stiffness == None or len(stiffness) <= 0 or min(stiffness)  <  0:
            return None
        if stiffness == None or len(stiffness) <= 0 or max(stiffness)  >  1:
            return None
        if not isinstance(stiffness, list):
            stiffness = [stiffness]
            self.stiffness = []
            self.stiffness = self.stiffness + stiffness
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.ulimit = [0, 0, 0]
        if not self.ulimit:
            self.ulimit = kwargs.pop("ulimit", [0, 0, 0])
    def setUlimit(self, ulimit = [0, 0, 0]):
        try:
            super().setUlimit(ulimit)
        except AttributeError:
           pass
        self.ulimit = ulimit
        return self
    def addUlimit(self, ulimit = [0, 0, 0]):
        if not isinstance(ulimit, list):
            ulimit = [ulimit]
            self.ulimit = []
            self.ulimit = self.ulimit + ulimit
        return self
    def addUlimit(self, ulimit = [0, 0, 0]):
        if not isinstance(ulimit, list):
            ulimit = [ulimit]
            self.ulimit = []
            self.ulimit = self.ulimit + ulimit
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class HAnimMotion(X3DChildNode):
    def __init__(self, **kwargs):
        super(HAnimMotion, self).__init__(**kwargs)
        self.channels = []
        if not self.channels:
            self.channels = kwargs.pop("channels", [])
    def setChannels(self, channels = []):
        try:
            super().setChannels(channels)
        except AttributeError:
           pass
        self.channels = channels
        return self
    def addChannels(self, channels = []):
        if not isinstance(channels, list):
            channels = [channels]
            self.channels = []
            self.channels = self.channels + channels
        return self
    def addChannels(self, channels = []):
        if not isinstance(channels, list):
            channels = [channels]
            self.channels = []
            self.channels = self.channels + channels
        return self
        self.channelsEnabled = []
        if not self.channelsEnabled:
            self.channelsEnabled = kwargs.pop("channelsEnabled", [])
    def setChannelsEnabled(self, channelsEnabled = []):
        try:
            super().setChannelsEnabled(channelsEnabled)
        except AttributeError:
           pass
        self.channelsEnabled = channelsEnabled
        return self
    def addChannelsEnabled(self, channelsEnabled = []):
        if not isinstance(channelsEnabled, list):
            channelsEnabled = [channelsEnabled]
            self.channelsEnabled = []
            self.channelsEnabled = self.channelsEnabled + channelsEnabled
        return self
    def addChannelsEnabled(self, channelsEnabled = []):
        if not isinstance(channelsEnabled, list):
            channelsEnabled = [channelsEnabled]
            self.channelsEnabled = []
            self.channelsEnabled = self.channelsEnabled + channelsEnabled
        return self
        self.cycleTime = None
        if not self.cycleTime:
            self.cycleTime = kwargs.pop("cycleTime", None)
        if self.cycleTime == None or self.cycleTime  <  0:
            return None
    def setCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        try:
            super().setCycleTime(cycleTime)
        except AttributeError:
           pass
        self.cycleTime = cycleTime
        return self
    def addCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        if not isinstance(cycleTime, list):
            cycleTime = [cycleTime]
            self.cycleTime = []
            self.cycleTime = self.cycleTime + cycleTime
        return self
    def addCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        if not isinstance(cycleTime, list):
            cycleTime = [cycleTime]
            self.cycleTime = []
            self.cycleTime = self.cycleTime + cycleTime
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.enabled = False
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", False)
    def setEnabled(self, enabled = False):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = False):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = False):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.endFrame = -1
        if not self.endFrame:
            self.endFrame = kwargs.pop("endFrame", -1)
        if self.endFrame == None or self.endFrame  <  -1:
            return None
    def setEndFrame(self, endFrame = -1):
        if endFrame == None or endFrame  <  -1:
            return None
        try:
            super().setEndFrame(endFrame)
        except AttributeError:
           pass
        self.endFrame = endFrame
        return self
    def addEndFrame(self, endFrame = -1):
        if endFrame == None or endFrame  <  -1:
            return None
        if not isinstance(endFrame, list):
            endFrame = [endFrame]
            self.endFrame = []
            self.endFrame = self.endFrame + endFrame
        return self
    def addEndFrame(self, endFrame = -1):
        if endFrame == None or endFrame  <  -1:
            return None
        if not isinstance(endFrame, list):
            endFrame = [endFrame]
            self.endFrame = []
            self.endFrame = self.endFrame + endFrame
        return self
        self.frameCount = None
        if not self.frameCount:
            self.frameCount = kwargs.pop("frameCount", None)
        if self.frameCount == None or self.frameCount  <  0:
            return None
    def setFrameCount(self, frameCount = None):
        if frameCount == None or frameCount  <  0:
            return None
        try:
            super().setFrameCount(frameCount)
        except AttributeError:
           pass
        self.frameCount = frameCount
        return self
    def addFrameCount(self, frameCount = None):
        if frameCount == None or frameCount  <  0:
            return None
        if not isinstance(frameCount, list):
            frameCount = [frameCount]
            self.frameCount = []
            self.frameCount = self.frameCount + frameCount
        return self
    def addFrameCount(self, frameCount = None):
        if frameCount == None or frameCount  <  0:
            return None
        if not isinstance(frameCount, list):
            frameCount = [frameCount]
            self.frameCount = []
            self.frameCount = self.frameCount + frameCount
        return self
        self.frameDuration = 0.1
        if not self.frameDuration:
            self.frameDuration = kwargs.pop("frameDuration", 0.1)
        if self.frameDuration == None or self.frameDuration  <=  0:
            return None
    def setFrameDuration(self, frameDuration = 0.1):
        if frameDuration == None or frameDuration  <=  0:
            return None
        try:
            super().setFrameDuration(frameDuration)
        except AttributeError:
           pass
        self.frameDuration = frameDuration
        return self
    def addFrameDuration(self, frameDuration = 0.1):
        if frameDuration == None or frameDuration  <=  0:
            return None
        if not isinstance(frameDuration, list):
            frameDuration = [frameDuration]
            self.frameDuration = []
            self.frameDuration = self.frameDuration + frameDuration
        return self
    def addFrameDuration(self, frameDuration = 0.1):
        if frameDuration == None or frameDuration  <=  0:
            return None
        if not isinstance(frameDuration, list):
            frameDuration = [frameDuration]
            self.frameDuration = []
            self.frameDuration = self.frameDuration + frameDuration
        return self
        self.frameIncrement = 1
        if not self.frameIncrement:
            self.frameIncrement = kwargs.pop("frameIncrement", 1)
    def setFrameIncrement(self, frameIncrement = 1):
        try:
            super().setFrameIncrement(frameIncrement)
        except AttributeError:
           pass
        self.frameIncrement = frameIncrement
        return self
    def addFrameIncrement(self, frameIncrement = 1):
        if not isinstance(frameIncrement, list):
            frameIncrement = [frameIncrement]
            self.frameIncrement = []
            self.frameIncrement = self.frameIncrement + frameIncrement
        return self
    def addFrameIncrement(self, frameIncrement = 1):
        if not isinstance(frameIncrement, list):
            frameIncrement = [frameIncrement]
            self.frameIncrement = []
            self.frameIncrement = self.frameIncrement + frameIncrement
        return self
        self.frameIndex = 0
        if not self.frameIndex:
            self.frameIndex = kwargs.pop("frameIndex", 0)
        if self.frameIndex == None or self.frameIndex  <  0:
            return None
    def setFrameIndex(self, frameIndex = 0):
        if frameIndex == None or frameIndex  <  0:
            return None
        try:
            super().setFrameIndex(frameIndex)
        except AttributeError:
           pass
        self.frameIndex = frameIndex
        return self
    def addFrameIndex(self, frameIndex = 0):
        if frameIndex == None or frameIndex  <  0:
            return None
        if not isinstance(frameIndex, list):
            frameIndex = [frameIndex]
            self.frameIndex = []
            self.frameIndex = self.frameIndex + frameIndex
        return self
    def addFrameIndex(self, frameIndex = 0):
        if frameIndex == None or frameIndex  <  0:
            return None
        if not isinstance(frameIndex, list):
            frameIndex = [frameIndex]
            self.frameIndex = []
            self.frameIndex = self.frameIndex + frameIndex
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.joints = []
        if not self.joints:
            self.joints = kwargs.pop("joints", [])
    def setJoints(self, joints = []):
        try:
            super().setJoints(joints)
        except AttributeError:
           pass
        self.joints = joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
        self.loa = -1
        if not self.loa:
            self.loa = kwargs.pop("loa", -1)
        if self.loa == None or self.loa  <  -1:
            return None
        if self.loa == None or self.loa  >  4:
            return None
    def setLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        try:
            super().setLoa(loa)
        except AttributeError:
           pass
        self.loa = loa
        return self
    def addLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        if not isinstance(loa, list):
            loa = [loa]
            self.loa = []
            self.loa = self.loa + loa
        return self
    def addLoa(self, loa = -1):
        if loa == None or loa  <  -1:
            return None
        if loa == None or loa  >  4:
            return None
        if not isinstance(loa, list):
            loa = [loa]
            self.loa = []
            self.loa = self.loa + loa
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.startFrame = 0
        if not self.startFrame:
            self.startFrame = kwargs.pop("startFrame", 0)
        if self.startFrame == None or self.startFrame  <  0:
            return None
    def setStartFrame(self, startFrame = 0):
        if startFrame == None or startFrame  <  0:
            return None
        try:
            super().setStartFrame(startFrame)
        except AttributeError:
           pass
        self.startFrame = startFrame
        return self
    def addStartFrame(self, startFrame = 0):
        if startFrame == None or startFrame  <  0:
            return None
        if not isinstance(startFrame, list):
            startFrame = [startFrame]
            self.startFrame = []
            self.startFrame = self.startFrame + startFrame
        return self
    def addStartFrame(self, startFrame = 0):
        if startFrame == None or startFrame  <  0:
            return None
        if not isinstance(startFrame, list):
            startFrame = [startFrame]
            self.startFrame = []
            self.startFrame = self.startFrame + startFrame
        return self
        self.values = []
        if not self.values:
            self.values = kwargs.pop("values", [])
    def setValues(self, values = []):
        try:
            super().setValues(values)
        except AttributeError:
           pass
        self.values = values
        return self
    def addValues(self, values = []):
        if not isinstance(values, list):
            values = [values]
            self.values = []
            self.values = self.values + values
        return self
    def addValues(self, values = []):
        if not isinstance(values, list):
            values = [values]
            self.values = []
            self.values = self.values + values
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class HAnimSegment(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(HAnimSegment, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.centerOfMass = [0, 0, 0]
        if not self.centerOfMass:
            self.centerOfMass = kwargs.pop("centerOfMass", [0, 0, 0])
    def setCenterOfMass(self, centerOfMass = [0, 0, 0]):
        try:
            super().setCenterOfMass(centerOfMass)
        except AttributeError:
           pass
        self.centerOfMass = centerOfMass
        return self
    def addCenterOfMass(self, centerOfMass = [0, 0, 0]):
        if not isinstance(centerOfMass, list):
            centerOfMass = [centerOfMass]
            self.centerOfMass = []
            self.centerOfMass = self.centerOfMass + centerOfMass
        return self
    def addCenterOfMass(self, centerOfMass = [0, 0, 0]):
        if not isinstance(centerOfMass, list):
            centerOfMass = [centerOfMass]
            self.centerOfMass = []
            self.centerOfMass = self.centerOfMass + centerOfMass
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displacers = []
        if not self.displacers:
            self.displacers = kwargs.pop("displacers", [])
    def setDisplacers(self, displacers = []):
        try:
            super().setDisplacers(displacers)
        except AttributeError:
           pass
        self.displacers = displacers
        return self
    def addDisplacers(self, displacers = []):
        if not isinstance(displacers, list):
            displacers = [displacers]
            self.displacers = []
            self.displacers = self.displacers + displacers
        return self
    def addDisplacers(self, displacers = []):
        if not isinstance(displacers, list):
            displacers = [displacers]
            self.displacers = []
            self.displacers = self.displacers + displacers
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.momentsOfInertia = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        if not self.momentsOfInertia:
            self.momentsOfInertia = kwargs.pop("momentsOfInertia", [0, 0, 0, 0, 0, 0, 0, 0, 0])
        if self.momentsOfInertia == None or len(self.momentsOfInertia) <= 0 or min(self.momentsOfInertia)  <  0:
            return None
    def setMomentsOfInertia(self, momentsOfInertia = [0, 0, 0, 0, 0, 0, 0, 0, 0]):
        if momentsOfInertia == None or len(momentsOfInertia) <= 0 or min(momentsOfInertia)  <  0:
            return None
        try:
            super().setMomentsOfInertia(momentsOfInertia)
        except AttributeError:
           pass
        self.momentsOfInertia = momentsOfInertia
        return self
    def addMomentsOfInertia(self, momentsOfInertia = [0, 0, 0, 0, 0, 0, 0, 0, 0]):
        if momentsOfInertia == None or len(momentsOfInertia) <= 0 or min(momentsOfInertia)  <  0:
            return None
        if not isinstance(momentsOfInertia, list):
            momentsOfInertia = [momentsOfInertia]
            self.momentsOfInertia = []
            self.momentsOfInertia = self.momentsOfInertia + momentsOfInertia
        return self
    def addMomentsOfInertia(self, momentsOfInertia = [0, 0, 0, 0, 0, 0, 0, 0, 0]):
        if momentsOfInertia == None or len(momentsOfInertia) <= 0 or min(momentsOfInertia)  <  0:
            return None
        if not isinstance(momentsOfInertia, list):
            momentsOfInertia = [momentsOfInertia]
            self.momentsOfInertia = []
            self.momentsOfInertia = self.momentsOfInertia + momentsOfInertia
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class HAnimSite(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(HAnimSite, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
        if self.scale == None or len(self.scale) <= 0 or min(self.scale)  <=  0:
            return None
    def setScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if scale == None or len(scale) <= 0 or min(scale)  <=  0:
            return None
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ImageCubeMapTexture(X3DUrlObject, X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        super(ImageCubeMapTexture, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ImageTexture(X3DUrlObject, X3DTexture2DNode):
    def __init__(self, **kwargs):
        super(ImageTexture, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatS = True
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", True)
    def setRepeatS(self, repeatS = True):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = True
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", True)
    def setRepeatT(self, repeatT = True):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ImageTexture3D(X3DUrlObject, X3DTexture3DNode):
    def __init__(self, **kwargs):
        super(ImageTexture3D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatR = False
        if not self.repeatR:
            self.repeatR = kwargs.pop("repeatR", False)
    def setRepeatR(self, repeatR = False):
        try:
            super().setRepeatR(repeatR)
        except AttributeError:
           pass
        self.repeatR = repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
        self.repeatS = False
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", False)
    def setRepeatS(self, repeatS = False):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = False
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", False)
    def setRepeatT(self, repeatT = False):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedFaceSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedFaceSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorIndex = []
        if not self.colorIndex:
            self.colorIndex = kwargs.pop("colorIndex", [])
        if self.colorIndex == None or len(self.colorIndex) <= 0 or min(self.colorIndex)  <  -1:
            return None
    def setColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        try:
            super().setColorIndex(colorIndex)
        except AttributeError:
           pass
        self.colorIndex = colorIndex
        return self
    def addColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        if not isinstance(colorIndex, list):
            colorIndex = [colorIndex]
            self.colorIndex = []
            self.colorIndex = self.colorIndex + colorIndex
        return self
    def addColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        if not isinstance(colorIndex, list):
            colorIndex = [colorIndex]
            self.colorIndex = []
            self.colorIndex = self.colorIndex + colorIndex
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.convex = True
        if not self.convex:
            self.convex = kwargs.pop("convex", True)
    def setConvex(self, convex = True):
        try:
            super().setConvex(convex)
        except AttributeError:
           pass
        self.convex = convex
        return self
    def addConvex(self, convex = True):
        if not isinstance(convex, list):
            convex = [convex]
            self.convex = []
            self.convex = self.convex + convex
        return self
    def addConvex(self, convex = True):
        if not isinstance(convex, list):
            convex = [convex]
            self.convex = []
            self.convex = self.convex + convex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.coordIndex = []
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", [])
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  -1:
            return None
    def setCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.creaseAngle = 0
        if not self.creaseAngle:
            self.creaseAngle = kwargs.pop("creaseAngle", 0)
        if self.creaseAngle == None or self.creaseAngle  <  0:
            return None
    def setCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        try:
            super().setCreaseAngle(creaseAngle)
        except AttributeError:
           pass
        self.creaseAngle = creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
    def addCreaseAngle(self, creaseAngle = 0):
        if creaseAngle == None or creaseAngle  <  0:
            return None
        if not isinstance(creaseAngle, list):
            creaseAngle = [creaseAngle]
            self.creaseAngle = []
            self.creaseAngle = self.creaseAngle + creaseAngle
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalIndex = []
        if not self.normalIndex:
            self.normalIndex = kwargs.pop("normalIndex", [])
        if self.normalIndex == None or len(self.normalIndex) <= 0 or min(self.normalIndex)  <  -1:
            return None
    def setNormalIndex(self, normalIndex = []):
        if normalIndex == None or len(normalIndex) <= 0 or min(normalIndex)  <  -1:
            return None
        try:
            super().setNormalIndex(normalIndex)
        except AttributeError:
           pass
        self.normalIndex = normalIndex
        return self
    def addNormalIndex(self, normalIndex = []):
        if normalIndex == None or len(normalIndex) <= 0 or min(normalIndex)  <  -1:
            return None
        if not isinstance(normalIndex, list):
            normalIndex = [normalIndex]
            self.normalIndex = []
            self.normalIndex = self.normalIndex + normalIndex
        return self
    def addNormalIndex(self, normalIndex = []):
        if normalIndex == None or len(normalIndex) <= 0 or min(normalIndex)  <  -1:
            return None
        if not isinstance(normalIndex, list):
            normalIndex = [normalIndex]
            self.normalIndex = []
            self.normalIndex = self.normalIndex + normalIndex
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.ColorIndex = []
        if not self.ColorIndex:
            self.ColorIndex = kwargs.pop("ColorIndex", [])
        if self.ColorIndex == None or len(self.ColorIndex) <= 0 or min(self.ColorIndex)  <  -1:
            return None
    def setSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        try:
            super().setSet_colorIndex(ColorIndex)
        except AttributeError:
           pass
        self.ColorIndex = ColorIndex
        return self
    def addSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        if not isinstance(ColorIndex, list):
            ColorIndex = [ColorIndex]
            self.ColorIndex = []
            self.ColorIndex = self.ColorIndex + ColorIndex
        return self
    def addSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        if not isinstance(ColorIndex, list):
            ColorIndex = [ColorIndex]
            self.ColorIndex = []
            self.ColorIndex = self.ColorIndex + ColorIndex
        return self
        self.CoordIndex = []
        if not self.CoordIndex:
            self.CoordIndex = kwargs.pop("CoordIndex", [])
        if self.CoordIndex == None or len(self.CoordIndex) <= 0 or min(self.CoordIndex)  <  -1:
            return None
    def setSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        try:
            super().setSet_coordIndex(CoordIndex)
        except AttributeError:
           pass
        self.CoordIndex = CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
        self.NormalIndex = []
        if not self.NormalIndex:
            self.NormalIndex = kwargs.pop("NormalIndex", [])
        if self.NormalIndex == None or len(self.NormalIndex) <= 0 or min(self.NormalIndex)  <  -1:
            return None
    def setSet_normalIndex(self, NormalIndex = []):
        if NormalIndex == None or len(NormalIndex) <= 0 or min(NormalIndex)  <  -1:
            return None
        try:
            super().setSet_normalIndex(NormalIndex)
        except AttributeError:
           pass
        self.NormalIndex = NormalIndex
        return self
    def addSet_normalIndex(self, NormalIndex = []):
        if NormalIndex == None or len(NormalIndex) <= 0 or min(NormalIndex)  <  -1:
            return None
        if not isinstance(NormalIndex, list):
            NormalIndex = [NormalIndex]
            self.NormalIndex = []
            self.NormalIndex = self.NormalIndex + NormalIndex
        return self
    def addSet_normalIndex(self, NormalIndex = []):
        if NormalIndex == None or len(NormalIndex) <= 0 or min(NormalIndex)  <  -1:
            return None
        if not isinstance(NormalIndex, list):
            NormalIndex = [NormalIndex]
            self.NormalIndex = []
            self.NormalIndex = self.NormalIndex + NormalIndex
        return self
        self.TexCoordIndex = []
        if not self.TexCoordIndex:
            self.TexCoordIndex = kwargs.pop("TexCoordIndex", [])
        if self.TexCoordIndex == None or len(self.TexCoordIndex) <= 0 or min(self.TexCoordIndex)  <  -1:
            return None
    def setSet_texCoordIndex(self, TexCoordIndex = []):
        if TexCoordIndex == None or len(TexCoordIndex) <= 0 or min(TexCoordIndex)  <  -1:
            return None
        try:
            super().setSet_texCoordIndex(TexCoordIndex)
        except AttributeError:
           pass
        self.TexCoordIndex = TexCoordIndex
        return self
    def addSet_texCoordIndex(self, TexCoordIndex = []):
        if TexCoordIndex == None or len(TexCoordIndex) <= 0 or min(TexCoordIndex)  <  -1:
            return None
        if not isinstance(TexCoordIndex, list):
            TexCoordIndex = [TexCoordIndex]
            self.TexCoordIndex = []
            self.TexCoordIndex = self.TexCoordIndex + TexCoordIndex
        return self
    def addSet_texCoordIndex(self, TexCoordIndex = []):
        if TexCoordIndex == None or len(TexCoordIndex) <= 0 or min(TexCoordIndex)  <  -1:
            return None
        if not isinstance(TexCoordIndex, list):
            TexCoordIndex = [TexCoordIndex]
            self.TexCoordIndex = []
            self.TexCoordIndex = self.TexCoordIndex + TexCoordIndex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.texCoordIndex = []
        if not self.texCoordIndex:
            self.texCoordIndex = kwargs.pop("texCoordIndex", [])
        if self.texCoordIndex == None or len(self.texCoordIndex) <= 0 or min(self.texCoordIndex)  <  -1:
            return None
    def setTexCoordIndex(self, texCoordIndex = []):
        if texCoordIndex == None or len(texCoordIndex) <= 0 or min(texCoordIndex)  <  -1:
            return None
        try:
            super().setTexCoordIndex(texCoordIndex)
        except AttributeError:
           pass
        self.texCoordIndex = texCoordIndex
        return self
    def addTexCoordIndex(self, texCoordIndex = []):
        if texCoordIndex == None or len(texCoordIndex) <= 0 or min(texCoordIndex)  <  -1:
            return None
        if not isinstance(texCoordIndex, list):
            texCoordIndex = [texCoordIndex]
            self.texCoordIndex = []
            self.texCoordIndex = self.texCoordIndex + texCoordIndex
        return self
    def addTexCoordIndex(self, texCoordIndex = []):
        if texCoordIndex == None or len(texCoordIndex) <= 0 or min(texCoordIndex)  <  -1:
            return None
        if not isinstance(texCoordIndex, list):
            texCoordIndex = [texCoordIndex]
            self.texCoordIndex = []
            self.texCoordIndex = self.texCoordIndex + texCoordIndex
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedLineSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedLineSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorIndex = []
        if not self.colorIndex:
            self.colorIndex = kwargs.pop("colorIndex", [])
        if self.colorIndex == None or len(self.colorIndex) <= 0 or min(self.colorIndex)  <  -1:
            return None
    def setColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        try:
            super().setColorIndex(colorIndex)
        except AttributeError:
           pass
        self.colorIndex = colorIndex
        return self
    def addColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        if not isinstance(colorIndex, list):
            colorIndex = [colorIndex]
            self.colorIndex = []
            self.colorIndex = self.colorIndex + colorIndex
        return self
    def addColorIndex(self, colorIndex = []):
        if colorIndex == None or len(colorIndex) <= 0 or min(colorIndex)  <  -1:
            return None
        if not isinstance(colorIndex, list):
            colorIndex = [colorIndex]
            self.colorIndex = []
            self.colorIndex = self.colorIndex + colorIndex
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.coordIndex = []
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", [])
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  -1:
            return None
    def setCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = []):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.ColorIndex = []
        if not self.ColorIndex:
            self.ColorIndex = kwargs.pop("ColorIndex", [])
        if self.ColorIndex == None or len(self.ColorIndex) <= 0 or min(self.ColorIndex)  <  -1:
            return None
    def setSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        try:
            super().setSet_colorIndex(ColorIndex)
        except AttributeError:
           pass
        self.ColorIndex = ColorIndex
        return self
    def addSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        if not isinstance(ColorIndex, list):
            ColorIndex = [ColorIndex]
            self.ColorIndex = []
            self.ColorIndex = self.ColorIndex + ColorIndex
        return self
    def addSet_colorIndex(self, ColorIndex = []):
        if ColorIndex == None or len(ColorIndex) <= 0 or min(ColorIndex)  <  -1:
            return None
        if not isinstance(ColorIndex, list):
            ColorIndex = [ColorIndex]
            self.ColorIndex = []
            self.ColorIndex = self.ColorIndex + ColorIndex
        return self
        self.CoordIndex = []
        if not self.CoordIndex:
            self.CoordIndex = kwargs.pop("CoordIndex", [])
        if self.CoordIndex == None or len(self.CoordIndex) <= 0 or min(self.CoordIndex)  <  -1:
            return None
    def setSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        try:
            super().setSet_coordIndex(CoordIndex)
        except AttributeError:
           pass
        self.CoordIndex = CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedQuadSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedQuadSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.index = []
        if not self.index:
            self.index = kwargs.pop("index", [])
        if self.index == None or len(self.index) <= 0 or min(self.index)  <  0:
            return None
    def setIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        try:
            super().setIndex(index)
        except AttributeError:
           pass
        self.index = index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Index = []
        if not self.Index:
            self.Index = kwargs.pop("Index", [])
        if self.Index == None or len(self.Index) <= 0 or min(self.Index)  <  0:
            return None
    def setSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        try:
            super().setSet_index(Index)
        except AttributeError:
           pass
        self.Index = Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedTriangleFanSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedTriangleFanSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.index = []
        if not self.index:
            self.index = kwargs.pop("index", [])
        if self.index == None or len(self.index) <= 0 or min(self.index)  <  -1:
            return None
    def setIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        try:
            super().setIndex(index)
        except AttributeError:
           pass
        self.index = index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Index = []
        if not self.Index:
            self.Index = kwargs.pop("Index", [])
        if self.Index == None or len(self.Index) <= 0 or min(self.Index)  <  -1:
            return None
    def setSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        try:
            super().setSet_index(Index)
        except AttributeError:
           pass
        self.Index = Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedTriangleSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedTriangleSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.index = []
        if not self.index:
            self.index = kwargs.pop("index", [])
        if self.index == None or len(self.index) <= 0 or min(self.index)  <  0:
            return None
    def setIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        try:
            super().setIndex(index)
        except AttributeError:
           pass
        self.index = index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  0:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Index = []
        if not self.Index:
            self.Index = kwargs.pop("Index", [])
        if self.Index == None or len(self.Index) <= 0 or min(self.Index)  <  0:
            return None
    def setSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        try:
            super().setSet_index(Index)
        except AttributeError:
           pass
        self.Index = Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  0:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IndexedTriangleStripSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(IndexedTriangleStripSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.index = []
        if not self.index:
            self.index = kwargs.pop("index", [])
        if self.index == None or len(self.index) <= 0 or min(self.index)  <  -1:
            return None
    def setIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        try:
            super().setIndex(index)
        except AttributeError:
           pass
        self.index = index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
    def addIndex(self, index = []):
        if index == None or len(index) <= 0 or min(index)  <  -1:
            return None
        if not isinstance(index, list):
            index = [index]
            self.index = []
            self.index = self.index + index
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.Index = []
        if not self.Index:
            self.Index = kwargs.pop("Index", [])
        if self.Index == None or len(self.Index) <= 0 or min(self.Index)  <  -1:
            return None
    def setSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        try:
            super().setSet_index(Index)
        except AttributeError:
           pass
        self.Index = Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
    def addSet_index(self, Index = []):
        if Index == None or len(Index) <= 0 or min(Index)  <  -1:
            return None
        if not isinstance(Index, list):
            Index = [Index]
            self.Index = []
            self.Index = self.Index + Index
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Inline(X3DBoundedObject, X3DUrlObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(Inline, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.load = True
        if not self.load:
            self.load = kwargs.pop("load", True)
    def setLoad(self, load = True):
        try:
            super().setLoad(load)
        except AttributeError:
           pass
        self.load = load
        return self
    def addLoad(self, load = True):
        if not isinstance(load, list):
            load = [load]
            self.load = []
            self.load = self.load + load
        return self
    def addLoad(self, load = True):
        if not isinstance(load, list):
            load = [load]
            self.load = []
            self.load = self.load + load
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IntegerSequencer(X3DSequencerNode):
    def __init__(self, **kwargs):
        super(IntegerSequencer, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.next = None
        if not self.next:
            self.next = kwargs.pop("next", None)
    def setNext(self, next = None):
        try:
            super().setNext(next)
        except AttributeError:
           pass
        self.next = next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
    def addNext(self, next = None):
        if not isinstance(next, list):
            next = [next]
            self.next = []
            self.next = self.next + next
        return self
        self.previous = None
        if not self.previous:
            self.previous = kwargs.pop("previous", None)
    def setPrevious(self, previous = None):
        try:
            super().setPrevious(previous)
        except AttributeError:
           pass
        self.previous = previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
    def addPrevious(self, previous = None):
        if not isinstance(previous, list):
            previous = [previous]
            self.previous = []
            self.previous = self.previous + previous
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IntegerTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super(IntegerTrigger, self).__init__(**kwargs)
        self.integerKey = -1
        if not self.integerKey:
            self.integerKey = kwargs.pop("integerKey", -1)
    def setIntegerKey(self, integerKey = -1):
        try:
            super().setIntegerKey(integerKey)
        except AttributeError:
           pass
        self.integerKey = integerKey
        return self
    def addIntegerKey(self, integerKey = -1):
        if not isinstance(integerKey, list):
            integerKey = [integerKey]
            self.integerKey = []
            self.integerKey = self.integerKey + integerKey
        return self
    def addIntegerKey(self, integerKey = -1):
        if not isinstance(integerKey, list):
            integerKey = [integerKey]
            self.integerKey = []
            self.integerKey = self.integerKey + integerKey
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Boolean = None
        if not self.Boolean:
            self.Boolean = kwargs.pop("Boolean", None)
    def setSet_boolean(self, Boolean = None):
        try:
            super().setSet_boolean(Boolean)
        except AttributeError:
           pass
        self.Boolean = Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
        self.triggerValue = None
        if not self.triggerValue:
            self.triggerValue = kwargs.pop("triggerValue", None)
    def setTriggerValue(self, triggerValue = None):
        try:
            super().setTriggerValue(triggerValue)
        except AttributeError:
           pass
        self.triggerValue = triggerValue
        return self
    def addTriggerValue(self, triggerValue = None):
        if not isinstance(triggerValue, list):
            triggerValue = [triggerValue]
            self.triggerValue = []
            self.triggerValue = self.triggerValue + triggerValue
        return self
    def addTriggerValue(self, triggerValue = None):
        if not isinstance(triggerValue, list):
            triggerValue = [triggerValue]
            self.triggerValue = []
            self.triggerValue = self.triggerValue + triggerValue
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IsoSurfaceVolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super(IsoSurfaceVolumeData, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.contourStepSize = 0
        if not self.contourStepSize:
            self.contourStepSize = kwargs.pop("contourStepSize", 0)
    def setContourStepSize(self, contourStepSize = 0):
        try:
            super().setContourStepSize(contourStepSize)
        except AttributeError:
           pass
        self.contourStepSize = contourStepSize
        return self
    def addContourStepSize(self, contourStepSize = 0):
        if not isinstance(contourStepSize, list):
            contourStepSize = [contourStepSize]
            self.contourStepSize = []
            self.contourStepSize = self.contourStepSize + contourStepSize
        return self
    def addContourStepSize(self, contourStepSize = 0):
        if not isinstance(contourStepSize, list):
            contourStepSize = [contourStepSize]
            self.contourStepSize = []
            self.contourStepSize = self.contourStepSize + contourStepSize
        return self
        self.dimensions = [1, 1, 1]
        if not self.dimensions:
            self.dimensions = kwargs.pop("dimensions", [1, 1, 1])
        if self.dimensions == None or len(self.dimensions) <= 0 or min(self.dimensions)  <=  0:
            return None
    def setDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        try:
            super().setDimensions(dimensions)
        except AttributeError:
           pass
        self.dimensions = dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.gradients = None
        if not self.gradients:
            self.gradients = kwargs.pop("gradients", None)
    def setGradients(self, gradients = None):
        try:
            super().setGradients(gradients)
        except AttributeError:
           pass
        self.gradients = gradients
        return self
    def addGradients(self, gradients = None):
        if not isinstance(gradients, list):
            gradients = [gradients]
            self.gradients = []
            self.gradients = self.gradients + gradients
        return self
    def addGradients(self, gradients = None):
        if not isinstance(gradients, list):
            gradients = [gradients]
            self.gradients = []
            self.gradients = self.gradients + gradients
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.renderStyle = []
        if not self.renderStyle:
            self.renderStyle = kwargs.pop("renderStyle", [])
    def setRenderStyle(self, renderStyle = []):
        try:
            super().setRenderStyle(renderStyle)
        except AttributeError:
           pass
        self.renderStyle = renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
        self.surfaceTolerance = 0
        if not self.surfaceTolerance:
            self.surfaceTolerance = kwargs.pop("surfaceTolerance", 0)
        if self.surfaceTolerance == None or self.surfaceTolerance  <  0:
            return None
    def setSurfaceTolerance(self, surfaceTolerance = 0):
        if surfaceTolerance == None or surfaceTolerance  <  0:
            return None
        try:
            super().setSurfaceTolerance(surfaceTolerance)
        except AttributeError:
           pass
        self.surfaceTolerance = surfaceTolerance
        return self
    def addSurfaceTolerance(self, surfaceTolerance = 0):
        if surfaceTolerance == None or surfaceTolerance  <  0:
            return None
        if not isinstance(surfaceTolerance, list):
            surfaceTolerance = [surfaceTolerance]
            self.surfaceTolerance = []
            self.surfaceTolerance = self.surfaceTolerance + surfaceTolerance
        return self
    def addSurfaceTolerance(self, surfaceTolerance = 0):
        if surfaceTolerance == None or surfaceTolerance  <  0:
            return None
        if not isinstance(surfaceTolerance, list):
            surfaceTolerance = [surfaceTolerance]
            self.surfaceTolerance = []
            self.surfaceTolerance = self.surfaceTolerance + surfaceTolerance
        return self
        self.surfaceValues = []
        if not self.surfaceValues:
            self.surfaceValues = kwargs.pop("surfaceValues", [])
    def setSurfaceValues(self, surfaceValues = []):
        try:
            super().setSurfaceValues(surfaceValues)
        except AttributeError:
           pass
        self.surfaceValues = surfaceValues
        return self
    def addSurfaceValues(self, surfaceValues = []):
        if not isinstance(surfaceValues, list):
            surfaceValues = [surfaceValues]
            self.surfaceValues = []
            self.surfaceValues = self.surfaceValues + surfaceValues
        return self
    def addSurfaceValues(self, surfaceValues = []):
        if not isinstance(surfaceValues, list):
            surfaceValues = [surfaceValues]
            self.surfaceValues = []
            self.surfaceValues = self.surfaceValues + surfaceValues
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.voxels = None
        if not self.voxels:
            self.voxels = kwargs.pop("voxels", None)
    def setVoxels(self, voxels = None):
        try:
            super().setVoxels(voxels)
        except AttributeError:
           pass
        self.voxels = voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class KeySensor(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        super(KeySensor, self).__init__(**kwargs)
        self.actionKeyPress = None
        if not self.actionKeyPress:
            self.actionKeyPress = kwargs.pop("actionKeyPress", None)
    def setActionKeyPress(self, actionKeyPress = None):
        try:
            super().setActionKeyPress(actionKeyPress)
        except AttributeError:
           pass
        self.actionKeyPress = actionKeyPress
        return self
    def addActionKeyPress(self, actionKeyPress = None):
        if not isinstance(actionKeyPress, list):
            actionKeyPress = [actionKeyPress]
            self.actionKeyPress = []
            self.actionKeyPress = self.actionKeyPress + actionKeyPress
        return self
    def addActionKeyPress(self, actionKeyPress = None):
        if not isinstance(actionKeyPress, list):
            actionKeyPress = [actionKeyPress]
            self.actionKeyPress = []
            self.actionKeyPress = self.actionKeyPress + actionKeyPress
        return self
        self.actionKeyRelease = None
        if not self.actionKeyRelease:
            self.actionKeyRelease = kwargs.pop("actionKeyRelease", None)
    def setActionKeyRelease(self, actionKeyRelease = None):
        try:
            super().setActionKeyRelease(actionKeyRelease)
        except AttributeError:
           pass
        self.actionKeyRelease = actionKeyRelease
        return self
    def addActionKeyRelease(self, actionKeyRelease = None):
        if not isinstance(actionKeyRelease, list):
            actionKeyRelease = [actionKeyRelease]
            self.actionKeyRelease = []
            self.actionKeyRelease = self.actionKeyRelease + actionKeyRelease
        return self
    def addActionKeyRelease(self, actionKeyRelease = None):
        if not isinstance(actionKeyRelease, list):
            actionKeyRelease = [actionKeyRelease]
            self.actionKeyRelease = []
            self.actionKeyRelease = self.actionKeyRelease + actionKeyRelease
        return self
        self.altKey = None
        if not self.altKey:
            self.altKey = kwargs.pop("altKey", None)
    def setAltKey(self, altKey = None):
        try:
            super().setAltKey(altKey)
        except AttributeError:
           pass
        self.altKey = altKey
        return self
    def addAltKey(self, altKey = None):
        if not isinstance(altKey, list):
            altKey = [altKey]
            self.altKey = []
            self.altKey = self.altKey + altKey
        return self
    def addAltKey(self, altKey = None):
        if not isinstance(altKey, list):
            altKey = [altKey]
            self.altKey = []
            self.altKey = self.altKey + altKey
        return self
        self.controlKey = None
        if not self.controlKey:
            self.controlKey = kwargs.pop("controlKey", None)
    def setControlKey(self, controlKey = None):
        try:
            super().setControlKey(controlKey)
        except AttributeError:
           pass
        self.controlKey = controlKey
        return self
    def addControlKey(self, controlKey = None):
        if not isinstance(controlKey, list):
            controlKey = [controlKey]
            self.controlKey = []
            self.controlKey = self.controlKey + controlKey
        return self
    def addControlKey(self, controlKey = None):
        if not isinstance(controlKey, list):
            controlKey = [controlKey]
            self.controlKey = []
            self.controlKey = self.controlKey + controlKey
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.keyPress = None
        if not self.keyPress:
            self.keyPress = kwargs.pop("keyPress", None)
    def setKeyPress(self, keyPress = None):
        try:
            super().setKeyPress(keyPress)
        except AttributeError:
           pass
        self.keyPress = keyPress
        return self
    def addKeyPress(self, keyPress = None):
        if not isinstance(keyPress, list):
            keyPress = [keyPress]
            self.keyPress = []
            self.keyPress = self.keyPress + keyPress
        return self
    def addKeyPress(self, keyPress = None):
        if not isinstance(keyPress, list):
            keyPress = [keyPress]
            self.keyPress = []
            self.keyPress = self.keyPress + keyPress
        return self
        self.keyRelease = None
        if not self.keyRelease:
            self.keyRelease = kwargs.pop("keyRelease", None)
    def setKeyRelease(self, keyRelease = None):
        try:
            super().setKeyRelease(keyRelease)
        except AttributeError:
           pass
        self.keyRelease = keyRelease
        return self
    def addKeyRelease(self, keyRelease = None):
        if not isinstance(keyRelease, list):
            keyRelease = [keyRelease]
            self.keyRelease = []
            self.keyRelease = self.keyRelease + keyRelease
        return self
    def addKeyRelease(self, keyRelease = None):
        if not isinstance(keyRelease, list):
            keyRelease = [keyRelease]
            self.keyRelease = []
            self.keyRelease = self.keyRelease + keyRelease
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.shiftKey = None
        if not self.shiftKey:
            self.shiftKey = kwargs.pop("shiftKey", None)
    def setShiftKey(self, shiftKey = None):
        try:
            super().setShiftKey(shiftKey)
        except AttributeError:
           pass
        self.shiftKey = shiftKey
        return self
    def addShiftKey(self, shiftKey = None):
        if not isinstance(shiftKey, list):
            shiftKey = [shiftKey]
            self.shiftKey = []
            self.shiftKey = self.shiftKey + shiftKey
        return self
    def addShiftKey(self, shiftKey = None):
        if not isinstance(shiftKey, list):
            shiftKey = [shiftKey]
            self.shiftKey = []
            self.shiftKey = self.shiftKey + shiftKey
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Layer(X3DLayerNode):
    def __init__(self, **kwargs):
        super(Layer, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickable = True
        if not self.pickable:
            self.pickable = kwargs.pop("pickable", True)
    def setPickable(self, pickable = True):
        try:
            super().setPickable(pickable)
        except AttributeError:
           pass
        self.pickable = pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.viewport = None
        if not self.viewport:
            self.viewport = kwargs.pop("viewport", None)
    def setViewport(self, viewport = None):
        try:
            super().setViewport(viewport)
        except AttributeError:
           pass
        self.viewport = viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LayerSet(X3DNode):
    def __init__(self, **kwargs):
        super(LayerSet, self).__init__(**kwargs)
        self.activeLayer = 0
        if not self.activeLayer:
            self.activeLayer = kwargs.pop("activeLayer", 0)
        if self.activeLayer == None or self.activeLayer  <  0:
            return None
    def setActiveLayer(self, activeLayer = 0):
        if activeLayer == None or activeLayer  <  0:
            return None
        try:
            super().setActiveLayer(activeLayer)
        except AttributeError:
           pass
        self.activeLayer = activeLayer
        return self
    def addActiveLayer(self, activeLayer = 0):
        if activeLayer == None or activeLayer  <  0:
            return None
        if not isinstance(activeLayer, list):
            activeLayer = [activeLayer]
            self.activeLayer = []
            self.activeLayer = self.activeLayer + activeLayer
        return self
    def addActiveLayer(self, activeLayer = 0):
        if activeLayer == None or activeLayer  <  0:
            return None
        if not isinstance(activeLayer, list):
            activeLayer = [activeLayer]
            self.activeLayer = []
            self.activeLayer = self.activeLayer + activeLayer
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.layers = []
        if not self.layers:
            self.layers = kwargs.pop("layers", [])
    def setLayers(self, layers = []):
        try:
            super().setLayers(layers)
        except AttributeError:
           pass
        self.layers = layers
        return self
    def addLayers(self, layers = []):
        if not isinstance(layers, list):
            layers = [layers]
            self.layers = []
            self.layers = self.layers + layers
        return self
    def addLayers(self, layers = []):
        if not isinstance(layers, list):
            layers = [layers]
            self.layers = []
            self.layers = self.layers + layers
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 0
        if not self.order:
            self.order = kwargs.pop("order", 0)
        if self.order == None or len(self.order) <= 0 or min(self.order)  <  0:
            return None
    def setOrder(self, order = 0):
        if order == None or len(order) <= 0 or min(order)  <  0:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 0):
        if order == None or len(order) <= 0 or min(order)  <  0:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 0):
        if order == None or len(order) <= 0 or min(order)  <  0:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Layout(X3DLayoutNode):
    def __init__(self, **kwargs):
        super(Layout, self).__init__(**kwargs)
        self.align = ["CENTER", "CENTER"]
        if not self.align:
            self.align = kwargs.pop("align", ["CENTER", "CENTER"])
        if '"LEFT" "BOTTOM"' == self.align:
            pass
        elif '"LEFT" "CENTER"' == self.align:
            pass
        elif '"LEFT" "TOP"' == self.align:
            pass
        elif '"CENTER" "BOTTOM"' == self.align:
            pass
        elif '"CENTER" "CENTER"' == self.align:
            pass
        elif '"CENTER" "TOP"' == self.align:
            pass
        elif '"RIGHT" "BOTTOM"' == self.align:
            pass
        elif '"RIGHT" "CENTER"' == self.align:
            pass
        elif '"RIGHT" "TOP"' == self.align:
            pass
        else:
            return None
    def setAlign(self, align = ["CENTER", "CENTER"]):
        if '"LEFT" "BOTTOM"' == align:
            pass
        elif '"LEFT" "CENTER"' == align:
            pass
        elif '"LEFT" "TOP"' == align:
            pass
        elif '"CENTER" "BOTTOM"' == align:
            pass
        elif '"CENTER" "CENTER"' == align:
            pass
        elif '"CENTER" "TOP"' == align:
            pass
        elif '"RIGHT" "BOTTOM"' == align:
            pass
        elif '"RIGHT" "CENTER"' == align:
            pass
        elif '"RIGHT" "TOP"' == align:
            pass
        else:
            return None
        try:
            super().setAlign(align)
        except AttributeError:
           pass
        self.align = align
        return self
    def addAlign(self, align = ["CENTER", "CENTER"]):
        if '"LEFT" "BOTTOM"' == align:
            pass
        elif '"LEFT" "CENTER"' == align:
            pass
        elif '"LEFT" "TOP"' == align:
            pass
        elif '"CENTER" "BOTTOM"' == align:
            pass
        elif '"CENTER" "CENTER"' == align:
            pass
        elif '"CENTER" "TOP"' == align:
            pass
        elif '"RIGHT" "BOTTOM"' == align:
            pass
        elif '"RIGHT" "CENTER"' == align:
            pass
        elif '"RIGHT" "TOP"' == align:
            pass
        else:
            return None
        if not isinstance(align, list):
            align = [align]
            self.align = []
            self.align = self.align + align
        return self
    def addAlign(self, align = ["CENTER", "CENTER"]):
        if '"LEFT" "BOTTOM"' == align:
            pass
        elif '"LEFT" "CENTER"' == align:
            pass
        elif '"LEFT" "TOP"' == align:
            pass
        elif '"CENTER" "BOTTOM"' == align:
            pass
        elif '"CENTER" "CENTER"' == align:
            pass
        elif '"CENTER" "TOP"' == align:
            pass
        elif '"RIGHT" "BOTTOM"' == align:
            pass
        elif '"RIGHT" "CENTER"' == align:
            pass
        elif '"RIGHT" "TOP"' == align:
            pass
        else:
            return None
        if not isinstance(align, list):
            align = [align]
            self.align = []
            self.align = self.align + align
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.offset = [0, 0]
        if not self.offset:
            self.offset = kwargs.pop("offset", [0, 0])
    def setOffset(self, offset = [0, 0]):
        try:
            super().setOffset(offset)
        except AttributeError:
           pass
        self.offset = offset
        return self
    def addOffset(self, offset = [0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
    def addOffset(self, offset = [0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
        self.offsetUnits = ["WORLD", "WORLD"]
        if not self.offsetUnits:
            self.offsetUnits = kwargs.pop("offsetUnits", ["WORLD", "WORLD"])
        if '"WORLD" "WORLD"' == self.offsetUnits:
            pass
        elif '"WORLD" "FRACTION"' == self.offsetUnits:
            pass
        elif '"WORLD" "PIXEL"' == self.offsetUnits:
            pass
        elif '"FRACTION" "WORLD"' == self.offsetUnits:
            pass
        elif '"FRACTION" "FRACTION"' == self.offsetUnits:
            pass
        elif '"FRACTION" "PIXEL"' == self.offsetUnits:
            pass
        elif '"PIXEL" "WORLD"' == self.offsetUnits:
            pass
        elif '"PIXEL" "FRACTION"' == self.offsetUnits:
            pass
        elif '"PIXEL" "PIXEL"' == self.offsetUnits:
            pass
        else:
            return None
    def setOffsetUnits(self, offsetUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == offsetUnits:
            pass
        elif '"WORLD" "FRACTION"' == offsetUnits:
            pass
        elif '"WORLD" "PIXEL"' == offsetUnits:
            pass
        elif '"FRACTION" "WORLD"' == offsetUnits:
            pass
        elif '"FRACTION" "FRACTION"' == offsetUnits:
            pass
        elif '"FRACTION" "PIXEL"' == offsetUnits:
            pass
        elif '"PIXEL" "WORLD"' == offsetUnits:
            pass
        elif '"PIXEL" "FRACTION"' == offsetUnits:
            pass
        elif '"PIXEL" "PIXEL"' == offsetUnits:
            pass
        else:
            return None
        try:
            super().setOffsetUnits(offsetUnits)
        except AttributeError:
           pass
        self.offsetUnits = offsetUnits
        return self
    def addOffsetUnits(self, offsetUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == offsetUnits:
            pass
        elif '"WORLD" "FRACTION"' == offsetUnits:
            pass
        elif '"WORLD" "PIXEL"' == offsetUnits:
            pass
        elif '"FRACTION" "WORLD"' == offsetUnits:
            pass
        elif '"FRACTION" "FRACTION"' == offsetUnits:
            pass
        elif '"FRACTION" "PIXEL"' == offsetUnits:
            pass
        elif '"PIXEL" "WORLD"' == offsetUnits:
            pass
        elif '"PIXEL" "FRACTION"' == offsetUnits:
            pass
        elif '"PIXEL" "PIXEL"' == offsetUnits:
            pass
        else:
            return None
        if not isinstance(offsetUnits, list):
            offsetUnits = [offsetUnits]
            self.offsetUnits = []
            self.offsetUnits = self.offsetUnits + offsetUnits
        return self
    def addOffsetUnits(self, offsetUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == offsetUnits:
            pass
        elif '"WORLD" "FRACTION"' == offsetUnits:
            pass
        elif '"WORLD" "PIXEL"' == offsetUnits:
            pass
        elif '"FRACTION" "WORLD"' == offsetUnits:
            pass
        elif '"FRACTION" "FRACTION"' == offsetUnits:
            pass
        elif '"FRACTION" "PIXEL"' == offsetUnits:
            pass
        elif '"PIXEL" "WORLD"' == offsetUnits:
            pass
        elif '"PIXEL" "FRACTION"' == offsetUnits:
            pass
        elif '"PIXEL" "PIXEL"' == offsetUnits:
            pass
        else:
            return None
        if not isinstance(offsetUnits, list):
            offsetUnits = [offsetUnits]
            self.offsetUnits = []
            self.offsetUnits = self.offsetUnits + offsetUnits
        return self
        self.scaleMode = ["NONE", "NONE"]
        if not self.scaleMode:
            self.scaleMode = kwargs.pop("scaleMode", ["NONE", "NONE"])
        if '"NONE" "NONE"' == self.scaleMode:
            pass
        elif '"NONE" "FRACTION"' == self.scaleMode:
            pass
        elif '"NONE" "STRETCH"' == self.scaleMode:
            pass
        elif '"NONE" "PIXEL"' == self.scaleMode:
            pass
        elif '"FRACTION" "NONE"' == self.scaleMode:
            pass
        elif '"FRACTION" "FRACTION"' == self.scaleMode:
            pass
        elif '"FRACTION" "STRETCH"' == self.scaleMode:
            pass
        elif '"FRACTION" "PIXEL"' == self.scaleMode:
            pass
        elif '"STRETCH" "NONE"' == self.scaleMode:
            pass
        elif '"STRETCH" "FRACTION"' == self.scaleMode:
            pass
        elif '"STRETCH" "STRETCH"' == self.scaleMode:
            pass
        elif '"STRETCH" "PIXEL"' == self.scaleMode:
            pass
        elif '"PIXEL" "NONE"' == self.scaleMode:
            pass
        elif '"PIXEL" "FRACTION"' == self.scaleMode:
            pass
        elif '"PIXEL" "STRETCH"' == self.scaleMode:
            pass
        elif '"PIXEL" "PIXEL"' == self.scaleMode:
            pass
        else:
            return None
    def setScaleMode(self, scaleMode = ["NONE", "NONE"]):
        if '"NONE" "NONE"' == scaleMode:
            pass
        elif '"NONE" "FRACTION"' == scaleMode:
            pass
        elif '"NONE" "STRETCH"' == scaleMode:
            pass
        elif '"NONE" "PIXEL"' == scaleMode:
            pass
        elif '"FRACTION" "NONE"' == scaleMode:
            pass
        elif '"FRACTION" "FRACTION"' == scaleMode:
            pass
        elif '"FRACTION" "STRETCH"' == scaleMode:
            pass
        elif '"FRACTION" "PIXEL"' == scaleMode:
            pass
        elif '"STRETCH" "NONE"' == scaleMode:
            pass
        elif '"STRETCH" "FRACTION"' == scaleMode:
            pass
        elif '"STRETCH" "STRETCH"' == scaleMode:
            pass
        elif '"STRETCH" "PIXEL"' == scaleMode:
            pass
        elif '"PIXEL" "NONE"' == scaleMode:
            pass
        elif '"PIXEL" "FRACTION"' == scaleMode:
            pass
        elif '"PIXEL" "STRETCH"' == scaleMode:
            pass
        elif '"PIXEL" "PIXEL"' == scaleMode:
            pass
        else:
            return None
        try:
            super().setScaleMode(scaleMode)
        except AttributeError:
           pass
        self.scaleMode = scaleMode
        return self
    def addScaleMode(self, scaleMode = ["NONE", "NONE"]):
        if '"NONE" "NONE"' == scaleMode:
            pass
        elif '"NONE" "FRACTION"' == scaleMode:
            pass
        elif '"NONE" "STRETCH"' == scaleMode:
            pass
        elif '"NONE" "PIXEL"' == scaleMode:
            pass
        elif '"FRACTION" "NONE"' == scaleMode:
            pass
        elif '"FRACTION" "FRACTION"' == scaleMode:
            pass
        elif '"FRACTION" "STRETCH"' == scaleMode:
            pass
        elif '"FRACTION" "PIXEL"' == scaleMode:
            pass
        elif '"STRETCH" "NONE"' == scaleMode:
            pass
        elif '"STRETCH" "FRACTION"' == scaleMode:
            pass
        elif '"STRETCH" "STRETCH"' == scaleMode:
            pass
        elif '"STRETCH" "PIXEL"' == scaleMode:
            pass
        elif '"PIXEL" "NONE"' == scaleMode:
            pass
        elif '"PIXEL" "FRACTION"' == scaleMode:
            pass
        elif '"PIXEL" "STRETCH"' == scaleMode:
            pass
        elif '"PIXEL" "PIXEL"' == scaleMode:
            pass
        else:
            return None
        if not isinstance(scaleMode, list):
            scaleMode = [scaleMode]
            self.scaleMode = []
            self.scaleMode = self.scaleMode + scaleMode
        return self
    def addScaleMode(self, scaleMode = ["NONE", "NONE"]):
        if '"NONE" "NONE"' == scaleMode:
            pass
        elif '"NONE" "FRACTION"' == scaleMode:
            pass
        elif '"NONE" "STRETCH"' == scaleMode:
            pass
        elif '"NONE" "PIXEL"' == scaleMode:
            pass
        elif '"FRACTION" "NONE"' == scaleMode:
            pass
        elif '"FRACTION" "FRACTION"' == scaleMode:
            pass
        elif '"FRACTION" "STRETCH"' == scaleMode:
            pass
        elif '"FRACTION" "PIXEL"' == scaleMode:
            pass
        elif '"STRETCH" "NONE"' == scaleMode:
            pass
        elif '"STRETCH" "FRACTION"' == scaleMode:
            pass
        elif '"STRETCH" "STRETCH"' == scaleMode:
            pass
        elif '"STRETCH" "PIXEL"' == scaleMode:
            pass
        elif '"PIXEL" "NONE"' == scaleMode:
            pass
        elif '"PIXEL" "FRACTION"' == scaleMode:
            pass
        elif '"PIXEL" "STRETCH"' == scaleMode:
            pass
        elif '"PIXEL" "PIXEL"' == scaleMode:
            pass
        else:
            return None
        if not isinstance(scaleMode, list):
            scaleMode = [scaleMode]
            self.scaleMode = []
            self.scaleMode = self.scaleMode + scaleMode
        return self
        self.size = [1, 1]
        if not self.size:
            self.size = kwargs.pop("size", [1, 1])
    def setSize(self, size = [1, 1]):
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [1, 1]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [1, 1]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.sizeUnits = ["WORLD", "WORLD"]
        if not self.sizeUnits:
            self.sizeUnits = kwargs.pop("sizeUnits", ["WORLD", "WORLD"])
        if '"WORLD" "WORLD"' == self.sizeUnits:
            pass
        elif '"WORLD" "FRACTION"' == self.sizeUnits:
            pass
        elif '"WORLD" "PIXEL"' == self.sizeUnits:
            pass
        elif '"FRACTION" "WORLD"' == self.sizeUnits:
            pass
        elif '"FRACTION" "FRACTION"' == self.sizeUnits:
            pass
        elif '"FRACTION" "PIXEL"' == self.sizeUnits:
            pass
        elif '"PIXEL" "WORLD"' == self.sizeUnits:
            pass
        elif '"PIXEL" "FRACTION"' == self.sizeUnits:
            pass
        elif '"PIXEL" "PIXEL"' == self.sizeUnits:
            pass
        else:
            return None
    def setSizeUnits(self, sizeUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == sizeUnits:
            pass
        elif '"WORLD" "FRACTION"' == sizeUnits:
            pass
        elif '"WORLD" "PIXEL"' == sizeUnits:
            pass
        elif '"FRACTION" "WORLD"' == sizeUnits:
            pass
        elif '"FRACTION" "FRACTION"' == sizeUnits:
            pass
        elif '"FRACTION" "PIXEL"' == sizeUnits:
            pass
        elif '"PIXEL" "WORLD"' == sizeUnits:
            pass
        elif '"PIXEL" "FRACTION"' == sizeUnits:
            pass
        elif '"PIXEL" "PIXEL"' == sizeUnits:
            pass
        else:
            return None
        try:
            super().setSizeUnits(sizeUnits)
        except AttributeError:
           pass
        self.sizeUnits = sizeUnits
        return self
    def addSizeUnits(self, sizeUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == sizeUnits:
            pass
        elif '"WORLD" "FRACTION"' == sizeUnits:
            pass
        elif '"WORLD" "PIXEL"' == sizeUnits:
            pass
        elif '"FRACTION" "WORLD"' == sizeUnits:
            pass
        elif '"FRACTION" "FRACTION"' == sizeUnits:
            pass
        elif '"FRACTION" "PIXEL"' == sizeUnits:
            pass
        elif '"PIXEL" "WORLD"' == sizeUnits:
            pass
        elif '"PIXEL" "FRACTION"' == sizeUnits:
            pass
        elif '"PIXEL" "PIXEL"' == sizeUnits:
            pass
        else:
            return None
        if not isinstance(sizeUnits, list):
            sizeUnits = [sizeUnits]
            self.sizeUnits = []
            self.sizeUnits = self.sizeUnits + sizeUnits
        return self
    def addSizeUnits(self, sizeUnits = ["WORLD", "WORLD"]):
        if '"WORLD" "WORLD"' == sizeUnits:
            pass
        elif '"WORLD" "FRACTION"' == sizeUnits:
            pass
        elif '"WORLD" "PIXEL"' == sizeUnits:
            pass
        elif '"FRACTION" "WORLD"' == sizeUnits:
            pass
        elif '"FRACTION" "FRACTION"' == sizeUnits:
            pass
        elif '"FRACTION" "PIXEL"' == sizeUnits:
            pass
        elif '"PIXEL" "WORLD"' == sizeUnits:
            pass
        elif '"PIXEL" "FRACTION"' == sizeUnits:
            pass
        elif '"PIXEL" "PIXEL"' == sizeUnits:
            pass
        else:
            return None
        if not isinstance(sizeUnits, list):
            sizeUnits = [sizeUnits]
            self.sizeUnits = []
            self.sizeUnits = self.sizeUnits + sizeUnits
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LayoutGroup(X3DGroupingNode, X3DNode):
    def __init__(self, **kwargs):
        super(LayoutGroup, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.layout = None
        if not self.layout:
            self.layout = kwargs.pop("layout", None)
    def setLayout(self, layout = None):
        try:
            super().setLayout(layout)
        except AttributeError:
           pass
        self.layout = layout
        return self
    def addLayout(self, layout = None):
        if not isinstance(layout, list):
            layout = [layout]
            self.layout = []
            self.layout = self.layout + layout
        return self
    def addLayout(self, layout = None):
        if not isinstance(layout, list):
            layout = [layout]
            self.layout = []
            self.layout = self.layout + layout
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.viewport = None
        if not self.viewport:
            self.viewport = kwargs.pop("viewport", None)
    def setViewport(self, viewport = None):
        try:
            super().setViewport(viewport)
        except AttributeError:
           pass
        self.viewport = viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LayoutLayer(X3DLayerNode):
    def __init__(self, **kwargs):
        super(LayoutLayer, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.layout = None
        if not self.layout:
            self.layout = kwargs.pop("layout", None)
    def setLayout(self, layout = None):
        try:
            super().setLayout(layout)
        except AttributeError:
           pass
        self.layout = layout
        return self
    def addLayout(self, layout = None):
        if not isinstance(layout, list):
            layout = [layout]
            self.layout = []
            self.layout = self.layout + layout
        return self
    def addLayout(self, layout = None):
        if not isinstance(layout, list):
            layout = [layout]
            self.layout = []
            self.layout = self.layout + layout
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickable = True
        if not self.pickable:
            self.pickable = kwargs.pop("pickable", True)
    def setPickable(self, pickable = True):
        try:
            super().setPickable(pickable)
        except AttributeError:
           pass
        self.pickable = pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.viewport = None
        if not self.viewport:
            self.viewport = kwargs.pop("viewport", None)
    def setViewport(self, viewport = None):
        try:
            super().setViewport(viewport)
        except AttributeError:
           pass
        self.viewport = viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
    def addViewport(self, viewport = None):
        if not isinstance(viewport, list):
            viewport = [viewport]
            self.viewport = []
            self.viewport = self.viewport + viewport
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LinePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super(LinePickSensor, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersectionType = "BOUNDS"
        if not self.intersectionType:
            self.intersectionType = kwargs.pop("intersectionType", "BOUNDS")
    def setIntersectionType(self, intersectionType = "BOUNDS"):
        try:
            super().setIntersectionType(intersectionType)
        except AttributeError:
           pass
        self.intersectionType = intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.matchCriterion = "MATCH_ANY"
        if not self.matchCriterion:
            self.matchCriterion = kwargs.pop("matchCriterion", "MATCH_ANY")
        if 'MATCH_ANY' == self.matchCriterion:
            pass
        elif 'MATCH_EVERY' == self.matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == self.matchCriterion:
            pass
        else:
            return None
    def setMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        try:
            super().setMatchCriterion(matchCriterion)
        except AttributeError:
           pass
        self.matchCriterion = matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickedGeometry = []
        if not self.pickedGeometry:
            self.pickedGeometry = kwargs.pop("pickedGeometry", [])
    def setPickedGeometry(self, pickedGeometry = []):
        try:
            super().setPickedGeometry(pickedGeometry)
        except AttributeError:
           pass
        self.pickedGeometry = pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
        self.pickedNormal = []
        if not self.pickedNormal:
            self.pickedNormal = kwargs.pop("pickedNormal", [])
    def setPickedNormal(self, pickedNormal = []):
        try:
            super().setPickedNormal(pickedNormal)
        except AttributeError:
           pass
        self.pickedNormal = pickedNormal
        return self
    def addPickedNormal(self, pickedNormal = []):
        if not isinstance(pickedNormal, list):
            pickedNormal = [pickedNormal]
            self.pickedNormal = []
            self.pickedNormal = self.pickedNormal + pickedNormal
        return self
    def addPickedNormal(self, pickedNormal = []):
        if not isinstance(pickedNormal, list):
            pickedNormal = [pickedNormal]
            self.pickedNormal = []
            self.pickedNormal = self.pickedNormal + pickedNormal
        return self
        self.pickedPoint = []
        if not self.pickedPoint:
            self.pickedPoint = kwargs.pop("pickedPoint", [])
    def setPickedPoint(self, pickedPoint = []):
        try:
            super().setPickedPoint(pickedPoint)
        except AttributeError:
           pass
        self.pickedPoint = pickedPoint
        return self
    def addPickedPoint(self, pickedPoint = []):
        if not isinstance(pickedPoint, list):
            pickedPoint = [pickedPoint]
            self.pickedPoint = []
            self.pickedPoint = self.pickedPoint + pickedPoint
        return self
    def addPickedPoint(self, pickedPoint = []):
        if not isinstance(pickedPoint, list):
            pickedPoint = [pickedPoint]
            self.pickedPoint = []
            self.pickedPoint = self.pickedPoint + pickedPoint
        return self
        self.pickedTextureCoordinate = []
        if not self.pickedTextureCoordinate:
            self.pickedTextureCoordinate = kwargs.pop("pickedTextureCoordinate", [])
    def setPickedTextureCoordinate(self, pickedTextureCoordinate = []):
        try:
            super().setPickedTextureCoordinate(pickedTextureCoordinate)
        except AttributeError:
           pass
        self.pickedTextureCoordinate = pickedTextureCoordinate
        return self
    def addPickedTextureCoordinate(self, pickedTextureCoordinate = []):
        if not isinstance(pickedTextureCoordinate, list):
            pickedTextureCoordinate = [pickedTextureCoordinate]
            self.pickedTextureCoordinate = []
            self.pickedTextureCoordinate = self.pickedTextureCoordinate + pickedTextureCoordinate
        return self
    def addPickedTextureCoordinate(self, pickedTextureCoordinate = []):
        if not isinstance(pickedTextureCoordinate, list):
            pickedTextureCoordinate = [pickedTextureCoordinate]
            self.pickedTextureCoordinate = []
            self.pickedTextureCoordinate = self.pickedTextureCoordinate + pickedTextureCoordinate
        return self
        self.pickingGeometry = None
        if not self.pickingGeometry:
            self.pickingGeometry = kwargs.pop("pickingGeometry", None)
    def setPickingGeometry(self, pickingGeometry = None):
        try:
            super().setPickingGeometry(pickingGeometry)
        except AttributeError:
           pass
        self.pickingGeometry = pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
        self.pickTarget = []
        if not self.pickTarget:
            self.pickTarget = kwargs.pop("pickTarget", [])
    def setPickTarget(self, pickTarget = []):
        try:
            super().setPickTarget(pickTarget)
        except AttributeError:
           pass
        self.pickTarget = pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
        self.sortOrder = "CLOSEST"
        if not self.sortOrder:
            self.sortOrder = kwargs.pop("sortOrder", "CLOSEST")
    def setSortOrder(self, sortOrder = "CLOSEST"):
        try:
            super().setSortOrder(sortOrder)
        except AttributeError:
           pass
        self.sortOrder = sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LineProperties(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(LineProperties, self).__init__(**kwargs)
        self.applied = True
        if not self.applied:
            self.applied = kwargs.pop("applied", True)
    def setApplied(self, applied = True):
        try:
            super().setApplied(applied)
        except AttributeError:
           pass
        self.applied = applied
        return self
    def addApplied(self, applied = True):
        if not isinstance(applied, list):
            applied = [applied]
            self.applied = []
            self.applied = self.applied + applied
        return self
    def addApplied(self, applied = True):
        if not isinstance(applied, list):
            applied = [applied]
            self.applied = []
            self.applied = self.applied + applied
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.linetype = 1
        if not self.linetype:
            self.linetype = kwargs.pop("linetype", 1)
        if self.linetype == None or self.linetype  <  1:
            return None
    def setLinetype(self, linetype = 1):
        if linetype == None or linetype  <  1:
            return None
        try:
            super().setLinetype(linetype)
        except AttributeError:
           pass
        self.linetype = linetype
        return self
    def addLinetype(self, linetype = 1):
        if linetype == None or linetype  <  1:
            return None
        if not isinstance(linetype, list):
            linetype = [linetype]
            self.linetype = []
            self.linetype = self.linetype + linetype
        return self
    def addLinetype(self, linetype = 1):
        if linetype == None or linetype  <  1:
            return None
        if not isinstance(linetype, list):
            linetype = [linetype]
            self.linetype = []
            self.linetype = self.linetype + linetype
        return self
        self.linewidthScaleFactor = 0
        if not self.linewidthScaleFactor:
            self.linewidthScaleFactor = kwargs.pop("linewidthScaleFactor", 0)
    def setLinewidthScaleFactor(self, linewidthScaleFactor = 0):
        try:
            super().setLinewidthScaleFactor(linewidthScaleFactor)
        except AttributeError:
           pass
        self.linewidthScaleFactor = linewidthScaleFactor
        return self
    def addLinewidthScaleFactor(self, linewidthScaleFactor = 0):
        if not isinstance(linewidthScaleFactor, list):
            linewidthScaleFactor = [linewidthScaleFactor]
            self.linewidthScaleFactor = []
            self.linewidthScaleFactor = self.linewidthScaleFactor + linewidthScaleFactor
        return self
    def addLinewidthScaleFactor(self, linewidthScaleFactor = 0):
        if not isinstance(linewidthScaleFactor, list):
            linewidthScaleFactor = [linewidthScaleFactor]
            self.linewidthScaleFactor = []
            self.linewidthScaleFactor = self.linewidthScaleFactor + linewidthScaleFactor
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LineSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(LineSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.vertexCount = []
        if not self.vertexCount:
            self.vertexCount = kwargs.pop("vertexCount", [])
        if self.vertexCount == None or len(self.vertexCount) <= 0 or min(self.vertexCount)  <  2:
            return None
    def setVertexCount(self, vertexCount = []):
        if vertexCount == None or len(vertexCount) <= 0 or min(vertexCount)  <  2:
            return None
        try:
            super().setVertexCount(vertexCount)
        except AttributeError:
           pass
        self.vertexCount = vertexCount
        return self
    def addVertexCount(self, vertexCount = []):
        if vertexCount == None or len(vertexCount) <= 0 or min(vertexCount)  <  2:
            return None
        if not isinstance(vertexCount, list):
            vertexCount = [vertexCount]
            self.vertexCount = []
            self.vertexCount = self.vertexCount + vertexCount
        return self
    def addVertexCount(self, vertexCount = []):
        if vertexCount == None or len(vertexCount) <= 0 or min(vertexCount)  <  2:
            return None
        if not isinstance(vertexCount, list):
            vertexCount = [vertexCount]
            self.vertexCount = []
            self.vertexCount = self.vertexCount + vertexCount
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LoadSensor(X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super(LoadSensor, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Loaded = None
        if not self.Loaded:
            self.Loaded = kwargs.pop("Loaded", None)
    def setIsLoaded(self, Loaded = None):
        try:
            super().setIsLoaded(Loaded)
        except AttributeError:
           pass
        self.Loaded = Loaded
        return self
    def addIsLoaded(self, Loaded = None):
        if not isinstance(Loaded, list):
            Loaded = [Loaded]
            self.Loaded = []
            self.Loaded = self.Loaded + Loaded
        return self
    def addIsLoaded(self, Loaded = None):
        if not isinstance(Loaded, list):
            Loaded = [Loaded]
            self.Loaded = []
            self.Loaded = self.Loaded + Loaded
        return self
        self.loadTime = None
        if not self.loadTime:
            self.loadTime = kwargs.pop("loadTime", None)
    def setLoadTime(self, loadTime = None):
        try:
            super().setLoadTime(loadTime)
        except AttributeError:
           pass
        self.loadTime = loadTime
        return self
    def addLoadTime(self, loadTime = None):
        if not isinstance(loadTime, list):
            loadTime = [loadTime]
            self.loadTime = []
            self.loadTime = self.loadTime + loadTime
        return self
    def addLoadTime(self, loadTime = None):
        if not isinstance(loadTime, list):
            loadTime = [loadTime]
            self.loadTime = []
            self.loadTime = self.loadTime + loadTime
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.progress = None
        if not self.progress:
            self.progress = kwargs.pop("progress", None)
    def setProgress(self, progress = None):
        try:
            super().setProgress(progress)
        except AttributeError:
           pass
        self.progress = progress
        return self
    def addProgress(self, progress = None):
        if not isinstance(progress, list):
            progress = [progress]
            self.progress = []
            self.progress = self.progress + progress
        return self
    def addProgress(self, progress = None):
        if not isinstance(progress, list):
            progress = [progress]
            self.progress = []
            self.progress = self.progress + progress
        return self
        self.timeOut = 0
        if not self.timeOut:
            self.timeOut = kwargs.pop("timeOut", 0)
        if self.timeOut == None or self.timeOut  <  0:
            return None
    def setTimeOut(self, timeOut = 0):
        if timeOut == None or timeOut  <  0:
            return None
        try:
            super().setTimeOut(timeOut)
        except AttributeError:
           pass
        self.timeOut = timeOut
        return self
    def addTimeOut(self, timeOut = 0):
        if timeOut == None or timeOut  <  0:
            return None
        if not isinstance(timeOut, list):
            timeOut = [timeOut]
            self.timeOut = []
            self.timeOut = self.timeOut + timeOut
        return self
    def addTimeOut(self, timeOut = 0):
        if timeOut == None or timeOut  <  0:
            return None
        if not isinstance(timeOut, list):
            timeOut = [timeOut]
            self.timeOut = []
            self.timeOut = self.timeOut + timeOut
        return self
        self.watchList = []
        if not self.watchList:
            self.watchList = kwargs.pop("watchList", [])
    def setWatchList(self, watchList = []):
        try:
            super().setWatchList(watchList)
        except AttributeError:
           pass
        self.watchList = watchList
        return self
    def addWatchList(self, watchList = []):
        if not isinstance(watchList, list):
            watchList = [watchList]
            self.watchList = []
            self.watchList = self.watchList + watchList
        return self
    def addWatchList(self, watchList = []):
        if not isinstance(watchList, list):
            watchList = [watchList]
            self.watchList = []
            self.watchList = self.watchList + watchList
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LocalFog(X3DFogObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(LocalFog, self).__init__(**kwargs)
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.fogType = "LINEAR"
        if not self.fogType:
            self.fogType = kwargs.pop("fogType", "LINEAR")
        if 'LINEAR' == self.fogType:
            pass
        elif 'EXPONENTIAL' == self.fogType:
            pass
        else:
            return None
    def setFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        try:
            super().setFogType(fogType)
        except AttributeError:
           pass
        self.fogType = fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
    def addFogType(self, fogType = "LINEAR"):
        if 'LINEAR' == fogType:
            pass
        elif 'EXPONENTIAL' == fogType:
            pass
        else:
            return None
        if not isinstance(fogType, list):
            fogType = [fogType]
            self.fogType = []
            self.fogType = self.fogType + fogType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visibilityRange = 0
        if not self.visibilityRange:
            self.visibilityRange = kwargs.pop("visibilityRange", 0)
        if self.visibilityRange == None or self.visibilityRange  <  0:
            return None
    def setVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        try:
            super().setVisibilityRange(visibilityRange)
        except AttributeError:
           pass
        self.visibilityRange = visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
    def addVisibilityRange(self, visibilityRange = 0):
        if visibilityRange == None or visibilityRange  <  0:
            return None
        if not isinstance(visibilityRange, list):
            visibilityRange = [visibilityRange]
            self.visibilityRange = []
            self.visibilityRange = self.visibilityRange + visibilityRange
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class LOD(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(LOD, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.forceTransitions = False
        if not self.forceTransitions:
            self.forceTransitions = kwargs.pop("forceTransitions", False)
    def setForceTransitions(self, forceTransitions = False):
        try:
            super().setForceTransitions(forceTransitions)
        except AttributeError:
           pass
        self.forceTransitions = forceTransitions
        return self
    def addForceTransitions(self, forceTransitions = False):
        if not isinstance(forceTransitions, list):
            forceTransitions = [forceTransitions]
            self.forceTransitions = []
            self.forceTransitions = self.forceTransitions + forceTransitions
        return self
    def addForceTransitions(self, forceTransitions = False):
        if not isinstance(forceTransitions, list):
            forceTransitions = [forceTransitions]
            self.forceTransitions = []
            self.forceTransitions = self.forceTransitions + forceTransitions
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.level_changed = None
        if not self.level_changed:
            self.level_changed = kwargs.pop("level_changed", None)
        if self.level_changed == None or self.level_changed  <  0:
            return None
    def setlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        try:
            super().setlevel_changed(level_changed)
        except AttributeError:
           pass
        self.level_changed = level_changed
        return self
    def addlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        if not isinstance(level_changed, list):
            level_changed = [level_changed]
            self.level_changed = []
            self.level_changed = self.level_changed + level_changed
        return self
    def addSetlevel_changed(self, level_changed = None):
        if level_changed == None or level_changed  <  0:
            return None
        if not isinstance(level_changed, list):
            level_changed = [level_changed]
            self.level_changed = []
            self.level_changed = self.level_changed + level_changed
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.range = []
        if not self.range:
            self.range = kwargs.pop("range", [])
    def setRange(self, range = []):
        try:
            super().setRange(range)
        except AttributeError:
           pass
        self.range = range
        return self
    def addRange(self, range = []):
        if not isinstance(range, list):
            range = [range]
            self.range = []
            self.range = self.range + range
        return self
    def addRange(self, range = []):
        if not isinstance(range, list):
            range = [range]
            self.range = []
            self.range = self.range + range
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Material(X3DMaterialNode):
    def __init__(self, **kwargs):
        super(Material, self).__init__(**kwargs)
        self.ambientIntensity = 0.2
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0.2)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.diffuseColor = [0.8, 0.8, 0.8]
        if not self.diffuseColor:
            self.diffuseColor = kwargs.pop("diffuseColor", [0.8, 0.8, 0.8])
        if self.diffuseColor == None or len(self.diffuseColor) <= 0 or min(self.diffuseColor)  <  0:
            return None
        if self.diffuseColor == None or len(self.diffuseColor) <= 0 or max(self.diffuseColor)  >  1:
            return None
    def setDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        try:
            super().setDiffuseColor(diffuseColor)
        except AttributeError:
           pass
        self.diffuseColor = diffuseColor
        return self
    def addDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        if not isinstance(diffuseColor, list):
            diffuseColor = [diffuseColor]
            self.diffuseColor = []
            self.diffuseColor = self.diffuseColor + diffuseColor
        return self
    def addDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        if not isinstance(diffuseColor, list):
            diffuseColor = [diffuseColor]
            self.diffuseColor = []
            self.diffuseColor = self.diffuseColor + diffuseColor
        return self
        self.emissiveColor = [0, 0, 0]
        if not self.emissiveColor:
            self.emissiveColor = kwargs.pop("emissiveColor", [0, 0, 0])
        if self.emissiveColor == None or len(self.emissiveColor) <= 0 or min(self.emissiveColor)  <  0:
            return None
        if self.emissiveColor == None or len(self.emissiveColor) <= 0 or max(self.emissiveColor)  >  1:
            return None
    def setEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        try:
            super().setEmissiveColor(emissiveColor)
        except AttributeError:
           pass
        self.emissiveColor = emissiveColor
        return self
    def addEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        if not isinstance(emissiveColor, list):
            emissiveColor = [emissiveColor]
            self.emissiveColor = []
            self.emissiveColor = self.emissiveColor + emissiveColor
        return self
    def addEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        if not isinstance(emissiveColor, list):
            emissiveColor = [emissiveColor]
            self.emissiveColor = []
            self.emissiveColor = self.emissiveColor + emissiveColor
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.shininess = 0.2
        if not self.shininess:
            self.shininess = kwargs.pop("shininess", 0.2)
        if self.shininess == None or self.shininess  <  0:
            return None
        if self.shininess == None or self.shininess  >  1:
            return None
    def setShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        try:
            super().setShininess(shininess)
        except AttributeError:
           pass
        self.shininess = shininess
        return self
    def addShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        if not isinstance(shininess, list):
            shininess = [shininess]
            self.shininess = []
            self.shininess = self.shininess + shininess
        return self
    def addShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        if not isinstance(shininess, list):
            shininess = [shininess]
            self.shininess = []
            self.shininess = self.shininess + shininess
        return self
        self.specularColor = [0, 0, 0]
        if not self.specularColor:
            self.specularColor = kwargs.pop("specularColor", [0, 0, 0])
        if self.specularColor == None or len(self.specularColor) <= 0 or min(self.specularColor)  <  0:
            return None
        if self.specularColor == None or len(self.specularColor) <= 0 or max(self.specularColor)  >  1:
            return None
    def setSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        try:
            super().setSpecularColor(specularColor)
        except AttributeError:
           pass
        self.specularColor = specularColor
        return self
    def addSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        if not isinstance(specularColor, list):
            specularColor = [specularColor]
            self.specularColor = []
            self.specularColor = self.specularColor + specularColor
        return self
    def addSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        if not isinstance(specularColor, list):
            specularColor = [specularColor]
            self.specularColor = []
            self.specularColor = self.specularColor + specularColor
        return self
        self.transparency = 0
        if not self.transparency:
            self.transparency = kwargs.pop("transparency", 0)
        if self.transparency == None or self.transparency  <  0:
            return None
        if self.transparency == None or self.transparency  >  1:
            return None
    def setTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        try:
            super().setTransparency(transparency)
        except AttributeError:
           pass
        self.transparency = transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class Matrix3VertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super(Matrix3VertexAttribute, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Matrix4VertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super(Matrix4VertexAttribute, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataBoolean(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataBoolean, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataDouble(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataDouble, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataFloat(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataFloat, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataInteger(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataInteger, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataSet(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataSet, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MetadataString(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super(MetadataString, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.reference = None
        if not self.reference:
            self.reference = kwargs.pop("reference", None)
    def setReference(self, reference = None):
        try:
            super().setReference(reference)
        except AttributeError:
           pass
        self.reference = reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
    def addReference(self, reference = None):
        if not isinstance(reference, list):
            reference = [reference]
            self.reference = []
            self.reference = self.reference + reference
        return self
        self.value = []
        if not self.value:
            self.value = kwargs.pop("value", [])
    def setValue(self, value = []):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = []):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MotorJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(MotorJoint, self).__init__(**kwargs)
        self.autoCalc = False
        if not self.autoCalc:
            self.autoCalc = kwargs.pop("autoCalc", False)
    def setAutoCalc(self, autoCalc = False):
        try:
            super().setAutoCalc(autoCalc)
        except AttributeError:
           pass
        self.autoCalc = autoCalc
        return self
    def addAutoCalc(self, autoCalc = False):
        if not isinstance(autoCalc, list):
            autoCalc = [autoCalc]
            self.autoCalc = []
            self.autoCalc = self.autoCalc + autoCalc
        return self
    def addAutoCalc(self, autoCalc = False):
        if not isinstance(autoCalc, list):
            autoCalc = [autoCalc]
            self.autoCalc = []
            self.autoCalc = self.autoCalc + autoCalc
        return self
        self.axis1Angle = 0
        if not self.axis1Angle:
            self.axis1Angle = kwargs.pop("axis1Angle", 0)
    def setAxis1Angle(self, axis1Angle = 0):
        try:
            super().setAxis1Angle(axis1Angle)
        except AttributeError:
           pass
        self.axis1Angle = axis1Angle
        return self
    def addAxis1Angle(self, axis1Angle = 0):
        if not isinstance(axis1Angle, list):
            axis1Angle = [axis1Angle]
            self.axis1Angle = []
            self.axis1Angle = self.axis1Angle + axis1Angle
        return self
    def addAxis1Angle(self, axis1Angle = 0):
        if not isinstance(axis1Angle, list):
            axis1Angle = [axis1Angle]
            self.axis1Angle = []
            self.axis1Angle = self.axis1Angle + axis1Angle
        return self
        self.axis1Torque = 0
        if not self.axis1Torque:
            self.axis1Torque = kwargs.pop("axis1Torque", 0)
    def setAxis1Torque(self, axis1Torque = 0):
        try:
            super().setAxis1Torque(axis1Torque)
        except AttributeError:
           pass
        self.axis1Torque = axis1Torque
        return self
    def addAxis1Torque(self, axis1Torque = 0):
        if not isinstance(axis1Torque, list):
            axis1Torque = [axis1Torque]
            self.axis1Torque = []
            self.axis1Torque = self.axis1Torque + axis1Torque
        return self
    def addAxis1Torque(self, axis1Torque = 0):
        if not isinstance(axis1Torque, list):
            axis1Torque = [axis1Torque]
            self.axis1Torque = []
            self.axis1Torque = self.axis1Torque + axis1Torque
        return self
        self.axis2Angle = 0
        if not self.axis2Angle:
            self.axis2Angle = kwargs.pop("axis2Angle", 0)
    def setAxis2Angle(self, axis2Angle = 0):
        try:
            super().setAxis2Angle(axis2Angle)
        except AttributeError:
           pass
        self.axis2Angle = axis2Angle
        return self
    def addAxis2Angle(self, axis2Angle = 0):
        if not isinstance(axis2Angle, list):
            axis2Angle = [axis2Angle]
            self.axis2Angle = []
            self.axis2Angle = self.axis2Angle + axis2Angle
        return self
    def addAxis2Angle(self, axis2Angle = 0):
        if not isinstance(axis2Angle, list):
            axis2Angle = [axis2Angle]
            self.axis2Angle = []
            self.axis2Angle = self.axis2Angle + axis2Angle
        return self
        self.axis2Torque = 0
        if not self.axis2Torque:
            self.axis2Torque = kwargs.pop("axis2Torque", 0)
    def setAxis2Torque(self, axis2Torque = 0):
        try:
            super().setAxis2Torque(axis2Torque)
        except AttributeError:
           pass
        self.axis2Torque = axis2Torque
        return self
    def addAxis2Torque(self, axis2Torque = 0):
        if not isinstance(axis2Torque, list):
            axis2Torque = [axis2Torque]
            self.axis2Torque = []
            self.axis2Torque = self.axis2Torque + axis2Torque
        return self
    def addAxis2Torque(self, axis2Torque = 0):
        if not isinstance(axis2Torque, list):
            axis2Torque = [axis2Torque]
            self.axis2Torque = []
            self.axis2Torque = self.axis2Torque + axis2Torque
        return self
        self.axis3Angle = 0
        if not self.axis3Angle:
            self.axis3Angle = kwargs.pop("axis3Angle", 0)
    def setAxis3Angle(self, axis3Angle = 0):
        try:
            super().setAxis3Angle(axis3Angle)
        except AttributeError:
           pass
        self.axis3Angle = axis3Angle
        return self
    def addAxis3Angle(self, axis3Angle = 0):
        if not isinstance(axis3Angle, list):
            axis3Angle = [axis3Angle]
            self.axis3Angle = []
            self.axis3Angle = self.axis3Angle + axis3Angle
        return self
    def addAxis3Angle(self, axis3Angle = 0):
        if not isinstance(axis3Angle, list):
            axis3Angle = [axis3Angle]
            self.axis3Angle = []
            self.axis3Angle = self.axis3Angle + axis3Angle
        return self
        self.axis3Torque = 0
        if not self.axis3Torque:
            self.axis3Torque = kwargs.pop("axis3Torque", 0)
    def setAxis3Torque(self, axis3Torque = 0):
        try:
            super().setAxis3Torque(axis3Torque)
        except AttributeError:
           pass
        self.axis3Torque = axis3Torque
        return self
    def addAxis3Torque(self, axis3Torque = 0):
        if not isinstance(axis3Torque, list):
            axis3Torque = [axis3Torque]
            self.axis3Torque = []
            self.axis3Torque = self.axis3Torque + axis3Torque
        return self
    def addAxis3Torque(self, axis3Torque = 0):
        if not isinstance(axis3Torque, list):
            axis3Torque = [axis3Torque]
            self.axis3Torque = []
            self.axis3Torque = self.axis3Torque + axis3Torque
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.enabledAxes = 1
        if not self.enabledAxes:
            self.enabledAxes = kwargs.pop("enabledAxes", 1)
        if self.enabledAxes == None or self.enabledAxes  <  0:
            return None
        if self.enabledAxes == None or self.enabledAxes  >  3:
            return None
    def setEnabledAxes(self, enabledAxes = 1):
        if enabledAxes == None or enabledAxes  <  0:
            return None
        if enabledAxes == None or enabledAxes  >  3:
            return None
        try:
            super().setEnabledAxes(enabledAxes)
        except AttributeError:
           pass
        self.enabledAxes = enabledAxes
        return self
    def addEnabledAxes(self, enabledAxes = 1):
        if enabledAxes == None or enabledAxes  <  0:
            return None
        if enabledAxes == None or enabledAxes  >  3:
            return None
        if not isinstance(enabledAxes, list):
            enabledAxes = [enabledAxes]
            self.enabledAxes = []
            self.enabledAxes = self.enabledAxes + enabledAxes
        return self
    def addEnabledAxes(self, enabledAxes = 1):
        if enabledAxes == None or enabledAxes  <  0:
            return None
        if enabledAxes == None or enabledAxes  >  3:
            return None
        if not isinstance(enabledAxes, list):
            enabledAxes = [enabledAxes]
            self.enabledAxes = []
            self.enabledAxes = self.enabledAxes + enabledAxes
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.motor1Angle = None
        if not self.motor1Angle:
            self.motor1Angle = kwargs.pop("motor1Angle", None)
    def setMotor1Angle(self, motor1Angle = None):
        try:
            super().setMotor1Angle(motor1Angle)
        except AttributeError:
           pass
        self.motor1Angle = motor1Angle
        return self
    def addMotor1Angle(self, motor1Angle = None):
        if not isinstance(motor1Angle, list):
            motor1Angle = [motor1Angle]
            self.motor1Angle = []
            self.motor1Angle = self.motor1Angle + motor1Angle
        return self
    def addMotor1Angle(self, motor1Angle = None):
        if not isinstance(motor1Angle, list):
            motor1Angle = [motor1Angle]
            self.motor1Angle = []
            self.motor1Angle = self.motor1Angle + motor1Angle
        return self
        self.motor1AngleRate = None
        if not self.motor1AngleRate:
            self.motor1AngleRate = kwargs.pop("motor1AngleRate", None)
    def setMotor1AngleRate(self, motor1AngleRate = None):
        try:
            super().setMotor1AngleRate(motor1AngleRate)
        except AttributeError:
           pass
        self.motor1AngleRate = motor1AngleRate
        return self
    def addMotor1AngleRate(self, motor1AngleRate = None):
        if not isinstance(motor1AngleRate, list):
            motor1AngleRate = [motor1AngleRate]
            self.motor1AngleRate = []
            self.motor1AngleRate = self.motor1AngleRate + motor1AngleRate
        return self
    def addMotor1AngleRate(self, motor1AngleRate = None):
        if not isinstance(motor1AngleRate, list):
            motor1AngleRate = [motor1AngleRate]
            self.motor1AngleRate = []
            self.motor1AngleRate = self.motor1AngleRate + motor1AngleRate
        return self
        self.motor1Axis = [0, 0, 0]
        if not self.motor1Axis:
            self.motor1Axis = kwargs.pop("motor1Axis", [0, 0, 0])
    def setMotor1Axis(self, motor1Axis = [0, 0, 0]):
        try:
            super().setMotor1Axis(motor1Axis)
        except AttributeError:
           pass
        self.motor1Axis = motor1Axis
        return self
    def addMotor1Axis(self, motor1Axis = [0, 0, 0]):
        if not isinstance(motor1Axis, list):
            motor1Axis = [motor1Axis]
            self.motor1Axis = []
            self.motor1Axis = self.motor1Axis + motor1Axis
        return self
    def addMotor1Axis(self, motor1Axis = [0, 0, 0]):
        if not isinstance(motor1Axis, list):
            motor1Axis = [motor1Axis]
            self.motor1Axis = []
            self.motor1Axis = self.motor1Axis + motor1Axis
        return self
        self.motor2Angle = None
        if not self.motor2Angle:
            self.motor2Angle = kwargs.pop("motor2Angle", None)
    def setMotor2Angle(self, motor2Angle = None):
        try:
            super().setMotor2Angle(motor2Angle)
        except AttributeError:
           pass
        self.motor2Angle = motor2Angle
        return self
    def addMotor2Angle(self, motor2Angle = None):
        if not isinstance(motor2Angle, list):
            motor2Angle = [motor2Angle]
            self.motor2Angle = []
            self.motor2Angle = self.motor2Angle + motor2Angle
        return self
    def addMotor2Angle(self, motor2Angle = None):
        if not isinstance(motor2Angle, list):
            motor2Angle = [motor2Angle]
            self.motor2Angle = []
            self.motor2Angle = self.motor2Angle + motor2Angle
        return self
        self.motor2AngleRate = None
        if not self.motor2AngleRate:
            self.motor2AngleRate = kwargs.pop("motor2AngleRate", None)
    def setMotor2AngleRate(self, motor2AngleRate = None):
        try:
            super().setMotor2AngleRate(motor2AngleRate)
        except AttributeError:
           pass
        self.motor2AngleRate = motor2AngleRate
        return self
    def addMotor2AngleRate(self, motor2AngleRate = None):
        if not isinstance(motor2AngleRate, list):
            motor2AngleRate = [motor2AngleRate]
            self.motor2AngleRate = []
            self.motor2AngleRate = self.motor2AngleRate + motor2AngleRate
        return self
    def addMotor2AngleRate(self, motor2AngleRate = None):
        if not isinstance(motor2AngleRate, list):
            motor2AngleRate = [motor2AngleRate]
            self.motor2AngleRate = []
            self.motor2AngleRate = self.motor2AngleRate + motor2AngleRate
        return self
        self.motor2Axis = [0, 0, 0]
        if not self.motor2Axis:
            self.motor2Axis = kwargs.pop("motor2Axis", [0, 0, 0])
    def setMotor2Axis(self, motor2Axis = [0, 0, 0]):
        try:
            super().setMotor2Axis(motor2Axis)
        except AttributeError:
           pass
        self.motor2Axis = motor2Axis
        return self
    def addMotor2Axis(self, motor2Axis = [0, 0, 0]):
        if not isinstance(motor2Axis, list):
            motor2Axis = [motor2Axis]
            self.motor2Axis = []
            self.motor2Axis = self.motor2Axis + motor2Axis
        return self
    def addMotor2Axis(self, motor2Axis = [0, 0, 0]):
        if not isinstance(motor2Axis, list):
            motor2Axis = [motor2Axis]
            self.motor2Axis = []
            self.motor2Axis = self.motor2Axis + motor2Axis
        return self
        self.motor3Angle = None
        if not self.motor3Angle:
            self.motor3Angle = kwargs.pop("motor3Angle", None)
    def setMotor3Angle(self, motor3Angle = None):
        try:
            super().setMotor3Angle(motor3Angle)
        except AttributeError:
           pass
        self.motor3Angle = motor3Angle
        return self
    def addMotor3Angle(self, motor3Angle = None):
        if not isinstance(motor3Angle, list):
            motor3Angle = [motor3Angle]
            self.motor3Angle = []
            self.motor3Angle = self.motor3Angle + motor3Angle
        return self
    def addMotor3Angle(self, motor3Angle = None):
        if not isinstance(motor3Angle, list):
            motor3Angle = [motor3Angle]
            self.motor3Angle = []
            self.motor3Angle = self.motor3Angle + motor3Angle
        return self
        self.motor3AngleRate = None
        if not self.motor3AngleRate:
            self.motor3AngleRate = kwargs.pop("motor3AngleRate", None)
    def setMotor3AngleRate(self, motor3AngleRate = None):
        try:
            super().setMotor3AngleRate(motor3AngleRate)
        except AttributeError:
           pass
        self.motor3AngleRate = motor3AngleRate
        return self
    def addMotor3AngleRate(self, motor3AngleRate = None):
        if not isinstance(motor3AngleRate, list):
            motor3AngleRate = [motor3AngleRate]
            self.motor3AngleRate = []
            self.motor3AngleRate = self.motor3AngleRate + motor3AngleRate
        return self
    def addMotor3AngleRate(self, motor3AngleRate = None):
        if not isinstance(motor3AngleRate, list):
            motor3AngleRate = [motor3AngleRate]
            self.motor3AngleRate = []
            self.motor3AngleRate = self.motor3AngleRate + motor3AngleRate
        return self
        self.motor3Axis = [0, 0, 0]
        if not self.motor3Axis:
            self.motor3Axis = kwargs.pop("motor3Axis", [0, 0, 0])
    def setMotor3Axis(self, motor3Axis = [0, 0, 0]):
        try:
            super().setMotor3Axis(motor3Axis)
        except AttributeError:
           pass
        self.motor3Axis = motor3Axis
        return self
    def addMotor3Axis(self, motor3Axis = [0, 0, 0]):
        if not isinstance(motor3Axis, list):
            motor3Axis = [motor3Axis]
            self.motor3Axis = []
            self.motor3Axis = self.motor3Axis + motor3Axis
        return self
    def addMotor3Axis(self, motor3Axis = [0, 0, 0]):
        if not isinstance(motor3Axis, list):
            motor3Axis = [motor3Axis]
            self.motor3Axis = []
            self.motor3Axis = self.motor3Axis + motor3Axis
        return self
        self.stop1Bounce = 0
        if not self.stop1Bounce:
            self.stop1Bounce = kwargs.pop("stop1Bounce", 0)
    def setStop1Bounce(self, stop1Bounce = 0):
        try:
            super().setStop1Bounce(stop1Bounce)
        except AttributeError:
           pass
        self.stop1Bounce = stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
        self.stop1ErrorCorrection = 0.8
        if not self.stop1ErrorCorrection:
            self.stop1ErrorCorrection = kwargs.pop("stop1ErrorCorrection", 0.8)
    def setStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        try:
            super().setStop1ErrorCorrection(stop1ErrorCorrection)
        except AttributeError:
           pass
        self.stop1ErrorCorrection = stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
        self.stop2Bounce = 0
        if not self.stop2Bounce:
            self.stop2Bounce = kwargs.pop("stop2Bounce", 0)
    def setStop2Bounce(self, stop2Bounce = 0):
        try:
            super().setStop2Bounce(stop2Bounce)
        except AttributeError:
           pass
        self.stop2Bounce = stop2Bounce
        return self
    def addStop2Bounce(self, stop2Bounce = 0):
        if not isinstance(stop2Bounce, list):
            stop2Bounce = [stop2Bounce]
            self.stop2Bounce = []
            self.stop2Bounce = self.stop2Bounce + stop2Bounce
        return self
    def addStop2Bounce(self, stop2Bounce = 0):
        if not isinstance(stop2Bounce, list):
            stop2Bounce = [stop2Bounce]
            self.stop2Bounce = []
            self.stop2Bounce = self.stop2Bounce + stop2Bounce
        return self
        self.stop2ErrorCorrection = 0.8
        if not self.stop2ErrorCorrection:
            self.stop2ErrorCorrection = kwargs.pop("stop2ErrorCorrection", 0.8)
    def setStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        try:
            super().setStop2ErrorCorrection(stop2ErrorCorrection)
        except AttributeError:
           pass
        self.stop2ErrorCorrection = stop2ErrorCorrection
        return self
    def addStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        if not isinstance(stop2ErrorCorrection, list):
            stop2ErrorCorrection = [stop2ErrorCorrection]
            self.stop2ErrorCorrection = []
            self.stop2ErrorCorrection = self.stop2ErrorCorrection + stop2ErrorCorrection
        return self
    def addStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        if not isinstance(stop2ErrorCorrection, list):
            stop2ErrorCorrection = [stop2ErrorCorrection]
            self.stop2ErrorCorrection = []
            self.stop2ErrorCorrection = self.stop2ErrorCorrection + stop2ErrorCorrection
        return self
        self.stop3Bounce = 0
        if not self.stop3Bounce:
            self.stop3Bounce = kwargs.pop("stop3Bounce", 0)
    def setStop3Bounce(self, stop3Bounce = 0):
        try:
            super().setStop3Bounce(stop3Bounce)
        except AttributeError:
           pass
        self.stop3Bounce = stop3Bounce
        return self
    def addStop3Bounce(self, stop3Bounce = 0):
        if not isinstance(stop3Bounce, list):
            stop3Bounce = [stop3Bounce]
            self.stop3Bounce = []
            self.stop3Bounce = self.stop3Bounce + stop3Bounce
        return self
    def addStop3Bounce(self, stop3Bounce = 0):
        if not isinstance(stop3Bounce, list):
            stop3Bounce = [stop3Bounce]
            self.stop3Bounce = []
            self.stop3Bounce = self.stop3Bounce + stop3Bounce
        return self
        self.stop3ErrorCorrection = 0.8
        if not self.stop3ErrorCorrection:
            self.stop3ErrorCorrection = kwargs.pop("stop3ErrorCorrection", 0.8)
    def setStop3ErrorCorrection(self, stop3ErrorCorrection = 0.8):
        try:
            super().setStop3ErrorCorrection(stop3ErrorCorrection)
        except AttributeError:
           pass
        self.stop3ErrorCorrection = stop3ErrorCorrection
        return self
    def addStop3ErrorCorrection(self, stop3ErrorCorrection = 0.8):
        if not isinstance(stop3ErrorCorrection, list):
            stop3ErrorCorrection = [stop3ErrorCorrection]
            self.stop3ErrorCorrection = []
            self.stop3ErrorCorrection = self.stop3ErrorCorrection + stop3ErrorCorrection
        return self
    def addStop3ErrorCorrection(self, stop3ErrorCorrection = 0.8):
        if not isinstance(stop3ErrorCorrection, list):
            stop3ErrorCorrection = [stop3ErrorCorrection]
            self.stop3ErrorCorrection = []
            self.stop3ErrorCorrection = self.stop3ErrorCorrection + stop3ErrorCorrection
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MovieTexture(X3DTexture2DNode, X3DUrlObject, X3DSoundSourceNode):
    def __init__(self, **kwargs):
        super(MovieTexture, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.duration_changed = None
        if not self.duration_changed:
            self.duration_changed = kwargs.pop("duration_changed", None)
        if self.duration_changed == None or self.duration_changed  <  -1:
            return None
    def setduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        try:
            super().setduration_changed(duration_changed)
        except AttributeError:
           pass
        self.duration_changed = duration_changed
        return self
    def addduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
    def addSetduration_changed(self, duration_changed = None):
        if duration_changed == None or duration_changed  <  -1:
            return None
        if not isinstance(duration_changed, list):
            duration_changed = [duration_changed]
            self.duration_changed = []
            self.duration_changed = self.duration_changed + duration_changed
        return self
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Paused = None
        if not self.Paused:
            self.Paused = kwargs.pop("Paused", None)
    def setIsPaused(self, Paused = None):
        try:
            super().setIsPaused(Paused)
        except AttributeError:
           pass
        self.Paused = Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pauseTime = 0
        if not self.pauseTime:
            self.pauseTime = kwargs.pop("pauseTime", 0)
    def setPauseTime(self, pauseTime = 0):
        try:
            super().setPauseTime(pauseTime)
        except AttributeError:
           pass
        self.pauseTime = pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
        self.pitch = 1.0
        if not self.pitch:
            self.pitch = kwargs.pop("pitch", 1.0)
        if self.pitch == None or self.pitch  <=  0:
            return None
    def setPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        try:
            super().setPitch(pitch)
        except AttributeError:
           pass
        self.pitch = pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
    def addPitch(self, pitch = 1.0):
        if pitch == None or pitch  <=  0:
            return None
        if not isinstance(pitch, list):
            pitch = [pitch]
            self.pitch = []
            self.pitch = self.pitch + pitch
        return self
        self.repeatS = True
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", True)
    def setRepeatS(self, repeatS = True):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = True
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", True)
    def setRepeatT(self, repeatT = True):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.resumeTime = 0
        if not self.resumeTime:
            self.resumeTime = kwargs.pop("resumeTime", 0)
    def setResumeTime(self, resumeTime = 0):
        try:
            super().setResumeTime(resumeTime)
        except AttributeError:
           pass
        self.resumeTime = resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
        self.speed = 1.0
        if not self.speed:
            self.speed = kwargs.pop("speed", 1.0)
    def setSpeed(self, speed = 1.0):
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 1.0):
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 1.0):
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.startTime = 0
        if not self.startTime:
            self.startTime = kwargs.pop("startTime", 0)
    def setStartTime(self, startTime = 0):
        try:
            super().setStartTime(startTime)
        except AttributeError:
           pass
        self.startTime = startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
        self.stopTime = 0
        if not self.stopTime:
            self.stopTime = kwargs.pop("stopTime", 0)
    def setStopTime(self, stopTime = 0):
        try:
            super().setStopTime(stopTime)
        except AttributeError:
           pass
        self.stopTime = stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MultiTexture(X3DTextureNode):
    def __init__(self, **kwargs):
        super(MultiTexture, self).__init__(**kwargs)
        self.alpha = 1
        if not self.alpha:
            self.alpha = kwargs.pop("alpha", 1)
        if self.alpha == None or self.alpha  <  0:
            return None
        if self.alpha == None or self.alpha  >  1:
            return None
    def setAlpha(self, alpha = 1):
        if alpha == None or alpha  <  0:
            return None
        if alpha == None or alpha  >  1:
            return None
        try:
            super().setAlpha(alpha)
        except AttributeError:
           pass
        self.alpha = alpha
        return self
    def addAlpha(self, alpha = 1):
        if alpha == None or alpha  <  0:
            return None
        if alpha == None or alpha  >  1:
            return None
        if not isinstance(alpha, list):
            alpha = [alpha]
            self.alpha = []
            self.alpha = self.alpha + alpha
        return self
    def addAlpha(self, alpha = 1):
        if alpha == None or alpha  <  0:
            return None
        if alpha == None or alpha  >  1:
            return None
        if not isinstance(alpha, list):
            alpha = [alpha]
            self.alpha = []
            self.alpha = self.alpha + alpha
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.function = []
        if not self.function:
            self.function = kwargs.pop("function", [])
    def setFunction(self, function = []):
        try:
            super().setFunction(function)
        except AttributeError:
           pass
        self.function = function
        return self
    def addFunction(self, function = []):
        if not isinstance(function, list):
            function = [function]
            self.function = []
            self.function = self.function + function
        return self
    def addFunction(self, function = []):
        if not isinstance(function, list):
            function = [function]
            self.function = []
            self.function = self.function + function
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.mode = []
        if not self.mode:
            self.mode = kwargs.pop("mode", [])
    def setMode(self, mode = []):
        try:
            super().setMode(mode)
        except AttributeError:
           pass
        self.mode = mode
        return self
    def addMode(self, mode = []):
        if not isinstance(mode, list):
            mode = [mode]
            self.mode = []
            self.mode = self.mode + mode
        return self
    def addMode(self, mode = []):
        if not isinstance(mode, list):
            mode = [mode]
            self.mode = []
            self.mode = self.mode + mode
        return self
        self.source = []
        if not self.source:
            self.source = kwargs.pop("source", [])
    def setSource(self, source = []):
        try:
            super().setSource(source)
        except AttributeError:
           pass
        self.source = source
        return self
    def addSource(self, source = []):
        if not isinstance(source, list):
            source = [source]
            self.source = []
            self.source = self.source + source
        return self
    def addSource(self, source = []):
        if not isinstance(source, list):
            source = [source]
            self.source = []
            self.source = self.source + source
        return self
        self.texture = []
        if not self.texture:
            self.texture = kwargs.pop("texture", [])
    def setTexture(self, texture = []):
        try:
            super().setTexture(texture)
        except AttributeError:
           pass
        self.texture = texture
        return self
    def addTexture(self, texture = []):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
    def addTexture(self, texture = []):
        if not isinstance(texture, list):
            texture = [texture]
            self.texture = []
            self.texture = self.texture + texture
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MultiTextureCoordinate(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super(MultiTextureCoordinate, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.texCoord = []
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", [])
    def setTexCoord(self, texCoord = []):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = []):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = []):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class MultiTextureTransform(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super(MultiTextureTransform, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.textureTransform = []
        if not self.textureTransform:
            self.textureTransform = kwargs.pop("textureTransform", [])
    def setTextureTransform(self, textureTransform = []):
        try:
            super().setTextureTransform(textureTransform)
        except AttributeError:
           pass
        self.textureTransform = textureTransform
        return self
    def addTextureTransform(self, textureTransform = []):
        if not isinstance(textureTransform, list):
            textureTransform = [textureTransform]
            self.textureTransform = []
            self.textureTransform = self.textureTransform + textureTransform
        return self
    def addTextureTransform(self, textureTransform = []):
        if not isinstance(textureTransform, list):
            textureTransform = [textureTransform]
            self.textureTransform = []
            self.textureTransform = self.textureTransform + textureTransform
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NavigationInfo(X3DBindableNode):
    def __init__(self, **kwargs):
        super(NavigationInfo, self).__init__(**kwargs)
        self.avatarSize = [0.25, 1.6, 0.75]
        if not self.avatarSize:
            self.avatarSize = kwargs.pop("avatarSize", [0.25, 1.6, 0.75])
        if self.avatarSize == None or len(self.avatarSize) <= 0 or min(self.avatarSize)  <  0:
            return None
    def setAvatarSize(self, avatarSize = [0.25, 1.6, 0.75]):
        if avatarSize == None or len(avatarSize) <= 0 or min(avatarSize)  <  0:
            return None
        try:
            super().setAvatarSize(avatarSize)
        except AttributeError:
           pass
        self.avatarSize = avatarSize
        return self
    def addAvatarSize(self, avatarSize = [0.25, 1.6, 0.75]):
        if avatarSize == None or len(avatarSize) <= 0 or min(avatarSize)  <  0:
            return None
        if not isinstance(avatarSize, list):
            avatarSize = [avatarSize]
            self.avatarSize = []
            self.avatarSize = self.avatarSize + avatarSize
        return self
    def addAvatarSize(self, avatarSize = [0.25, 1.6, 0.75]):
        if avatarSize == None or len(avatarSize) <= 0 or min(avatarSize)  <  0:
            return None
        if not isinstance(avatarSize, list):
            avatarSize = [avatarSize]
            self.avatarSize = []
            self.avatarSize = self.avatarSize + avatarSize
        return self
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.headlight = True
        if not self.headlight:
            self.headlight = kwargs.pop("headlight", True)
    def setHeadlight(self, headlight = True):
        try:
            super().setHeadlight(headlight)
        except AttributeError:
           pass
        self.headlight = headlight
        return self
    def addHeadlight(self, headlight = True):
        if not isinstance(headlight, list):
            headlight = [headlight]
            self.headlight = []
            self.headlight = self.headlight + headlight
        return self
    def addHeadlight(self, headlight = True):
        if not isinstance(headlight, list):
            headlight = [headlight]
            self.headlight = []
            self.headlight = self.headlight + headlight
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.speed = 1
        if not self.speed:
            self.speed = kwargs.pop("speed", 1)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 1):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 1):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 1):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.transitionComplete = None
        if not self.transitionComplete:
            self.transitionComplete = kwargs.pop("transitionComplete", None)
    def setTransitionComplete(self, transitionComplete = None):
        try:
            super().setTransitionComplete(transitionComplete)
        except AttributeError:
           pass
        self.transitionComplete = transitionComplete
        return self
    def addTransitionComplete(self, transitionComplete = None):
        if not isinstance(transitionComplete, list):
            transitionComplete = [transitionComplete]
            self.transitionComplete = []
            self.transitionComplete = self.transitionComplete + transitionComplete
        return self
    def addTransitionComplete(self, transitionComplete = None):
        if not isinstance(transitionComplete, list):
            transitionComplete = [transitionComplete]
            self.transitionComplete = []
            self.transitionComplete = self.transitionComplete + transitionComplete
        return self
        self.transitionTime = 1.0
        if not self.transitionTime:
            self.transitionTime = kwargs.pop("transitionTime", 1.0)
        if self.transitionTime == None or self.transitionTime  <  0:
            return None
    def setTransitionTime(self, transitionTime = 1.0):
        if transitionTime == None or transitionTime  <  0:
            return None
        try:
            super().setTransitionTime(transitionTime)
        except AttributeError:
           pass
        self.transitionTime = transitionTime
        return self
    def addTransitionTime(self, transitionTime = 1.0):
        if transitionTime == None or transitionTime  <  0:
            return None
        if not isinstance(transitionTime, list):
            transitionTime = [transitionTime]
            self.transitionTime = []
            self.transitionTime = self.transitionTime + transitionTime
        return self
    def addTransitionTime(self, transitionTime = 1.0):
        if transitionTime == None or transitionTime  <  0:
            return None
        if not isinstance(transitionTime, list):
            transitionTime = [transitionTime]
            self.transitionTime = []
            self.transitionTime = self.transitionTime + transitionTime
        return self
        self.transitionType = "LINEAR"
        if not self.transitionType:
            self.transitionType = kwargs.pop("transitionType", "LINEAR")
    def setTransitionType(self, transitionType = "LINEAR"):
        try:
            super().setTransitionType(transitionType)
        except AttributeError:
           pass
        self.transitionType = transitionType
        return self
    def addTransitionType(self, transitionType = "LINEAR"):
        if not isinstance(transitionType, list):
            transitionType = [transitionType]
            self.transitionType = []
            self.transitionType = self.transitionType + transitionType
        return self
    def addTransitionType(self, transitionType = "LINEAR"):
        if not isinstance(transitionType, list):
            transitionType = [transitionType]
            self.transitionType = []
            self.transitionType = self.transitionType + transitionType
        return self
        self.type = ["EXAMINE", "ANY"]
        if not self.type:
            self.type = kwargs.pop("type", ["EXAMINE", "ANY"])
    def setType(self, type = ["EXAMINE", "ANY"]):
        try:
            super().setType(type)
        except AttributeError:
           pass
        self.type = type
        return self
    def addType(self, type = ["EXAMINE", "ANY"]):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
    def addType(self, type = ["EXAMINE", "ANY"]):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
        self.visibilityLimit = 0
        if not self.visibilityLimit:
            self.visibilityLimit = kwargs.pop("visibilityLimit", 0)
        if self.visibilityLimit == None or self.visibilityLimit  <  0:
            return None
    def setVisibilityLimit(self, visibilityLimit = 0):
        if visibilityLimit == None or visibilityLimit  <  0:
            return None
        try:
            super().setVisibilityLimit(visibilityLimit)
        except AttributeError:
           pass
        self.visibilityLimit = visibilityLimit
        return self
    def addVisibilityLimit(self, visibilityLimit = 0):
        if visibilityLimit == None or visibilityLimit  <  0:
            return None
        if not isinstance(visibilityLimit, list):
            visibilityLimit = [visibilityLimit]
            self.visibilityLimit = []
            self.visibilityLimit = self.visibilityLimit + visibilityLimit
        return self
    def addVisibilityLimit(self, visibilityLimit = 0):
        if visibilityLimit == None or visibilityLimit  <  0:
            return None
        if not isinstance(visibilityLimit, list):
            visibilityLimit = [visibilityLimit]
            self.visibilityLimit = []
            self.visibilityLimit = self.visibilityLimit + visibilityLimit
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class Normal(X3DNormalNode):
    def __init__(self, **kwargs):
        super(Normal, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.vector = []
        if not self.vector:
            self.vector = kwargs.pop("vector", [])
        if self.vector == None or len(self.vector) <= 0 or min(self.vector)  <  -1:
            return None
        if self.vector == None or len(self.vector) <= 0 or max(self.vector)  >  1:
            return None
    def setVector(self, vector = []):
        if vector == None or len(vector) <= 0 or min(vector)  <  -1:
            return None
        if vector == None or len(vector) <= 0 or max(vector)  >  1:
            return None
        try:
            super().setVector(vector)
        except AttributeError:
           pass
        self.vector = vector
        return self
    def addVector(self, vector = []):
        if vector == None or len(vector) <= 0 or min(vector)  <  -1:
            return None
        if vector == None or len(vector) <= 0 or max(vector)  >  1:
            return None
        if not isinstance(vector, list):
            vector = [vector]
            self.vector = []
            self.vector = self.vector + vector
        return self
    def addVector(self, vector = []):
        if vector == None or len(vector) <= 0 or min(vector)  <  -1:
            return None
        if vector == None or len(vector) <= 0 or max(vector)  >  1:
            return None
        if not isinstance(vector, list):
            vector = [vector]
            self.vector = []
            self.vector = self.vector + vector
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NormalInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(NormalInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsCurve(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super(NurbsCurve, self).__init__(**kwargs)
        self.closed = False
        if not self.closed:
            self.closed = kwargs.pop("closed", False)
    def setClosed(self, closed = False):
        try:
            super().setClosed(closed)
        except AttributeError:
           pass
        self.closed = closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.knot = []
        if not self.knot:
            self.knot = kwargs.pop("knot", [])
    def setKnot(self, knot = []):
        try:
            super().setKnot(knot)
        except AttributeError:
           pass
        self.knot = knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  2:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.tessellation = 0
        if not self.tessellation:
            self.tessellation = kwargs.pop("tessellation", 0)
    def setTessellation(self, tessellation = 0):
        try:
            super().setTessellation(tessellation)
        except AttributeError:
           pass
        self.tessellation = tessellation
        return self
    def addTessellation(self, tessellation = 0):
        if not isinstance(tessellation, list):
            tessellation = [tessellation]
            self.tessellation = []
            self.tessellation = self.tessellation + tessellation
        return self
    def addTessellation(self, tessellation = 0):
        if not isinstance(tessellation, list):
            tessellation = [tessellation]
            self.tessellation = []
            self.tessellation = self.tessellation + tessellation
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsCurve2D(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        super(NurbsCurve2D, self).__init__(**kwargs)
        self.closed = False
        if not self.closed:
            self.closed = kwargs.pop("closed", False)
    def setClosed(self, closed = False):
        try:
            super().setClosed(closed)
        except AttributeError:
           pass
        self.closed = closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
        self.controlPoint = []
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", [])
    def setControlPoint(self, controlPoint = []):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.knot = []
        if not self.knot:
            self.knot = kwargs.pop("knot", [])
    def setKnot(self, knot = []):
        try:
            super().setKnot(knot)
        except AttributeError:
           pass
        self.knot = knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  2:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.tessellation = 0
        if not self.tessellation:
            self.tessellation = kwargs.pop("tessellation", 0)
    def setTessellation(self, tessellation = 0):
        try:
            super().setTessellation(tessellation)
        except AttributeError:
           pass
        self.tessellation = tessellation
        return self
    def addTessellation(self, tessellation = 0):
        if not isinstance(tessellation, list):
            tessellation = [tessellation]
            self.tessellation = []
            self.tessellation = self.tessellation + tessellation
        return self
    def addTessellation(self, tessellation = 0):
        if not isinstance(tessellation, list):
            tessellation = [tessellation]
            self.tessellation = []
            self.tessellation = self.tessellation + tessellation
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsOrientationInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super(NurbsOrientationInterpolator, self).__init__(**kwargs)
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.knot = []
        if not self.knot:
            self.knot = kwargs.pop("knot", [])
    def setKnot(self, knot = []):
        try:
            super().setKnot(knot)
        except AttributeError:
           pass
        self.knot = knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  2:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
    def setWeight(self, weight = []):
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsPatchSurface(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        super(NurbsPatchSurface, self).__init__(**kwargs)
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.uClosed = False
        if not self.uClosed:
            self.uClosed = kwargs.pop("uClosed", False)
    def setUClosed(self, uClosed = False):
        try:
            super().setUClosed(uClosed)
        except AttributeError:
           pass
        self.uClosed = uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
        self.uDimension = 0
        if not self.uDimension:
            self.uDimension = kwargs.pop("uDimension", 0)
        if self.uDimension == None or self.uDimension  <  0:
            return None
    def setUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        try:
            super().setUDimension(uDimension)
        except AttributeError:
           pass
        self.uDimension = uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
        self.uKnot = []
        if not self.uKnot:
            self.uKnot = kwargs.pop("uKnot", [])
    def setUKnot(self, uKnot = []):
        try:
            super().setUKnot(uKnot)
        except AttributeError:
           pass
        self.uKnot = uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
        self.uOrder = 3
        if not self.uOrder:
            self.uOrder = kwargs.pop("uOrder", 3)
        if self.uOrder == None or self.uOrder  <  2:
            return None
    def setUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        try:
            super().setUOrder(uOrder)
        except AttributeError:
           pass
        self.uOrder = uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
        self.uTessellation = 0
        if not self.uTessellation:
            self.uTessellation = kwargs.pop("uTessellation", 0)
    def setUTessellation(self, uTessellation = 0):
        try:
            super().setUTessellation(uTessellation)
        except AttributeError:
           pass
        self.uTessellation = uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
        self.vClosed = False
        if not self.vClosed:
            self.vClosed = kwargs.pop("vClosed", False)
    def setVClosed(self, vClosed = False):
        try:
            super().setVClosed(vClosed)
        except AttributeError:
           pass
        self.vClosed = vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
        self.vDimension = 0
        if not self.vDimension:
            self.vDimension = kwargs.pop("vDimension", 0)
        if self.vDimension == None or self.vDimension  <  0:
            return None
    def setVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        try:
            super().setVDimension(vDimension)
        except AttributeError:
           pass
        self.vDimension = vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
        self.vKnot = []
        if not self.vKnot:
            self.vKnot = kwargs.pop("vKnot", [])
    def setVKnot(self, vKnot = []):
        try:
            super().setVKnot(vKnot)
        except AttributeError:
           pass
        self.vKnot = vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
        self.vOrder = 3
        if not self.vOrder:
            self.vOrder = kwargs.pop("vOrder", 3)
        if self.vOrder == None or self.vOrder  <  2:
            return None
    def setVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        try:
            super().setVOrder(vOrder)
        except AttributeError:
           pass
        self.vOrder = vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
        self.vTessellation = 0
        if not self.vTessellation:
            self.vTessellation = kwargs.pop("vTessellation", 0)
    def setVTessellation(self, vTessellation = 0):
        try:
            super().setVTessellation(vTessellation)
        except AttributeError:
           pass
        self.vTessellation = vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsPositionInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super(NurbsPositionInterpolator, self).__init__(**kwargs)
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.knot = []
        if not self.knot:
            self.knot = kwargs.pop("knot", [])
    def setKnot(self, knot = []):
        try:
            super().setKnot(knot)
        except AttributeError:
           pass
        self.knot = knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
    def addKnot(self, knot = []):
        if not isinstance(knot, list):
            knot = [knot]
            self.knot = []
            self.knot = self.knot + knot
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  2:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  2:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
    def setWeight(self, weight = []):
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsSet(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(NurbsSet, self).__init__(**kwargs)
        self.Geometry = []
        if not self.Geometry:
            self.Geometry = kwargs.pop("Geometry", [])
    def setAddGeometry(self, Geometry = []):
        try:
            super().setAddGeometry(Geometry)
        except AttributeError:
           pass
        self.Geometry = Geometry
        return self
    def addAddGeometry(self, Geometry = []):
        if not isinstance(Geometry, list):
            Geometry = [Geometry]
            self.Geometry = []
            self.Geometry = self.Geometry + Geometry
        return self
    def addAddGeometry(self, Geometry = []):
        if not isinstance(Geometry, list):
            Geometry = [Geometry]
            self.Geometry = []
            self.Geometry = self.Geometry + Geometry
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geometry = []
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", [])
    def setGeometry(self, geometry = []):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = []):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = []):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Geometry = []
        if not self.Geometry:
            self.Geometry = kwargs.pop("Geometry", [])
    def setRemoveGeometry(self, Geometry = []):
        try:
            super().setRemoveGeometry(Geometry)
        except AttributeError:
           pass
        self.Geometry = Geometry
        return self
    def addRemoveGeometry(self, Geometry = []):
        if not isinstance(Geometry, list):
            Geometry = [Geometry]
            self.Geometry = []
            self.Geometry = self.Geometry + Geometry
        return self
    def addRemoveGeometry(self, Geometry = []):
        if not isinstance(Geometry, list):
            Geometry = [Geometry]
            self.Geometry = []
            self.Geometry = self.Geometry + Geometry
        return self
        self.tessellationScale = 1.0
        if not self.tessellationScale:
            self.tessellationScale = kwargs.pop("tessellationScale", 1.0)
        if self.tessellationScale == None or self.tessellationScale  <=  0:
            return None
    def setTessellationScale(self, tessellationScale = 1.0):
        if tessellationScale == None or tessellationScale  <=  0:
            return None
        try:
            super().setTessellationScale(tessellationScale)
        except AttributeError:
           pass
        self.tessellationScale = tessellationScale
        return self
    def addTessellationScale(self, tessellationScale = 1.0):
        if tessellationScale == None or tessellationScale  <=  0:
            return None
        if not isinstance(tessellationScale, list):
            tessellationScale = [tessellationScale]
            self.tessellationScale = []
            self.tessellationScale = self.tessellationScale + tessellationScale
        return self
    def addTessellationScale(self, tessellationScale = 1.0):
        if tessellationScale == None or tessellationScale  <=  0:
            return None
        if not isinstance(tessellationScale, list):
            tessellationScale = [tessellationScale]
            self.tessellationScale = []
            self.tessellationScale = self.tessellationScale + tessellationScale
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsSurfaceInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super(NurbsSurfaceInterpolator, self).__init__(**kwargs)
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal_changed = []
        if not self.normal_changed:
            self.normal_changed = kwargs.pop("normal_changed", [])
    def setnormal_changed(self, normal_changed = []):
        try:
            super().setnormal_changed(normal_changed)
        except AttributeError:
           pass
        self.normal_changed = normal_changed
        return self
    def addnormal_changed(self, normal_changed = []):
        if not isinstance(normal_changed, list):
            normal_changed = [normal_changed]
            self.normal_changed = []
            self.normal_changed = self.normal_changed + normal_changed
        return self
    def addSetnormal_changed(self, normal_changed = []):
        if not isinstance(normal_changed, list):
            normal_changed = [normal_changed]
            self.normal_changed = []
            self.normal_changed = self.normal_changed + normal_changed
        return self
        self.position_changed = []
        if not self.position_changed:
            self.position_changed = kwargs.pop("position_changed", [])
    def setposition_changed(self, position_changed = []):
        try:
            super().setposition_changed(position_changed)
        except AttributeError:
           pass
        self.position_changed = position_changed
        return self
    def addposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
    def addSetposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
        self.Fraction = []
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", [])
    def setSet_fraction(self, Fraction = []):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = []):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = []):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.uDimension = 0
        if not self.uDimension:
            self.uDimension = kwargs.pop("uDimension", 0)
        if self.uDimension == None or self.uDimension  <  0:
            return None
    def setUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        try:
            super().setUDimension(uDimension)
        except AttributeError:
           pass
        self.uDimension = uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
        self.uKnot = []
        if not self.uKnot:
            self.uKnot = kwargs.pop("uKnot", [])
    def setUKnot(self, uKnot = []):
        try:
            super().setUKnot(uKnot)
        except AttributeError:
           pass
        self.uKnot = uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
        self.uOrder = 3
        if not self.uOrder:
            self.uOrder = kwargs.pop("uOrder", 3)
        if self.uOrder == None or self.uOrder  <  2:
            return None
    def setUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        try:
            super().setUOrder(uOrder)
        except AttributeError:
           pass
        self.uOrder = uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
        self.vDimension = 0
        if not self.vDimension:
            self.vDimension = kwargs.pop("vDimension", 0)
        if self.vDimension == None or self.vDimension  <  0:
            return None
    def setVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        try:
            super().setVDimension(vDimension)
        except AttributeError:
           pass
        self.vDimension = vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
        self.vKnot = []
        if not self.vKnot:
            self.vKnot = kwargs.pop("vKnot", [])
    def setVKnot(self, vKnot = []):
        try:
            super().setVKnot(vKnot)
        except AttributeError:
           pass
        self.vKnot = vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
        self.vOrder = 3
        if not self.vOrder:
            self.vOrder = kwargs.pop("vOrder", 3)
        if self.vOrder == None or self.vOrder  <  2:
            return None
    def setVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        try:
            super().setVOrder(vOrder)
        except AttributeError:
           pass
        self.vOrder = vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
    def setWeight(self, weight = []):
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsSweptSurface(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super(NurbsSweptSurface, self).__init__(**kwargs)
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.crossSectionCurve = None
        if not self.crossSectionCurve:
            self.crossSectionCurve = kwargs.pop("crossSectionCurve", None)
    def setCrossSectionCurve(self, crossSectionCurve = None):
        try:
            super().setCrossSectionCurve(crossSectionCurve)
        except AttributeError:
           pass
        self.crossSectionCurve = crossSectionCurve
        return self
    def addCrossSectionCurve(self, crossSectionCurve = None):
        if not isinstance(crossSectionCurve, list):
            crossSectionCurve = [crossSectionCurve]
            self.crossSectionCurve = []
            self.crossSectionCurve = self.crossSectionCurve + crossSectionCurve
        return self
    def addCrossSectionCurve(self, crossSectionCurve = None):
        if not isinstance(crossSectionCurve, list):
            crossSectionCurve = [crossSectionCurve]
            self.crossSectionCurve = []
            self.crossSectionCurve = self.crossSectionCurve + crossSectionCurve
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.trajectoryCurve = None
        if not self.trajectoryCurve:
            self.trajectoryCurve = kwargs.pop("trajectoryCurve", None)
    def setTrajectoryCurve(self, trajectoryCurve = None):
        try:
            super().setTrajectoryCurve(trajectoryCurve)
        except AttributeError:
           pass
        self.trajectoryCurve = trajectoryCurve
        return self
    def addTrajectoryCurve(self, trajectoryCurve = None):
        if not isinstance(trajectoryCurve, list):
            trajectoryCurve = [trajectoryCurve]
            self.trajectoryCurve = []
            self.trajectoryCurve = self.trajectoryCurve + trajectoryCurve
        return self
    def addTrajectoryCurve(self, trajectoryCurve = None):
        if not isinstance(trajectoryCurve, list):
            trajectoryCurve = [trajectoryCurve]
            self.trajectoryCurve = []
            self.trajectoryCurve = self.trajectoryCurve + trajectoryCurve
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsSwungSurface(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super(NurbsSwungSurface, self).__init__(**kwargs)
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.profileCurve = None
        if not self.profileCurve:
            self.profileCurve = kwargs.pop("profileCurve", None)
    def setProfileCurve(self, profileCurve = None):
        try:
            super().setProfileCurve(profileCurve)
        except AttributeError:
           pass
        self.profileCurve = profileCurve
        return self
    def addProfileCurve(self, profileCurve = None):
        if not isinstance(profileCurve, list):
            profileCurve = [profileCurve]
            self.profileCurve = []
            self.profileCurve = self.profileCurve + profileCurve
        return self
    def addProfileCurve(self, profileCurve = None):
        if not isinstance(profileCurve, list):
            profileCurve = [profileCurve]
            self.profileCurve = []
            self.profileCurve = self.profileCurve + profileCurve
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.trajectoryCurve = None
        if not self.trajectoryCurve:
            self.trajectoryCurve = kwargs.pop("trajectoryCurve", None)
    def setTrajectoryCurve(self, trajectoryCurve = None):
        try:
            super().setTrajectoryCurve(trajectoryCurve)
        except AttributeError:
           pass
        self.trajectoryCurve = trajectoryCurve
        return self
    def addTrajectoryCurve(self, trajectoryCurve = None):
        if not isinstance(trajectoryCurve, list):
            trajectoryCurve = [trajectoryCurve]
            self.trajectoryCurve = []
            self.trajectoryCurve = self.trajectoryCurve + trajectoryCurve
        return self
    def addTrajectoryCurve(self, trajectoryCurve = None):
        if not isinstance(trajectoryCurve, list):
            trajectoryCurve = [trajectoryCurve]
            self.trajectoryCurve = []
            self.trajectoryCurve = self.trajectoryCurve + trajectoryCurve
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsTextureCoordinate(X3DNode):
    def __init__(self, **kwargs):
        super(NurbsTextureCoordinate, self).__init__(**kwargs)
        self.controlPoint = []
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", [])
    def setControlPoint(self, controlPoint = []):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = []):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.uDimension = 0
        if not self.uDimension:
            self.uDimension = kwargs.pop("uDimension", 0)
        if self.uDimension == None or self.uDimension  <  0:
            return None
    def setUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        try:
            super().setUDimension(uDimension)
        except AttributeError:
           pass
        self.uDimension = uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
        self.uKnot = []
        if not self.uKnot:
            self.uKnot = kwargs.pop("uKnot", [])
    def setUKnot(self, uKnot = []):
        try:
            super().setUKnot(uKnot)
        except AttributeError:
           pass
        self.uKnot = uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
        self.uOrder = 3
        if not self.uOrder:
            self.uOrder = kwargs.pop("uOrder", 3)
        if self.uOrder == None or self.uOrder  <  2:
            return None
    def setUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        try:
            super().setUOrder(uOrder)
        except AttributeError:
           pass
        self.uOrder = uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
        self.vDimension = 0
        if not self.vDimension:
            self.vDimension = kwargs.pop("vDimension", 0)
        if self.vDimension == None or self.vDimension  <  0:
            return None
    def setVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        try:
            super().setVDimension(vDimension)
        except AttributeError:
           pass
        self.vDimension = vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
        self.vKnot = []
        if not self.vKnot:
            self.vKnot = kwargs.pop("vKnot", [])
    def setVKnot(self, vKnot = []):
        try:
            super().setVKnot(vKnot)
        except AttributeError:
           pass
        self.vKnot = vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
        self.vOrder = 3
        if not self.vOrder:
            self.vOrder = kwargs.pop("vOrder", 3)
        if self.vOrder == None or self.vOrder  <  2:
            return None
    def setVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        try:
            super().setVOrder(vOrder)
        except AttributeError:
           pass
        self.vOrder = vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class NurbsTrimmedSurface(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        super(NurbsTrimmedSurface, self).__init__(**kwargs)
        self.TrimmingContour = []
        if not self.TrimmingContour:
            self.TrimmingContour = kwargs.pop("TrimmingContour", [])
    def setAddTrimmingContour(self, TrimmingContour = []):
        try:
            super().setAddTrimmingContour(TrimmingContour)
        except AttributeError:
           pass
        self.TrimmingContour = TrimmingContour
        return self
    def addAddTrimmingContour(self, TrimmingContour = []):
        if not isinstance(TrimmingContour, list):
            TrimmingContour = [TrimmingContour]
            self.TrimmingContour = []
            self.TrimmingContour = self.TrimmingContour + TrimmingContour
        return self
    def addAddTrimmingContour(self, TrimmingContour = []):
        if not isinstance(TrimmingContour, list):
            TrimmingContour = [TrimmingContour]
            self.TrimmingContour = []
            self.TrimmingContour = self.TrimmingContour + TrimmingContour
        return self
        self.controlPoint = None
        if not self.controlPoint:
            self.controlPoint = kwargs.pop("controlPoint", None)
    def setControlPoint(self, controlPoint = None):
        try:
            super().setControlPoint(controlPoint)
        except AttributeError:
           pass
        self.controlPoint = controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
    def addControlPoint(self, controlPoint = None):
        if not isinstance(controlPoint, list):
            controlPoint = [controlPoint]
            self.controlPoint = []
            self.controlPoint = self.controlPoint + controlPoint
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.TrimmingContour = []
        if not self.TrimmingContour:
            self.TrimmingContour = kwargs.pop("TrimmingContour", [])
    def setRemoveTrimmingContour(self, TrimmingContour = []):
        try:
            super().setRemoveTrimmingContour(TrimmingContour)
        except AttributeError:
           pass
        self.TrimmingContour = TrimmingContour
        return self
    def addRemoveTrimmingContour(self, TrimmingContour = []):
        if not isinstance(TrimmingContour, list):
            TrimmingContour = [TrimmingContour]
            self.TrimmingContour = []
            self.TrimmingContour = self.TrimmingContour + TrimmingContour
        return self
    def addRemoveTrimmingContour(self, TrimmingContour = []):
        if not isinstance(TrimmingContour, list):
            TrimmingContour = [TrimmingContour]
            self.TrimmingContour = []
            self.TrimmingContour = self.TrimmingContour + TrimmingContour
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.trimmingContour = []
        if not self.trimmingContour:
            self.trimmingContour = kwargs.pop("trimmingContour", [])
    def setTrimmingContour(self, trimmingContour = []):
        try:
            super().setTrimmingContour(trimmingContour)
        except AttributeError:
           pass
        self.trimmingContour = trimmingContour
        return self
    def addTrimmingContour(self, trimmingContour = []):
        if not isinstance(trimmingContour, list):
            trimmingContour = [trimmingContour]
            self.trimmingContour = []
            self.trimmingContour = self.trimmingContour + trimmingContour
        return self
    def addTrimmingContour(self, trimmingContour = []):
        if not isinstance(trimmingContour, list):
            trimmingContour = [trimmingContour]
            self.trimmingContour = []
            self.trimmingContour = self.trimmingContour + trimmingContour
        return self
        self.uClosed = False
        if not self.uClosed:
            self.uClosed = kwargs.pop("uClosed", False)
    def setUClosed(self, uClosed = False):
        try:
            super().setUClosed(uClosed)
        except AttributeError:
           pass
        self.uClosed = uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
    def addUClosed(self, uClosed = False):
        if not isinstance(uClosed, list):
            uClosed = [uClosed]
            self.uClosed = []
            self.uClosed = self.uClosed + uClosed
        return self
        self.uDimension = 0
        if not self.uDimension:
            self.uDimension = kwargs.pop("uDimension", 0)
        if self.uDimension == None or self.uDimension  <  0:
            return None
    def setUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        try:
            super().setUDimension(uDimension)
        except AttributeError:
           pass
        self.uDimension = uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
    def addUDimension(self, uDimension = 0):
        if uDimension == None or uDimension  <  0:
            return None
        if not isinstance(uDimension, list):
            uDimension = [uDimension]
            self.uDimension = []
            self.uDimension = self.uDimension + uDimension
        return self
        self.uKnot = []
        if not self.uKnot:
            self.uKnot = kwargs.pop("uKnot", [])
    def setUKnot(self, uKnot = []):
        try:
            super().setUKnot(uKnot)
        except AttributeError:
           pass
        self.uKnot = uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
    def addUKnot(self, uKnot = []):
        if not isinstance(uKnot, list):
            uKnot = [uKnot]
            self.uKnot = []
            self.uKnot = self.uKnot + uKnot
        return self
        self.uOrder = 3
        if not self.uOrder:
            self.uOrder = kwargs.pop("uOrder", 3)
        if self.uOrder == None or self.uOrder  <  2:
            return None
    def setUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        try:
            super().setUOrder(uOrder)
        except AttributeError:
           pass
        self.uOrder = uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
    def addUOrder(self, uOrder = 3):
        if uOrder == None or uOrder  <  2:
            return None
        if not isinstance(uOrder, list):
            uOrder = [uOrder]
            self.uOrder = []
            self.uOrder = self.uOrder + uOrder
        return self
        self.uTessellation = 0
        if not self.uTessellation:
            self.uTessellation = kwargs.pop("uTessellation", 0)
    def setUTessellation(self, uTessellation = 0):
        try:
            super().setUTessellation(uTessellation)
        except AttributeError:
           pass
        self.uTessellation = uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
    def addUTessellation(self, uTessellation = 0):
        if not isinstance(uTessellation, list):
            uTessellation = [uTessellation]
            self.uTessellation = []
            self.uTessellation = self.uTessellation + uTessellation
        return self
        self.vClosed = False
        if not self.vClosed:
            self.vClosed = kwargs.pop("vClosed", False)
    def setVClosed(self, vClosed = False):
        try:
            super().setVClosed(vClosed)
        except AttributeError:
           pass
        self.vClosed = vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
    def addVClosed(self, vClosed = False):
        if not isinstance(vClosed, list):
            vClosed = [vClosed]
            self.vClosed = []
            self.vClosed = self.vClosed + vClosed
        return self
        self.vDimension = 0
        if not self.vDimension:
            self.vDimension = kwargs.pop("vDimension", 0)
        if self.vDimension == None or self.vDimension  <  0:
            return None
    def setVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        try:
            super().setVDimension(vDimension)
        except AttributeError:
           pass
        self.vDimension = vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
    def addVDimension(self, vDimension = 0):
        if vDimension == None or vDimension  <  0:
            return None
        if not isinstance(vDimension, list):
            vDimension = [vDimension]
            self.vDimension = []
            self.vDimension = self.vDimension + vDimension
        return self
        self.vKnot = []
        if not self.vKnot:
            self.vKnot = kwargs.pop("vKnot", [])
    def setVKnot(self, vKnot = []):
        try:
            super().setVKnot(vKnot)
        except AttributeError:
           pass
        self.vKnot = vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
    def addVKnot(self, vKnot = []):
        if not isinstance(vKnot, list):
            vKnot = [vKnot]
            self.vKnot = []
            self.vKnot = self.vKnot + vKnot
        return self
        self.vOrder = 3
        if not self.vOrder:
            self.vOrder = kwargs.pop("vOrder", 3)
        if self.vOrder == None or self.vOrder  <  2:
            return None
    def setVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        try:
            super().setVOrder(vOrder)
        except AttributeError:
           pass
        self.vOrder = vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
    def addVOrder(self, vOrder = 3):
        if vOrder == None or vOrder  <  2:
            return None
        if not isinstance(vOrder, list):
            vOrder = [vOrder]
            self.vOrder = []
            self.vOrder = self.vOrder + vOrder
        return self
        self.vTessellation = 0
        if not self.vTessellation:
            self.vTessellation = kwargs.pop("vTessellation", 0)
    def setVTessellation(self, vTessellation = 0):
        try:
            super().setVTessellation(vTessellation)
        except AttributeError:
           pass
        self.vTessellation = vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
    def addVTessellation(self, vTessellation = 0):
        if not isinstance(vTessellation, list):
            vTessellation = [vTessellation]
            self.vTessellation = []
            self.vTessellation = self.vTessellation + vTessellation
        return self
        self.weight = []
        if not self.weight:
            self.weight = kwargs.pop("weight", [])
        if self.weight == None or len(self.weight) <= 0 or min(self.weight)  <=  0:
            return None
    def setWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        try:
            super().setWeight(weight)
        except AttributeError:
           pass
        self.weight = weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
    def addWeight(self, weight = []):
        if weight == None or len(weight) <= 0 or min(weight)  <=  0:
            return None
        if not isinstance(weight, list):
            weight = [weight]
            self.weight = []
            self.weight = self.weight + weight
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class OpacityMapVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(OpacityMapVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.transferFunction = None
        if not self.transferFunction:
            self.transferFunction = kwargs.pop("transferFunction", None)
    def setTransferFunction(self, transferFunction = None):
        try:
            super().setTransferFunction(transferFunction)
        except AttributeError:
           pass
        self.transferFunction = transferFunction
        return self
    def addTransferFunction(self, transferFunction = None):
        if not isinstance(transferFunction, list):
            transferFunction = [transferFunction]
            self.transferFunction = []
            self.transferFunction = self.transferFunction + transferFunction
        return self
    def addTransferFunction(self, transferFunction = None):
        if not isinstance(transferFunction, list):
            transferFunction = [transferFunction]
            self.transferFunction = []
            self.transferFunction = self.transferFunction + transferFunction
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class OrientationChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super(OrientationChaser, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = [0, 1, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 1, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 1, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 1, 0, 0])
    def setInitialValue(self, initialValue = [0, 1, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 1, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 1, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = None
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", None)
    def setSet_destination(self, Destination = None):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = None
        if not self.Value:
            self.Value = kwargs.pop("Value", None)
    def setSet_value(self, Value = None):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class OrientationDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super(OrientationDamper, self).__init__(**kwargs)
        self.initialDestination = [0, 1, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 1, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 1, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 1, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 1, 0, 0])
    def setInitialValue(self, initialValue = [0, 1, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 1, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 1, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = None
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", None)
    def setSet_destination(self, Destination = None):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = None
        if not self.Value:
            self.Value = kwargs.pop("Value", None)
    def setSet_value(self, Value = None):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class OrientationInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(OrientationInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class OrthoViewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super(OrthoViewpoint, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.centerOfRotation = [0, 0, 0]
        if not self.centerOfRotation:
            self.centerOfRotation = kwargs.pop("centerOfRotation", [0, 0, 0])
    def setCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        try:
            super().setCenterOfRotation(centerOfRotation)
        except AttributeError:
           pass
        self.centerOfRotation = centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.fieldOfView = [-1, -1, 1, 1]
        if not self.fieldOfView:
            self.fieldOfView = kwargs.pop("fieldOfView", [-1, -1, 1, 1])
    def setFieldOfView(self, fieldOfView = [-1, -1, 1, 1]):
        try:
            super().setFieldOfView(fieldOfView)
        except AttributeError:
           pass
        self.fieldOfView = fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = [-1, -1, 1, 1]):
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = [-1, -1, 1, 1]):
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.jump = True
        if not self.jump:
            self.jump = kwargs.pop("jump", True)
    def setJump(self, jump = True):
        try:
            super().setJump(jump)
        except AttributeError:
           pass
        self.jump = jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.position = [0, 0, 10]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 10])
    def setPosition(self, position = [0, 0, 10]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 10]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 10]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.retainUserOffsets = False
        if not self.retainUserOffsets:
            self.retainUserOffsets = kwargs.pop("retainUserOffsets", False)
    def setRetainUserOffsets(self, retainUserOffsets = False):
        try:
            super().setRetainUserOffsets(retainUserOffsets)
        except AttributeError:
           pass
        self.retainUserOffsets = retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PackagedShader(X3DUrlObject, X3DProgrammableShaderObject, X3DShaderNode):
    def __init__(self, **kwargs):
        super(PackagedShader, self).__init__(**kwargs)
        self.activate = None
        if not self.activate:
            self.activate = kwargs.pop("activate", None)
    def setActivate(self, activate = None):
        try:
            super().setActivate(activate)
        except AttributeError:
           pass
        self.activate = activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Selected = None
        if not self.Selected:
            self.Selected = kwargs.pop("Selected", None)
    def setIsSelected(self, Selected = None):
        try:
            super().setIsSelected(Selected)
        except AttributeError:
           pass
        self.Selected = Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
        self.Valid = None
        if not self.Valid:
            self.Valid = kwargs.pop("Valid", None)
    def setIsValid(self, Valid = None):
        try:
            super().setIsValid(Valid)
        except AttributeError:
           pass
        self.Valid = Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ParticleSystem(X3DShapeNode):
    def __init__(self, **kwargs):
        super(ParticleSystem, self).__init__(**kwargs)
        self.appearance = None
        if not self.appearance:
            self.appearance = kwargs.pop("appearance", None)
    def setAppearance(self, appearance = None):
        try:
            super().setAppearance(appearance)
        except AttributeError:
           pass
        self.appearance = appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.colorKey = []
        if not self.colorKey:
            self.colorKey = kwargs.pop("colorKey", [])
        if self.colorKey == None or len(self.colorKey) <= 0 or min(self.colorKey)  <  0:
            return None
    def setColorKey(self, colorKey = []):
        if colorKey == None or len(colorKey) <= 0 or min(colorKey)  <  0:
            return None
        try:
            super().setColorKey(colorKey)
        except AttributeError:
           pass
        self.colorKey = colorKey
        return self
    def addColorKey(self, colorKey = []):
        if colorKey == None or len(colorKey) <= 0 or min(colorKey)  <  0:
            return None
        if not isinstance(colorKey, list):
            colorKey = [colorKey]
            self.colorKey = []
            self.colorKey = self.colorKey + colorKey
        return self
    def addColorKey(self, colorKey = []):
        if colorKey == None or len(colorKey) <= 0 or min(colorKey)  <  0:
            return None
        if not isinstance(colorKey, list):
            colorKey = [colorKey]
            self.colorKey = []
            self.colorKey = self.colorKey + colorKey
        return self
        self.colorRamp = None
        if not self.colorRamp:
            self.colorRamp = kwargs.pop("colorRamp", None)
    def setColorRamp(self, colorRamp = None):
        try:
            super().setColorRamp(colorRamp)
        except AttributeError:
           pass
        self.colorRamp = colorRamp
        return self
    def addColorRamp(self, colorRamp = None):
        if not isinstance(colorRamp, list):
            colorRamp = [colorRamp]
            self.colorRamp = []
            self.colorRamp = self.colorRamp + colorRamp
        return self
    def addColorRamp(self, colorRamp = None):
        if not isinstance(colorRamp, list):
            colorRamp = [colorRamp]
            self.colorRamp = []
            self.colorRamp = self.colorRamp + colorRamp
        return self
        self.createParticles = True
        if not self.createParticles:
            self.createParticles = kwargs.pop("createParticles", True)
    def setCreateParticles(self, createParticles = True):
        try:
            super().setCreateParticles(createParticles)
        except AttributeError:
           pass
        self.createParticles = createParticles
        return self
    def addCreateParticles(self, createParticles = True):
        if not isinstance(createParticles, list):
            createParticles = [createParticles]
            self.createParticles = []
            self.createParticles = self.createParticles + createParticles
        return self
    def addCreateParticles(self, createParticles = True):
        if not isinstance(createParticles, list):
            createParticles = [createParticles]
            self.createParticles = []
            self.createParticles = self.createParticles + createParticles
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.emitter = None
        if not self.emitter:
            self.emitter = kwargs.pop("emitter", None)
    def setEmitter(self, emitter = None):
        try:
            super().setEmitter(emitter)
        except AttributeError:
           pass
        self.emitter = emitter
        return self
    def addEmitter(self, emitter = None):
        if not isinstance(emitter, list):
            emitter = [emitter]
            self.emitter = []
            self.emitter = self.emitter + emitter
        return self
    def addEmitter(self, emitter = None):
        if not isinstance(emitter, list):
            emitter = [emitter]
            self.emitter = []
            self.emitter = self.emitter + emitter
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.geometry = None
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", None)
    def setGeometry(self, geometry = None):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.geometry = None
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", None)
    def setGeometry(self, geometry = None):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.geometryType = "QUAD"
        if not self.geometryType:
            self.geometryType = kwargs.pop("geometryType", "QUAD")
    def setGeometryType(self, geometryType = "QUAD"):
        try:
            super().setGeometryType(geometryType)
        except AttributeError:
           pass
        self.geometryType = geometryType
        return self
    def addGeometryType(self, geometryType = "QUAD"):
        if not isinstance(geometryType, list):
            geometryType = [geometryType]
            self.geometryType = []
            self.geometryType = self.geometryType + geometryType
        return self
    def addGeometryType(self, geometryType = "QUAD"):
        if not isinstance(geometryType, list):
            geometryType = [geometryType]
            self.geometryType = []
            self.geometryType = self.geometryType + geometryType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.lifetimeVariation = 0.25
        if not self.lifetimeVariation:
            self.lifetimeVariation = kwargs.pop("lifetimeVariation", 0.25)
        if self.lifetimeVariation == None or self.lifetimeVariation  <  0:
            return None
        if self.lifetimeVariation == None or self.lifetimeVariation  >  1:
            return None
    def setLifetimeVariation(self, lifetimeVariation = 0.25):
        if lifetimeVariation == None or lifetimeVariation  <  0:
            return None
        if lifetimeVariation == None or lifetimeVariation  >  1:
            return None
        try:
            super().setLifetimeVariation(lifetimeVariation)
        except AttributeError:
           pass
        self.lifetimeVariation = lifetimeVariation
        return self
    def addLifetimeVariation(self, lifetimeVariation = 0.25):
        if lifetimeVariation == None or lifetimeVariation  <  0:
            return None
        if lifetimeVariation == None or lifetimeVariation  >  1:
            return None
        if not isinstance(lifetimeVariation, list):
            lifetimeVariation = [lifetimeVariation]
            self.lifetimeVariation = []
            self.lifetimeVariation = self.lifetimeVariation + lifetimeVariation
        return self
    def addLifetimeVariation(self, lifetimeVariation = 0.25):
        if lifetimeVariation == None or lifetimeVariation  <  0:
            return None
        if lifetimeVariation == None or lifetimeVariation  >  1:
            return None
        if not isinstance(lifetimeVariation, list):
            lifetimeVariation = [lifetimeVariation]
            self.lifetimeVariation = []
            self.lifetimeVariation = self.lifetimeVariation + lifetimeVariation
        return self
        self.maxParticles = 200
        if not self.maxParticles:
            self.maxParticles = kwargs.pop("maxParticles", 200)
        if self.maxParticles == None or self.maxParticles  <  0:
            return None
    def setMaxParticles(self, maxParticles = 200):
        if maxParticles == None or maxParticles  <  0:
            return None
        try:
            super().setMaxParticles(maxParticles)
        except AttributeError:
           pass
        self.maxParticles = maxParticles
        return self
    def addMaxParticles(self, maxParticles = 200):
        if maxParticles == None or maxParticles  <  0:
            return None
        if not isinstance(maxParticles, list):
            maxParticles = [maxParticles]
            self.maxParticles = []
            self.maxParticles = self.maxParticles + maxParticles
        return self
    def addMaxParticles(self, maxParticles = 200):
        if maxParticles == None or maxParticles  <  0:
            return None
        if not isinstance(maxParticles, list):
            maxParticles = [maxParticles]
            self.maxParticles = []
            self.maxParticles = self.maxParticles + maxParticles
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.particleLifetime = 5
        if not self.particleLifetime:
            self.particleLifetime = kwargs.pop("particleLifetime", 5)
        if self.particleLifetime == None or self.particleLifetime  <  0:
            return None
    def setParticleLifetime(self, particleLifetime = 5):
        if particleLifetime == None or particleLifetime  <  0:
            return None
        try:
            super().setParticleLifetime(particleLifetime)
        except AttributeError:
           pass
        self.particleLifetime = particleLifetime
        return self
    def addParticleLifetime(self, particleLifetime = 5):
        if particleLifetime == None or particleLifetime  <  0:
            return None
        if not isinstance(particleLifetime, list):
            particleLifetime = [particleLifetime]
            self.particleLifetime = []
            self.particleLifetime = self.particleLifetime + particleLifetime
        return self
    def addParticleLifetime(self, particleLifetime = 5):
        if particleLifetime == None or particleLifetime  <  0:
            return None
        if not isinstance(particleLifetime, list):
            particleLifetime = [particleLifetime]
            self.particleLifetime = []
            self.particleLifetime = self.particleLifetime + particleLifetime
        return self
        self.particleSize = [0.02, 0.02]
        if not self.particleSize:
            self.particleSize = kwargs.pop("particleSize", [0.02, 0.02])
        if self.particleSize == None or len(self.particleSize) <= 0 or min(self.particleSize)  <  0:
            return None
    def setParticleSize(self, particleSize = [0.02, 0.02]):
        if particleSize == None or len(particleSize) <= 0 or min(particleSize)  <  0:
            return None
        try:
            super().setParticleSize(particleSize)
        except AttributeError:
           pass
        self.particleSize = particleSize
        return self
    def addParticleSize(self, particleSize = [0.02, 0.02]):
        if particleSize == None or len(particleSize) <= 0 or min(particleSize)  <  0:
            return None
        if not isinstance(particleSize, list):
            particleSize = [particleSize]
            self.particleSize = []
            self.particleSize = self.particleSize + particleSize
        return self
    def addParticleSize(self, particleSize = [0.02, 0.02]):
        if particleSize == None or len(particleSize) <= 0 or min(particleSize)  <  0:
            return None
        if not isinstance(particleSize, list):
            particleSize = [particleSize]
            self.particleSize = []
            self.particleSize = self.particleSize + particleSize
        return self
        self.physics = []
        if not self.physics:
            self.physics = kwargs.pop("physics", [])
    def setPhysics(self, physics = []):
        try:
            super().setPhysics(physics)
        except AttributeError:
           pass
        self.physics = physics
        return self
    def addPhysics(self, physics = []):
        if not isinstance(physics, list):
            physics = [physics]
            self.physics = []
            self.physics = self.physics + physics
        return self
    def addPhysics(self, physics = []):
        if not isinstance(physics, list):
            physics = [physics]
            self.physics = []
            self.physics = self.physics + physics
        return self
        self.texCoordKey = []
        if not self.texCoordKey:
            self.texCoordKey = kwargs.pop("texCoordKey", [])
        if self.texCoordKey == None or len(self.texCoordKey) <= 0 or min(self.texCoordKey)  <  0:
            return None
    def setTexCoordKey(self, texCoordKey = []):
        if texCoordKey == None or len(texCoordKey) <= 0 or min(texCoordKey)  <  0:
            return None
        try:
            super().setTexCoordKey(texCoordKey)
        except AttributeError:
           pass
        self.texCoordKey = texCoordKey
        return self
    def addTexCoordKey(self, texCoordKey = []):
        if texCoordKey == None or len(texCoordKey) <= 0 or min(texCoordKey)  <  0:
            return None
        if not isinstance(texCoordKey, list):
            texCoordKey = [texCoordKey]
            self.texCoordKey = []
            self.texCoordKey = self.texCoordKey + texCoordKey
        return self
    def addTexCoordKey(self, texCoordKey = []):
        if texCoordKey == None or len(texCoordKey) <= 0 or min(texCoordKey)  <  0:
            return None
        if not isinstance(texCoordKey, list):
            texCoordKey = [texCoordKey]
            self.texCoordKey = []
            self.texCoordKey = self.texCoordKey + texCoordKey
        return self
        self.texCoordRamp = None
        if not self.texCoordRamp:
            self.texCoordRamp = kwargs.pop("texCoordRamp", None)
    def setTexCoordRamp(self, texCoordRamp = None):
        try:
            super().setTexCoordRamp(texCoordRamp)
        except AttributeError:
           pass
        self.texCoordRamp = texCoordRamp
        return self
    def addTexCoordRamp(self, texCoordRamp = None):
        if not isinstance(texCoordRamp, list):
            texCoordRamp = [texCoordRamp]
            self.texCoordRamp = []
            self.texCoordRamp = self.texCoordRamp + texCoordRamp
        return self
    def addTexCoordRamp(self, texCoordRamp = None):
        if not isinstance(texCoordRamp, list):
            texCoordRamp = [texCoordRamp]
            self.texCoordRamp = []
            self.texCoordRamp = self.texCoordRamp + texCoordRamp
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PickableGroup(X3DPickableObject, X3DGroupingNode):
    def __init__(self, **kwargs):
        super(PickableGroup, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickable = True
        if not self.pickable:
            self.pickable = kwargs.pop("pickable", True)
    def setPickable(self, pickable = True):
        try:
            super().setPickable(pickable)
        except AttributeError:
           pass
        self.pickable = pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
    def addPickable(self, pickable = True):
        if not isinstance(pickable, list):
            pickable = [pickable]
            self.pickable = []
            self.pickable = self.pickable + pickable
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PixelTexture(X3DTexture2DNode):
    def __init__(self, **kwargs):
        super(PixelTexture, self).__init__(**kwargs)
        self.image = [0, 0, 0]
        if not self.image:
            self.image = kwargs.pop("image", [0, 0, 0])
    def setImage(self, image = [0, 0, 0]):
        try:
            super().setImage(image)
        except AttributeError:
           pass
        self.image = image
        return self
    def addImage(self, image = [0, 0, 0]):
        if not isinstance(image, list):
            image = [image]
            self.image = []
            self.image = self.image + image
        return self
    def addImage(self, image = [0, 0, 0]):
        if not isinstance(image, list):
            image = [image]
            self.image = []
            self.image = self.image + image
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatS = True
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", True)
    def setRepeatS(self, repeatS = True):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = True):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = True
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", True)
    def setRepeatT(self, repeatT = True):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = True):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PixelTexture3D(X3DTexture3DNode):
    def __init__(self, **kwargs):
        super(PixelTexture3D, self).__init__(**kwargs)
        self.image = [0, 0, 0, 0]
        if not self.image:
            self.image = kwargs.pop("image", [0, 0, 0, 0])
    def setImage(self, image = [0, 0, 0, 0]):
        try:
            super().setImage(image)
        except AttributeError:
           pass
        self.image = image
        return self
    def addImage(self, image = [0, 0, 0, 0]):
        if not isinstance(image, list):
            image = [image]
            self.image = []
            self.image = self.image + image
        return self
    def addImage(self, image = [0, 0, 0, 0]):
        if not isinstance(image, list):
            image = [image]
            self.image = []
            self.image = self.image + image
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.repeatR = False
        if not self.repeatR:
            self.repeatR = kwargs.pop("repeatR", False)
    def setRepeatR(self, repeatR = False):
        try:
            super().setRepeatR(repeatR)
        except AttributeError:
           pass
        self.repeatR = repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
    def addRepeatR(self, repeatR = False):
        if not isinstance(repeatR, list):
            repeatR = [repeatR]
            self.repeatR = []
            self.repeatR = self.repeatR + repeatR
        return self
        self.repeatS = False
        if not self.repeatS:
            self.repeatS = kwargs.pop("repeatS", False)
    def setRepeatS(self, repeatS = False):
        try:
            super().setRepeatS(repeatS)
        except AttributeError:
           pass
        self.repeatS = repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
    def addRepeatS(self, repeatS = False):
        if not isinstance(repeatS, list):
            repeatS = [repeatS]
            self.repeatS = []
            self.repeatS = self.repeatS + repeatS
        return self
        self.repeatT = False
        if not self.repeatT:
            self.repeatT = kwargs.pop("repeatT", False)
    def setRepeatT(self, repeatT = False):
        try:
            super().setRepeatT(repeatT)
        except AttributeError:
           pass
        self.repeatT = repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
    def addRepeatT(self, repeatT = False):
        if not isinstance(repeatT, list):
            repeatT = [repeatT]
            self.repeatT = []
            self.repeatT = self.repeatT + repeatT
        return self
        self.textureProperties = None
        if not self.textureProperties:
            self.textureProperties = kwargs.pop("textureProperties", None)
    def setTextureProperties(self, textureProperties = None):
        try:
            super().setTextureProperties(textureProperties)
        except AttributeError:
           pass
        self.textureProperties = textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
    def addTextureProperties(self, textureProperties = None):
        if not isinstance(textureProperties, list):
            textureProperties = [textureProperties]
            self.textureProperties = []
            self.textureProperties = self.textureProperties + textureProperties
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PlaneSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super(PlaneSensor, self).__init__(**kwargs)
        self.autoOffset = True
        if not self.autoOffset:
            self.autoOffset = kwargs.pop("autoOffset", True)
    def setAutoOffset(self, autoOffset = True):
        try:
            super().setAutoOffset(autoOffset)
        except AttributeError:
           pass
        self.autoOffset = autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
        self.axisRotation = [0, 1, 0, 0]
        if not self.axisRotation:
            self.axisRotation = kwargs.pop("axisRotation", [0, 1, 0, 0])
    def setAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        try:
            super().setAxisRotation(axisRotation)
        except AttributeError:
           pass
        self.axisRotation = axisRotation
        return self
    def addAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        if not isinstance(axisRotation, list):
            axisRotation = [axisRotation]
            self.axisRotation = []
            self.axisRotation = self.axisRotation + axisRotation
        return self
    def addAxisRotation(self, axisRotation = [0, 1, 0, 0]):
        if not isinstance(axisRotation, list):
            axisRotation = [axisRotation]
            self.axisRotation = []
            self.axisRotation = self.axisRotation + axisRotation
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.maxPosition = [-1, -1]
        if not self.maxPosition:
            self.maxPosition = kwargs.pop("maxPosition", [-1, -1])
    def setMaxPosition(self, maxPosition = [-1, -1]):
        try:
            super().setMaxPosition(maxPosition)
        except AttributeError:
           pass
        self.maxPosition = maxPosition
        return self
    def addMaxPosition(self, maxPosition = [-1, -1]):
        if not isinstance(maxPosition, list):
            maxPosition = [maxPosition]
            self.maxPosition = []
            self.maxPosition = self.maxPosition + maxPosition
        return self
    def addMaxPosition(self, maxPosition = [-1, -1]):
        if not isinstance(maxPosition, list):
            maxPosition = [maxPosition]
            self.maxPosition = []
            self.maxPosition = self.maxPosition + maxPosition
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minPosition = [0, 0]
        if not self.minPosition:
            self.minPosition = kwargs.pop("minPosition", [0, 0])
    def setMinPosition(self, minPosition = [0, 0]):
        try:
            super().setMinPosition(minPosition)
        except AttributeError:
           pass
        self.minPosition = minPosition
        return self
    def addMinPosition(self, minPosition = [0, 0]):
        if not isinstance(minPosition, list):
            minPosition = [minPosition]
            self.minPosition = []
            self.minPosition = self.minPosition + minPosition
        return self
    def addMinPosition(self, minPosition = [0, 0]):
        if not isinstance(minPosition, list):
            minPosition = [minPosition]
            self.minPosition = []
            self.minPosition = self.minPosition + minPosition
        return self
        self.offset = [0, 0, 0]
        if not self.offset:
            self.offset = kwargs.pop("offset", [0, 0, 0])
    def setOffset(self, offset = [0, 0, 0]):
        try:
            super().setOffset(offset)
        except AttributeError:
           pass
        self.offset = offset
        return self
    def addOffset(self, offset = [0, 0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
    def addOffset(self, offset = [0, 0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
        self.trackPoint_changed = []
        if not self.trackPoint_changed:
            self.trackPoint_changed = kwargs.pop("trackPoint_changed", [])
    def settrackPoint_changed(self, trackPoint_changed = []):
        try:
            super().settrackPoint_changed(trackPoint_changed)
        except AttributeError:
           pass
        self.trackPoint_changed = trackPoint_changed
        return self
    def addtrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
    def addSettrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
        self.translation_changed = []
        if not self.translation_changed:
            self.translation_changed = kwargs.pop("translation_changed", [])
    def settranslation_changed(self, translation_changed = []):
        try:
            super().settranslation_changed(translation_changed)
        except AttributeError:
           pass
        self.translation_changed = translation_changed
        return self
    def addtranslation_changed(self, translation_changed = []):
        if not isinstance(translation_changed, list):
            translation_changed = [translation_changed]
            self.translation_changed = []
            self.translation_changed = self.translation_changed + translation_changed
        return self
    def addSettranslation_changed(self, translation_changed = []):
        if not isinstance(translation_changed, list):
            translation_changed = [translation_changed]
            self.translation_changed = []
            self.translation_changed = self.translation_changed + translation_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PointEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(PointEmitter, self).__init__(**kwargs)
        self.direction = [0, 1, 0]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 1, 0])
    def setDirection(self, direction = [0, 1, 0]):
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.position = [0, 0, 0]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 0])
    def setPosition(self, position = [0, 0, 0]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PointLight(X3DLightNode):
    def __init__(self, **kwargs):
        super(PointLight, self).__init__(**kwargs)
        self.ambientIntensity = 0
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.attenuation = [1, 0, 0]
        if not self.attenuation:
            self.attenuation = kwargs.pop("attenuation", [1, 0, 0])
        if self.attenuation == None or len(self.attenuation) <= 0 or min(self.attenuation)  <  0:
            return None
    def setAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        try:
            super().setAttenuation(attenuation)
        except AttributeError:
           pass
        self.attenuation = attenuation
        return self
    def addAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        if not isinstance(attenuation, list):
            attenuation = [attenuation]
            self.attenuation = []
            self.attenuation = self.attenuation + attenuation
        return self
    def addAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        if not isinstance(attenuation, list):
            attenuation = [attenuation]
            self.attenuation = []
            self.attenuation = self.attenuation + attenuation
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.global_ = True
        if not self.global_:
            self.global_ = kwargs.pop("global_", True)
    def setGlobal(self, global_ = True):
        try:
            super().setGlobal(global_)
        except AttributeError:
           pass
        self.global_ = global_
        return self
    def addGlobal(self, global_ = True):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
    def addGlobal(self, global_ = True):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
        self.intensity = 1
        if not self.intensity:
            self.intensity = kwargs.pop("intensity", 1)
        if self.intensity == None or self.intensity  <  0:
            return None
        if self.intensity == None or self.intensity  >  1:
            return None
    def setIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        try:
            super().setIntensity(intensity)
        except AttributeError:
           pass
        self.intensity = intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.location = [0, 0, 0]
        if not self.location:
            self.location = kwargs.pop("location", [0, 0, 0])
    def setLocation(self, location = [0, 0, 0]):
        try:
            super().setLocation(location)
        except AttributeError:
           pass
        self.location = location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.on = True
        if not self.on:
            self.on = kwargs.pop("on", True)
    def setOn(self, on = True):
        try:
            super().setOn(on)
        except AttributeError:
           pass
        self.on = on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
        self.radius = 100
        if not self.radius:
            self.radius = kwargs.pop("radius", 100)
        if self.radius == None or self.radius  <  0:
            return None
    def setRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PointPickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super(PointPickSensor, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersectionType = "BOUNDS"
        if not self.intersectionType:
            self.intersectionType = kwargs.pop("intersectionType", "BOUNDS")
    def setIntersectionType(self, intersectionType = "BOUNDS"):
        try:
            super().setIntersectionType(intersectionType)
        except AttributeError:
           pass
        self.intersectionType = intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.matchCriterion = "MATCH_ANY"
        if not self.matchCriterion:
            self.matchCriterion = kwargs.pop("matchCriterion", "MATCH_ANY")
        if 'MATCH_ANY' == self.matchCriterion:
            pass
        elif 'MATCH_EVERY' == self.matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == self.matchCriterion:
            pass
        else:
            return None
    def setMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        try:
            super().setMatchCriterion(matchCriterion)
        except AttributeError:
           pass
        self.matchCriterion = matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickedGeometry = []
        if not self.pickedGeometry:
            self.pickedGeometry = kwargs.pop("pickedGeometry", [])
    def setPickedGeometry(self, pickedGeometry = []):
        try:
            super().setPickedGeometry(pickedGeometry)
        except AttributeError:
           pass
        self.pickedGeometry = pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
        self.pickedPoint = []
        if not self.pickedPoint:
            self.pickedPoint = kwargs.pop("pickedPoint", [])
    def setPickedPoint(self, pickedPoint = []):
        try:
            super().setPickedPoint(pickedPoint)
        except AttributeError:
           pass
        self.pickedPoint = pickedPoint
        return self
    def addPickedPoint(self, pickedPoint = []):
        if not isinstance(pickedPoint, list):
            pickedPoint = [pickedPoint]
            self.pickedPoint = []
            self.pickedPoint = self.pickedPoint + pickedPoint
        return self
    def addPickedPoint(self, pickedPoint = []):
        if not isinstance(pickedPoint, list):
            pickedPoint = [pickedPoint]
            self.pickedPoint = []
            self.pickedPoint = self.pickedPoint + pickedPoint
        return self
        self.pickingGeometry = None
        if not self.pickingGeometry:
            self.pickingGeometry = kwargs.pop("pickingGeometry", None)
    def setPickingGeometry(self, pickingGeometry = None):
        try:
            super().setPickingGeometry(pickingGeometry)
        except AttributeError:
           pass
        self.pickingGeometry = pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
        self.pickTarget = []
        if not self.pickTarget:
            self.pickTarget = kwargs.pop("pickTarget", [])
    def setPickTarget(self, pickTarget = []):
        try:
            super().setPickTarget(pickTarget)
        except AttributeError:
           pass
        self.pickTarget = pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
        self.sortOrder = "CLOSEST"
        if not self.sortOrder:
            self.sortOrder = kwargs.pop("sortOrder", "CLOSEST")
    def setSortOrder(self, sortOrder = "CLOSEST"):
        try:
            super().setSortOrder(sortOrder)
        except AttributeError:
           pass
        self.sortOrder = sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PointProperties(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super(PointProperties, self).__init__(**kwargs)
        self.colorMode = "TEXTURE_AND_POINT_COLOR"
        if not self.colorMode:
            self.colorMode = kwargs.pop("colorMode", "TEXTURE_AND_POINT_COLOR")
        if 'POINT_COLOR' == self.colorMode:
            pass
        elif 'TEXTURE_COLOR' == self.colorMode:
            pass
        elif 'TEXTURE_AND_POINT_COLOR' == self.colorMode:
            pass
        else:
            return None
    def setColorMode(self, colorMode = "TEXTURE_AND_POINT_COLOR"):
        if 'POINT_COLOR' == colorMode:
            pass
        elif 'TEXTURE_COLOR' == colorMode:
            pass
        elif 'TEXTURE_AND_POINT_COLOR' == colorMode:
            pass
        else:
            return None
        try:
            super().setColorMode(colorMode)
        except AttributeError:
           pass
        self.colorMode = colorMode
        return self
    def addColorMode(self, colorMode = "TEXTURE_AND_POINT_COLOR"):
        if 'POINT_COLOR' == colorMode:
            pass
        elif 'TEXTURE_COLOR' == colorMode:
            pass
        elif 'TEXTURE_AND_POINT_COLOR' == colorMode:
            pass
        else:
            return None
        if not isinstance(colorMode, list):
            colorMode = [colorMode]
            self.colorMode = []
            self.colorMode = self.colorMode + colorMode
        return self
    def addColorMode(self, colorMode = "TEXTURE_AND_POINT_COLOR"):
        if 'POINT_COLOR' == colorMode:
            pass
        elif 'TEXTURE_COLOR' == colorMode:
            pass
        elif 'TEXTURE_AND_POINT_COLOR' == colorMode:
            pass
        else:
            return None
        if not isinstance(colorMode, list):
            colorMode = [colorMode]
            self.colorMode = []
            self.colorMode = self.colorMode + colorMode
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pointSizeAttenuation = [1, 0, 0]
        if not self.pointSizeAttenuation:
            self.pointSizeAttenuation = kwargs.pop("pointSizeAttenuation", [1, 0, 0])
    def setPointSizeAttenuation(self, pointSizeAttenuation = [1, 0, 0]):
        try:
            super().setPointSizeAttenuation(pointSizeAttenuation)
        except AttributeError:
           pass
        self.pointSizeAttenuation = pointSizeAttenuation
        return self
    def addPointSizeAttenuation(self, pointSizeAttenuation = [1, 0, 0]):
        if not isinstance(pointSizeAttenuation, list):
            pointSizeAttenuation = [pointSizeAttenuation]
            self.pointSizeAttenuation = []
            self.pointSizeAttenuation = self.pointSizeAttenuation + pointSizeAttenuation
        return self
    def addPointSizeAttenuation(self, pointSizeAttenuation = [1, 0, 0]):
        if not isinstance(pointSizeAttenuation, list):
            pointSizeAttenuation = [pointSizeAttenuation]
            self.pointSizeAttenuation = []
            self.pointSizeAttenuation = self.pointSizeAttenuation + pointSizeAttenuation
        return self
        self.pointSizeMaxValue = 1
        if not self.pointSizeMaxValue:
            self.pointSizeMaxValue = kwargs.pop("pointSizeMaxValue", 1)
        if self.pointSizeMaxValue == None or self.pointSizeMaxValue  <  0:
            return None
    def setPointSizeMaxValue(self, pointSizeMaxValue = 1):
        if pointSizeMaxValue == None or pointSizeMaxValue  <  0:
            return None
        try:
            super().setPointSizeMaxValue(pointSizeMaxValue)
        except AttributeError:
           pass
        self.pointSizeMaxValue = pointSizeMaxValue
        return self
    def addPointSizeMaxValue(self, pointSizeMaxValue = 1):
        if pointSizeMaxValue == None or pointSizeMaxValue  <  0:
            return None
        if not isinstance(pointSizeMaxValue, list):
            pointSizeMaxValue = [pointSizeMaxValue]
            self.pointSizeMaxValue = []
            self.pointSizeMaxValue = self.pointSizeMaxValue + pointSizeMaxValue
        return self
    def addPointSizeMaxValue(self, pointSizeMaxValue = 1):
        if pointSizeMaxValue == None or pointSizeMaxValue  <  0:
            return None
        if not isinstance(pointSizeMaxValue, list):
            pointSizeMaxValue = [pointSizeMaxValue]
            self.pointSizeMaxValue = []
            self.pointSizeMaxValue = self.pointSizeMaxValue + pointSizeMaxValue
        return self
        self.pointSizeMinValue = 1
        if not self.pointSizeMinValue:
            self.pointSizeMinValue = kwargs.pop("pointSizeMinValue", 1)
        if self.pointSizeMinValue == None or self.pointSizeMinValue  <  0:
            return None
    def setPointSizeMinValue(self, pointSizeMinValue = 1):
        if pointSizeMinValue == None or pointSizeMinValue  <  0:
            return None
        try:
            super().setPointSizeMinValue(pointSizeMinValue)
        except AttributeError:
           pass
        self.pointSizeMinValue = pointSizeMinValue
        return self
    def addPointSizeMinValue(self, pointSizeMinValue = 1):
        if pointSizeMinValue == None or pointSizeMinValue  <  0:
            return None
        if not isinstance(pointSizeMinValue, list):
            pointSizeMinValue = [pointSizeMinValue]
            self.pointSizeMinValue = []
            self.pointSizeMinValue = self.pointSizeMinValue + pointSizeMinValue
        return self
    def addPointSizeMinValue(self, pointSizeMinValue = 1):
        if pointSizeMinValue == None or pointSizeMinValue  <  0:
            return None
        if not isinstance(pointSizeMinValue, list):
            pointSizeMinValue = [pointSizeMinValue]
            self.pointSizeMinValue = []
            self.pointSizeMinValue = self.pointSizeMinValue + pointSizeMinValue
        return self
        self.pointSizeScaleFactor = 1
        if not self.pointSizeScaleFactor:
            self.pointSizeScaleFactor = kwargs.pop("pointSizeScaleFactor", 1)
        if self.pointSizeScaleFactor == None or self.pointSizeScaleFactor  <  1:
            return None
    def setPointSizeScaleFactor(self, pointSizeScaleFactor = 1):
        if pointSizeScaleFactor == None or pointSizeScaleFactor  <  1:
            return None
        try:
            super().setPointSizeScaleFactor(pointSizeScaleFactor)
        except AttributeError:
           pass
        self.pointSizeScaleFactor = pointSizeScaleFactor
        return self
    def addPointSizeScaleFactor(self, pointSizeScaleFactor = 1):
        if pointSizeScaleFactor == None or pointSizeScaleFactor  <  1:
            return None
        if not isinstance(pointSizeScaleFactor, list):
            pointSizeScaleFactor = [pointSizeScaleFactor]
            self.pointSizeScaleFactor = []
            self.pointSizeScaleFactor = self.pointSizeScaleFactor + pointSizeScaleFactor
        return self
    def addPointSizeScaleFactor(self, pointSizeScaleFactor = 1):
        if pointSizeScaleFactor == None or pointSizeScaleFactor  <  1:
            return None
        if not isinstance(pointSizeScaleFactor, list):
            pointSizeScaleFactor = [pointSizeScaleFactor]
            self.pointSizeScaleFactor = []
            self.pointSizeScaleFactor = self.pointSizeScaleFactor + pointSizeScaleFactor
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PointSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(PointSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Polyline2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Polyline2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.lineSegments = []
        if not self.lineSegments:
            self.lineSegments = kwargs.pop("lineSegments", [])
    def setLineSegments(self, lineSegments = []):
        try:
            super().setLineSegments(lineSegments)
        except AttributeError:
           pass
        self.lineSegments = lineSegments
        return self
    def addLineSegments(self, lineSegments = []):
        if not isinstance(lineSegments, list):
            lineSegments = [lineSegments]
            self.lineSegments = []
            self.lineSegments = self.lineSegments + lineSegments
        return self
    def addLineSegments(self, lineSegments = []):
        if not isinstance(lineSegments, list):
            lineSegments = [lineSegments]
            self.lineSegments = []
            self.lineSegments = self.lineSegments + lineSegments
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PolylineEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(PolylineEmitter, self).__init__(**kwargs)
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.coordIndex = -1
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", -1)
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  -1:
            return None
    def setCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.direction = [0, 1, 0]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 1, 0])
        if self.direction == None or len(self.direction) <= 0 or min(self.direction)  <  -1:
            return None
        if self.direction == None or len(self.direction) <= 0 or max(self.direction)  >  1:
            return None
    def setDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.CoordIndex = []
        if not self.CoordIndex:
            self.CoordIndex = kwargs.pop("CoordIndex", [])
        if self.CoordIndex == None or len(self.CoordIndex) <= 0 or min(self.CoordIndex)  <  -1:
            return None
    def setSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        try:
            super().setSet_coordIndex(CoordIndex)
        except AttributeError:
           pass
        self.CoordIndex = CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Polypoint2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Polypoint2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PositionChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super(PositionChaser, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = [0, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0, 0])
    def setInitialValue(self, initialValue = [0, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PositionChaser2D(X3DChaserNode):
    def __init__(self, **kwargs):
        super(PositionChaser2D, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = [0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0])
    def setInitialDestination(self, initialDestination = [0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0])
    def setInitialValue(self, initialValue = [0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PositionDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super(PositionDamper, self).__init__(**kwargs)
        self.initialDestination = [0, 0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0, 0])
    def setInitialDestination(self, initialDestination = [0, 0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0, 0])
    def setInitialValue(self, initialValue = [0, 0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PositionDamper2D(X3DDamperNode):
    def __init__(self, **kwargs):
        super(PositionDamper2D, self).__init__(**kwargs)
        self.initialDestination = [0, 0]
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [0, 0])
    def setInitialDestination(self, initialDestination = [0, 0]):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = [0, 0]):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = [0, 0]
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [0, 0])
    def setInitialValue(self, initialValue = [0, 0]):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = [0, 0]):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(PositionInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class PositionInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(PositionInterpolator2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class PrimitivePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super(PrimitivePickSensor, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersectionType = "BOUNDS"
        if not self.intersectionType:
            self.intersectionType = kwargs.pop("intersectionType", "BOUNDS")
    def setIntersectionType(self, intersectionType = "BOUNDS"):
        try:
            super().setIntersectionType(intersectionType)
        except AttributeError:
           pass
        self.intersectionType = intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.matchCriterion = "MATCH_ANY"
        if not self.matchCriterion:
            self.matchCriterion = kwargs.pop("matchCriterion", "MATCH_ANY")
        if 'MATCH_ANY' == self.matchCriterion:
            pass
        elif 'MATCH_EVERY' == self.matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == self.matchCriterion:
            pass
        else:
            return None
    def setMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        try:
            super().setMatchCriterion(matchCriterion)
        except AttributeError:
           pass
        self.matchCriterion = matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickedGeometry = []
        if not self.pickedGeometry:
            self.pickedGeometry = kwargs.pop("pickedGeometry", [])
    def setPickedGeometry(self, pickedGeometry = []):
        try:
            super().setPickedGeometry(pickedGeometry)
        except AttributeError:
           pass
        self.pickedGeometry = pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
        self.pickingGeometry = None
        if not self.pickingGeometry:
            self.pickingGeometry = kwargs.pop("pickingGeometry", None)
    def setPickingGeometry(self, pickingGeometry = None):
        try:
            super().setPickingGeometry(pickingGeometry)
        except AttributeError:
           pass
        self.pickingGeometry = pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
        self.pickTarget = []
        if not self.pickTarget:
            self.pickTarget = kwargs.pop("pickTarget", [])
    def setPickTarget(self, pickTarget = []):
        try:
            super().setPickTarget(pickTarget)
        except AttributeError:
           pass
        self.pickTarget = pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
        self.sortOrder = "CLOSEST"
        if not self.sortOrder:
            self.sortOrder = kwargs.pop("sortOrder", "CLOSEST")
    def setSortOrder(self, sortOrder = "CLOSEST"):
        try:
            super().setSortOrder(sortOrder)
        except AttributeError:
           pass
        self.sortOrder = sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProgramShader(X3DShaderNode):
    def __init__(self, **kwargs):
        super(ProgramShader, self).__init__(**kwargs)
        self.activate = None
        if not self.activate:
            self.activate = kwargs.pop("activate", None)
    def setActivate(self, activate = None):
        try:
            super().setActivate(activate)
        except AttributeError:
           pass
        self.activate = activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
    def addActivate(self, activate = None):
        if not isinstance(activate, list):
            activate = [activate]
            self.activate = []
            self.activate = self.activate + activate
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Selected = None
        if not self.Selected:
            self.Selected = kwargs.pop("Selected", None)
    def setIsSelected(self, Selected = None):
        try:
            super().setIsSelected(Selected)
        except AttributeError:
           pass
        self.Selected = Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
    def addIsSelected(self, Selected = None):
        if not isinstance(Selected, list):
            Selected = [Selected]
            self.Selected = []
            self.Selected = self.Selected + Selected
        return self
        self.Valid = None
        if not self.Valid:
            self.Valid = kwargs.pop("Valid", None)
    def setIsValid(self, Valid = None):
        try:
            super().setIsValid(Valid)
        except AttributeError:
           pass
        self.Valid = Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
    def addIsValid(self, Valid = None):
        if not isinstance(Valid, list):
            Valid = [Valid]
            self.Valid = []
            self.Valid = self.Valid + Valid
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.programs = []
        if not self.programs:
            self.programs = kwargs.pop("programs", [])
    def setPrograms(self, programs = []):
        try:
            super().setPrograms(programs)
        except AttributeError:
           pass
        self.programs = programs
        return self
    def addPrograms(self, programs = []):
        if not isinstance(programs, list):
            programs = [programs]
            self.programs = []
            self.programs = self.programs + programs
        return self
    def addPrograms(self, programs = []):
        if not isinstance(programs, list):
            programs = [programs]
            self.programs = []
            self.programs = self.programs + programs
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProjectionVolumeStyle(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(ProjectionVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intensityThreshold = 0
        if not self.intensityThreshold:
            self.intensityThreshold = kwargs.pop("intensityThreshold", 0)
        if self.intensityThreshold == None or self.intensityThreshold  <  0:
            return None
        if self.intensityThreshold == None or self.intensityThreshold  >  1:
            return None
    def setIntensityThreshold(self, intensityThreshold = 0):
        if intensityThreshold == None or intensityThreshold  <  0:
            return None
        if intensityThreshold == None or intensityThreshold  >  1:
            return None
        try:
            super().setIntensityThreshold(intensityThreshold)
        except AttributeError:
           pass
        self.intensityThreshold = intensityThreshold
        return self
    def addIntensityThreshold(self, intensityThreshold = 0):
        if intensityThreshold == None or intensityThreshold  <  0:
            return None
        if intensityThreshold == None or intensityThreshold  >  1:
            return None
        if not isinstance(intensityThreshold, list):
            intensityThreshold = [intensityThreshold]
            self.intensityThreshold = []
            self.intensityThreshold = self.intensityThreshold + intensityThreshold
        return self
    def addIntensityThreshold(self, intensityThreshold = 0):
        if intensityThreshold == None or intensityThreshold  <  0:
            return None
        if intensityThreshold == None or intensityThreshold  >  1:
            return None
        if not isinstance(intensityThreshold, list):
            intensityThreshold = [intensityThreshold]
            self.intensityThreshold = []
            self.intensityThreshold = self.intensityThreshold + intensityThreshold
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.type = "MAX"
        if not self.type:
            self.type = kwargs.pop("type", "MAX")
        if 'MAX' == self.type:
            pass
        elif 'MIN' == self.type:
            pass
        elif 'AVERAGE' == self.type:
            pass
        else:
            return None
    def setType(self, type = "MAX"):
        if 'MAX' == type:
            pass
        elif 'MIN' == type:
            pass
        elif 'AVERAGE' == type:
            pass
        else:
            return None
        try:
            super().setType(type)
        except AttributeError:
           pass
        self.type = type
        return self
    def addType(self, type = "MAX"):
        if 'MAX' == type:
            pass
        elif 'MIN' == type:
            pass
        elif 'AVERAGE' == type:
            pass
        else:
            return None
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
    def addType(self, type = "MAX"):
        if 'MAX' == type:
            pass
        elif 'MIN' == type:
            pass
        elif 'AVERAGE' == type:
            pass
        else:
            return None
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProtoInstance(X3DChildNode, X3DPrototypeInstance):
    def __init__(self, **kwargs):
        super(ProtoInstance, self).__init__(**kwargs)
        self.fieldValue = []
        if not self.fieldValue:
            self.fieldValue = kwargs.pop("fieldValue", [])
    def setFieldValue(self, fieldValue = []):
        try:
            super().setFieldValue(fieldValue)
        except AttributeError:
           pass
        self.fieldValue = fieldValue
        return self
    def addFieldValue(self, fieldValue = []):
        if not isinstance(fieldValue, list):
            fieldValue = [fieldValue]
            self.fieldValue = []
            self.fieldValue = self.fieldValue + fieldValue
        return self
    def addFieldValue(self, fieldValue = []):
        if not isinstance(fieldValue, list):
            fieldValue = [fieldValue]
            self.fieldValue = []
            self.fieldValue = self.fieldValue + fieldValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class ProximitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super(ProximitySensor, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.centerOfRotation_changed = []
        if not self.centerOfRotation_changed:
            self.centerOfRotation_changed = kwargs.pop("centerOfRotation_changed", [])
    def setcenterOfRotation_changed(self, centerOfRotation_changed = []):
        try:
            super().setcenterOfRotation_changed(centerOfRotation_changed)
        except AttributeError:
           pass
        self.centerOfRotation_changed = centerOfRotation_changed
        return self
    def addcenterOfRotation_changed(self, centerOfRotation_changed = []):
        if not isinstance(centerOfRotation_changed, list):
            centerOfRotation_changed = [centerOfRotation_changed]
            self.centerOfRotation_changed = []
            self.centerOfRotation_changed = self.centerOfRotation_changed + centerOfRotation_changed
        return self
    def addSetcenterOfRotation_changed(self, centerOfRotation_changed = []):
        if not isinstance(centerOfRotation_changed, list):
            centerOfRotation_changed = [centerOfRotation_changed]
            self.centerOfRotation_changed = []
            self.centerOfRotation_changed = self.centerOfRotation_changed + centerOfRotation_changed
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.enterTime = None
        if not self.enterTime:
            self.enterTime = kwargs.pop("enterTime", None)
    def setEnterTime(self, enterTime = None):
        try:
            super().setEnterTime(enterTime)
        except AttributeError:
           pass
        self.enterTime = enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
        self.exitTime = None
        if not self.exitTime:
            self.exitTime = kwargs.pop("exitTime", None)
    def setExitTime(self, exitTime = None):
        try:
            super().setExitTime(exitTime)
        except AttributeError:
           pass
        self.exitTime = exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation_changed = None
        if not self.orientation_changed:
            self.orientation_changed = kwargs.pop("orientation_changed", None)
    def setorientation_changed(self, orientation_changed = None):
        try:
            super().setorientation_changed(orientation_changed)
        except AttributeError:
           pass
        self.orientation_changed = orientation_changed
        return self
    def addorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
    def addSetorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
        self.position_changed = []
        if not self.position_changed:
            self.position_changed = kwargs.pop("position_changed", [])
    def setposition_changed(self, position_changed = []):
        try:
            super().setposition_changed(position_changed)
        except AttributeError:
           pass
        self.position_changed = position_changed
        return self
    def addposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
    def addSetposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <  0:
            return None
    def setSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class QuadSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(QuadSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ReceiverPdu(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super(ReceiverPdu, self).__init__(**kwargs)
        self.address = "localhost"
        if not self.address:
            self.address = kwargs.pop("address", "localhost")
    def setAddress(self, address = "localhost"):
        try:
            super().setAddress(address)
        except AttributeError:
           pass
        self.address = address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
        self.applicationID = 0
        if not self.applicationID:
            self.applicationID = kwargs.pop("applicationID", 0)
    def setApplicationID(self, applicationID = 0):
        try:
            super().setApplicationID(applicationID)
        except AttributeError:
           pass
        self.applicationID = applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.entityID = 0
        if not self.entityID:
            self.entityID = kwargs.pop("entityID", 0)
    def setEntityID(self, entityID = 0):
        try:
            super().setEntityID(entityID)
        except AttributeError:
           pass
        self.entityID = entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.NetworkReader = None
        if not self.NetworkReader:
            self.NetworkReader = kwargs.pop("NetworkReader", None)
    def setIsNetworkReader(self, NetworkReader = None):
        try:
            super().setIsNetworkReader(NetworkReader)
        except AttributeError:
           pass
        self.NetworkReader = NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
        self.NetworkWriter = None
        if not self.NetworkWriter:
            self.NetworkWriter = kwargs.pop("NetworkWriter", None)
    def setIsNetworkWriter(self, NetworkWriter = None):
        try:
            super().setIsNetworkWriter(NetworkWriter)
        except AttributeError:
           pass
        self.NetworkWriter = NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
        self.RtpHeaderHeard = None
        if not self.RtpHeaderHeard:
            self.RtpHeaderHeard = kwargs.pop("RtpHeaderHeard", None)
    def setIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        try:
            super().setIsRtpHeaderHeard(RtpHeaderHeard)
        except AttributeError:
           pass
        self.RtpHeaderHeard = RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
        self.StandAlone = None
        if not self.StandAlone:
            self.StandAlone = kwargs.pop("StandAlone", None)
    def setIsStandAlone(self, StandAlone = None):
        try:
            super().setIsStandAlone(StandAlone)
        except AttributeError:
           pass
        self.StandAlone = StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.multicastRelayHost = None
        if not self.multicastRelayHost:
            self.multicastRelayHost = kwargs.pop("multicastRelayHost", None)
    def setMulticastRelayHost(self, multicastRelayHost = None):
        try:
            super().setMulticastRelayHost(multicastRelayHost)
        except AttributeError:
           pass
        self.multicastRelayHost = multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
        self.multicastRelayPort = 0
        if not self.multicastRelayPort:
            self.multicastRelayPort = kwargs.pop("multicastRelayPort", 0)
    def setMulticastRelayPort(self, multicastRelayPort = 0):
        try:
            super().setMulticastRelayPort(multicastRelayPort)
        except AttributeError:
           pass
        self.multicastRelayPort = multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
        self.networkMode = "standAlone"
        if not self.networkMode:
            self.networkMode = kwargs.pop("networkMode", "standAlone")
        if 'standAlone' == self.networkMode:
            pass
        elif 'networkReader' == self.networkMode:
            pass
        elif 'networkWriter' == self.networkMode:
            pass
        else:
            return None
    def setNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        try:
            super().setNetworkMode(networkMode)
        except AttributeError:
           pass
        self.networkMode = networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
        self.port = 0
        if not self.port:
            self.port = kwargs.pop("port", 0)
    def setPort(self, port = 0):
        try:
            super().setPort(port)
        except AttributeError:
           pass
        self.port = port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
        self.radioID = 0
        if not self.radioID:
            self.radioID = kwargs.pop("radioID", 0)
    def setRadioID(self, radioID = 0):
        try:
            super().setRadioID(radioID)
        except AttributeError:
           pass
        self.radioID = radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
        self.readInterval = 0.1
        if not self.readInterval:
            self.readInterval = kwargs.pop("readInterval", 0.1)
        if self.readInterval == None or self.readInterval  <  0:
            return None
    def setReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        try:
            super().setReadInterval(readInterval)
        except AttributeError:
           pass
        self.readInterval = readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
        self.receivedPower = 0.0
        if not self.receivedPower:
            self.receivedPower = kwargs.pop("receivedPower", 0.0)
    def setReceivedPower(self, receivedPower = 0.0):
        try:
            super().setReceivedPower(receivedPower)
        except AttributeError:
           pass
        self.receivedPower = receivedPower
        return self
    def addReceivedPower(self, receivedPower = 0.0):
        if not isinstance(receivedPower, list):
            receivedPower = [receivedPower]
            self.receivedPower = []
            self.receivedPower = self.receivedPower + receivedPower
        return self
    def addReceivedPower(self, receivedPower = 0.0):
        if not isinstance(receivedPower, list):
            receivedPower = [receivedPower]
            self.receivedPower = []
            self.receivedPower = self.receivedPower + receivedPower
        return self
        self.receiverState = 0
        if not self.receiverState:
            self.receiverState = kwargs.pop("receiverState", 0)
    def setReceiverState(self, receiverState = 0):
        try:
            super().setReceiverState(receiverState)
        except AttributeError:
           pass
        self.receiverState = receiverState
        return self
    def addReceiverState(self, receiverState = 0):
        if not isinstance(receiverState, list):
            receiverState = [receiverState]
            self.receiverState = []
            self.receiverState = self.receiverState + receiverState
        return self
    def addReceiverState(self, receiverState = 0):
        if not isinstance(receiverState, list):
            receiverState = [receiverState]
            self.receiverState = []
            self.receiverState = self.receiverState + receiverState
        return self
        self.rtpHeaderExpected = False
        if not self.rtpHeaderExpected:
            self.rtpHeaderExpected = kwargs.pop("rtpHeaderExpected", False)
    def setRtpHeaderExpected(self, rtpHeaderExpected = False):
        try:
            super().setRtpHeaderExpected(rtpHeaderExpected)
        except AttributeError:
           pass
        self.rtpHeaderExpected = rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
        self.siteID = 0
        if not self.siteID:
            self.siteID = kwargs.pop("siteID", 0)
    def setSiteID(self, siteID = 0):
        try:
            super().setSiteID(siteID)
        except AttributeError:
           pass
        self.siteID = siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
        self.timestamp = None
        if not self.timestamp:
            self.timestamp = kwargs.pop("timestamp", None)
        if self.timestamp == None or self.timestamp  <  0:
            return None
    def setTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        try:
            super().setTimestamp(timestamp)
        except AttributeError:
           pass
        self.timestamp = timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
        self.transmitterApplicationID = 0
        if not self.transmitterApplicationID:
            self.transmitterApplicationID = kwargs.pop("transmitterApplicationID", 0)
    def setTransmitterApplicationID(self, transmitterApplicationID = 0):
        try:
            super().setTransmitterApplicationID(transmitterApplicationID)
        except AttributeError:
           pass
        self.transmitterApplicationID = transmitterApplicationID
        return self
    def addTransmitterApplicationID(self, transmitterApplicationID = 0):
        if not isinstance(transmitterApplicationID, list):
            transmitterApplicationID = [transmitterApplicationID]
            self.transmitterApplicationID = []
            self.transmitterApplicationID = self.transmitterApplicationID + transmitterApplicationID
        return self
    def addTransmitterApplicationID(self, transmitterApplicationID = 0):
        if not isinstance(transmitterApplicationID, list):
            transmitterApplicationID = [transmitterApplicationID]
            self.transmitterApplicationID = []
            self.transmitterApplicationID = self.transmitterApplicationID + transmitterApplicationID
        return self
        self.transmitterEntityID = 0
        if not self.transmitterEntityID:
            self.transmitterEntityID = kwargs.pop("transmitterEntityID", 0)
    def setTransmitterEntityID(self, transmitterEntityID = 0):
        try:
            super().setTransmitterEntityID(transmitterEntityID)
        except AttributeError:
           pass
        self.transmitterEntityID = transmitterEntityID
        return self
    def addTransmitterEntityID(self, transmitterEntityID = 0):
        if not isinstance(transmitterEntityID, list):
            transmitterEntityID = [transmitterEntityID]
            self.transmitterEntityID = []
            self.transmitterEntityID = self.transmitterEntityID + transmitterEntityID
        return self
    def addTransmitterEntityID(self, transmitterEntityID = 0):
        if not isinstance(transmitterEntityID, list):
            transmitterEntityID = [transmitterEntityID]
            self.transmitterEntityID = []
            self.transmitterEntityID = self.transmitterEntityID + transmitterEntityID
        return self
        self.transmitterRadioID = 0
        if not self.transmitterRadioID:
            self.transmitterRadioID = kwargs.pop("transmitterRadioID", 0)
    def setTransmitterRadioID(self, transmitterRadioID = 0):
        try:
            super().setTransmitterRadioID(transmitterRadioID)
        except AttributeError:
           pass
        self.transmitterRadioID = transmitterRadioID
        return self
    def addTransmitterRadioID(self, transmitterRadioID = 0):
        if not isinstance(transmitterRadioID, list):
            transmitterRadioID = [transmitterRadioID]
            self.transmitterRadioID = []
            self.transmitterRadioID = self.transmitterRadioID + transmitterRadioID
        return self
    def addTransmitterRadioID(self, transmitterRadioID = 0):
        if not isinstance(transmitterRadioID, list):
            transmitterRadioID = [transmitterRadioID]
            self.transmitterRadioID = []
            self.transmitterRadioID = self.transmitterRadioID + transmitterRadioID
        return self
        self.transmitterSiteID = 0
        if not self.transmitterSiteID:
            self.transmitterSiteID = kwargs.pop("transmitterSiteID", 0)
    def setTransmitterSiteID(self, transmitterSiteID = 0):
        try:
            super().setTransmitterSiteID(transmitterSiteID)
        except AttributeError:
           pass
        self.transmitterSiteID = transmitterSiteID
        return self
    def addTransmitterSiteID(self, transmitterSiteID = 0):
        if not isinstance(transmitterSiteID, list):
            transmitterSiteID = [transmitterSiteID]
            self.transmitterSiteID = []
            self.transmitterSiteID = self.transmitterSiteID + transmitterSiteID
        return self
    def addTransmitterSiteID(self, transmitterSiteID = 0):
        if not isinstance(transmitterSiteID, list):
            transmitterSiteID = [transmitterSiteID]
            self.transmitterSiteID = []
            self.transmitterSiteID = self.transmitterSiteID + transmitterSiteID
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.whichGeometry = 1
        if not self.whichGeometry:
            self.whichGeometry = kwargs.pop("whichGeometry", 1)
    def setWhichGeometry(self, whichGeometry = 1):
        try:
            super().setWhichGeometry(whichGeometry)
        except AttributeError:
           pass
        self.whichGeometry = whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
        self.writeInterval = 1.0
        if not self.writeInterval:
            self.writeInterval = kwargs.pop("writeInterval", 1.0)
        if self.writeInterval == None or self.writeInterval  <  0:
            return None
    def setWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        try:
            super().setWriteInterval(writeInterval)
        except AttributeError:
           pass
        self.writeInterval = writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Rectangle2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Rectangle2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = [2, 2]
        if not self.size:
            self.size = kwargs.pop("size", [2, 2])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <=  0:
            return None
    def setSize(self, size = [2, 2]):
        if size == None or len(size) <= 0 or min(size)  <=  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [2, 2]):
        if size == None or len(size) <= 0 or min(size)  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [2, 2]):
        if size == None or len(size) <= 0 or min(size)  <=  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.solid = False
        if not self.solid:
            self.solid = kwargs.pop("solid", False)
    def setSolid(self, solid = False):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class RigidBody(X3DNode):
    def __init__(self, **kwargs):
        super(RigidBody, self).__init__(**kwargs)
        self.angularDampingFactor = 0.001
        if not self.angularDampingFactor:
            self.angularDampingFactor = kwargs.pop("angularDampingFactor", 0.001)
    def setAngularDampingFactor(self, angularDampingFactor = 0.001):
        try:
            super().setAngularDampingFactor(angularDampingFactor)
        except AttributeError:
           pass
        self.angularDampingFactor = angularDampingFactor
        return self
    def addAngularDampingFactor(self, angularDampingFactor = 0.001):
        if not isinstance(angularDampingFactor, list):
            angularDampingFactor = [angularDampingFactor]
            self.angularDampingFactor = []
            self.angularDampingFactor = self.angularDampingFactor + angularDampingFactor
        return self
    def addAngularDampingFactor(self, angularDampingFactor = 0.001):
        if not isinstance(angularDampingFactor, list):
            angularDampingFactor = [angularDampingFactor]
            self.angularDampingFactor = []
            self.angularDampingFactor = self.angularDampingFactor + angularDampingFactor
        return self
        self.angularVelocity = [0, 0, 0]
        if not self.angularVelocity:
            self.angularVelocity = kwargs.pop("angularVelocity", [0, 0, 0])
    def setAngularVelocity(self, angularVelocity = [0, 0, 0]):
        try:
            super().setAngularVelocity(angularVelocity)
        except AttributeError:
           pass
        self.angularVelocity = angularVelocity
        return self
    def addAngularVelocity(self, angularVelocity = [0, 0, 0]):
        if not isinstance(angularVelocity, list):
            angularVelocity = [angularVelocity]
            self.angularVelocity = []
            self.angularVelocity = self.angularVelocity + angularVelocity
        return self
    def addAngularVelocity(self, angularVelocity = [0, 0, 0]):
        if not isinstance(angularVelocity, list):
            angularVelocity = [angularVelocity]
            self.angularVelocity = []
            self.angularVelocity = self.angularVelocity + angularVelocity
        return self
        self.autoDamp = False
        if not self.autoDamp:
            self.autoDamp = kwargs.pop("autoDamp", False)
    def setAutoDamp(self, autoDamp = False):
        try:
            super().setAutoDamp(autoDamp)
        except AttributeError:
           pass
        self.autoDamp = autoDamp
        return self
    def addAutoDamp(self, autoDamp = False):
        if not isinstance(autoDamp, list):
            autoDamp = [autoDamp]
            self.autoDamp = []
            self.autoDamp = self.autoDamp + autoDamp
        return self
    def addAutoDamp(self, autoDamp = False):
        if not isinstance(autoDamp, list):
            autoDamp = [autoDamp]
            self.autoDamp = []
            self.autoDamp = self.autoDamp + autoDamp
        return self
        self.autoDisable = False
        if not self.autoDisable:
            self.autoDisable = kwargs.pop("autoDisable", False)
    def setAutoDisable(self, autoDisable = False):
        try:
            super().setAutoDisable(autoDisable)
        except AttributeError:
           pass
        self.autoDisable = autoDisable
        return self
    def addAutoDisable(self, autoDisable = False):
        if not isinstance(autoDisable, list):
            autoDisable = [autoDisable]
            self.autoDisable = []
            self.autoDisable = self.autoDisable + autoDisable
        return self
    def addAutoDisable(self, autoDisable = False):
        if not isinstance(autoDisable, list):
            autoDisable = [autoDisable]
            self.autoDisable = []
            self.autoDisable = self.autoDisable + autoDisable
        return self
        self.centerOfMass = [0, 0, 0]
        if not self.centerOfMass:
            self.centerOfMass = kwargs.pop("centerOfMass", [0, 0, 0])
    def setCenterOfMass(self, centerOfMass = [0, 0, 0]):
        try:
            super().setCenterOfMass(centerOfMass)
        except AttributeError:
           pass
        self.centerOfMass = centerOfMass
        return self
    def addCenterOfMass(self, centerOfMass = [0, 0, 0]):
        if not isinstance(centerOfMass, list):
            centerOfMass = [centerOfMass]
            self.centerOfMass = []
            self.centerOfMass = self.centerOfMass + centerOfMass
        return self
    def addCenterOfMass(self, centerOfMass = [0, 0, 0]):
        if not isinstance(centerOfMass, list):
            centerOfMass = [centerOfMass]
            self.centerOfMass = []
            self.centerOfMass = self.centerOfMass + centerOfMass
        return self
        self.disableAngularSpeed = 0
        if not self.disableAngularSpeed:
            self.disableAngularSpeed = kwargs.pop("disableAngularSpeed", 0)
    def setDisableAngularSpeed(self, disableAngularSpeed = 0):
        try:
            super().setDisableAngularSpeed(disableAngularSpeed)
        except AttributeError:
           pass
        self.disableAngularSpeed = disableAngularSpeed
        return self
    def addDisableAngularSpeed(self, disableAngularSpeed = 0):
        if not isinstance(disableAngularSpeed, list):
            disableAngularSpeed = [disableAngularSpeed]
            self.disableAngularSpeed = []
            self.disableAngularSpeed = self.disableAngularSpeed + disableAngularSpeed
        return self
    def addDisableAngularSpeed(self, disableAngularSpeed = 0):
        if not isinstance(disableAngularSpeed, list):
            disableAngularSpeed = [disableAngularSpeed]
            self.disableAngularSpeed = []
            self.disableAngularSpeed = self.disableAngularSpeed + disableAngularSpeed
        return self
        self.disableLinearSpeed = 0
        if not self.disableLinearSpeed:
            self.disableLinearSpeed = kwargs.pop("disableLinearSpeed", 0)
    def setDisableLinearSpeed(self, disableLinearSpeed = 0):
        try:
            super().setDisableLinearSpeed(disableLinearSpeed)
        except AttributeError:
           pass
        self.disableLinearSpeed = disableLinearSpeed
        return self
    def addDisableLinearSpeed(self, disableLinearSpeed = 0):
        if not isinstance(disableLinearSpeed, list):
            disableLinearSpeed = [disableLinearSpeed]
            self.disableLinearSpeed = []
            self.disableLinearSpeed = self.disableLinearSpeed + disableLinearSpeed
        return self
    def addDisableLinearSpeed(self, disableLinearSpeed = 0):
        if not isinstance(disableLinearSpeed, list):
            disableLinearSpeed = [disableLinearSpeed]
            self.disableLinearSpeed = []
            self.disableLinearSpeed = self.disableLinearSpeed + disableLinearSpeed
        return self
        self.disableTime = 0
        if not self.disableTime:
            self.disableTime = kwargs.pop("disableTime", 0)
        if self.disableTime == None or self.disableTime  <  0:
            return None
    def setDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        try:
            super().setDisableTime(disableTime)
        except AttributeError:
           pass
        self.disableTime = disableTime
        return self
    def addDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        if not isinstance(disableTime, list):
            disableTime = [disableTime]
            self.disableTime = []
            self.disableTime = self.disableTime + disableTime
        return self
    def addDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        if not isinstance(disableTime, list):
            disableTime = [disableTime]
            self.disableTime = []
            self.disableTime = self.disableTime + disableTime
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.finiteRotationAxis = [0, 1, 0]
        if not self.finiteRotationAxis:
            self.finiteRotationAxis = kwargs.pop("finiteRotationAxis", [0, 1, 0])
    def setFiniteRotationAxis(self, finiteRotationAxis = [0, 1, 0]):
        try:
            super().setFiniteRotationAxis(finiteRotationAxis)
        except AttributeError:
           pass
        self.finiteRotationAxis = finiteRotationAxis
        return self
    def addFiniteRotationAxis(self, finiteRotationAxis = [0, 1, 0]):
        if not isinstance(finiteRotationAxis, list):
            finiteRotationAxis = [finiteRotationAxis]
            self.finiteRotationAxis = []
            self.finiteRotationAxis = self.finiteRotationAxis + finiteRotationAxis
        return self
    def addFiniteRotationAxis(self, finiteRotationAxis = [0, 1, 0]):
        if not isinstance(finiteRotationAxis, list):
            finiteRotationAxis = [finiteRotationAxis]
            self.finiteRotationAxis = []
            self.finiteRotationAxis = self.finiteRotationAxis + finiteRotationAxis
        return self
        self.fixed = False
        if not self.fixed:
            self.fixed = kwargs.pop("fixed", False)
    def setFixed(self, fixed = False):
        try:
            super().setFixed(fixed)
        except AttributeError:
           pass
        self.fixed = fixed
        return self
    def addFixed(self, fixed = False):
        if not isinstance(fixed, list):
            fixed = [fixed]
            self.fixed = []
            self.fixed = self.fixed + fixed
        return self
    def addFixed(self, fixed = False):
        if not isinstance(fixed, list):
            fixed = [fixed]
            self.fixed = []
            self.fixed = self.fixed + fixed
        return self
        self.forces = []
        if not self.forces:
            self.forces = kwargs.pop("forces", [])
    def setForces(self, forces = []):
        try:
            super().setForces(forces)
        except AttributeError:
           pass
        self.forces = forces
        return self
    def addForces(self, forces = []):
        if not isinstance(forces, list):
            forces = [forces]
            self.forces = []
            self.forces = self.forces + forces
        return self
    def addForces(self, forces = []):
        if not isinstance(forces, list):
            forces = [forces]
            self.forces = []
            self.forces = self.forces + forces
        return self
        self.geometry = []
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", [])
    def setGeometry(self, geometry = []):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = []):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = []):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.inertia = [1, 0, 0, 0, 1, 0, 0, 0, 1]
        if not self.inertia:
            self.inertia = kwargs.pop("inertia", [1, 0, 0, 0, 1, 0, 0, 0, 1])
    def setInertia(self, inertia = [1, 0, 0, 0, 1, 0, 0, 0, 1]):
        try:
            super().setInertia(inertia)
        except AttributeError:
           pass
        self.inertia = inertia
        return self
    def addInertia(self, inertia = [1, 0, 0, 0, 1, 0, 0, 0, 1]):
        if not isinstance(inertia, list):
            inertia = [inertia]
            self.inertia = []
            self.inertia = self.inertia + inertia
        return self
    def addInertia(self, inertia = [1, 0, 0, 0, 1, 0, 0, 0, 1]):
        if not isinstance(inertia, list):
            inertia = [inertia]
            self.inertia = []
            self.inertia = self.inertia + inertia
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.linearDampingFactor = 0.001
        if not self.linearDampingFactor:
            self.linearDampingFactor = kwargs.pop("linearDampingFactor", 0.001)
    def setLinearDampingFactor(self, linearDampingFactor = 0.001):
        try:
            super().setLinearDampingFactor(linearDampingFactor)
        except AttributeError:
           pass
        self.linearDampingFactor = linearDampingFactor
        return self
    def addLinearDampingFactor(self, linearDampingFactor = 0.001):
        if not isinstance(linearDampingFactor, list):
            linearDampingFactor = [linearDampingFactor]
            self.linearDampingFactor = []
            self.linearDampingFactor = self.linearDampingFactor + linearDampingFactor
        return self
    def addLinearDampingFactor(self, linearDampingFactor = 0.001):
        if not isinstance(linearDampingFactor, list):
            linearDampingFactor = [linearDampingFactor]
            self.linearDampingFactor = []
            self.linearDampingFactor = self.linearDampingFactor + linearDampingFactor
        return self
        self.linearVelocity = [0, 0, 0]
        if not self.linearVelocity:
            self.linearVelocity = kwargs.pop("linearVelocity", [0, 0, 0])
    def setLinearVelocity(self, linearVelocity = [0, 0, 0]):
        try:
            super().setLinearVelocity(linearVelocity)
        except AttributeError:
           pass
        self.linearVelocity = linearVelocity
        return self
    def addLinearVelocity(self, linearVelocity = [0, 0, 0]):
        if not isinstance(linearVelocity, list):
            linearVelocity = [linearVelocity]
            self.linearVelocity = []
            self.linearVelocity = self.linearVelocity + linearVelocity
        return self
    def addLinearVelocity(self, linearVelocity = [0, 0, 0]):
        if not isinstance(linearVelocity, list):
            linearVelocity = [linearVelocity]
            self.linearVelocity = []
            self.linearVelocity = self.linearVelocity + linearVelocity
        return self
        self.mass = 1
        if not self.mass:
            self.mass = kwargs.pop("mass", 1)
    def setMass(self, mass = 1):
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 1):
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 1):
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.massDensityModel = None
        if not self.massDensityModel:
            self.massDensityModel = kwargs.pop("massDensityModel", None)
    def setMassDensityModel(self, massDensityModel = None):
        try:
            super().setMassDensityModel(massDensityModel)
        except AttributeError:
           pass
        self.massDensityModel = massDensityModel
        return self
    def addMassDensityModel(self, massDensityModel = None):
        if not isinstance(massDensityModel, list):
            massDensityModel = [massDensityModel]
            self.massDensityModel = []
            self.massDensityModel = self.massDensityModel + massDensityModel
        return self
    def addMassDensityModel(self, massDensityModel = None):
        if not isinstance(massDensityModel, list):
            massDensityModel = [massDensityModel]
            self.massDensityModel = []
            self.massDensityModel = self.massDensityModel + massDensityModel
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.position = [0, 0, 0]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 0])
    def setPosition(self, position = [0, 0, 0]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 0]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.torques = []
        if not self.torques:
            self.torques = kwargs.pop("torques", [])
    def setTorques(self, torques = []):
        try:
            super().setTorques(torques)
        except AttributeError:
           pass
        self.torques = torques
        return self
    def addTorques(self, torques = []):
        if not isinstance(torques, list):
            torques = [torques]
            self.torques = []
            self.torques = self.torques + torques
        return self
    def addTorques(self, torques = []):
        if not isinstance(torques, list):
            torques = [torques]
            self.torques = []
            self.torques = self.torques + torques
        return self
        self.useFiniteRotation = False
        if not self.useFiniteRotation:
            self.useFiniteRotation = kwargs.pop("useFiniteRotation", False)
    def setUseFiniteRotation(self, useFiniteRotation = False):
        try:
            super().setUseFiniteRotation(useFiniteRotation)
        except AttributeError:
           pass
        self.useFiniteRotation = useFiniteRotation
        return self
    def addUseFiniteRotation(self, useFiniteRotation = False):
        if not isinstance(useFiniteRotation, list):
            useFiniteRotation = [useFiniteRotation]
            self.useFiniteRotation = []
            self.useFiniteRotation = self.useFiniteRotation + useFiniteRotation
        return self
    def addUseFiniteRotation(self, useFiniteRotation = False):
        if not isinstance(useFiniteRotation, list):
            useFiniteRotation = [useFiniteRotation]
            self.useFiniteRotation = []
            self.useFiniteRotation = self.useFiniteRotation + useFiniteRotation
        return self
        self.useGlobalGravity = True
        if not self.useGlobalGravity:
            self.useGlobalGravity = kwargs.pop("useGlobalGravity", True)
    def setUseGlobalGravity(self, useGlobalGravity = True):
        try:
            super().setUseGlobalGravity(useGlobalGravity)
        except AttributeError:
           pass
        self.useGlobalGravity = useGlobalGravity
        return self
    def addUseGlobalGravity(self, useGlobalGravity = True):
        if not isinstance(useGlobalGravity, list):
            useGlobalGravity = [useGlobalGravity]
            self.useGlobalGravity = []
            self.useGlobalGravity = self.useGlobalGravity + useGlobalGravity
        return self
    def addUseGlobalGravity(self, useGlobalGravity = True):
        if not isinstance(useGlobalGravity, list):
            useGlobalGravity = [useGlobalGravity]
            self.useGlobalGravity = []
            self.useGlobalGravity = self.useGlobalGravity + useGlobalGravity
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class RigidBodyCollection(X3DChildNode):
    def __init__(self, **kwargs):
        super(RigidBodyCollection, self).__init__(**kwargs)
        self.autoDisable = False
        if not self.autoDisable:
            self.autoDisable = kwargs.pop("autoDisable", False)
    def setAutoDisable(self, autoDisable = False):
        try:
            super().setAutoDisable(autoDisable)
        except AttributeError:
           pass
        self.autoDisable = autoDisable
        return self
    def addAutoDisable(self, autoDisable = False):
        if not isinstance(autoDisable, list):
            autoDisable = [autoDisable]
            self.autoDisable = []
            self.autoDisable = self.autoDisable + autoDisable
        return self
    def addAutoDisable(self, autoDisable = False):
        if not isinstance(autoDisable, list):
            autoDisable = [autoDisable]
            self.autoDisable = []
            self.autoDisable = self.autoDisable + autoDisable
        return self
        self.bodies = []
        if not self.bodies:
            self.bodies = kwargs.pop("bodies", [])
    def setBodies(self, bodies = []):
        try:
            super().setBodies(bodies)
        except AttributeError:
           pass
        self.bodies = bodies
        return self
    def addBodies(self, bodies = []):
        if not isinstance(bodies, list):
            bodies = [bodies]
            self.bodies = []
            self.bodies = self.bodies + bodies
        return self
    def addBodies(self, bodies = []):
        if not isinstance(bodies, list):
            bodies = [bodies]
            self.bodies = []
            self.bodies = self.bodies + bodies
        return self
        self.collider = None
        if not self.collider:
            self.collider = kwargs.pop("collider", None)
    def setCollider(self, collider = None):
        try:
            super().setCollider(collider)
        except AttributeError:
           pass
        self.collider = collider
        return self
    def addCollider(self, collider = None):
        if not isinstance(collider, list):
            collider = [collider]
            self.collider = []
            self.collider = self.collider + collider
        return self
    def addCollider(self, collider = None):
        if not isinstance(collider, list):
            collider = [collider]
            self.collider = []
            self.collider = self.collider + collider
        return self
        self.constantForceMix = 0.0001
        if not self.constantForceMix:
            self.constantForceMix = kwargs.pop("constantForceMix", 0.0001)
    def setConstantForceMix(self, constantForceMix = 0.0001):
        try:
            super().setConstantForceMix(constantForceMix)
        except AttributeError:
           pass
        self.constantForceMix = constantForceMix
        return self
    def addConstantForceMix(self, constantForceMix = 0.0001):
        if not isinstance(constantForceMix, list):
            constantForceMix = [constantForceMix]
            self.constantForceMix = []
            self.constantForceMix = self.constantForceMix + constantForceMix
        return self
    def addConstantForceMix(self, constantForceMix = 0.0001):
        if not isinstance(constantForceMix, list):
            constantForceMix = [constantForceMix]
            self.constantForceMix = []
            self.constantForceMix = self.constantForceMix + constantForceMix
        return self
        self.contactSurfaceThickness = 0
        if not self.contactSurfaceThickness:
            self.contactSurfaceThickness = kwargs.pop("contactSurfaceThickness", 0)
    def setContactSurfaceThickness(self, contactSurfaceThickness = 0):
        try:
            super().setContactSurfaceThickness(contactSurfaceThickness)
        except AttributeError:
           pass
        self.contactSurfaceThickness = contactSurfaceThickness
        return self
    def addContactSurfaceThickness(self, contactSurfaceThickness = 0):
        if not isinstance(contactSurfaceThickness, list):
            contactSurfaceThickness = [contactSurfaceThickness]
            self.contactSurfaceThickness = []
            self.contactSurfaceThickness = self.contactSurfaceThickness + contactSurfaceThickness
        return self
    def addContactSurfaceThickness(self, contactSurfaceThickness = 0):
        if not isinstance(contactSurfaceThickness, list):
            contactSurfaceThickness = [contactSurfaceThickness]
            self.contactSurfaceThickness = []
            self.contactSurfaceThickness = self.contactSurfaceThickness + contactSurfaceThickness
        return self
        self.disableAngularSpeed = 0
        if not self.disableAngularSpeed:
            self.disableAngularSpeed = kwargs.pop("disableAngularSpeed", 0)
    def setDisableAngularSpeed(self, disableAngularSpeed = 0):
        try:
            super().setDisableAngularSpeed(disableAngularSpeed)
        except AttributeError:
           pass
        self.disableAngularSpeed = disableAngularSpeed
        return self
    def addDisableAngularSpeed(self, disableAngularSpeed = 0):
        if not isinstance(disableAngularSpeed, list):
            disableAngularSpeed = [disableAngularSpeed]
            self.disableAngularSpeed = []
            self.disableAngularSpeed = self.disableAngularSpeed + disableAngularSpeed
        return self
    def addDisableAngularSpeed(self, disableAngularSpeed = 0):
        if not isinstance(disableAngularSpeed, list):
            disableAngularSpeed = [disableAngularSpeed]
            self.disableAngularSpeed = []
            self.disableAngularSpeed = self.disableAngularSpeed + disableAngularSpeed
        return self
        self.disableLinearSpeed = 0
        if not self.disableLinearSpeed:
            self.disableLinearSpeed = kwargs.pop("disableLinearSpeed", 0)
    def setDisableLinearSpeed(self, disableLinearSpeed = 0):
        try:
            super().setDisableLinearSpeed(disableLinearSpeed)
        except AttributeError:
           pass
        self.disableLinearSpeed = disableLinearSpeed
        return self
    def addDisableLinearSpeed(self, disableLinearSpeed = 0):
        if not isinstance(disableLinearSpeed, list):
            disableLinearSpeed = [disableLinearSpeed]
            self.disableLinearSpeed = []
            self.disableLinearSpeed = self.disableLinearSpeed + disableLinearSpeed
        return self
    def addDisableLinearSpeed(self, disableLinearSpeed = 0):
        if not isinstance(disableLinearSpeed, list):
            disableLinearSpeed = [disableLinearSpeed]
            self.disableLinearSpeed = []
            self.disableLinearSpeed = self.disableLinearSpeed + disableLinearSpeed
        return self
        self.disableTime = 0
        if not self.disableTime:
            self.disableTime = kwargs.pop("disableTime", 0)
        if self.disableTime == None or self.disableTime  <  0:
            return None
    def setDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        try:
            super().setDisableTime(disableTime)
        except AttributeError:
           pass
        self.disableTime = disableTime
        return self
    def addDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        if not isinstance(disableTime, list):
            disableTime = [disableTime]
            self.disableTime = []
            self.disableTime = self.disableTime + disableTime
        return self
    def addDisableTime(self, disableTime = 0):
        if disableTime == None or disableTime  <  0:
            return None
        if not isinstance(disableTime, list):
            disableTime = [disableTime]
            self.disableTime = []
            self.disableTime = self.disableTime + disableTime
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.errorCorrection = 0.8
        if not self.errorCorrection:
            self.errorCorrection = kwargs.pop("errorCorrection", 0.8)
    def setErrorCorrection(self, errorCorrection = 0.8):
        try:
            super().setErrorCorrection(errorCorrection)
        except AttributeError:
           pass
        self.errorCorrection = errorCorrection
        return self
    def addErrorCorrection(self, errorCorrection = 0.8):
        if not isinstance(errorCorrection, list):
            errorCorrection = [errorCorrection]
            self.errorCorrection = []
            self.errorCorrection = self.errorCorrection + errorCorrection
        return self
    def addErrorCorrection(self, errorCorrection = 0.8):
        if not isinstance(errorCorrection, list):
            errorCorrection = [errorCorrection]
            self.errorCorrection = []
            self.errorCorrection = self.errorCorrection + errorCorrection
        return self
        self.gravity = [0, -9.8, 0]
        if not self.gravity:
            self.gravity = kwargs.pop("gravity", [0, -9.8, 0])
    def setGravity(self, gravity = [0, -9.8, 0]):
        try:
            super().setGravity(gravity)
        except AttributeError:
           pass
        self.gravity = gravity
        return self
    def addGravity(self, gravity = [0, -9.8, 0]):
        if not isinstance(gravity, list):
            gravity = [gravity]
            self.gravity = []
            self.gravity = self.gravity + gravity
        return self
    def addGravity(self, gravity = [0, -9.8, 0]):
        if not isinstance(gravity, list):
            gravity = [gravity]
            self.gravity = []
            self.gravity = self.gravity + gravity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.iterations = 10
        if not self.iterations:
            self.iterations = kwargs.pop("iterations", 10)
    def setIterations(self, iterations = 10):
        try:
            super().setIterations(iterations)
        except AttributeError:
           pass
        self.iterations = iterations
        return self
    def addIterations(self, iterations = 10):
        if not isinstance(iterations, list):
            iterations = [iterations]
            self.iterations = []
            self.iterations = self.iterations + iterations
        return self
    def addIterations(self, iterations = 10):
        if not isinstance(iterations, list):
            iterations = [iterations]
            self.iterations = []
            self.iterations = self.iterations + iterations
        return self
        self.joints = []
        if not self.joints:
            self.joints = kwargs.pop("joints", [])
    def setJoints(self, joints = []):
        try:
            super().setJoints(joints)
        except AttributeError:
           pass
        self.joints = joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
    def addJoints(self, joints = []):
        if not isinstance(joints, list):
            joints = [joints]
            self.joints = []
            self.joints = self.joints + joints
        return self
        self.maxCorrectionSpeed = -1
        if not self.maxCorrectionSpeed:
            self.maxCorrectionSpeed = kwargs.pop("maxCorrectionSpeed", -1)
    def setMaxCorrectionSpeed(self, maxCorrectionSpeed = -1):
        try:
            super().setMaxCorrectionSpeed(maxCorrectionSpeed)
        except AttributeError:
           pass
        self.maxCorrectionSpeed = maxCorrectionSpeed
        return self
    def addMaxCorrectionSpeed(self, maxCorrectionSpeed = -1):
        if not isinstance(maxCorrectionSpeed, list):
            maxCorrectionSpeed = [maxCorrectionSpeed]
            self.maxCorrectionSpeed = []
            self.maxCorrectionSpeed = self.maxCorrectionSpeed + maxCorrectionSpeed
        return self
    def addMaxCorrectionSpeed(self, maxCorrectionSpeed = -1):
        if not isinstance(maxCorrectionSpeed, list):
            maxCorrectionSpeed = [maxCorrectionSpeed]
            self.maxCorrectionSpeed = []
            self.maxCorrectionSpeed = self.maxCorrectionSpeed + maxCorrectionSpeed
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.preferAccuracy = False
        if not self.preferAccuracy:
            self.preferAccuracy = kwargs.pop("preferAccuracy", False)
    def setPreferAccuracy(self, preferAccuracy = False):
        try:
            super().setPreferAccuracy(preferAccuracy)
        except AttributeError:
           pass
        self.preferAccuracy = preferAccuracy
        return self
    def addPreferAccuracy(self, preferAccuracy = False):
        if not isinstance(preferAccuracy, list):
            preferAccuracy = [preferAccuracy]
            self.preferAccuracy = []
            self.preferAccuracy = self.preferAccuracy + preferAccuracy
        return self
    def addPreferAccuracy(self, preferAccuracy = False):
        if not isinstance(preferAccuracy, list):
            preferAccuracy = [preferAccuracy]
            self.preferAccuracy = []
            self.preferAccuracy = self.preferAccuracy + preferAccuracy
        return self
        self.Contacts = []
        if not self.Contacts:
            self.Contacts = kwargs.pop("Contacts", [])
    def setSet_contacts(self, Contacts = []):
        try:
            super().setSet_contacts(Contacts)
        except AttributeError:
           pass
        self.Contacts = Contacts
        return self
    def addSet_contacts(self, Contacts = []):
        if not isinstance(Contacts, list):
            Contacts = [Contacts]
            self.Contacts = []
            self.Contacts = self.Contacts + Contacts
        return self
    def addSet_contacts(self, Contacts = []):
        if not isinstance(Contacts, list):
            Contacts = [Contacts]
            self.Contacts = []
            self.Contacts = self.Contacts + Contacts
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ScalarChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super(ScalarChaser, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = 0
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", 0)
    def setInitialDestination(self, initialDestination = 0):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = 0):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = 0):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = 0
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", 0)
    def setInitialValue(self, initialValue = 0):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = 0):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = 0):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = None
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", None)
    def setSet_destination(self, Destination = None):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = None
        if not self.Value:
            self.Value = kwargs.pop("Value", None)
    def setSet_value(self, Value = None):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ScalarDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super(ScalarDamper, self).__init__(**kwargs)
        self.initialDestination = 0
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", 0)
    def setInitialDestination(self, initialDestination = 0):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = 0):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = 0):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = 0
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", 0)
    def setInitialValue(self, initialValue = 0):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = 0):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = 0):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = None
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", None)
    def setSet_destination(self, Destination = None):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = None):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = None
        if not self.Value:
            self.Value = kwargs.pop("Value", None)
    def setSet_value(self, Value = None):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = None):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ScalarInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(ScalarInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ScreenFontStyle(X3DFontStyleNode):
    def __init__(self, **kwargs):
        super(ScreenFontStyle, self).__init__(**kwargs)
        self.family = "SERIF"
        if not self.family:
            self.family = kwargs.pop("family", "SERIF")
    def setFamily(self, family = "SERIF"):
        try:
            super().setFamily(family)
        except AttributeError:
           pass
        self.family = family
        return self
    def addFamily(self, family = "SERIF"):
        if not isinstance(family, list):
            family = [family]
            self.family = []
            self.family = self.family + family
        return self
    def addFamily(self, family = "SERIF"):
        if not isinstance(family, list):
            family = [family]
            self.family = []
            self.family = self.family + family
        return self
        self.horizontal = True
        if not self.horizontal:
            self.horizontal = kwargs.pop("horizontal", True)
    def setHorizontal(self, horizontal = True):
        try:
            super().setHorizontal(horizontal)
        except AttributeError:
           pass
        self.horizontal = horizontal
        return self
    def addHorizontal(self, horizontal = True):
        if not isinstance(horizontal, list):
            horizontal = [horizontal]
            self.horizontal = []
            self.horizontal = self.horizontal + horizontal
        return self
    def addHorizontal(self, horizontal = True):
        if not isinstance(horizontal, list):
            horizontal = [horizontal]
            self.horizontal = []
            self.horizontal = self.horizontal + horizontal
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.justify = "BEGIN"
        if not self.justify:
            self.justify = kwargs.pop("justify", "BEGIN")
        if '"MIDDLE"' == self.justify:
            pass
        elif '"MIDDLE" "BEGIN"' == self.justify:
            pass
        elif '"MIDDLE" "END"' == self.justify:
            pass
        elif '"MIDDLE" "FIRST"' == self.justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == self.justify:
            pass
        elif '"BEGIN"' == self.justify:
            pass
        elif '"BEGIN" "BEGIN"' == self.justify:
            pass
        elif '"BEGIN" "END"' == self.justify:
            pass
        elif '"BEGIN" "FIRST"' == self.justify:
            pass
        elif '"BEGIN" "MIDDLE"' == self.justify:
            pass
        elif '"END"' == self.justify:
            pass
        elif '"END" "BEGIN"' == self.justify:
            pass
        elif '"END" "END"' == self.justify:
            pass
        elif '"END" "FIRST"' == self.justify:
            pass
        elif '"END" "MIDDLE"' == self.justify:
            pass
        elif '"FIRST"' == self.justify:
            pass
        elif '"FIRST" "BEGIN"' == self.justify:
            pass
        elif '"FIRST" "END"' == self.justify:
            pass
        elif '"FIRST" "FIRST"' == self.justify:
            pass
        elif '"FIRST" "MIDDLE"' == self.justify:
            pass
        else:
            return None
    def setJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        try:
            super().setJustify(justify)
        except AttributeError:
           pass
        self.justify = justify
        return self
    def addJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        if not isinstance(justify, list):
            justify = [justify]
            self.justify = []
            self.justify = self.justify + justify
        return self
    def addJustify(self, justify = "BEGIN"):
        if '"MIDDLE"' == justify:
            pass
        elif '"MIDDLE" "BEGIN"' == justify:
            pass
        elif '"MIDDLE" "END"' == justify:
            pass
        elif '"MIDDLE" "FIRST"' == justify:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify:
            pass
        elif '"BEGIN"' == justify:
            pass
        elif '"BEGIN" "BEGIN"' == justify:
            pass
        elif '"BEGIN" "END"' == justify:
            pass
        elif '"BEGIN" "FIRST"' == justify:
            pass
        elif '"BEGIN" "MIDDLE"' == justify:
            pass
        elif '"END"' == justify:
            pass
        elif '"END" "BEGIN"' == justify:
            pass
        elif '"END" "END"' == justify:
            pass
        elif '"END" "FIRST"' == justify:
            pass
        elif '"END" "MIDDLE"' == justify:
            pass
        elif '"FIRST"' == justify:
            pass
        elif '"FIRST" "BEGIN"' == justify:
            pass
        elif '"FIRST" "END"' == justify:
            pass
        elif '"FIRST" "FIRST"' == justify:
            pass
        elif '"FIRST" "MIDDLE"' == justify:
            pass
        else:
            return None
        if not isinstance(justify, list):
            justify = [justify]
            self.justify = []
            self.justify = self.justify + justify
        return self
        self.language = None
        if not self.language:
            self.language = kwargs.pop("language", None)
    def setLanguage(self, language = None):
        try:
            super().setLanguage(language)
        except AttributeError:
           pass
        self.language = language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
    def addLanguage(self, language = None):
        if not isinstance(language, list):
            language = [language]
            self.language = []
            self.language = self.language + language
        return self
        self.leftToRight = True
        if not self.leftToRight:
            self.leftToRight = kwargs.pop("leftToRight", True)
    def setLeftToRight(self, leftToRight = True):
        try:
            super().setLeftToRight(leftToRight)
        except AttributeError:
           pass
        self.leftToRight = leftToRight
        return self
    def addLeftToRight(self, leftToRight = True):
        if not isinstance(leftToRight, list):
            leftToRight = [leftToRight]
            self.leftToRight = []
            self.leftToRight = self.leftToRight + leftToRight
        return self
    def addLeftToRight(self, leftToRight = True):
        if not isinstance(leftToRight, list):
            leftToRight = [leftToRight]
            self.leftToRight = []
            self.leftToRight = self.leftToRight + leftToRight
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pointSize = 12.0
        if not self.pointSize:
            self.pointSize = kwargs.pop("pointSize", 12.0)
        if self.pointSize == None or self.pointSize  <=  0:
            return None
    def setPointSize(self, pointSize = 12.0):
        if pointSize == None or pointSize  <=  0:
            return None
        try:
            super().setPointSize(pointSize)
        except AttributeError:
           pass
        self.pointSize = pointSize
        return self
    def addPointSize(self, pointSize = 12.0):
        if pointSize == None or pointSize  <=  0:
            return None
        if not isinstance(pointSize, list):
            pointSize = [pointSize]
            self.pointSize = []
            self.pointSize = self.pointSize + pointSize
        return self
    def addPointSize(self, pointSize = 12.0):
        if pointSize == None or pointSize  <=  0:
            return None
        if not isinstance(pointSize, list):
            pointSize = [pointSize]
            self.pointSize = []
            self.pointSize = self.pointSize + pointSize
        return self
        self.spacing = 1.0
        if not self.spacing:
            self.spacing = kwargs.pop("spacing", 1.0)
        if self.spacing == None or self.spacing  <  0:
            return None
    def setSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        try:
            super().setSpacing(spacing)
        except AttributeError:
           pass
        self.spacing = spacing
        return self
    def addSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        if not isinstance(spacing, list):
            spacing = [spacing]
            self.spacing = []
            self.spacing = self.spacing + spacing
        return self
    def addSpacing(self, spacing = 1.0):
        if spacing == None or spacing  <  0:
            return None
        if not isinstance(spacing, list):
            spacing = [spacing]
            self.spacing = []
            self.spacing = self.spacing + spacing
        return self
        self.style = "PLAIN"
        if not self.style:
            self.style = kwargs.pop("style", "PLAIN")
        if 'PLAIN' == self.style:
            pass
        elif 'BOLD' == self.style:
            pass
        elif 'ITALIC' == self.style:
            pass
        elif 'BOLDITALIC' == self.style:
            pass
        else:
            return None
    def setStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        try:
            super().setStyle(style)
        except AttributeError:
           pass
        self.style = style
        return self
    def addStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        if not isinstance(style, list):
            style = [style]
            self.style = []
            self.style = self.style + style
        return self
    def addStyle(self, style = "PLAIN"):
        if 'PLAIN' == style:
            pass
        elif 'BOLD' == style:
            pass
        elif 'ITALIC' == style:
            pass
        elif 'BOLDITALIC' == style:
            pass
        else:
            return None
        if not isinstance(style, list):
            style = [style]
            self.style = []
            self.style = self.style + style
        return self
        self.topToBottom = True
        if not self.topToBottom:
            self.topToBottom = kwargs.pop("topToBottom", True)
    def setTopToBottom(self, topToBottom = True):
        try:
            super().setTopToBottom(topToBottom)
        except AttributeError:
           pass
        self.topToBottom = topToBottom
        return self
    def addTopToBottom(self, topToBottom = True):
        if not isinstance(topToBottom, list):
            topToBottom = [topToBottom]
            self.topToBottom = []
            self.topToBottom = self.topToBottom + topToBottom
        return self
    def addTopToBottom(self, topToBottom = True):
        if not isinstance(topToBottom, list):
            topToBottom = [topToBottom]
            self.topToBottom = []
            self.topToBottom = self.topToBottom + topToBottom
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ScreenGroup(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(ScreenGroup, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Script(X3DScriptNode):
    def __init__(self, **kwargs):
        super(Script, self).__init__(**kwargs)
        self.directOutput = False
        if not self.directOutput:
            self.directOutput = kwargs.pop("directOutput", False)
    def setDirectOutput(self, directOutput = False):
        try:
            super().setDirectOutput(directOutput)
        except AttributeError:
           pass
        self.directOutput = directOutput
        return self
    def addDirectOutput(self, directOutput = False):
        if not isinstance(directOutput, list):
            directOutput = [directOutput]
            self.directOutput = []
            self.directOutput = self.directOutput + directOutput
        return self
    def addDirectOutput(self, directOutput = False):
        if not isinstance(directOutput, list):
            directOutput = [directOutput]
            self.directOutput = []
            self.directOutput = self.directOutput + directOutput
        return self
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.mustEvaluate = False
        if not self.mustEvaluate:
            self.mustEvaluate = kwargs.pop("mustEvaluate", False)
    def setMustEvaluate(self, mustEvaluate = False):
        try:
            super().setMustEvaluate(mustEvaluate)
        except AttributeError:
           pass
        self.mustEvaluate = mustEvaluate
        return self
    def addMustEvaluate(self, mustEvaluate = False):
        if not isinstance(mustEvaluate, list):
            mustEvaluate = [mustEvaluate]
            self.mustEvaluate = []
            self.mustEvaluate = self.mustEvaluate + mustEvaluate
        return self
    def addMustEvaluate(self, mustEvaluate = False):
        if not isinstance(mustEvaluate, list):
            mustEvaluate = [mustEvaluate]
            self.mustEvaluate = []
            self.mustEvaluate = self.mustEvaluate + mustEvaluate
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setSourceCode(self, sourceCode = None):
        try:
            super().setSourceCode(sourceCode)
        except AttributeError:
           pass
        self.sourceCode = sourceCode
        return self
    def addSourceCode(self, sourceCode = None):
        if not isinstance(sourceCode, list):
            sourceCode = [sourceCode]
            self.sourceCode = []
            self.sourceCode = self.sourceCode + sourceCode
        return self
    def addSourceCode(self, sourceCode = None):
        if not isinstance(sourceCode, list):
            sourceCode = [sourceCode]
            self.sourceCode = []
            self.sourceCode = self.sourceCode + sourceCode
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def removeField(self, field):
        self.field = [x for x in self.field if x not in field]
        return self.field
    def removeField(self, field):
        self.field = [x for x in self.field if x not in field]
        return self.field
    def getField(self, field = []):
        return self.field
    def field_changed(self, field = []):
        return self.field
    def getField(self, field = []):
        return self.field


class SegmentedVolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super(SegmentedVolumeData, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.dimensions = [1, 1, 1]
        if not self.dimensions:
            self.dimensions = kwargs.pop("dimensions", [1, 1, 1])
        if self.dimensions == None or len(self.dimensions) <= 0 or min(self.dimensions)  <=  0:
            return None
    def setDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        try:
            super().setDimensions(dimensions)
        except AttributeError:
           pass
        self.dimensions = dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.renderStyle = []
        if not self.renderStyle:
            self.renderStyle = kwargs.pop("renderStyle", [])
    def setRenderStyle(self, renderStyle = []):
        try:
            super().setRenderStyle(renderStyle)
        except AttributeError:
           pass
        self.renderStyle = renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
    def addRenderStyle(self, renderStyle = []):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
        self.segmentEnabled = []
        if not self.segmentEnabled:
            self.segmentEnabled = kwargs.pop("segmentEnabled", [])
    def setSegmentEnabled(self, segmentEnabled = []):
        try:
            super().setSegmentEnabled(segmentEnabled)
        except AttributeError:
           pass
        self.segmentEnabled = segmentEnabled
        return self
    def addSegmentEnabled(self, segmentEnabled = []):
        if not isinstance(segmentEnabled, list):
            segmentEnabled = [segmentEnabled]
            self.segmentEnabled = []
            self.segmentEnabled = self.segmentEnabled + segmentEnabled
        return self
    def addSegmentEnabled(self, segmentEnabled = []):
        if not isinstance(segmentEnabled, list):
            segmentEnabled = [segmentEnabled]
            self.segmentEnabled = []
            self.segmentEnabled = self.segmentEnabled + segmentEnabled
        return self
        self.segmentIdentifiers = None
        if not self.segmentIdentifiers:
            self.segmentIdentifiers = kwargs.pop("segmentIdentifiers", None)
    def setSegmentIdentifiers(self, segmentIdentifiers = None):
        try:
            super().setSegmentIdentifiers(segmentIdentifiers)
        except AttributeError:
           pass
        self.segmentIdentifiers = segmentIdentifiers
        return self
    def addSegmentIdentifiers(self, segmentIdentifiers = None):
        if not isinstance(segmentIdentifiers, list):
            segmentIdentifiers = [segmentIdentifiers]
            self.segmentIdentifiers = []
            self.segmentIdentifiers = self.segmentIdentifiers + segmentIdentifiers
        return self
    def addSegmentIdentifiers(self, segmentIdentifiers = None):
        if not isinstance(segmentIdentifiers, list):
            segmentIdentifiers = [segmentIdentifiers]
            self.segmentIdentifiers = []
            self.segmentIdentifiers = self.segmentIdentifiers + segmentIdentifiers
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.voxels = None
        if not self.voxels:
            self.voxels = kwargs.pop("voxels", None)
    def setVoxels(self, voxels = None):
        try:
            super().setVoxels(voxels)
        except AttributeError:
           pass
        self.voxels = voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ShadedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(ShadedVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.lighting = False
        if not self.lighting:
            self.lighting = kwargs.pop("lighting", False)
    def setLighting(self, lighting = False):
        try:
            super().setLighting(lighting)
        except AttributeError:
           pass
        self.lighting = lighting
        return self
    def addLighting(self, lighting = False):
        if not isinstance(lighting, list):
            lighting = [lighting]
            self.lighting = []
            self.lighting = self.lighting + lighting
        return self
    def addLighting(self, lighting = False):
        if not isinstance(lighting, list):
            lighting = [lighting]
            self.lighting = []
            self.lighting = self.lighting + lighting
        return self
        self.material = None
        if not self.material:
            self.material = kwargs.pop("material", None)
    def setMaterial(self, material = None):
        try:
            super().setMaterial(material)
        except AttributeError:
           pass
        self.material = material
        return self
    def addMaterial(self, material = None):
        if not isinstance(material, list):
            material = [material]
            self.material = []
            self.material = self.material + material
        return self
    def addMaterial(self, material = None):
        if not isinstance(material, list):
            material = [material]
            self.material = []
            self.material = self.material + material
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.phaseFunction = "Henyey-Greenstein"
        if not self.phaseFunction:
            self.phaseFunction = kwargs.pop("phaseFunction", "Henyey-Greenstein")
    def setPhaseFunction(self, phaseFunction = "Henyey-Greenstein"):
        try:
            super().setPhaseFunction(phaseFunction)
        except AttributeError:
           pass
        self.phaseFunction = phaseFunction
        return self
    def addPhaseFunction(self, phaseFunction = "Henyey-Greenstein"):
        if not isinstance(phaseFunction, list):
            phaseFunction = [phaseFunction]
            self.phaseFunction = []
            self.phaseFunction = self.phaseFunction + phaseFunction
        return self
    def addPhaseFunction(self, phaseFunction = "Henyey-Greenstein"):
        if not isinstance(phaseFunction, list):
            phaseFunction = [phaseFunction]
            self.phaseFunction = []
            self.phaseFunction = self.phaseFunction + phaseFunction
        return self
        self.shadows = False
        if not self.shadows:
            self.shadows = kwargs.pop("shadows", False)
    def setShadows(self, shadows = False):
        try:
            super().setShadows(shadows)
        except AttributeError:
           pass
        self.shadows = shadows
        return self
    def addShadows(self, shadows = False):
        if not isinstance(shadows, list):
            shadows = [shadows]
            self.shadows = []
            self.shadows = self.shadows + shadows
        return self
    def addShadows(self, shadows = False):
        if not isinstance(shadows, list):
            shadows = [shadows]
            self.shadows = []
            self.shadows = self.shadows + shadows
        return self
        self.surfaceNormals = None
        if not self.surfaceNormals:
            self.surfaceNormals = kwargs.pop("surfaceNormals", None)
    def setSurfaceNormals(self, surfaceNormals = None):
        try:
            super().setSurfaceNormals(surfaceNormals)
        except AttributeError:
           pass
        self.surfaceNormals = surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ShaderPart(X3DUrlObject, X3DNode):
    def __init__(self, **kwargs):
        super(ShaderPart, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.type = "VERTEX"
        if not self.type:
            self.type = kwargs.pop("type", "VERTEX")
    def setType(self, type = "VERTEX"):
        try:
            super().setType(type)
        except AttributeError:
           pass
        self.type = type
        return self
    def addType(self, type = "VERTEX"):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
    def addType(self, type = "VERTEX"):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class ShaderProgram(X3DUrlObject, X3DProgrammableShaderObject, X3DNode):
    def __init__(self, **kwargs):
        super(ShaderProgram, self).__init__(**kwargs)
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.type = "VERTEX"
        if not self.type:
            self.type = kwargs.pop("type", "VERTEX")
    def setType(self, type = "VERTEX"):
        try:
            super().setType(type)
        except AttributeError:
           pass
        self.type = type
        return self
    def addType(self, type = "VERTEX"):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
    def addType(self, type = "VERTEX"):
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Shape(X3DShapeNode):
    def __init__(self, **kwargs):
        super(Shape, self).__init__(**kwargs)
        self.appearance = None
        if not self.appearance:
            self.appearance = kwargs.pop("appearance", None)
    def setAppearance(self, appearance = None):
        try:
            super().setAppearance(appearance)
        except AttributeError:
           pass
        self.appearance = appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
    def addAppearance(self, appearance = None):
        if not isinstance(appearance, list):
            appearance = [appearance]
            self.appearance = []
            self.appearance = self.appearance + appearance
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.geometry = None
        if not self.geometry:
            self.geometry = kwargs.pop("geometry", None)
    def setGeometry(self, geometry = None):
        try:
            super().setGeometry(geometry)
        except AttributeError:
           pass
        self.geometry = geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
    def addGeometry(self, geometry = None):
        if not isinstance(geometry, list):
            geometry = [geometry]
            self.geometry = []
            self.geometry = self.geometry + geometry
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class SignalPdu(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super(SignalPdu, self).__init__(**kwargs)
        self.address = "localhost"
        if not self.address:
            self.address = kwargs.pop("address", "localhost")
    def setAddress(self, address = "localhost"):
        try:
            super().setAddress(address)
        except AttributeError:
           pass
        self.address = address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
        self.applicationID = 0
        if not self.applicationID:
            self.applicationID = kwargs.pop("applicationID", 0)
    def setApplicationID(self, applicationID = 0):
        try:
            super().setApplicationID(applicationID)
        except AttributeError:
           pass
        self.applicationID = applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.data = []
        if not self.data:
            self.data = kwargs.pop("data", [])
    def setData(self, data = []):
        try:
            super().setData(data)
        except AttributeError:
           pass
        self.data = data
        return self
    def addData(self, data = []):
        if not isinstance(data, list):
            data = [data]
            self.data = []
            self.data = self.data + data
        return self
    def addData(self, data = []):
        if not isinstance(data, list):
            data = [data]
            self.data = []
            self.data = self.data + data
        return self
        self.dataLength = 0
        if not self.dataLength:
            self.dataLength = kwargs.pop("dataLength", 0)
    def setDataLength(self, dataLength = 0):
        try:
            super().setDataLength(dataLength)
        except AttributeError:
           pass
        self.dataLength = dataLength
        return self
    def addDataLength(self, dataLength = 0):
        if not isinstance(dataLength, list):
            dataLength = [dataLength]
            self.dataLength = []
            self.dataLength = self.dataLength + dataLength
        return self
    def addDataLength(self, dataLength = 0):
        if not isinstance(dataLength, list):
            dataLength = [dataLength]
            self.dataLength = []
            self.dataLength = self.dataLength + dataLength
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.encodingScheme = 0
        if not self.encodingScheme:
            self.encodingScheme = kwargs.pop("encodingScheme", 0)
    def setEncodingScheme(self, encodingScheme = 0):
        try:
            super().setEncodingScheme(encodingScheme)
        except AttributeError:
           pass
        self.encodingScheme = encodingScheme
        return self
    def addEncodingScheme(self, encodingScheme = 0):
        if not isinstance(encodingScheme, list):
            encodingScheme = [encodingScheme]
            self.encodingScheme = []
            self.encodingScheme = self.encodingScheme + encodingScheme
        return self
    def addEncodingScheme(self, encodingScheme = 0):
        if not isinstance(encodingScheme, list):
            encodingScheme = [encodingScheme]
            self.encodingScheme = []
            self.encodingScheme = self.encodingScheme + encodingScheme
        return self
        self.entityID = 0
        if not self.entityID:
            self.entityID = kwargs.pop("entityID", 0)
    def setEntityID(self, entityID = 0):
        try:
            super().setEntityID(entityID)
        except AttributeError:
           pass
        self.entityID = entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.NetworkReader = None
        if not self.NetworkReader:
            self.NetworkReader = kwargs.pop("NetworkReader", None)
    def setIsNetworkReader(self, NetworkReader = None):
        try:
            super().setIsNetworkReader(NetworkReader)
        except AttributeError:
           pass
        self.NetworkReader = NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
        self.NetworkWriter = None
        if not self.NetworkWriter:
            self.NetworkWriter = kwargs.pop("NetworkWriter", None)
    def setIsNetworkWriter(self, NetworkWriter = None):
        try:
            super().setIsNetworkWriter(NetworkWriter)
        except AttributeError:
           pass
        self.NetworkWriter = NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
        self.RtpHeaderHeard = None
        if not self.RtpHeaderHeard:
            self.RtpHeaderHeard = kwargs.pop("RtpHeaderHeard", None)
    def setIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        try:
            super().setIsRtpHeaderHeard(RtpHeaderHeard)
        except AttributeError:
           pass
        self.RtpHeaderHeard = RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
        self.StandAlone = None
        if not self.StandAlone:
            self.StandAlone = kwargs.pop("StandAlone", None)
    def setIsStandAlone(self, StandAlone = None):
        try:
            super().setIsStandAlone(StandAlone)
        except AttributeError:
           pass
        self.StandAlone = StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.multicastRelayHost = None
        if not self.multicastRelayHost:
            self.multicastRelayHost = kwargs.pop("multicastRelayHost", None)
    def setMulticastRelayHost(self, multicastRelayHost = None):
        try:
            super().setMulticastRelayHost(multicastRelayHost)
        except AttributeError:
           pass
        self.multicastRelayHost = multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
        self.multicastRelayPort = 0
        if not self.multicastRelayPort:
            self.multicastRelayPort = kwargs.pop("multicastRelayPort", 0)
    def setMulticastRelayPort(self, multicastRelayPort = 0):
        try:
            super().setMulticastRelayPort(multicastRelayPort)
        except AttributeError:
           pass
        self.multicastRelayPort = multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
        self.networkMode = "standAlone"
        if not self.networkMode:
            self.networkMode = kwargs.pop("networkMode", "standAlone")
        if 'standAlone' == self.networkMode:
            pass
        elif 'networkReader' == self.networkMode:
            pass
        elif 'networkWriter' == self.networkMode:
            pass
        else:
            return None
    def setNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        try:
            super().setNetworkMode(networkMode)
        except AttributeError:
           pass
        self.networkMode = networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
        self.port = 0
        if not self.port:
            self.port = kwargs.pop("port", 0)
    def setPort(self, port = 0):
        try:
            super().setPort(port)
        except AttributeError:
           pass
        self.port = port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
        self.radioID = 0
        if not self.radioID:
            self.radioID = kwargs.pop("radioID", 0)
    def setRadioID(self, radioID = 0):
        try:
            super().setRadioID(radioID)
        except AttributeError:
           pass
        self.radioID = radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
        self.readInterval = 0.1
        if not self.readInterval:
            self.readInterval = kwargs.pop("readInterval", 0.1)
        if self.readInterval == None or self.readInterval  <  0:
            return None
    def setReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        try:
            super().setReadInterval(readInterval)
        except AttributeError:
           pass
        self.readInterval = readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
        self.rtpHeaderExpected = False
        if not self.rtpHeaderExpected:
            self.rtpHeaderExpected = kwargs.pop("rtpHeaderExpected", False)
    def setRtpHeaderExpected(self, rtpHeaderExpected = False):
        try:
            super().setRtpHeaderExpected(rtpHeaderExpected)
        except AttributeError:
           pass
        self.rtpHeaderExpected = rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
        self.sampleRate = 0
        if not self.sampleRate:
            self.sampleRate = kwargs.pop("sampleRate", 0)
    def setSampleRate(self, sampleRate = 0):
        try:
            super().setSampleRate(sampleRate)
        except AttributeError:
           pass
        self.sampleRate = sampleRate
        return self
    def addSampleRate(self, sampleRate = 0):
        if not isinstance(sampleRate, list):
            sampleRate = [sampleRate]
            self.sampleRate = []
            self.sampleRate = self.sampleRate + sampleRate
        return self
    def addSampleRate(self, sampleRate = 0):
        if not isinstance(sampleRate, list):
            sampleRate = [sampleRate]
            self.sampleRate = []
            self.sampleRate = self.sampleRate + sampleRate
        return self
        self.samples = 0
        if not self.samples:
            self.samples = kwargs.pop("samples", 0)
    def setSamples(self, samples = 0):
        try:
            super().setSamples(samples)
        except AttributeError:
           pass
        self.samples = samples
        return self
    def addSamples(self, samples = 0):
        if not isinstance(samples, list):
            samples = [samples]
            self.samples = []
            self.samples = self.samples + samples
        return self
    def addSamples(self, samples = 0):
        if not isinstance(samples, list):
            samples = [samples]
            self.samples = []
            self.samples = self.samples + samples
        return self
        self.siteID = 0
        if not self.siteID:
            self.siteID = kwargs.pop("siteID", 0)
    def setSiteID(self, siteID = 0):
        try:
            super().setSiteID(siteID)
        except AttributeError:
           pass
        self.siteID = siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
        self.tdlType = 0
        if not self.tdlType:
            self.tdlType = kwargs.pop("tdlType", 0)
    def setTdlType(self, tdlType = 0):
        try:
            super().setTdlType(tdlType)
        except AttributeError:
           pass
        self.tdlType = tdlType
        return self
    def addTdlType(self, tdlType = 0):
        if not isinstance(tdlType, list):
            tdlType = [tdlType]
            self.tdlType = []
            self.tdlType = self.tdlType + tdlType
        return self
    def addTdlType(self, tdlType = 0):
        if not isinstance(tdlType, list):
            tdlType = [tdlType]
            self.tdlType = []
            self.tdlType = self.tdlType + tdlType
        return self
        self.timestamp = None
        if not self.timestamp:
            self.timestamp = kwargs.pop("timestamp", None)
        if self.timestamp == None or self.timestamp  <  0:
            return None
    def setTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        try:
            super().setTimestamp(timestamp)
        except AttributeError:
           pass
        self.timestamp = timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.whichGeometry = 1
        if not self.whichGeometry:
            self.whichGeometry = kwargs.pop("whichGeometry", 1)
    def setWhichGeometry(self, whichGeometry = 1):
        try:
            super().setWhichGeometry(whichGeometry)
        except AttributeError:
           pass
        self.whichGeometry = whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
        self.writeInterval = 1.0
        if not self.writeInterval:
            self.writeInterval = kwargs.pop("writeInterval", 1.0)
        if self.writeInterval == None or self.writeInterval  <  0:
            return None
    def setWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        try:
            super().setWriteInterval(writeInterval)
        except AttributeError:
           pass
        self.writeInterval = writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SilhouetteEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(SilhouetteEnhancementVolumeStyle, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.silhouetteBoundaryOpacity = 0
        if not self.silhouetteBoundaryOpacity:
            self.silhouetteBoundaryOpacity = kwargs.pop("silhouetteBoundaryOpacity", 0)
        if self.silhouetteBoundaryOpacity == None or self.silhouetteBoundaryOpacity  <  0:
            return None
        if self.silhouetteBoundaryOpacity == None or self.silhouetteBoundaryOpacity  >  1:
            return None
    def setSilhouetteBoundaryOpacity(self, silhouetteBoundaryOpacity = 0):
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  <  0:
            return None
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  >  1:
            return None
        try:
            super().setSilhouetteBoundaryOpacity(silhouetteBoundaryOpacity)
        except AttributeError:
           pass
        self.silhouetteBoundaryOpacity = silhouetteBoundaryOpacity
        return self
    def addSilhouetteBoundaryOpacity(self, silhouetteBoundaryOpacity = 0):
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  <  0:
            return None
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  >  1:
            return None
        if not isinstance(silhouetteBoundaryOpacity, list):
            silhouetteBoundaryOpacity = [silhouetteBoundaryOpacity]
            self.silhouetteBoundaryOpacity = []
            self.silhouetteBoundaryOpacity = self.silhouetteBoundaryOpacity + silhouetteBoundaryOpacity
        return self
    def addSilhouetteBoundaryOpacity(self, silhouetteBoundaryOpacity = 0):
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  <  0:
            return None
        if silhouetteBoundaryOpacity == None or silhouetteBoundaryOpacity  >  1:
            return None
        if not isinstance(silhouetteBoundaryOpacity, list):
            silhouetteBoundaryOpacity = [silhouetteBoundaryOpacity]
            self.silhouetteBoundaryOpacity = []
            self.silhouetteBoundaryOpacity = self.silhouetteBoundaryOpacity + silhouetteBoundaryOpacity
        return self
        self.silhouetteRetainedOpacity = 1
        if not self.silhouetteRetainedOpacity:
            self.silhouetteRetainedOpacity = kwargs.pop("silhouetteRetainedOpacity", 1)
        if self.silhouetteRetainedOpacity == None or self.silhouetteRetainedOpacity  <  0:
            return None
        if self.silhouetteRetainedOpacity == None or self.silhouetteRetainedOpacity  >  1:
            return None
    def setSilhouetteRetainedOpacity(self, silhouetteRetainedOpacity = 1):
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  <  0:
            return None
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  >  1:
            return None
        try:
            super().setSilhouetteRetainedOpacity(silhouetteRetainedOpacity)
        except AttributeError:
           pass
        self.silhouetteRetainedOpacity = silhouetteRetainedOpacity
        return self
    def addSilhouetteRetainedOpacity(self, silhouetteRetainedOpacity = 1):
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  <  0:
            return None
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  >  1:
            return None
        if not isinstance(silhouetteRetainedOpacity, list):
            silhouetteRetainedOpacity = [silhouetteRetainedOpacity]
            self.silhouetteRetainedOpacity = []
            self.silhouetteRetainedOpacity = self.silhouetteRetainedOpacity + silhouetteRetainedOpacity
        return self
    def addSilhouetteRetainedOpacity(self, silhouetteRetainedOpacity = 1):
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  <  0:
            return None
        if silhouetteRetainedOpacity == None or silhouetteRetainedOpacity  >  1:
            return None
        if not isinstance(silhouetteRetainedOpacity, list):
            silhouetteRetainedOpacity = [silhouetteRetainedOpacity]
            self.silhouetteRetainedOpacity = []
            self.silhouetteRetainedOpacity = self.silhouetteRetainedOpacity + silhouetteRetainedOpacity
        return self
        self.silhouetteSharpness = 0.5
        if not self.silhouetteSharpness:
            self.silhouetteSharpness = kwargs.pop("silhouetteSharpness", 0.5)
        if self.silhouetteSharpness == None or self.silhouetteSharpness  <  0:
            return None
    def setSilhouetteSharpness(self, silhouetteSharpness = 0.5):
        if silhouetteSharpness == None or silhouetteSharpness  <  0:
            return None
        try:
            super().setSilhouetteSharpness(silhouetteSharpness)
        except AttributeError:
           pass
        self.silhouetteSharpness = silhouetteSharpness
        return self
    def addSilhouetteSharpness(self, silhouetteSharpness = 0.5):
        if silhouetteSharpness == None or silhouetteSharpness  <  0:
            return None
        if not isinstance(silhouetteSharpness, list):
            silhouetteSharpness = [silhouetteSharpness]
            self.silhouetteSharpness = []
            self.silhouetteSharpness = self.silhouetteSharpness + silhouetteSharpness
        return self
    def addSilhouetteSharpness(self, silhouetteSharpness = 0.5):
        if silhouetteSharpness == None or silhouetteSharpness  <  0:
            return None
        if not isinstance(silhouetteSharpness, list):
            silhouetteSharpness = [silhouetteSharpness]
            self.silhouetteSharpness = []
            self.silhouetteSharpness = self.silhouetteSharpness + silhouetteSharpness
        return self
        self.surfaceNormals = None
        if not self.surfaceNormals:
            self.surfaceNormals = kwargs.pop("surfaceNormals", None)
    def setSurfaceNormals(self, surfaceNormals = None):
        try:
            super().setSurfaceNormals(surfaceNormals)
        except AttributeError:
           pass
        self.surfaceNormals = surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SingleAxisHingeJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(SingleAxisHingeJoint, self).__init__(**kwargs)
        self.anchorPoint = [0, 0, 0]
        if not self.anchorPoint:
            self.anchorPoint = kwargs.pop("anchorPoint", [0, 0, 0])
    def setAnchorPoint(self, anchorPoint = [0, 0, 0]):
        try:
            super().setAnchorPoint(anchorPoint)
        except AttributeError:
           pass
        self.anchorPoint = anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
        self.angle = None
        if not self.angle:
            self.angle = kwargs.pop("angle", None)
    def setAngle(self, angle = None):
        try:
            super().setAngle(angle)
        except AttributeError:
           pass
        self.angle = angle
        return self
    def addAngle(self, angle = None):
        if not isinstance(angle, list):
            angle = [angle]
            self.angle = []
            self.angle = self.angle + angle
        return self
    def addAngle(self, angle = None):
        if not isinstance(angle, list):
            angle = [angle]
            self.angle = []
            self.angle = self.angle + angle
        return self
        self.angleRate = None
        if not self.angleRate:
            self.angleRate = kwargs.pop("angleRate", None)
    def setAngleRate(self, angleRate = None):
        try:
            super().setAngleRate(angleRate)
        except AttributeError:
           pass
        self.angleRate = angleRate
        return self
    def addAngleRate(self, angleRate = None):
        if not isinstance(angleRate, list):
            angleRate = [angleRate]
            self.angleRate = []
            self.angleRate = self.angleRate + angleRate
        return self
    def addAngleRate(self, angleRate = None):
        if not isinstance(angleRate, list):
            angleRate = [angleRate]
            self.angleRate = []
            self.angleRate = self.angleRate + angleRate
        return self
        self.axis = [0, 0, 0]
        if not self.axis:
            self.axis = kwargs.pop("axis", [0, 0, 0])
    def setAxis(self, axis = [0, 0, 0]):
        try:
            super().setAxis(axis)
        except AttributeError:
           pass
        self.axis = axis
        return self
    def addAxis(self, axis = [0, 0, 0]):
        if not isinstance(axis, list):
            axis = [axis]
            self.axis = []
            self.axis = self.axis + axis
        return self
    def addAxis(self, axis = [0, 0, 0]):
        if not isinstance(axis, list):
            axis = [axis]
            self.axis = []
            self.axis = self.axis + axis
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body1AnchorPoint = []
        if not self.body1AnchorPoint:
            self.body1AnchorPoint = kwargs.pop("body1AnchorPoint", [])
    def setBody1AnchorPoint(self, body1AnchorPoint = []):
        try:
            super().setBody1AnchorPoint(body1AnchorPoint)
        except AttributeError:
           pass
        self.body1AnchorPoint = body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.body2AnchorPoint = []
        if not self.body2AnchorPoint:
            self.body2AnchorPoint = kwargs.pop("body2AnchorPoint", [])
    def setBody2AnchorPoint(self, body2AnchorPoint = []):
        try:
            super().setBody2AnchorPoint(body2AnchorPoint)
        except AttributeError:
           pass
        self.body2AnchorPoint = body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.maxAngle = 3.141592653
        if not self.maxAngle:
            self.maxAngle = kwargs.pop("maxAngle", 3.141592653)
    def setMaxAngle(self, maxAngle = 3.141592653):
        try:
            super().setMaxAngle(maxAngle)
        except AttributeError:
           pass
        self.maxAngle = maxAngle
        return self
    def addMaxAngle(self, maxAngle = 3.141592653):
        if not isinstance(maxAngle, list):
            maxAngle = [maxAngle]
            self.maxAngle = []
            self.maxAngle = self.maxAngle + maxAngle
        return self
    def addMaxAngle(self, maxAngle = 3.141592653):
        if not isinstance(maxAngle, list):
            maxAngle = [maxAngle]
            self.maxAngle = []
            self.maxAngle = self.maxAngle + maxAngle
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minAngle = -3.141592653
        if not self.minAngle:
            self.minAngle = kwargs.pop("minAngle", -3.141592653)
    def setMinAngle(self, minAngle = -3.141592653):
        try:
            super().setMinAngle(minAngle)
        except AttributeError:
           pass
        self.minAngle = minAngle
        return self
    def addMinAngle(self, minAngle = -3.141592653):
        if not isinstance(minAngle, list):
            minAngle = [minAngle]
            self.minAngle = []
            self.minAngle = self.minAngle + minAngle
        return self
    def addMinAngle(self, minAngle = -3.141592653):
        if not isinstance(minAngle, list):
            minAngle = [minAngle]
            self.minAngle = []
            self.minAngle = self.minAngle + minAngle
        return self
        self.stopBounce = 0
        if not self.stopBounce:
            self.stopBounce = kwargs.pop("stopBounce", 0)
    def setStopBounce(self, stopBounce = 0):
        try:
            super().setStopBounce(stopBounce)
        except AttributeError:
           pass
        self.stopBounce = stopBounce
        return self
    def addStopBounce(self, stopBounce = 0):
        if not isinstance(stopBounce, list):
            stopBounce = [stopBounce]
            self.stopBounce = []
            self.stopBounce = self.stopBounce + stopBounce
        return self
    def addStopBounce(self, stopBounce = 0):
        if not isinstance(stopBounce, list):
            stopBounce = [stopBounce]
            self.stopBounce = []
            self.stopBounce = self.stopBounce + stopBounce
        return self
        self.stopErrorCorrection = 0.8
        if not self.stopErrorCorrection:
            self.stopErrorCorrection = kwargs.pop("stopErrorCorrection", 0.8)
    def setStopErrorCorrection(self, stopErrorCorrection = 0.8):
        try:
            super().setStopErrorCorrection(stopErrorCorrection)
        except AttributeError:
           pass
        self.stopErrorCorrection = stopErrorCorrection
        return self
    def addStopErrorCorrection(self, stopErrorCorrection = 0.8):
        if not isinstance(stopErrorCorrection, list):
            stopErrorCorrection = [stopErrorCorrection]
            self.stopErrorCorrection = []
            self.stopErrorCorrection = self.stopErrorCorrection + stopErrorCorrection
        return self
    def addStopErrorCorrection(self, stopErrorCorrection = 0.8):
        if not isinstance(stopErrorCorrection, list):
            stopErrorCorrection = [stopErrorCorrection]
            self.stopErrorCorrection = []
            self.stopErrorCorrection = self.stopErrorCorrection + stopErrorCorrection
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SliderJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(SliderJoint, self).__init__(**kwargs)
        self.axis = [0, 1, 0]
        if not self.axis:
            self.axis = kwargs.pop("axis", [0, 1, 0])
    def setAxis(self, axis = [0, 1, 0]):
        try:
            super().setAxis(axis)
        except AttributeError:
           pass
        self.axis = axis
        return self
    def addAxis(self, axis = [0, 1, 0]):
        if not isinstance(axis, list):
            axis = [axis]
            self.axis = []
            self.axis = self.axis + axis
        return self
    def addAxis(self, axis = [0, 1, 0]):
        if not isinstance(axis, list):
            axis = [axis]
            self.axis = []
            self.axis = self.axis + axis
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.maxSeparation = 1
        if not self.maxSeparation:
            self.maxSeparation = kwargs.pop("maxSeparation", 1)
    def setMaxSeparation(self, maxSeparation = 1):
        try:
            super().setMaxSeparation(maxSeparation)
        except AttributeError:
           pass
        self.maxSeparation = maxSeparation
        return self
    def addMaxSeparation(self, maxSeparation = 1):
        if not isinstance(maxSeparation, list):
            maxSeparation = [maxSeparation]
            self.maxSeparation = []
            self.maxSeparation = self.maxSeparation + maxSeparation
        return self
    def addMaxSeparation(self, maxSeparation = 1):
        if not isinstance(maxSeparation, list):
            maxSeparation = [maxSeparation]
            self.maxSeparation = []
            self.maxSeparation = self.maxSeparation + maxSeparation
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minSeparation = 0
        if not self.minSeparation:
            self.minSeparation = kwargs.pop("minSeparation", 0)
    def setMinSeparation(self, minSeparation = 0):
        try:
            super().setMinSeparation(minSeparation)
        except AttributeError:
           pass
        self.minSeparation = minSeparation
        return self
    def addMinSeparation(self, minSeparation = 0):
        if not isinstance(minSeparation, list):
            minSeparation = [minSeparation]
            self.minSeparation = []
            self.minSeparation = self.minSeparation + minSeparation
        return self
    def addMinSeparation(self, minSeparation = 0):
        if not isinstance(minSeparation, list):
            minSeparation = [minSeparation]
            self.minSeparation = []
            self.minSeparation = self.minSeparation + minSeparation
        return self
        self.separation = None
        if not self.separation:
            self.separation = kwargs.pop("separation", None)
    def setSeparation(self, separation = None):
        try:
            super().setSeparation(separation)
        except AttributeError:
           pass
        self.separation = separation
        return self
    def addSeparation(self, separation = None):
        if not isinstance(separation, list):
            separation = [separation]
            self.separation = []
            self.separation = self.separation + separation
        return self
    def addSeparation(self, separation = None):
        if not isinstance(separation, list):
            separation = [separation]
            self.separation = []
            self.separation = self.separation + separation
        return self
        self.separationRate = None
        if not self.separationRate:
            self.separationRate = kwargs.pop("separationRate", None)
    def setSeparationRate(self, separationRate = None):
        try:
            super().setSeparationRate(separationRate)
        except AttributeError:
           pass
        self.separationRate = separationRate
        return self
    def addSeparationRate(self, separationRate = None):
        if not isinstance(separationRate, list):
            separationRate = [separationRate]
            self.separationRate = []
            self.separationRate = self.separationRate + separationRate
        return self
    def addSeparationRate(self, separationRate = None):
        if not isinstance(separationRate, list):
            separationRate = [separationRate]
            self.separationRate = []
            self.separationRate = self.separationRate + separationRate
        return self
        self.sliderForce = 0
        if not self.sliderForce:
            self.sliderForce = kwargs.pop("sliderForce", 0)
    def setSliderForce(self, sliderForce = 0):
        try:
            super().setSliderForce(sliderForce)
        except AttributeError:
           pass
        self.sliderForce = sliderForce
        return self
    def addSliderForce(self, sliderForce = 0):
        if not isinstance(sliderForce, list):
            sliderForce = [sliderForce]
            self.sliderForce = []
            self.sliderForce = self.sliderForce + sliderForce
        return self
    def addSliderForce(self, sliderForce = 0):
        if not isinstance(sliderForce, list):
            sliderForce = [sliderForce]
            self.sliderForce = []
            self.sliderForce = self.sliderForce + sliderForce
        return self
        self.stopBounce = 0
        if not self.stopBounce:
            self.stopBounce = kwargs.pop("stopBounce", 0)
    def setStopBounce(self, stopBounce = 0):
        try:
            super().setStopBounce(stopBounce)
        except AttributeError:
           pass
        self.stopBounce = stopBounce
        return self
    def addStopBounce(self, stopBounce = 0):
        if not isinstance(stopBounce, list):
            stopBounce = [stopBounce]
            self.stopBounce = []
            self.stopBounce = self.stopBounce + stopBounce
        return self
    def addStopBounce(self, stopBounce = 0):
        if not isinstance(stopBounce, list):
            stopBounce = [stopBounce]
            self.stopBounce = []
            self.stopBounce = self.stopBounce + stopBounce
        return self
        self.stopErrorCorrection = 1
        if not self.stopErrorCorrection:
            self.stopErrorCorrection = kwargs.pop("stopErrorCorrection", 1)
    def setStopErrorCorrection(self, stopErrorCorrection = 1):
        try:
            super().setStopErrorCorrection(stopErrorCorrection)
        except AttributeError:
           pass
        self.stopErrorCorrection = stopErrorCorrection
        return self
    def addStopErrorCorrection(self, stopErrorCorrection = 1):
        if not isinstance(stopErrorCorrection, list):
            stopErrorCorrection = [stopErrorCorrection]
            self.stopErrorCorrection = []
            self.stopErrorCorrection = self.stopErrorCorrection + stopErrorCorrection
        return self
    def addStopErrorCorrection(self, stopErrorCorrection = 1):
        if not isinstance(stopErrorCorrection, list):
            stopErrorCorrection = [stopErrorCorrection]
            self.stopErrorCorrection = []
            self.stopErrorCorrection = self.stopErrorCorrection + stopErrorCorrection
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Sound(X3DSoundNode):
    def __init__(self, **kwargs):
        super(Sound, self).__init__(**kwargs)
        self.direction = [0, 0, 1]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 0, 1])
    def setDirection(self, direction = [0, 0, 1]):
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 0, 1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 0, 1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.intensity = 1
        if not self.intensity:
            self.intensity = kwargs.pop("intensity", 1)
        if self.intensity == None or self.intensity  <  0:
            return None
        if self.intensity == None or self.intensity  >  1:
            return None
    def setIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        try:
            super().setIntensity(intensity)
        except AttributeError:
           pass
        self.intensity = intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.location = [0, 0, 0]
        if not self.location:
            self.location = kwargs.pop("location", [0, 0, 0])
    def setLocation(self, location = [0, 0, 0]):
        try:
            super().setLocation(location)
        except AttributeError:
           pass
        self.location = location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
        self.maxBack = 10
        if not self.maxBack:
            self.maxBack = kwargs.pop("maxBack", 10)
        if self.maxBack == None or self.maxBack  <  0:
            return None
    def setMaxBack(self, maxBack = 10):
        if maxBack == None or maxBack  <  0:
            return None
        try:
            super().setMaxBack(maxBack)
        except AttributeError:
           pass
        self.maxBack = maxBack
        return self
    def addMaxBack(self, maxBack = 10):
        if maxBack == None or maxBack  <  0:
            return None
        if not isinstance(maxBack, list):
            maxBack = [maxBack]
            self.maxBack = []
            self.maxBack = self.maxBack + maxBack
        return self
    def addMaxBack(self, maxBack = 10):
        if maxBack == None or maxBack  <  0:
            return None
        if not isinstance(maxBack, list):
            maxBack = [maxBack]
            self.maxBack = []
            self.maxBack = self.maxBack + maxBack
        return self
        self.maxFront = 10
        if not self.maxFront:
            self.maxFront = kwargs.pop("maxFront", 10)
        if self.maxFront == None or self.maxFront  <  0:
            return None
    def setMaxFront(self, maxFront = 10):
        if maxFront == None or maxFront  <  0:
            return None
        try:
            super().setMaxFront(maxFront)
        except AttributeError:
           pass
        self.maxFront = maxFront
        return self
    def addMaxFront(self, maxFront = 10):
        if maxFront == None or maxFront  <  0:
            return None
        if not isinstance(maxFront, list):
            maxFront = [maxFront]
            self.maxFront = []
            self.maxFront = self.maxFront + maxFront
        return self
    def addMaxFront(self, maxFront = 10):
        if maxFront == None or maxFront  <  0:
            return None
        if not isinstance(maxFront, list):
            maxFront = [maxFront]
            self.maxFront = []
            self.maxFront = self.maxFront + maxFront
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minBack = 1
        if not self.minBack:
            self.minBack = kwargs.pop("minBack", 1)
        if self.minBack == None or self.minBack  <  0:
            return None
    def setMinBack(self, minBack = 1):
        if minBack == None or minBack  <  0:
            return None
        try:
            super().setMinBack(minBack)
        except AttributeError:
           pass
        self.minBack = minBack
        return self
    def addMinBack(self, minBack = 1):
        if minBack == None or minBack  <  0:
            return None
        if not isinstance(minBack, list):
            minBack = [minBack]
            self.minBack = []
            self.minBack = self.minBack + minBack
        return self
    def addMinBack(self, minBack = 1):
        if minBack == None or minBack  <  0:
            return None
        if not isinstance(minBack, list):
            minBack = [minBack]
            self.minBack = []
            self.minBack = self.minBack + minBack
        return self
        self.minFront = 1
        if not self.minFront:
            self.minFront = kwargs.pop("minFront", 1)
        if self.minFront == None or self.minFront  <  0:
            return None
    def setMinFront(self, minFront = 1):
        if minFront == None or minFront  <  0:
            return None
        try:
            super().setMinFront(minFront)
        except AttributeError:
           pass
        self.minFront = minFront
        return self
    def addMinFront(self, minFront = 1):
        if minFront == None or minFront  <  0:
            return None
        if not isinstance(minFront, list):
            minFront = [minFront]
            self.minFront = []
            self.minFront = self.minFront + minFront
        return self
    def addMinFront(self, minFront = 1):
        if minFront == None or minFront  <  0:
            return None
        if not isinstance(minFront, list):
            minFront = [minFront]
            self.minFront = []
            self.minFront = self.minFront + minFront
        return self
        self.priority = 0
        if not self.priority:
            self.priority = kwargs.pop("priority", 0)
        if self.priority == None or self.priority  <  0:
            return None
        if self.priority == None or self.priority  >  1:
            return None
    def setPriority(self, priority = 0):
        if priority == None or priority  <  0:
            return None
        if priority == None or priority  >  1:
            return None
        try:
            super().setPriority(priority)
        except AttributeError:
           pass
        self.priority = priority
        return self
    def addPriority(self, priority = 0):
        if priority == None or priority  <  0:
            return None
        if priority == None or priority  >  1:
            return None
        if not isinstance(priority, list):
            priority = [priority]
            self.priority = []
            self.priority = self.priority + priority
        return self
    def addPriority(self, priority = 0):
        if priority == None or priority  <  0:
            return None
        if priority == None or priority  >  1:
            return None
        if not isinstance(priority, list):
            priority = [priority]
            self.priority = []
            self.priority = self.priority + priority
        return self
        self.source = None
        if not self.source:
            self.source = kwargs.pop("source", None)
    def setSource(self, source = None):
        try:
            super().setSource(source)
        except AttributeError:
           pass
        self.source = source
        return self
    def addSource(self, source = None):
        if not isinstance(source, list):
            source = [source]
            self.source = []
            self.source = self.source + source
        return self
    def addSource(self, source = None):
        if not isinstance(source, list):
            source = [source]
            self.source = []
            self.source = self.source + source
        return self
        self.spatialize = True
        if not self.spatialize:
            self.spatialize = kwargs.pop("spatialize", True)
    def setSpatialize(self, spatialize = True):
        try:
            super().setSpatialize(spatialize)
        except AttributeError:
           pass
        self.spatialize = spatialize
        return self
    def addSpatialize(self, spatialize = True):
        if not isinstance(spatialize, list):
            spatialize = [spatialize]
            self.spatialize = []
            self.spatialize = self.spatialize + spatialize
        return self
    def addSpatialize(self, spatialize = True):
        if not isinstance(spatialize, list):
            spatialize = [spatialize]
            self.spatialize = []
            self.spatialize = self.spatialize + spatialize
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Sphere(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Sphere, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.radius = 1
        if not self.radius:
            self.radius = kwargs.pop("radius", 1)
        if self.radius == None or self.radius  <=  0:
            return None
    def setRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 1):
        if radius == None or radius  <=  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SphereSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super(SphereSensor, self).__init__(**kwargs)
        self.autoOffset = True
        if not self.autoOffset:
            self.autoOffset = kwargs.pop("autoOffset", True)
    def setAutoOffset(self, autoOffset = True):
        try:
            super().setAutoOffset(autoOffset)
        except AttributeError:
           pass
        self.autoOffset = autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
    def addAutoOffset(self, autoOffset = True):
        if not isinstance(autoOffset, list):
            autoOffset = [autoOffset]
            self.autoOffset = []
            self.autoOffset = self.autoOffset + autoOffset
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.offset = [0, 1, 0, 0]
        if not self.offset:
            self.offset = kwargs.pop("offset", [0, 1, 0, 0])
    def setOffset(self, offset = [0, 1, 0, 0]):
        try:
            super().setOffset(offset)
        except AttributeError:
           pass
        self.offset = offset
        return self
    def addOffset(self, offset = [0, 1, 0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
    def addOffset(self, offset = [0, 1, 0, 0]):
        if not isinstance(offset, list):
            offset = [offset]
            self.offset = []
            self.offset = self.offset + offset
        return self
        self.rotation_changed = None
        if not self.rotation_changed:
            self.rotation_changed = kwargs.pop("rotation_changed", None)
    def setrotation_changed(self, rotation_changed = None):
        try:
            super().setrotation_changed(rotation_changed)
        except AttributeError:
           pass
        self.rotation_changed = rotation_changed
        return self
    def addrotation_changed(self, rotation_changed = None):
        if not isinstance(rotation_changed, list):
            rotation_changed = [rotation_changed]
            self.rotation_changed = []
            self.rotation_changed = self.rotation_changed + rotation_changed
        return self
    def addSetrotation_changed(self, rotation_changed = None):
        if not isinstance(rotation_changed, list):
            rotation_changed = [rotation_changed]
            self.rotation_changed = []
            self.rotation_changed = self.rotation_changed + rotation_changed
        return self
        self.trackPoint_changed = []
        if not self.trackPoint_changed:
            self.trackPoint_changed = kwargs.pop("trackPoint_changed", [])
    def settrackPoint_changed(self, trackPoint_changed = []):
        try:
            super().settrackPoint_changed(trackPoint_changed)
        except AttributeError:
           pass
        self.trackPoint_changed = trackPoint_changed
        return self
    def addtrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
    def addSettrackPoint_changed(self, trackPoint_changed = []):
        if not isinstance(trackPoint_changed, list):
            trackPoint_changed = [trackPoint_changed]
            self.trackPoint_changed = []
            self.trackPoint_changed = self.trackPoint_changed + trackPoint_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SplinePositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(SplinePositionInterpolator, self).__init__(**kwargs)
        self.closed = False
        if not self.closed:
            self.closed = kwargs.pop("closed", False)
    def setClosed(self, closed = False):
        try:
            super().setClosed(closed)
        except AttributeError:
           pass
        self.closed = closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.keyVelocity = []
        if not self.keyVelocity:
            self.keyVelocity = kwargs.pop("keyVelocity", [])
    def setKeyVelocity(self, keyVelocity = []):
        try:
            super().setKeyVelocity(keyVelocity)
        except AttributeError:
           pass
        self.keyVelocity = keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normalizeVelocity = False
        if not self.normalizeVelocity:
            self.normalizeVelocity = kwargs.pop("normalizeVelocity", False)
    def setNormalizeVelocity(self, normalizeVelocity = False):
        try:
            super().setNormalizeVelocity(normalizeVelocity)
        except AttributeError:
           pass
        self.normalizeVelocity = normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SplinePositionInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(SplinePositionInterpolator2D, self).__init__(**kwargs)
        self.closed = False
        if not self.closed:
            self.closed = kwargs.pop("closed", False)
    def setClosed(self, closed = False):
        try:
            super().setClosed(closed)
        except AttributeError:
           pass
        self.closed = closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.keyVelocity = []
        if not self.keyVelocity:
            self.keyVelocity = kwargs.pop("keyVelocity", [])
    def setKeyVelocity(self, keyVelocity = []):
        try:
            super().setKeyVelocity(keyVelocity)
        except AttributeError:
           pass
        self.keyVelocity = keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normalizeVelocity = False
        if not self.normalizeVelocity:
            self.normalizeVelocity = kwargs.pop("normalizeVelocity", False)
    def setNormalizeVelocity(self, normalizeVelocity = False):
        try:
            super().setNormalizeVelocity(normalizeVelocity)
        except AttributeError:
           pass
        self.normalizeVelocity = normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SplineScalarInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(SplineScalarInterpolator, self).__init__(**kwargs)
        self.closed = False
        if not self.closed:
            self.closed = kwargs.pop("closed", False)
    def setClosed(self, closed = False):
        try:
            super().setClosed(closed)
        except AttributeError:
           pass
        self.closed = closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
    def addClosed(self, closed = False):
        if not isinstance(closed, list):
            closed = [closed]
            self.closed = []
            self.closed = self.closed + closed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.keyVelocity = []
        if not self.keyVelocity:
            self.keyVelocity = kwargs.pop("keyVelocity", [])
    def setKeyVelocity(self, keyVelocity = []):
        try:
            super().setKeyVelocity(keyVelocity)
        except AttributeError:
           pass
        self.keyVelocity = keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
    def addKeyVelocity(self, keyVelocity = []):
        if not isinstance(keyVelocity, list):
            keyVelocity = [keyVelocity]
            self.keyVelocity = []
            self.keyVelocity = self.keyVelocity + keyVelocity
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normalizeVelocity = False
        if not self.normalizeVelocity:
            self.normalizeVelocity = kwargs.pop("normalizeVelocity", False)
    def setNormalizeVelocity(self, normalizeVelocity = False):
        try:
            super().setNormalizeVelocity(normalizeVelocity)
        except AttributeError:
           pass
        self.normalizeVelocity = normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SpotLight(X3DLightNode):
    def __init__(self, **kwargs):
        super(SpotLight, self).__init__(**kwargs)
        self.ambientIntensity = 0
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.attenuation = [1, 0, 0]
        if not self.attenuation:
            self.attenuation = kwargs.pop("attenuation", [1, 0, 0])
        if self.attenuation == None or len(self.attenuation) <= 0 or min(self.attenuation)  <  0:
            return None
    def setAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        try:
            super().setAttenuation(attenuation)
        except AttributeError:
           pass
        self.attenuation = attenuation
        return self
    def addAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        if not isinstance(attenuation, list):
            attenuation = [attenuation]
            self.attenuation = []
            self.attenuation = self.attenuation + attenuation
        return self
    def addAttenuation(self, attenuation = [1, 0, 0]):
        if attenuation == None or len(attenuation) <= 0 or min(attenuation)  <  0:
            return None
        if not isinstance(attenuation, list):
            attenuation = [attenuation]
            self.attenuation = []
            self.attenuation = self.attenuation + attenuation
        return self
        self.beamWidth = 0.7854
        if not self.beamWidth:
            self.beamWidth = kwargs.pop("beamWidth", 0.7854)
        if self.beamWidth == None or self.beamWidth  >  1.570796:
            return None
        if self.beamWidth == None or self.beamWidth  <=  0:
            return None
    def setBeamWidth(self, beamWidth = 0.7854):
        if beamWidth == None or beamWidth  >  1.570796:
            return None
        if beamWidth == None or beamWidth  <=  0:
            return None
        try:
            super().setBeamWidth(beamWidth)
        except AttributeError:
           pass
        self.beamWidth = beamWidth
        return self
    def addBeamWidth(self, beamWidth = 0.7854):
        if beamWidth == None or beamWidth  >  1.570796:
            return None
        if beamWidth == None or beamWidth  <=  0:
            return None
        if not isinstance(beamWidth, list):
            beamWidth = [beamWidth]
            self.beamWidth = []
            self.beamWidth = self.beamWidth + beamWidth
        return self
    def addBeamWidth(self, beamWidth = 0.7854):
        if beamWidth == None or beamWidth  >  1.570796:
            return None
        if beamWidth == None or beamWidth  <=  0:
            return None
        if not isinstance(beamWidth, list):
            beamWidth = [beamWidth]
            self.beamWidth = []
            self.beamWidth = self.beamWidth + beamWidth
        return self
        self.color = [1, 1, 1]
        if not self.color:
            self.color = kwargs.pop("color", [1, 1, 1])
        if self.color == None or len(self.color) <= 0 or min(self.color)  <  0:
            return None
        if self.color == None or len(self.color) <= 0 or max(self.color)  >  1:
            return None
    def setColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = [1, 1, 1]):
        if color == None or len(color) <= 0 or min(color)  <  0:
            return None
        if color == None or len(color) <= 0 or max(color)  >  1:
            return None
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.cutOffAngle = 1.570796
        if not self.cutOffAngle:
            self.cutOffAngle = kwargs.pop("cutOffAngle", 1.570796)
        if self.cutOffAngle == None or self.cutOffAngle  >  1.570796:
            return None
        if self.cutOffAngle == None or self.cutOffAngle  <=  0:
            return None
    def setCutOffAngle(self, cutOffAngle = 1.570796):
        if cutOffAngle == None or cutOffAngle  >  1.570796:
            return None
        if cutOffAngle == None or cutOffAngle  <=  0:
            return None
        try:
            super().setCutOffAngle(cutOffAngle)
        except AttributeError:
           pass
        self.cutOffAngle = cutOffAngle
        return self
    def addCutOffAngle(self, cutOffAngle = 1.570796):
        if cutOffAngle == None or cutOffAngle  >  1.570796:
            return None
        if cutOffAngle == None or cutOffAngle  <=  0:
            return None
        if not isinstance(cutOffAngle, list):
            cutOffAngle = [cutOffAngle]
            self.cutOffAngle = []
            self.cutOffAngle = self.cutOffAngle + cutOffAngle
        return self
    def addCutOffAngle(self, cutOffAngle = 1.570796):
        if cutOffAngle == None or cutOffAngle  >  1.570796:
            return None
        if cutOffAngle == None or cutOffAngle  <=  0:
            return None
        if not isinstance(cutOffAngle, list):
            cutOffAngle = [cutOffAngle]
            self.cutOffAngle = []
            self.cutOffAngle = self.cutOffAngle + cutOffAngle
        return self
        self.direction = [0, 0, -1]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 0, -1])
    def setDirection(self, direction = [0, 0, -1]):
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 0, -1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 0, -1]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.global_ = True
        if not self.global_:
            self.global_ = kwargs.pop("global_", True)
    def setGlobal(self, global_ = True):
        try:
            super().setGlobal(global_)
        except AttributeError:
           pass
        self.global_ = global_
        return self
    def addGlobal(self, global_ = True):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
    def addGlobal(self, global_ = True):
        if not isinstance(global_, list):
            global_ = [global_]
            self.global_ = []
            self.global_ = self.global_ + global_
        return self
        self.intensity = 1
        if not self.intensity:
            self.intensity = kwargs.pop("intensity", 1)
        if self.intensity == None or self.intensity  <  0:
            return None
        if self.intensity == None or self.intensity  >  1:
            return None
    def setIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        try:
            super().setIntensity(intensity)
        except AttributeError:
           pass
        self.intensity = intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
    def addIntensity(self, intensity = 1):
        if intensity == None or intensity  <  0:
            return None
        if intensity == None or intensity  >  1:
            return None
        if not isinstance(intensity, list):
            intensity = [intensity]
            self.intensity = []
            self.intensity = self.intensity + intensity
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.location = [0, 0, 0]
        if not self.location:
            self.location = kwargs.pop("location", [0, 0, 0])
    def setLocation(self, location = [0, 0, 0]):
        try:
            super().setLocation(location)
        except AttributeError:
           pass
        self.location = location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
    def addLocation(self, location = [0, 0, 0]):
        if not isinstance(location, list):
            location = [location]
            self.location = []
            self.location = self.location + location
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.on = True
        if not self.on:
            self.on = kwargs.pop("on", True)
    def setOn(self, on = True):
        try:
            super().setOn(on)
        except AttributeError:
           pass
        self.on = on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
    def addOn(self, on = True):
        if not isinstance(on, list):
            on = [on]
            self.on = []
            self.on = self.on + on
        return self
        self.radius = 100
        if not self.radius:
            self.radius = kwargs.pop("radius", 100)
        if self.radius == None or self.radius  <  0:
            return None
    def setRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        try:
            super().setRadius(radius)
        except AttributeError:
           pass
        self.radius = radius
        return self
    def addRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
    def addRadius(self, radius = 100):
        if radius == None or radius  <  0:
            return None
        if not isinstance(radius, list):
            radius = [radius]
            self.radius = []
            self.radius = self.radius + radius
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SquadOrientationInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super(SquadOrientationInterpolator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.key = []
        if not self.key:
            self.key = kwargs.pop("key", [])
    def setKey(self, key = []):
        try:
            super().setKey(key)
        except AttributeError:
           pass
        self.key = key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
    def addKey(self, key = []):
        if not isinstance(key, list):
            key = [key]
            self.key = []
            self.key = self.key + key
        return self
        self.keyValue = []
        if not self.keyValue:
            self.keyValue = kwargs.pop("keyValue", [])
    def setKeyValue(self, keyValue = []):
        try:
            super().setKeyValue(keyValue)
        except AttributeError:
           pass
        self.keyValue = keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
    def addKeyValue(self, keyValue = []):
        if not isinstance(keyValue, list):
            keyValue = [keyValue]
            self.keyValue = []
            self.keyValue = self.keyValue + keyValue
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normalizeVelocity = False
        if not self.normalizeVelocity:
            self.normalizeVelocity = kwargs.pop("normalizeVelocity", False)
    def setNormalizeVelocity(self, normalizeVelocity = False):
        try:
            super().setNormalizeVelocity(normalizeVelocity)
        except AttributeError:
           pass
        self.normalizeVelocity = normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
    def addNormalizeVelocity(self, normalizeVelocity = False):
        if not isinstance(normalizeVelocity, list):
            normalizeVelocity = [normalizeVelocity]
            self.normalizeVelocity = []
            self.normalizeVelocity = self.normalizeVelocity + normalizeVelocity
        return self
        self.Fraction = None
        if not self.Fraction:
            self.Fraction = kwargs.pop("Fraction", None)
    def setSet_fraction(self, Fraction = None):
        try:
            super().setSet_fraction(Fraction)
        except AttributeError:
           pass
        self.Fraction = Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
    def addSet_fraction(self, Fraction = None):
        if not isinstance(Fraction, list):
            Fraction = [Fraction]
            self.Fraction = []
            self.Fraction = self.Fraction + Fraction
        return self
        self.value_changed = None
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", None)
    def setvalue_changed(self, value_changed = None):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = None):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class StaticGroup(X3DBoundedObject, X3DChildNode):
    def __init__(self, **kwargs):
        super(StaticGroup, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class StringSensor(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        super(StringSensor, self).__init__(**kwargs)
        self.deletionAllowed = True
        if not self.deletionAllowed:
            self.deletionAllowed = kwargs.pop("deletionAllowed", True)
    def setDeletionAllowed(self, deletionAllowed = True):
        try:
            super().setDeletionAllowed(deletionAllowed)
        except AttributeError:
           pass
        self.deletionAllowed = deletionAllowed
        return self
    def addDeletionAllowed(self, deletionAllowed = True):
        if not isinstance(deletionAllowed, list):
            deletionAllowed = [deletionAllowed]
            self.deletionAllowed = []
            self.deletionAllowed = self.deletionAllowed + deletionAllowed
        return self
    def addDeletionAllowed(self, deletionAllowed = True):
        if not isinstance(deletionAllowed, list):
            deletionAllowed = [deletionAllowed]
            self.deletionAllowed = []
            self.deletionAllowed = self.deletionAllowed + deletionAllowed
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.enteredText = None
        if not self.enteredText:
            self.enteredText = kwargs.pop("enteredText", None)
    def setEnteredText(self, enteredText = None):
        try:
            super().setEnteredText(enteredText)
        except AttributeError:
           pass
        self.enteredText = enteredText
        return self
    def addEnteredText(self, enteredText = None):
        if not isinstance(enteredText, list):
            enteredText = [enteredText]
            self.enteredText = []
            self.enteredText = self.enteredText + enteredText
        return self
    def addEnteredText(self, enteredText = None):
        if not isinstance(enteredText, list):
            enteredText = [enteredText]
            self.enteredText = []
            self.enteredText = self.enteredText + enteredText
        return self
        self.finalText = None
        if not self.finalText:
            self.finalText = kwargs.pop("finalText", None)
    def setFinalText(self, finalText = None):
        try:
            super().setFinalText(finalText)
        except AttributeError:
           pass
        self.finalText = finalText
        return self
    def addFinalText(self, finalText = None):
        if not isinstance(finalText, list):
            finalText = [finalText]
            self.finalText = []
            self.finalText = self.finalText + finalText
        return self
    def addFinalText(self, finalText = None):
        if not isinstance(finalText, list):
            finalText = [finalText]
            self.finalText = []
            self.finalText = self.finalText + finalText
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SurfaceEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(SurfaceEmitter, self).__init__(**kwargs)
        self.coordIndex = -1
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", -1)
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  -1:
            return None
    def setCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.CoordIndex = []
        if not self.CoordIndex:
            self.CoordIndex = kwargs.pop("CoordIndex", [])
        if self.CoordIndex == None or len(self.CoordIndex) <= 0 or min(self.CoordIndex)  <  -1:
            return None
    def setSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        try:
            super().setSet_coordIndex(CoordIndex)
        except AttributeError:
           pass
        self.CoordIndex = CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surface = None
        if not self.surface:
            self.surface = kwargs.pop("surface", None)
    def setSurface(self, surface = None):
        try:
            super().setSurface(surface)
        except AttributeError:
           pass
        self.surface = surface
        return self
    def addSurface(self, surface = None):
        if not isinstance(surface, list):
            surface = [surface]
            self.surface = []
            self.surface = self.surface + surface
        return self
    def addSurface(self, surface = None):
        if not isinstance(surface, list):
            surface = [surface]
            self.surface = []
            self.surface = self.surface + surface
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Switch(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Switch, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.whichChoice = -1
        if not self.whichChoice:
            self.whichChoice = kwargs.pop("whichChoice", -1)
        if self.whichChoice == None or self.whichChoice  <  -1:
            return None
    def setWhichChoice(self, whichChoice = -1):
        if whichChoice == None or whichChoice  <  -1:
            return None
        try:
            super().setWhichChoice(whichChoice)
        except AttributeError:
           pass
        self.whichChoice = whichChoice
        return self
    def addWhichChoice(self, whichChoice = -1):
        if whichChoice == None or whichChoice  <  -1:
            return None
        if not isinstance(whichChoice, list):
            whichChoice = [whichChoice]
            self.whichChoice = []
            self.whichChoice = self.whichChoice + whichChoice
        return self
    def addWhichChoice(self, whichChoice = -1):
        if whichChoice == None or whichChoice  <  -1:
            return None
        if not isinstance(whichChoice, list):
            whichChoice = [whichChoice]
            self.whichChoice = []
            self.whichChoice = self.whichChoice + whichChoice
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TexCoordChaser2D(X3DChaserNode):
    def __init__(self, **kwargs):
        super(TexCoordChaser2D, self).__init__(**kwargs)
        self.duration = 1
        if not self.duration:
            self.duration = kwargs.pop("duration", 1)
        if self.duration == None or self.duration  <  0:
            return None
    def setDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        try:
            super().setDuration(duration)
        except AttributeError:
           pass
        self.duration = duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
    def addDuration(self, duration = 1):
        if duration == None or duration  <  0:
            return None
        if not isinstance(duration, list):
            duration = [duration]
            self.duration = []
            self.duration = self.duration + duration
        return self
        self.initialDestination = []
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [])
    def setInitialDestination(self, initialDestination = []):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = []):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = []):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = []
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [])
    def setInitialValue(self, initialValue = []):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = []):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = []):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TexCoordDamper2D(X3DDamperNode):
    def __init__(self, **kwargs):
        super(TexCoordDamper2D, self).__init__(**kwargs)
        self.initialDestination = []
        if not self.initialDestination:
            self.initialDestination = kwargs.pop("initialDestination", [])
    def setInitialDestination(self, initialDestination = []):
        try:
            super().setInitialDestination(initialDestination)
        except AttributeError:
           pass
        self.initialDestination = initialDestination
        return self
    def addInitialDestination(self, initialDestination = []):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
    def addInitialDestination(self, initialDestination = []):
        if not isinstance(initialDestination, list):
            initialDestination = [initialDestination]
            self.initialDestination = []
            self.initialDestination = self.initialDestination + initialDestination
        return self
        self.initialValue = []
        if not self.initialValue:
            self.initialValue = kwargs.pop("initialValue", [])
    def setInitialValue(self, initialValue = []):
        try:
            super().setInitialValue(initialValue)
        except AttributeError:
           pass
        self.initialValue = initialValue
        return self
    def addInitialValue(self, initialValue = []):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
    def addInitialValue(self, initialValue = []):
        if not isinstance(initialValue, list):
            initialValue = [initialValue]
            self.initialValue = []
            self.initialValue = self.initialValue + initialValue
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.order = 3
        if not self.order:
            self.order = kwargs.pop("order", 3)
        if self.order == None or self.order  <  0:
            return None
        if self.order == None or self.order  >  5:
            return None
    def setOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        try:
            super().setOrder(order)
        except AttributeError:
           pass
        self.order = order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
    def addOrder(self, order = 3):
        if order == None or order  <  0:
            return None
        if order == None or order  >  5:
            return None
        if not isinstance(order, list):
            order = [order]
            self.order = []
            self.order = self.order + order
        return self
        self.Destination = []
        if not self.Destination:
            self.Destination = kwargs.pop("Destination", [])
    def setSet_destination(self, Destination = []):
        try:
            super().setSet_destination(Destination)
        except AttributeError:
           pass
        self.Destination = Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
    def addSet_destination(self, Destination = []):
        if not isinstance(Destination, list):
            Destination = [Destination]
            self.Destination = []
            self.Destination = self.Destination + Destination
        return self
        self.Value = []
        if not self.Value:
            self.Value = kwargs.pop("Value", [])
    def setSet_value(self, Value = []):
        try:
            super().setSet_value(Value)
        except AttributeError:
           pass
        self.Value = Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
    def addSet_value(self, Value = []):
        if not isinstance(Value, list):
            Value = [Value]
            self.Value = []
            self.Value = self.Value + Value
        return self
        self.tau = 0.3
        if not self.tau:
            self.tau = kwargs.pop("tau", 0.3)
        if self.tau == None or self.tau  <  0:
            return None
    def setTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        try:
            super().setTau(tau)
        except AttributeError:
           pass
        self.tau = tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
    def addTau(self, tau = 0.3):
        if tau == None or tau  <  0:
            return None
        if not isinstance(tau, list):
            tau = [tau]
            self.tau = []
            self.tau = self.tau + tau
        return self
        self.tolerance = -1
        if not self.tolerance:
            self.tolerance = kwargs.pop("tolerance", -1)
    def setTolerance(self, tolerance = -1):
        try:
            super().setTolerance(tolerance)
        except AttributeError:
           pass
        self.tolerance = tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
    def addTolerance(self, tolerance = -1):
        if not isinstance(tolerance, list):
            tolerance = [tolerance]
            self.tolerance = []
            self.tolerance = self.tolerance + tolerance
        return self
        self.value_changed = []
        if not self.value_changed:
            self.value_changed = kwargs.pop("value_changed", [])
    def setvalue_changed(self, value_changed = []):
        try:
            super().setvalue_changed(value_changed)
        except AttributeError:
           pass
        self.value_changed = value_changed
        return self
    def addvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
    def addSetvalue_changed(self, value_changed = []):
        if not isinstance(value_changed, list):
            value_changed = [value_changed]
            self.value_changed = []
            self.value_changed = self.value_changed + value_changed
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Text(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(Text, self).__init__(**kwargs)
        self.fontStyle = None
        if not self.fontStyle:
            self.fontStyle = kwargs.pop("fontStyle", None)
    def setFontStyle(self, fontStyle = None):
        try:
            super().setFontStyle(fontStyle)
        except AttributeError:
           pass
        self.fontStyle = fontStyle
        return self
    def addFontStyle(self, fontStyle = None):
        if not isinstance(fontStyle, list):
            fontStyle = [fontStyle]
            self.fontStyle = []
            self.fontStyle = self.fontStyle + fontStyle
        return self
    def addFontStyle(self, fontStyle = None):
        if not isinstance(fontStyle, list):
            fontStyle = [fontStyle]
            self.fontStyle = []
            self.fontStyle = self.fontStyle + fontStyle
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.length = []
        if not self.length:
            self.length = kwargs.pop("length", [])
        if self.length == None or len(self.length) <= 0 or min(self.length)  <  0:
            return None
    def setLength(self, length = []):
        if length == None or len(length) <= 0 or min(length)  <  0:
            return None
        try:
            super().setLength(length)
        except AttributeError:
           pass
        self.length = length
        return self
    def addLength(self, length = []):
        if length == None or len(length) <= 0 or min(length)  <  0:
            return None
        if not isinstance(length, list):
            length = [length]
            self.length = []
            self.length = self.length + length
        return self
    def addLength(self, length = []):
        if length == None or len(length) <= 0 or min(length)  <  0:
            return None
        if not isinstance(length, list):
            length = [length]
            self.length = []
            self.length = self.length + length
        return self
        self.lineBounds = []
        if not self.lineBounds:
            self.lineBounds = kwargs.pop("lineBounds", [])
    def setLineBounds(self, lineBounds = []):
        try:
            super().setLineBounds(lineBounds)
        except AttributeError:
           pass
        self.lineBounds = lineBounds
        return self
    def addLineBounds(self, lineBounds = []):
        if not isinstance(lineBounds, list):
            lineBounds = [lineBounds]
            self.lineBounds = []
            self.lineBounds = self.lineBounds + lineBounds
        return self
    def addLineBounds(self, lineBounds = []):
        if not isinstance(lineBounds, list):
            lineBounds = [lineBounds]
            self.lineBounds = []
            self.lineBounds = self.lineBounds + lineBounds
        return self
        self.maxExtent = 0.0
        if not self.maxExtent:
            self.maxExtent = kwargs.pop("maxExtent", 0.0)
        if self.maxExtent == None or self.maxExtent  <  0:
            return None
    def setMaxExtent(self, maxExtent = 0.0):
        if maxExtent == None or maxExtent  <  0:
            return None
        try:
            super().setMaxExtent(maxExtent)
        except AttributeError:
           pass
        self.maxExtent = maxExtent
        return self
    def addMaxExtent(self, maxExtent = 0.0):
        if maxExtent == None or maxExtent  <  0:
            return None
        if not isinstance(maxExtent, list):
            maxExtent = [maxExtent]
            self.maxExtent = []
            self.maxExtent = self.maxExtent + maxExtent
        return self
    def addMaxExtent(self, maxExtent = 0.0):
        if maxExtent == None or maxExtent  <  0:
            return None
        if not isinstance(maxExtent, list):
            maxExtent = [maxExtent]
            self.maxExtent = []
            self.maxExtent = self.maxExtent + maxExtent
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.origin = []
        if not self.origin:
            self.origin = kwargs.pop("origin", [])
    def setOrigin(self, origin = []):
        try:
            super().setOrigin(origin)
        except AttributeError:
           pass
        self.origin = origin
        return self
    def addOrigin(self, origin = []):
        if not isinstance(origin, list):
            origin = [origin]
            self.origin = []
            self.origin = self.origin + origin
        return self
    def addOrigin(self, origin = []):
        if not isinstance(origin, list):
            origin = [origin]
            self.origin = []
            self.origin = self.origin + origin
        return self
        self.solid = False
        if not self.solid:
            self.solid = kwargs.pop("solid", False)
    def setSolid(self, solid = False):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.string = []
        if not self.string:
            self.string = kwargs.pop("string", [])
    def setString(self, string = []):
        try:
            super().setString(string)
        except AttributeError:
           pass
        self.string = string
        return self
    def addString(self, string = []):
        if not isinstance(string, list):
            string = [string]
            self.string = []
            self.string = self.string + string
        return self
    def addString(self, string = []):
        if not isinstance(string, list):
            string = [string]
            self.string = []
            self.string = self.string + string
        return self
        self.textBounds = []
        if not self.textBounds:
            self.textBounds = kwargs.pop("textBounds", [])
    def setTextBounds(self, textBounds = []):
        try:
            super().setTextBounds(textBounds)
        except AttributeError:
           pass
        self.textBounds = textBounds
        return self
    def addTextBounds(self, textBounds = []):
        if not isinstance(textBounds, list):
            textBounds = [textBounds]
            self.textBounds = []
            self.textBounds = self.textBounds + textBounds
        return self
    def addTextBounds(self, textBounds = []):
        if not isinstance(textBounds, list):
            textBounds = [textBounds]
            self.textBounds = []
            self.textBounds = self.textBounds + textBounds
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureBackground(X3DBackgroundNode):
    def __init__(self, **kwargs):
        super(TextureBackground, self).__init__(**kwargs)
        self.backTexture = None
        if not self.backTexture:
            self.backTexture = kwargs.pop("backTexture", None)
    def setBackTexture(self, backTexture = None):
        try:
            super().setBackTexture(backTexture)
        except AttributeError:
           pass
        self.backTexture = backTexture
        return self
    def addBackTexture(self, backTexture = None):
        if not isinstance(backTexture, list):
            backTexture = [backTexture]
            self.backTexture = []
            self.backTexture = self.backTexture + backTexture
        return self
    def addBackTexture(self, backTexture = None):
        if not isinstance(backTexture, list):
            backTexture = [backTexture]
            self.backTexture = []
            self.backTexture = self.backTexture + backTexture
        return self
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.bottomTexture = None
        if not self.bottomTexture:
            self.bottomTexture = kwargs.pop("bottomTexture", None)
    def setBottomTexture(self, bottomTexture = None):
        try:
            super().setBottomTexture(bottomTexture)
        except AttributeError:
           pass
        self.bottomTexture = bottomTexture
        return self
    def addBottomTexture(self, bottomTexture = None):
        if not isinstance(bottomTexture, list):
            bottomTexture = [bottomTexture]
            self.bottomTexture = []
            self.bottomTexture = self.bottomTexture + bottomTexture
        return self
    def addBottomTexture(self, bottomTexture = None):
        if not isinstance(bottomTexture, list):
            bottomTexture = [bottomTexture]
            self.bottomTexture = []
            self.bottomTexture = self.bottomTexture + bottomTexture
        return self
        self.frontTexture = None
        if not self.frontTexture:
            self.frontTexture = kwargs.pop("frontTexture", None)
    def setFrontTexture(self, frontTexture = None):
        try:
            super().setFrontTexture(frontTexture)
        except AttributeError:
           pass
        self.frontTexture = frontTexture
        return self
    def addFrontTexture(self, frontTexture = None):
        if not isinstance(frontTexture, list):
            frontTexture = [frontTexture]
            self.frontTexture = []
            self.frontTexture = self.frontTexture + frontTexture
        return self
    def addFrontTexture(self, frontTexture = None):
        if not isinstance(frontTexture, list):
            frontTexture = [frontTexture]
            self.frontTexture = []
            self.frontTexture = self.frontTexture + frontTexture
        return self
        self.groundAngle = []
        if not self.groundAngle:
            self.groundAngle = kwargs.pop("groundAngle", [])
        if self.groundAngle == None or len(self.groundAngle) <= 0 or min(self.groundAngle)  <  0:
            return None
        if self.groundAngle == None or len(self.groundAngle) <= 0 or max(self.groundAngle)  >  1.5708:
            return None
    def setGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        try:
            super().setGroundAngle(groundAngle)
        except AttributeError:
           pass
        self.groundAngle = groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
    def addGroundAngle(self, groundAngle = []):
        if groundAngle == None or len(groundAngle) <= 0 or min(groundAngle)  <  0:
            return None
        if groundAngle == None or len(groundAngle) <= 0 or max(groundAngle)  >  1.5708:
            return None
        if not isinstance(groundAngle, list):
            groundAngle = [groundAngle]
            self.groundAngle = []
            self.groundAngle = self.groundAngle + groundAngle
        return self
        self.groundColor = []
        if not self.groundColor:
            self.groundColor = kwargs.pop("groundColor", [])
        if self.groundColor == None or len(self.groundColor) <= 0 or min(self.groundColor)  <  0:
            return None
        if self.groundColor == None or len(self.groundColor) <= 0 or max(self.groundColor)  >  1:
            return None
    def setGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        try:
            super().setGroundColor(groundColor)
        except AttributeError:
           pass
        self.groundColor = groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
    def addGroundColor(self, groundColor = []):
        if groundColor == None or len(groundColor) <= 0 or min(groundColor)  <  0:
            return None
        if groundColor == None or len(groundColor) <= 0 or max(groundColor)  >  1:
            return None
        if not isinstance(groundColor, list):
            groundColor = [groundColor]
            self.groundColor = []
            self.groundColor = self.groundColor + groundColor
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.leftTexture = None
        if not self.leftTexture:
            self.leftTexture = kwargs.pop("leftTexture", None)
    def setLeftTexture(self, leftTexture = None):
        try:
            super().setLeftTexture(leftTexture)
        except AttributeError:
           pass
        self.leftTexture = leftTexture
        return self
    def addLeftTexture(self, leftTexture = None):
        if not isinstance(leftTexture, list):
            leftTexture = [leftTexture]
            self.leftTexture = []
            self.leftTexture = self.leftTexture + leftTexture
        return self
    def addLeftTexture(self, leftTexture = None):
        if not isinstance(leftTexture, list):
            leftTexture = [leftTexture]
            self.leftTexture = []
            self.leftTexture = self.leftTexture + leftTexture
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rightTexture = None
        if not self.rightTexture:
            self.rightTexture = kwargs.pop("rightTexture", None)
    def setRightTexture(self, rightTexture = None):
        try:
            super().setRightTexture(rightTexture)
        except AttributeError:
           pass
        self.rightTexture = rightTexture
        return self
    def addRightTexture(self, rightTexture = None):
        if not isinstance(rightTexture, list):
            rightTexture = [rightTexture]
            self.rightTexture = []
            self.rightTexture = self.rightTexture + rightTexture
        return self
    def addRightTexture(self, rightTexture = None):
        if not isinstance(rightTexture, list):
            rightTexture = [rightTexture]
            self.rightTexture = []
            self.rightTexture = self.rightTexture + rightTexture
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.skyAngle = []
        if not self.skyAngle:
            self.skyAngle = kwargs.pop("skyAngle", [])
        if self.skyAngle == None or len(self.skyAngle) <= 0 or min(self.skyAngle)  <  0:
            return None
        if self.skyAngle == None or len(self.skyAngle) <= 0 or max(self.skyAngle)  >  3.1416:
            return None
    def setSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        try:
            super().setSkyAngle(skyAngle)
        except AttributeError:
           pass
        self.skyAngle = skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
    def addSkyAngle(self, skyAngle = []):
        if skyAngle == None or len(skyAngle) <= 0 or min(skyAngle)  <  0:
            return None
        if skyAngle == None or len(skyAngle) <= 0 or max(skyAngle)  >  3.1416:
            return None
        if not isinstance(skyAngle, list):
            skyAngle = [skyAngle]
            self.skyAngle = []
            self.skyAngle = self.skyAngle + skyAngle
        return self
        self.skyColor = [0, 0, 0]
        if not self.skyColor:
            self.skyColor = kwargs.pop("skyColor", [0, 0, 0])
        if self.skyColor == None or len(self.skyColor) <= 0 or min(self.skyColor)  <  0:
            return None
        if self.skyColor == None or len(self.skyColor) <= 0 or max(self.skyColor)  >  1:
            return None
    def setSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        try:
            super().setSkyColor(skyColor)
        except AttributeError:
           pass
        self.skyColor = skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
    def addSkyColor(self, skyColor = [0, 0, 0]):
        if skyColor == None or len(skyColor) <= 0 or min(skyColor)  <  0:
            return None
        if skyColor == None or len(skyColor) <= 0 or max(skyColor)  >  1:
            return None
        if not isinstance(skyColor, list):
            skyColor = [skyColor]
            self.skyColor = []
            self.skyColor = self.skyColor + skyColor
        return self
        self.topTexture = None
        if not self.topTexture:
            self.topTexture = kwargs.pop("topTexture", None)
    def setTopTexture(self, topTexture = None):
        try:
            super().setTopTexture(topTexture)
        except AttributeError:
           pass
        self.topTexture = topTexture
        return self
    def addTopTexture(self, topTexture = None):
        if not isinstance(topTexture, list):
            topTexture = [topTexture]
            self.topTexture = []
            self.topTexture = self.topTexture + topTexture
        return self
    def addTopTexture(self, topTexture = None):
        if not isinstance(topTexture, list):
            topTexture = [topTexture]
            self.topTexture = []
            self.topTexture = self.topTexture + topTexture
        return self
        self.transparency = 0
        if not self.transparency:
            self.transparency = kwargs.pop("transparency", 0)
        if self.transparency == None or self.transparency  <  0:
            return None
        if self.transparency == None or self.transparency  >  1:
            return None
    def setTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        try:
            super().setTransparency(transparency)
        except AttributeError:
           pass
        self.transparency = transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureCoordinate(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super(TextureCoordinate, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureCoordinate3D(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super(TextureCoordinate3D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureCoordinate4D(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super(TextureCoordinate4D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.point = []
        if not self.point:
            self.point = kwargs.pop("point", [])
    def setPoint(self, point = []):
        try:
            super().setPoint(point)
        except AttributeError:
           pass
        self.point = point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
    def addPoint(self, point = []):
        if not isinstance(point, list):
            point = [point]
            self.point = []
            self.point = self.point + point
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureCoordinateGenerator(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super(TextureCoordinateGenerator, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.mode = "SPHERE"
        if not self.mode:
            self.mode = kwargs.pop("mode", "SPHERE")
        if 'SPHERE' == self.mode:
            pass
        elif 'CAMERASPACENORMAL' == self.mode:
            pass
        elif 'CAMERASPACEPOSITION' == self.mode:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == self.mode:
            pass
        elif 'SPHERE-LOCAL' == self.mode:
            pass
        elif 'COORD' == self.mode:
            pass
        elif 'COORD-EYE' == self.mode:
            pass
        elif 'NOISE' == self.mode:
            pass
        elif 'NOISE-EYE' == self.mode:
            pass
        elif 'SPHERE-REFLECT' == self.mode:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == self.mode:
            pass
        else:
            return None
    def setMode(self, mode = "SPHERE"):
        if 'SPHERE' == mode:
            pass
        elif 'CAMERASPACENORMAL' == mode:
            pass
        elif 'CAMERASPACEPOSITION' == mode:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == mode:
            pass
        elif 'SPHERE-LOCAL' == mode:
            pass
        elif 'COORD' == mode:
            pass
        elif 'COORD-EYE' == mode:
            pass
        elif 'NOISE' == mode:
            pass
        elif 'NOISE-EYE' == mode:
            pass
        elif 'SPHERE-REFLECT' == mode:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == mode:
            pass
        else:
            return None
        try:
            super().setMode(mode)
        except AttributeError:
           pass
        self.mode = mode
        return self
    def addMode(self, mode = "SPHERE"):
        if 'SPHERE' == mode:
            pass
        elif 'CAMERASPACENORMAL' == mode:
            pass
        elif 'CAMERASPACEPOSITION' == mode:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == mode:
            pass
        elif 'SPHERE-LOCAL' == mode:
            pass
        elif 'COORD' == mode:
            pass
        elif 'COORD-EYE' == mode:
            pass
        elif 'NOISE' == mode:
            pass
        elif 'NOISE-EYE' == mode:
            pass
        elif 'SPHERE-REFLECT' == mode:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == mode:
            pass
        else:
            return None
        if not isinstance(mode, list):
            mode = [mode]
            self.mode = []
            self.mode = self.mode + mode
        return self
    def addMode(self, mode = "SPHERE"):
        if 'SPHERE' == mode:
            pass
        elif 'CAMERASPACENORMAL' == mode:
            pass
        elif 'CAMERASPACEPOSITION' == mode:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == mode:
            pass
        elif 'SPHERE-LOCAL' == mode:
            pass
        elif 'COORD' == mode:
            pass
        elif 'COORD-EYE' == mode:
            pass
        elif 'NOISE' == mode:
            pass
        elif 'NOISE-EYE' == mode:
            pass
        elif 'SPHERE-REFLECT' == mode:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == mode:
            pass
        else:
            return None
        if not isinstance(mode, list):
            mode = [mode]
            self.mode = []
            self.mode = self.mode + mode
        return self
        self.parameter = []
        if not self.parameter:
            self.parameter = kwargs.pop("parameter", [])
    def setParameter(self, parameter = []):
        try:
            super().setParameter(parameter)
        except AttributeError:
           pass
        self.parameter = parameter
        return self
    def addParameter(self, parameter = []):
        if not isinstance(parameter, list):
            parameter = [parameter]
            self.parameter = []
            self.parameter = self.parameter + parameter
        return self
    def addParameter(self, parameter = []):
        if not isinstance(parameter, list):
            parameter = [parameter]
            self.parameter = []
            self.parameter = self.parameter + parameter
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureProperties(X3DNode):
    def __init__(self, **kwargs):
        super(TextureProperties, self).__init__(**kwargs)
        self.anisotropicDegree = 1
        if not self.anisotropicDegree:
            self.anisotropicDegree = kwargs.pop("anisotropicDegree", 1)
        if self.anisotropicDegree == None or self.anisotropicDegree  <  1:
            return None
    def setAnisotropicDegree(self, anisotropicDegree = 1):
        if anisotropicDegree == None or anisotropicDegree  <  1:
            return None
        try:
            super().setAnisotropicDegree(anisotropicDegree)
        except AttributeError:
           pass
        self.anisotropicDegree = anisotropicDegree
        return self
    def addAnisotropicDegree(self, anisotropicDegree = 1):
        if anisotropicDegree == None or anisotropicDegree  <  1:
            return None
        if not isinstance(anisotropicDegree, list):
            anisotropicDegree = [anisotropicDegree]
            self.anisotropicDegree = []
            self.anisotropicDegree = self.anisotropicDegree + anisotropicDegree
        return self
    def addAnisotropicDegree(self, anisotropicDegree = 1):
        if anisotropicDegree == None or anisotropicDegree  <  1:
            return None
        if not isinstance(anisotropicDegree, list):
            anisotropicDegree = [anisotropicDegree]
            self.anisotropicDegree = []
            self.anisotropicDegree = self.anisotropicDegree + anisotropicDegree
        return self
        self.borderColor = [0, 0, 0, 0]
        if not self.borderColor:
            self.borderColor = kwargs.pop("borderColor", [0, 0, 0, 0])
        if self.borderColor == None or self.borderColor  <  0:
            return None
        if self.borderColor == None or self.borderColor  >  1:
            return None
    def setBorderColor(self, borderColor = [0, 0, 0, 0]):
        if borderColor == None or borderColor  <  0:
            return None
        if borderColor == None or borderColor  >  1:
            return None
        try:
            super().setBorderColor(borderColor)
        except AttributeError:
           pass
        self.borderColor = borderColor
        return self
    def addBorderColor(self, borderColor = [0, 0, 0, 0]):
        if borderColor == None or borderColor  <  0:
            return None
        if borderColor == None or borderColor  >  1:
            return None
        if not isinstance(borderColor, list):
            borderColor = [borderColor]
            self.borderColor = []
            self.borderColor = self.borderColor + borderColor
        return self
    def addBorderColor(self, borderColor = [0, 0, 0, 0]):
        if borderColor == None or borderColor  <  0:
            return None
        if borderColor == None or borderColor  >  1:
            return None
        if not isinstance(borderColor, list):
            borderColor = [borderColor]
            self.borderColor = []
            self.borderColor = self.borderColor + borderColor
        return self
        self.borderWidth = 0
        if not self.borderWidth:
            self.borderWidth = kwargs.pop("borderWidth", 0)
        if self.borderWidth == None or self.borderWidth  <  0:
            return None
    def setBorderWidth(self, borderWidth = 0):
        if borderWidth == None or borderWidth  <  0:
            return None
        try:
            super().setBorderWidth(borderWidth)
        except AttributeError:
           pass
        self.borderWidth = borderWidth
        return self
    def addBorderWidth(self, borderWidth = 0):
        if borderWidth == None or borderWidth  <  0:
            return None
        if not isinstance(borderWidth, list):
            borderWidth = [borderWidth]
            self.borderWidth = []
            self.borderWidth = self.borderWidth + borderWidth
        return self
    def addBorderWidth(self, borderWidth = 0):
        if borderWidth == None or borderWidth  <  0:
            return None
        if not isinstance(borderWidth, list):
            borderWidth = [borderWidth]
            self.borderWidth = []
            self.borderWidth = self.borderWidth + borderWidth
        return self
        self.boundaryModeR = "REPEAT"
        if not self.boundaryModeR:
            self.boundaryModeR = kwargs.pop("boundaryModeR", "REPEAT")
        if 'CLAMP' == self.boundaryModeR:
            pass
        elif 'CLAMP_TO_EDGE' == self.boundaryModeR:
            pass
        elif 'CLAMP_TO_BOUNDARY' == self.boundaryModeR:
            pass
        elif 'MIRRORED_REPEAT' == self.boundaryModeR:
            pass
        elif 'REPEAT' == self.boundaryModeR:
            pass
        else:
            return None
    def setBoundaryModeR(self, boundaryModeR = "REPEAT"):
        if 'CLAMP' == boundaryModeR:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeR:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeR:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeR:
            pass
        elif 'REPEAT' == boundaryModeR:
            pass
        else:
            return None
        try:
            super().setBoundaryModeR(boundaryModeR)
        except AttributeError:
           pass
        self.boundaryModeR = boundaryModeR
        return self
    def addBoundaryModeR(self, boundaryModeR = "REPEAT"):
        if 'CLAMP' == boundaryModeR:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeR:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeR:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeR:
            pass
        elif 'REPEAT' == boundaryModeR:
            pass
        else:
            return None
        if not isinstance(boundaryModeR, list):
            boundaryModeR = [boundaryModeR]
            self.boundaryModeR = []
            self.boundaryModeR = self.boundaryModeR + boundaryModeR
        return self
    def addBoundaryModeR(self, boundaryModeR = "REPEAT"):
        if 'CLAMP' == boundaryModeR:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeR:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeR:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeR:
            pass
        elif 'REPEAT' == boundaryModeR:
            pass
        else:
            return None
        if not isinstance(boundaryModeR, list):
            boundaryModeR = [boundaryModeR]
            self.boundaryModeR = []
            self.boundaryModeR = self.boundaryModeR + boundaryModeR
        return self
        self.boundaryModeS = "REPEAT"
        if not self.boundaryModeS:
            self.boundaryModeS = kwargs.pop("boundaryModeS", "REPEAT")
        if 'CLAMP' == self.boundaryModeS:
            pass
        elif 'CLAMP_TO_EDGE' == self.boundaryModeS:
            pass
        elif 'CLAMP_TO_BOUNDARY' == self.boundaryModeS:
            pass
        elif 'MIRRORED_REPEAT' == self.boundaryModeS:
            pass
        elif 'REPEAT' == self.boundaryModeS:
            pass
        else:
            return None
    def setBoundaryModeS(self, boundaryModeS = "REPEAT"):
        if 'CLAMP' == boundaryModeS:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeS:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeS:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeS:
            pass
        elif 'REPEAT' == boundaryModeS:
            pass
        else:
            return None
        try:
            super().setBoundaryModeS(boundaryModeS)
        except AttributeError:
           pass
        self.boundaryModeS = boundaryModeS
        return self
    def addBoundaryModeS(self, boundaryModeS = "REPEAT"):
        if 'CLAMP' == boundaryModeS:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeS:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeS:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeS:
            pass
        elif 'REPEAT' == boundaryModeS:
            pass
        else:
            return None
        if not isinstance(boundaryModeS, list):
            boundaryModeS = [boundaryModeS]
            self.boundaryModeS = []
            self.boundaryModeS = self.boundaryModeS + boundaryModeS
        return self
    def addBoundaryModeS(self, boundaryModeS = "REPEAT"):
        if 'CLAMP' == boundaryModeS:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeS:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeS:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeS:
            pass
        elif 'REPEAT' == boundaryModeS:
            pass
        else:
            return None
        if not isinstance(boundaryModeS, list):
            boundaryModeS = [boundaryModeS]
            self.boundaryModeS = []
            self.boundaryModeS = self.boundaryModeS + boundaryModeS
        return self
        self.boundaryModeT = "REPEAT"
        if not self.boundaryModeT:
            self.boundaryModeT = kwargs.pop("boundaryModeT", "REPEAT")
        if 'CLAMP' == self.boundaryModeT:
            pass
        elif 'CLAMP_TO_EDGE' == self.boundaryModeT:
            pass
        elif 'CLAMP_TO_BOUNDARY' == self.boundaryModeT:
            pass
        elif 'MIRRORED_REPEAT' == self.boundaryModeT:
            pass
        elif 'REPEAT' == self.boundaryModeT:
            pass
        else:
            return None
    def setBoundaryModeT(self, boundaryModeT = "REPEAT"):
        if 'CLAMP' == boundaryModeT:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeT:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeT:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeT:
            pass
        elif 'REPEAT' == boundaryModeT:
            pass
        else:
            return None
        try:
            super().setBoundaryModeT(boundaryModeT)
        except AttributeError:
           pass
        self.boundaryModeT = boundaryModeT
        return self
    def addBoundaryModeT(self, boundaryModeT = "REPEAT"):
        if 'CLAMP' == boundaryModeT:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeT:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeT:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeT:
            pass
        elif 'REPEAT' == boundaryModeT:
            pass
        else:
            return None
        if not isinstance(boundaryModeT, list):
            boundaryModeT = [boundaryModeT]
            self.boundaryModeT = []
            self.boundaryModeT = self.boundaryModeT + boundaryModeT
        return self
    def addBoundaryModeT(self, boundaryModeT = "REPEAT"):
        if 'CLAMP' == boundaryModeT:
            pass
        elif 'CLAMP_TO_EDGE' == boundaryModeT:
            pass
        elif 'CLAMP_TO_BOUNDARY' == boundaryModeT:
            pass
        elif 'MIRRORED_REPEAT' == boundaryModeT:
            pass
        elif 'REPEAT' == boundaryModeT:
            pass
        else:
            return None
        if not isinstance(boundaryModeT, list):
            boundaryModeT = [boundaryModeT]
            self.boundaryModeT = []
            self.boundaryModeT = self.boundaryModeT + boundaryModeT
        return self
        self.generateMipMaps = False
        if not self.generateMipMaps:
            self.generateMipMaps = kwargs.pop("generateMipMaps", False)
    def setGenerateMipMaps(self, generateMipMaps = False):
        try:
            super().setGenerateMipMaps(generateMipMaps)
        except AttributeError:
           pass
        self.generateMipMaps = generateMipMaps
        return self
    def addGenerateMipMaps(self, generateMipMaps = False):
        if not isinstance(generateMipMaps, list):
            generateMipMaps = [generateMipMaps]
            self.generateMipMaps = []
            self.generateMipMaps = self.generateMipMaps + generateMipMaps
        return self
    def addGenerateMipMaps(self, generateMipMaps = False):
        if not isinstance(generateMipMaps, list):
            generateMipMaps = [generateMipMaps]
            self.generateMipMaps = []
            self.generateMipMaps = self.generateMipMaps + generateMipMaps
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.magnificationFilter = "FASTEST"
        if not self.magnificationFilter:
            self.magnificationFilter = kwargs.pop("magnificationFilter", "FASTEST")
        if 'AVG_PIXEL' == self.magnificationFilter:
            pass
        elif 'DEFAULT' == self.magnificationFilter:
            pass
        elif 'FASTEST' == self.magnificationFilter:
            pass
        elif 'NEAREST_PIXEL' == self.magnificationFilter:
            pass
        elif 'NICEST' == self.magnificationFilter:
            pass
        else:
            return None
    def setMagnificationFilter(self, magnificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == magnificationFilter:
            pass
        elif 'DEFAULT' == magnificationFilter:
            pass
        elif 'FASTEST' == magnificationFilter:
            pass
        elif 'NEAREST_PIXEL' == magnificationFilter:
            pass
        elif 'NICEST' == magnificationFilter:
            pass
        else:
            return None
        try:
            super().setMagnificationFilter(magnificationFilter)
        except AttributeError:
           pass
        self.magnificationFilter = magnificationFilter
        return self
    def addMagnificationFilter(self, magnificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == magnificationFilter:
            pass
        elif 'DEFAULT' == magnificationFilter:
            pass
        elif 'FASTEST' == magnificationFilter:
            pass
        elif 'NEAREST_PIXEL' == magnificationFilter:
            pass
        elif 'NICEST' == magnificationFilter:
            pass
        else:
            return None
        if not isinstance(magnificationFilter, list):
            magnificationFilter = [magnificationFilter]
            self.magnificationFilter = []
            self.magnificationFilter = self.magnificationFilter + magnificationFilter
        return self
    def addMagnificationFilter(self, magnificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == magnificationFilter:
            pass
        elif 'DEFAULT' == magnificationFilter:
            pass
        elif 'FASTEST' == magnificationFilter:
            pass
        elif 'NEAREST_PIXEL' == magnificationFilter:
            pass
        elif 'NICEST' == magnificationFilter:
            pass
        else:
            return None
        if not isinstance(magnificationFilter, list):
            magnificationFilter = [magnificationFilter]
            self.magnificationFilter = []
            self.magnificationFilter = self.magnificationFilter + magnificationFilter
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.minificationFilter = "FASTEST"
        if not self.minificationFilter:
            self.minificationFilter = kwargs.pop("minificationFilter", "FASTEST")
        if 'AVG_PIXEL' == self.minificationFilter:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == self.minificationFilter:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == self.minificationFilter:
            pass
        elif 'DEFAULT' == self.minificationFilter:
            pass
        elif 'FASTEST' == self.minificationFilter:
            pass
        elif 'NEAREST_PIXEL' == self.minificationFilter:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == self.minificationFilter:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == self.minificationFilter:
            pass
        elif 'NICEST' == self.minificationFilter:
            pass
        else:
            return None
    def setMinificationFilter(self, minificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == minificationFilter:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'DEFAULT' == minificationFilter:
            pass
        elif 'FASTEST' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'NICEST' == minificationFilter:
            pass
        else:
            return None
        try:
            super().setMinificationFilter(minificationFilter)
        except AttributeError:
           pass
        self.minificationFilter = minificationFilter
        return self
    def addMinificationFilter(self, minificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == minificationFilter:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'DEFAULT' == minificationFilter:
            pass
        elif 'FASTEST' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'NICEST' == minificationFilter:
            pass
        else:
            return None
        if not isinstance(minificationFilter, list):
            minificationFilter = [minificationFilter]
            self.minificationFilter = []
            self.minificationFilter = self.minificationFilter + minificationFilter
        return self
    def addMinificationFilter(self, minificationFilter = "FASTEST"):
        if 'AVG_PIXEL' == minificationFilter:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'DEFAULT' == minificationFilter:
            pass
        elif 'FASTEST' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == minificationFilter:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == minificationFilter:
            pass
        elif 'NICEST' == minificationFilter:
            pass
        else:
            return None
        if not isinstance(minificationFilter, list):
            minificationFilter = [minificationFilter]
            self.minificationFilter = []
            self.minificationFilter = self.minificationFilter + minificationFilter
        return self
        self.textureCompression = "FASTEST"
        if not self.textureCompression:
            self.textureCompression = kwargs.pop("textureCompression", "FASTEST")
        if 'DEFAULT' == self.textureCompression:
            pass
        elif 'FASTEST' == self.textureCompression:
            pass
        elif 'HIGH' == self.textureCompression:
            pass
        elif 'LOW' == self.textureCompression:
            pass
        elif 'MEDIUM' == self.textureCompression:
            pass
        elif 'NICEST' == self.textureCompression:
            pass
        else:
            return None
    def setTextureCompression(self, textureCompression = "FASTEST"):
        if 'DEFAULT' == textureCompression:
            pass
        elif 'FASTEST' == textureCompression:
            pass
        elif 'HIGH' == textureCompression:
            pass
        elif 'LOW' == textureCompression:
            pass
        elif 'MEDIUM' == textureCompression:
            pass
        elif 'NICEST' == textureCompression:
            pass
        else:
            return None
        try:
            super().setTextureCompression(textureCompression)
        except AttributeError:
           pass
        self.textureCompression = textureCompression
        return self
    def addTextureCompression(self, textureCompression = "FASTEST"):
        if 'DEFAULT' == textureCompression:
            pass
        elif 'FASTEST' == textureCompression:
            pass
        elif 'HIGH' == textureCompression:
            pass
        elif 'LOW' == textureCompression:
            pass
        elif 'MEDIUM' == textureCompression:
            pass
        elif 'NICEST' == textureCompression:
            pass
        else:
            return None
        if not isinstance(textureCompression, list):
            textureCompression = [textureCompression]
            self.textureCompression = []
            self.textureCompression = self.textureCompression + textureCompression
        return self
    def addTextureCompression(self, textureCompression = "FASTEST"):
        if 'DEFAULT' == textureCompression:
            pass
        elif 'FASTEST' == textureCompression:
            pass
        elif 'HIGH' == textureCompression:
            pass
        elif 'LOW' == textureCompression:
            pass
        elif 'MEDIUM' == textureCompression:
            pass
        elif 'NICEST' == textureCompression:
            pass
        else:
            return None
        if not isinstance(textureCompression, list):
            textureCompression = [textureCompression]
            self.textureCompression = []
            self.textureCompression = self.textureCompression + textureCompression
        return self
        self.texturePriority = 0
        if not self.texturePriority:
            self.texturePriority = kwargs.pop("texturePriority", 0)
        if self.texturePriority == None or self.texturePriority  <  0:
            return None
        if self.texturePriority == None or self.texturePriority  >  1:
            return None
    def setTexturePriority(self, texturePriority = 0):
        if texturePriority == None or texturePriority  <  0:
            return None
        if texturePriority == None or texturePriority  >  1:
            return None
        try:
            super().setTexturePriority(texturePriority)
        except AttributeError:
           pass
        self.texturePriority = texturePriority
        return self
    def addTexturePriority(self, texturePriority = 0):
        if texturePriority == None or texturePriority  <  0:
            return None
        if texturePriority == None or texturePriority  >  1:
            return None
        if not isinstance(texturePriority, list):
            texturePriority = [texturePriority]
            self.texturePriority = []
            self.texturePriority = self.texturePriority + texturePriority
        return self
    def addTexturePriority(self, texturePriority = 0):
        if texturePriority == None or texturePriority  <  0:
            return None
        if texturePriority == None or texturePriority  >  1:
            return None
        if not isinstance(texturePriority, list):
            texturePriority = [texturePriority]
            self.texturePriority = []
            self.texturePriority = self.texturePriority + texturePriority
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureTransform(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super(TextureTransform, self).__init__(**kwargs)
        self.center = [0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0])
    def setCenter(self, center = [0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotation = 0
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", 0)
    def setRotation(self, rotation = 0):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = 0):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = 0):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1])
    def setScale(self, scale = [1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.translation = [0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0])
    def setTranslation(self, translation = [0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureTransform3D(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super(TextureTransform3D, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
    def setScale(self, scale = [1, 1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TextureTransformMatrix3D(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super(TextureTransformMatrix3D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
        if not self.matrix:
            self.matrix = kwargs.pop("matrix", [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])
    def setMatrix(self, matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]):
        try:
            super().setMatrix(matrix)
        except AttributeError:
           pass
        self.matrix = matrix
        return self
    def addMatrix(self, matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]):
        if not isinstance(matrix, list):
            matrix = [matrix]
            self.matrix = []
            self.matrix = self.matrix + matrix
        return self
    def addMatrix(self, matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]):
        if not isinstance(matrix, list):
            matrix = [matrix]
            self.matrix = []
            self.matrix = self.matrix + matrix
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TimeSensor(X3DSensorNode, X3DTimeDependentNode):
    def __init__(self, **kwargs):
        super(TimeSensor, self).__init__(**kwargs)
        self.cycleInterval = 1.0
        if not self.cycleInterval:
            self.cycleInterval = kwargs.pop("cycleInterval", 1.0)
        if self.cycleInterval == None or self.cycleInterval  <  0:
            return None
    def setCycleInterval(self, cycleInterval = 1.0):
        if cycleInterval == None or cycleInterval  <  0:
            return None
        try:
            super().setCycleInterval(cycleInterval)
        except AttributeError:
           pass
        self.cycleInterval = cycleInterval
        return self
    def addCycleInterval(self, cycleInterval = 1.0):
        if cycleInterval == None or cycleInterval  <  0:
            return None
        if not isinstance(cycleInterval, list):
            cycleInterval = [cycleInterval]
            self.cycleInterval = []
            self.cycleInterval = self.cycleInterval + cycleInterval
        return self
    def addCycleInterval(self, cycleInterval = 1.0):
        if cycleInterval == None or cycleInterval  <  0:
            return None
        if not isinstance(cycleInterval, list):
            cycleInterval = [cycleInterval]
            self.cycleInterval = []
            self.cycleInterval = self.cycleInterval + cycleInterval
        return self
        self.cycleTime = None
        if not self.cycleTime:
            self.cycleTime = kwargs.pop("cycleTime", None)
        if self.cycleTime == None or self.cycleTime  <  0:
            return None
    def setCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        try:
            super().setCycleTime(cycleTime)
        except AttributeError:
           pass
        self.cycleTime = cycleTime
        return self
    def addCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        if not isinstance(cycleTime, list):
            cycleTime = [cycleTime]
            self.cycleTime = []
            self.cycleTime = self.cycleTime + cycleTime
        return self
    def addCycleTime(self, cycleTime = None):
        if cycleTime == None or cycleTime  <  0:
            return None
        if not isinstance(cycleTime, list):
            cycleTime = [cycleTime]
            self.cycleTime = []
            self.cycleTime = self.cycleTime + cycleTime
        return self
        self.elapsedTime = None
        if not self.elapsedTime:
            self.elapsedTime = kwargs.pop("elapsedTime", None)
        if self.elapsedTime == None or self.elapsedTime  <  0:
            return None
    def setElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        try:
            super().setElapsedTime(elapsedTime)
        except AttributeError:
           pass
        self.elapsedTime = elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
    def addElapsedTime(self, elapsedTime = None):
        if elapsedTime == None or elapsedTime  <  0:
            return None
        if not isinstance(elapsedTime, list):
            elapsedTime = [elapsedTime]
            self.elapsedTime = []
            self.elapsedTime = self.elapsedTime + elapsedTime
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.fraction_changed = None
        if not self.fraction_changed:
            self.fraction_changed = kwargs.pop("fraction_changed", None)
    def setfraction_changed(self, fraction_changed = None):
        try:
            super().setfraction_changed(fraction_changed)
        except AttributeError:
           pass
        self.fraction_changed = fraction_changed
        return self
    def addfraction_changed(self, fraction_changed = None):
        if not isinstance(fraction_changed, list):
            fraction_changed = [fraction_changed]
            self.fraction_changed = []
            self.fraction_changed = self.fraction_changed + fraction_changed
        return self
    def addSetfraction_changed(self, fraction_changed = None):
        if not isinstance(fraction_changed, list):
            fraction_changed = [fraction_changed]
            self.fraction_changed = []
            self.fraction_changed = self.fraction_changed + fraction_changed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Paused = None
        if not self.Paused:
            self.Paused = kwargs.pop("Paused", None)
    def setIsPaused(self, Paused = None):
        try:
            super().setIsPaused(Paused)
        except AttributeError:
           pass
        self.Paused = Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
    def addIsPaused(self, Paused = None):
        if not isinstance(Paused, list):
            Paused = [Paused]
            self.Paused = []
            self.Paused = self.Paused + Paused
        return self
        self.loop = False
        if not self.loop:
            self.loop = kwargs.pop("loop", False)
    def setLoop(self, loop = False):
        try:
            super().setLoop(loop)
        except AttributeError:
           pass
        self.loop = loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
    def addLoop(self, loop = False):
        if not isinstance(loop, list):
            loop = [loop]
            self.loop = []
            self.loop = self.loop + loop
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.pauseTime = 0
        if not self.pauseTime:
            self.pauseTime = kwargs.pop("pauseTime", 0)
    def setPauseTime(self, pauseTime = 0):
        try:
            super().setPauseTime(pauseTime)
        except AttributeError:
           pass
        self.pauseTime = pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
    def addPauseTime(self, pauseTime = 0):
        if not isinstance(pauseTime, list):
            pauseTime = [pauseTime]
            self.pauseTime = []
            self.pauseTime = self.pauseTime + pauseTime
        return self
        self.resumeTime = 0
        if not self.resumeTime:
            self.resumeTime = kwargs.pop("resumeTime", 0)
    def setResumeTime(self, resumeTime = 0):
        try:
            super().setResumeTime(resumeTime)
        except AttributeError:
           pass
        self.resumeTime = resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
    def addResumeTime(self, resumeTime = 0):
        if not isinstance(resumeTime, list):
            resumeTime = [resumeTime]
            self.resumeTime = []
            self.resumeTime = self.resumeTime + resumeTime
        return self
        self.startTime = 0
        if not self.startTime:
            self.startTime = kwargs.pop("startTime", 0)
    def setStartTime(self, startTime = 0):
        try:
            super().setStartTime(startTime)
        except AttributeError:
           pass
        self.startTime = startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
    def addStartTime(self, startTime = 0):
        if not isinstance(startTime, list):
            startTime = [startTime]
            self.startTime = []
            self.startTime = self.startTime + startTime
        return self
        self.stopTime = 0
        if not self.stopTime:
            self.stopTime = kwargs.pop("stopTime", 0)
    def setStopTime(self, stopTime = 0):
        try:
            super().setStopTime(stopTime)
        except AttributeError:
           pass
        self.stopTime = stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
    def addStopTime(self, stopTime = 0):
        if not isinstance(stopTime, list):
            stopTime = [stopTime]
            self.stopTime = []
            self.stopTime = self.stopTime + stopTime
        return self
        self.time = None
        if not self.time:
            self.time = kwargs.pop("time", None)
        if self.time == None or self.time  <  0:
            return None
    def setTime(self, time = None):
        if time == None or time  <  0:
            return None
        try:
            super().setTime(time)
        except AttributeError:
           pass
        self.time = time
        return self
    def addTime(self, time = None):
        if time == None or time  <  0:
            return None
        if not isinstance(time, list):
            time = [time]
            self.time = []
            self.time = self.time + time
        return self
    def addTime(self, time = None):
        if time == None or time  <  0:
            return None
        if not isinstance(time, list):
            time = [time]
            self.time = []
            self.time = self.time + time
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TimeTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super(TimeTrigger, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Boolean = None
        if not self.Boolean:
            self.Boolean = kwargs.pop("Boolean", None)
    def setSet_boolean(self, Boolean = None):
        try:
            super().setSet_boolean(Boolean)
        except AttributeError:
           pass
        self.Boolean = Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
    def addSet_boolean(self, Boolean = None):
        if not isinstance(Boolean, list):
            Boolean = [Boolean]
            self.Boolean = []
            self.Boolean = self.Boolean + Boolean
        return self
        self.triggerTime = None
        if not self.triggerTime:
            self.triggerTime = kwargs.pop("triggerTime", None)
    def setTriggerTime(self, triggerTime = None):
        try:
            super().setTriggerTime(triggerTime)
        except AttributeError:
           pass
        self.triggerTime = triggerTime
        return self
    def addTriggerTime(self, triggerTime = None):
        if not isinstance(triggerTime, list):
            triggerTime = [triggerTime]
            self.triggerTime = []
            self.triggerTime = self.triggerTime + triggerTime
        return self
    def addTriggerTime(self, triggerTime = None):
        if not isinstance(triggerTime, list):
            triggerTime = [triggerTime]
            self.triggerTime = []
            self.triggerTime = self.triggerTime + triggerTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ToneMappedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super(ToneMappedVolumeStyle, self).__init__(**kwargs)
        self.coolColor = [0, 0, 1, 0]
        if not self.coolColor:
            self.coolColor = kwargs.pop("coolColor", [0, 0, 1, 0])
        if self.coolColor == None or self.coolColor  <  0:
            return None
        if self.coolColor == None or self.coolColor  >  1:
            return None
    def setCoolColor(self, coolColor = [0, 0, 1, 0]):
        if coolColor == None or coolColor  <  0:
            return None
        if coolColor == None or coolColor  >  1:
            return None
        try:
            super().setCoolColor(coolColor)
        except AttributeError:
           pass
        self.coolColor = coolColor
        return self
    def addCoolColor(self, coolColor = [0, 0, 1, 0]):
        if coolColor == None or coolColor  <  0:
            return None
        if coolColor == None or coolColor  >  1:
            return None
        if not isinstance(coolColor, list):
            coolColor = [coolColor]
            self.coolColor = []
            self.coolColor = self.coolColor + coolColor
        return self
    def addCoolColor(self, coolColor = [0, 0, 1, 0]):
        if coolColor == None or coolColor  <  0:
            return None
        if coolColor == None or coolColor  >  1:
            return None
        if not isinstance(coolColor, list):
            coolColor = [coolColor]
            self.coolColor = []
            self.coolColor = self.coolColor + coolColor
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.surfaceNormals = None
        if not self.surfaceNormals:
            self.surfaceNormals = kwargs.pop("surfaceNormals", None)
    def setSurfaceNormals(self, surfaceNormals = None):
        try:
            super().setSurfaceNormals(surfaceNormals)
        except AttributeError:
           pass
        self.surfaceNormals = surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
    def addSurfaceNormals(self, surfaceNormals = None):
        if not isinstance(surfaceNormals, list):
            surfaceNormals = [surfaceNormals]
            self.surfaceNormals = []
            self.surfaceNormals = self.surfaceNormals + surfaceNormals
        return self
        self.warmColor = [1, 1, 0, 0]
        if not self.warmColor:
            self.warmColor = kwargs.pop("warmColor", [1, 1, 0, 0])
        if self.warmColor == None or self.warmColor  <  0:
            return None
        if self.warmColor == None or self.warmColor  >  1:
            return None
    def setWarmColor(self, warmColor = [1, 1, 0, 0]):
        if warmColor == None or warmColor  <  0:
            return None
        if warmColor == None or warmColor  >  1:
            return None
        try:
            super().setWarmColor(warmColor)
        except AttributeError:
           pass
        self.warmColor = warmColor
        return self
    def addWarmColor(self, warmColor = [1, 1, 0, 0]):
        if warmColor == None or warmColor  <  0:
            return None
        if warmColor == None or warmColor  >  1:
            return None
        if not isinstance(warmColor, list):
            warmColor = [warmColor]
            self.warmColor = []
            self.warmColor = self.warmColor + warmColor
        return self
    def addWarmColor(self, warmColor = [1, 1, 0, 0]):
        if warmColor == None or warmColor  <  0:
            return None
        if warmColor == None or warmColor  >  1:
            return None
        if not isinstance(warmColor, list):
            warmColor = [warmColor]
            self.warmColor = []
            self.warmColor = self.warmColor + warmColor
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TouchSensor(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        super(TouchSensor, self).__init__(**kwargs)
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.hitNormal_changed = []
        if not self.hitNormal_changed:
            self.hitNormal_changed = kwargs.pop("hitNormal_changed", [])
    def sethitNormal_changed(self, hitNormal_changed = []):
        try:
            super().sethitNormal_changed(hitNormal_changed)
        except AttributeError:
           pass
        self.hitNormal_changed = hitNormal_changed
        return self
    def addhitNormal_changed(self, hitNormal_changed = []):
        if not isinstance(hitNormal_changed, list):
            hitNormal_changed = [hitNormal_changed]
            self.hitNormal_changed = []
            self.hitNormal_changed = self.hitNormal_changed + hitNormal_changed
        return self
    def addSethitNormal_changed(self, hitNormal_changed = []):
        if not isinstance(hitNormal_changed, list):
            hitNormal_changed = [hitNormal_changed]
            self.hitNormal_changed = []
            self.hitNormal_changed = self.hitNormal_changed + hitNormal_changed
        return self
        self.hitPoint_changed = []
        if not self.hitPoint_changed:
            self.hitPoint_changed = kwargs.pop("hitPoint_changed", [])
    def sethitPoint_changed(self, hitPoint_changed = []):
        try:
            super().sethitPoint_changed(hitPoint_changed)
        except AttributeError:
           pass
        self.hitPoint_changed = hitPoint_changed
        return self
    def addhitPoint_changed(self, hitPoint_changed = []):
        if not isinstance(hitPoint_changed, list):
            hitPoint_changed = [hitPoint_changed]
            self.hitPoint_changed = []
            self.hitPoint_changed = self.hitPoint_changed + hitPoint_changed
        return self
    def addSethitPoint_changed(self, hitPoint_changed = []):
        if not isinstance(hitPoint_changed, list):
            hitPoint_changed = [hitPoint_changed]
            self.hitPoint_changed = []
            self.hitPoint_changed = self.hitPoint_changed + hitPoint_changed
        return self
        self.hitTexCoord_changed = []
        if not self.hitTexCoord_changed:
            self.hitTexCoord_changed = kwargs.pop("hitTexCoord_changed", [])
    def sethitTexCoord_changed(self, hitTexCoord_changed = []):
        try:
            super().sethitTexCoord_changed(hitTexCoord_changed)
        except AttributeError:
           pass
        self.hitTexCoord_changed = hitTexCoord_changed
        return self
    def addhitTexCoord_changed(self, hitTexCoord_changed = []):
        if not isinstance(hitTexCoord_changed, list):
            hitTexCoord_changed = [hitTexCoord_changed]
            self.hitTexCoord_changed = []
            self.hitTexCoord_changed = self.hitTexCoord_changed + hitTexCoord_changed
        return self
    def addSethitTexCoord_changed(self, hitTexCoord_changed = []):
        if not isinstance(hitTexCoord_changed, list):
            hitTexCoord_changed = [hitTexCoord_changed]
            self.hitTexCoord_changed = []
            self.hitTexCoord_changed = self.hitTexCoord_changed + hitTexCoord_changed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.Over = None
        if not self.Over:
            self.Over = kwargs.pop("Over", None)
    def setIsOver(self, Over = None):
        try:
            super().setIsOver(Over)
        except AttributeError:
           pass
        self.Over = Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
    def addIsOver(self, Over = None):
        if not isinstance(Over, list):
            Over = [Over]
            self.Over = []
            self.Over = self.Over + Over
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.touchTime = None
        if not self.touchTime:
            self.touchTime = kwargs.pop("touchTime", None)
    def setTouchTime(self, touchTime = None):
        try:
            super().setTouchTime(touchTime)
        except AttributeError:
           pass
        self.touchTime = touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
    def addTouchTime(self, touchTime = None):
        if not isinstance(touchTime, list):
            touchTime = [touchTime]
            self.touchTime = []
            self.touchTime = self.touchTime + touchTime
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class Transform(X3DGroupingNode):
    def __init__(self, **kwargs):
        super(Transform, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.rotation = [0, 0, 1, 0]
        if not self.rotation:
            self.rotation = kwargs.pop("rotation", [0, 0, 1, 0])
    def setRotation(self, rotation = [0, 0, 1, 0]):
        try:
            super().setRotation(rotation)
        except AttributeError:
           pass
        self.rotation = rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
    def addRotation(self, rotation = [0, 0, 1, 0]):
        if not isinstance(rotation, list):
            rotation = [rotation]
            self.rotation = []
            self.rotation = self.rotation + rotation
        return self
        self.scale = [1, 1, 1]
        if not self.scale:
            self.scale = kwargs.pop("scale", [1, 1, 1])
    def setScale(self, scale = [1, 1, 1]):
        try:
            super().setScale(scale)
        except AttributeError:
           pass
        self.scale = scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
    def addScale(self, scale = [1, 1, 1]):
        if not isinstance(scale, list):
            scale = [scale]
            self.scale = []
            self.scale = self.scale + scale
        return self
        self.scaleOrientation = [0, 0, 1, 0]
        if not self.scaleOrientation:
            self.scaleOrientation = kwargs.pop("scaleOrientation", [0, 0, 1, 0])
    def setScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        try:
            super().setScaleOrientation(scaleOrientation)
        except AttributeError:
           pass
        self.scaleOrientation = scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
    def addScaleOrientation(self, scaleOrientation = [0, 0, 1, 0]):
        if not isinstance(scaleOrientation, list):
            scaleOrientation = [scaleOrientation]
            self.scaleOrientation = []
            self.scaleOrientation = self.scaleOrientation + scaleOrientation
        return self
        self.translation = [0, 0, 0]
        if not self.translation:
            self.translation = kwargs.pop("translation", [0, 0, 0])
    def setTranslation(self, translation = [0, 0, 0]):
        try:
            super().setTranslation(translation)
        except AttributeError:
           pass
        self.translation = translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
    def addTranslation(self, translation = [0, 0, 0]):
        if not isinstance(translation, list):
            translation = [translation]
            self.translation = []
            self.translation = self.translation + translation
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class TransformSensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super(TransformSensor, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.enterTime = None
        if not self.enterTime:
            self.enterTime = kwargs.pop("enterTime", None)
    def setEnterTime(self, enterTime = None):
        try:
            super().setEnterTime(enterTime)
        except AttributeError:
           pass
        self.enterTime = enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
        self.exitTime = None
        if not self.exitTime:
            self.exitTime = kwargs.pop("exitTime", None)
    def setExitTime(self, exitTime = None):
        try:
            super().setExitTime(exitTime)
        except AttributeError:
           pass
        self.exitTime = exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation_changed = None
        if not self.orientation_changed:
            self.orientation_changed = kwargs.pop("orientation_changed", None)
    def setorientation_changed(self, orientation_changed = None):
        try:
            super().setorientation_changed(orientation_changed)
        except AttributeError:
           pass
        self.orientation_changed = orientation_changed
        return self
    def addorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
    def addSetorientation_changed(self, orientation_changed = None):
        if not isinstance(orientation_changed, list):
            orientation_changed = [orientation_changed]
            self.orientation_changed = []
            self.orientation_changed = self.orientation_changed + orientation_changed
        return self
        self.position_changed = []
        if not self.position_changed:
            self.position_changed = kwargs.pop("position_changed", [])
    def setposition_changed(self, position_changed = []):
        try:
            super().setposition_changed(position_changed)
        except AttributeError:
           pass
        self.position_changed = position_changed
        return self
    def addposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
    def addSetposition_changed(self, position_changed = []):
        if not isinstance(position_changed, list):
            position_changed = [position_changed]
            self.position_changed = []
            self.position_changed = self.position_changed + position_changed
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <  0:
            return None
    def setSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.targetObject = None
        if not self.targetObject:
            self.targetObject = kwargs.pop("targetObject", None)
    def setTargetObject(self, targetObject = None):
        try:
            super().setTargetObject(targetObject)
        except AttributeError:
           pass
        self.targetObject = targetObject
        return self
    def addTargetObject(self, targetObject = None):
        if not isinstance(targetObject, list):
            targetObject = [targetObject]
            self.targetObject = []
            self.targetObject = self.targetObject + targetObject
        return self
    def addTargetObject(self, targetObject = None):
        if not isinstance(targetObject, list):
            targetObject = [targetObject]
            self.targetObject = []
            self.targetObject = self.targetObject + targetObject
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TransmitterPdu(X3DBoundedObject, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super(TransmitterPdu, self).__init__(**kwargs)
        self.address = "localhost"
        if not self.address:
            self.address = kwargs.pop("address", "localhost")
    def setAddress(self, address = "localhost"):
        try:
            super().setAddress(address)
        except AttributeError:
           pass
        self.address = address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
    def addAddress(self, address = "localhost"):
        if not isinstance(address, list):
            address = [address]
            self.address = []
            self.address = self.address + address
        return self
        self.antennaLocation = [0, 0, 0]
        if not self.antennaLocation:
            self.antennaLocation = kwargs.pop("antennaLocation", [0, 0, 0])
    def setAntennaLocation(self, antennaLocation = [0, 0, 0]):
        try:
            super().setAntennaLocation(antennaLocation)
        except AttributeError:
           pass
        self.antennaLocation = antennaLocation
        return self
    def addAntennaLocation(self, antennaLocation = [0, 0, 0]):
        if not isinstance(antennaLocation, list):
            antennaLocation = [antennaLocation]
            self.antennaLocation = []
            self.antennaLocation = self.antennaLocation + antennaLocation
        return self
    def addAntennaLocation(self, antennaLocation = [0, 0, 0]):
        if not isinstance(antennaLocation, list):
            antennaLocation = [antennaLocation]
            self.antennaLocation = []
            self.antennaLocation = self.antennaLocation + antennaLocation
        return self
        self.antennaPatternLength = 0
        if not self.antennaPatternLength:
            self.antennaPatternLength = kwargs.pop("antennaPatternLength", 0)
    def setAntennaPatternLength(self, antennaPatternLength = 0):
        try:
            super().setAntennaPatternLength(antennaPatternLength)
        except AttributeError:
           pass
        self.antennaPatternLength = antennaPatternLength
        return self
    def addAntennaPatternLength(self, antennaPatternLength = 0):
        if not isinstance(antennaPatternLength, list):
            antennaPatternLength = [antennaPatternLength]
            self.antennaPatternLength = []
            self.antennaPatternLength = self.antennaPatternLength + antennaPatternLength
        return self
    def addAntennaPatternLength(self, antennaPatternLength = 0):
        if not isinstance(antennaPatternLength, list):
            antennaPatternLength = [antennaPatternLength]
            self.antennaPatternLength = []
            self.antennaPatternLength = self.antennaPatternLength + antennaPatternLength
        return self
        self.antennaPatternType = 0
        if not self.antennaPatternType:
            self.antennaPatternType = kwargs.pop("antennaPatternType", 0)
    def setAntennaPatternType(self, antennaPatternType = 0):
        try:
            super().setAntennaPatternType(antennaPatternType)
        except AttributeError:
           pass
        self.antennaPatternType = antennaPatternType
        return self
    def addAntennaPatternType(self, antennaPatternType = 0):
        if not isinstance(antennaPatternType, list):
            antennaPatternType = [antennaPatternType]
            self.antennaPatternType = []
            self.antennaPatternType = self.antennaPatternType + antennaPatternType
        return self
    def addAntennaPatternType(self, antennaPatternType = 0):
        if not isinstance(antennaPatternType, list):
            antennaPatternType = [antennaPatternType]
            self.antennaPatternType = []
            self.antennaPatternType = self.antennaPatternType + antennaPatternType
        return self
        self.applicationID = 0
        if not self.applicationID:
            self.applicationID = kwargs.pop("applicationID", 0)
    def setApplicationID(self, applicationID = 0):
        try:
            super().setApplicationID(applicationID)
        except AttributeError:
           pass
        self.applicationID = applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
    def addApplicationID(self, applicationID = 0):
        if not isinstance(applicationID, list):
            applicationID = [applicationID]
            self.applicationID = []
            self.applicationID = self.applicationID + applicationID
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.cryptoKeyID = 0
        if not self.cryptoKeyID:
            self.cryptoKeyID = kwargs.pop("cryptoKeyID", 0)
    def setCryptoKeyID(self, cryptoKeyID = 0):
        try:
            super().setCryptoKeyID(cryptoKeyID)
        except AttributeError:
           pass
        self.cryptoKeyID = cryptoKeyID
        return self
    def addCryptoKeyID(self, cryptoKeyID = 0):
        if not isinstance(cryptoKeyID, list):
            cryptoKeyID = [cryptoKeyID]
            self.cryptoKeyID = []
            self.cryptoKeyID = self.cryptoKeyID + cryptoKeyID
        return self
    def addCryptoKeyID(self, cryptoKeyID = 0):
        if not isinstance(cryptoKeyID, list):
            cryptoKeyID = [cryptoKeyID]
            self.cryptoKeyID = []
            self.cryptoKeyID = self.cryptoKeyID + cryptoKeyID
        return self
        self.cryptoSystem = 0
        if not self.cryptoSystem:
            self.cryptoSystem = kwargs.pop("cryptoSystem", 0)
    def setCryptoSystem(self, cryptoSystem = 0):
        try:
            super().setCryptoSystem(cryptoSystem)
        except AttributeError:
           pass
        self.cryptoSystem = cryptoSystem
        return self
    def addCryptoSystem(self, cryptoSystem = 0):
        if not isinstance(cryptoSystem, list):
            cryptoSystem = [cryptoSystem]
            self.cryptoSystem = []
            self.cryptoSystem = self.cryptoSystem + cryptoSystem
        return self
    def addCryptoSystem(self, cryptoSystem = 0):
        if not isinstance(cryptoSystem, list):
            cryptoSystem = [cryptoSystem]
            self.cryptoSystem = []
            self.cryptoSystem = self.cryptoSystem + cryptoSystem
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.entityID = 0
        if not self.entityID:
            self.entityID = kwargs.pop("entityID", 0)
    def setEntityID(self, entityID = 0):
        try:
            super().setEntityID(entityID)
        except AttributeError:
           pass
        self.entityID = entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
    def addEntityID(self, entityID = 0):
        if not isinstance(entityID, list):
            entityID = [entityID]
            self.entityID = []
            self.entityID = self.entityID + entityID
        return self
        self.frequency = 0
        if not self.frequency:
            self.frequency = kwargs.pop("frequency", 0)
    def setFrequency(self, frequency = 0):
        try:
            super().setFrequency(frequency)
        except AttributeError:
           pass
        self.frequency = frequency
        return self
    def addFrequency(self, frequency = 0):
        if not isinstance(frequency, list):
            frequency = [frequency]
            self.frequency = []
            self.frequency = self.frequency + frequency
        return self
    def addFrequency(self, frequency = 0):
        if not isinstance(frequency, list):
            frequency = [frequency]
            self.frequency = []
            self.frequency = self.frequency + frequency
        return self
        self.geoCoords = [0, 0, 0]
        if not self.geoCoords:
            self.geoCoords = kwargs.pop("geoCoords", [0, 0, 0])
    def setGeoCoords(self, geoCoords = [0, 0, 0]):
        try:
            super().setGeoCoords(geoCoords)
        except AttributeError:
           pass
        self.geoCoords = geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
    def addGeoCoords(self, geoCoords = [0, 0, 0]):
        if not isinstance(geoCoords, list):
            geoCoords = [geoCoords]
            self.geoCoords = []
            self.geoCoords = self.geoCoords + geoCoords
        return self
        self.geoSystem = ["GD", "WE"]
        if not self.geoSystem:
            self.geoSystem = kwargs.pop("geoSystem", ["GD", "WE"])
    def setGeoSystem(self, geoSystem = ["GD", "WE"]):
        try:
            super().setGeoSystem(geoSystem)
        except AttributeError:
           pass
        self.geoSystem = geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
    def addGeoSystem(self, geoSystem = ["GD", "WE"]):
        if not isinstance(geoSystem, list):
            geoSystem = [geoSystem]
            self.geoSystem = []
            self.geoSystem = self.geoSystem + geoSystem
        return self
        self.inputSource = 0
        if not self.inputSource:
            self.inputSource = kwargs.pop("inputSource", 0)
    def setInputSource(self, inputSource = 0):
        try:
            super().setInputSource(inputSource)
        except AttributeError:
           pass
        self.inputSource = inputSource
        return self
    def addInputSource(self, inputSource = 0):
        if not isinstance(inputSource, list):
            inputSource = [inputSource]
            self.inputSource = []
            self.inputSource = self.inputSource + inputSource
        return self
    def addInputSource(self, inputSource = 0):
        if not isinstance(inputSource, list):
            inputSource = [inputSource]
            self.inputSource = []
            self.inputSource = self.inputSource + inputSource
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.NetworkReader = None
        if not self.NetworkReader:
            self.NetworkReader = kwargs.pop("NetworkReader", None)
    def setIsNetworkReader(self, NetworkReader = None):
        try:
            super().setIsNetworkReader(NetworkReader)
        except AttributeError:
           pass
        self.NetworkReader = NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
    def addIsNetworkReader(self, NetworkReader = None):
        if not isinstance(NetworkReader, list):
            NetworkReader = [NetworkReader]
            self.NetworkReader = []
            self.NetworkReader = self.NetworkReader + NetworkReader
        return self
        self.NetworkWriter = None
        if not self.NetworkWriter:
            self.NetworkWriter = kwargs.pop("NetworkWriter", None)
    def setIsNetworkWriter(self, NetworkWriter = None):
        try:
            super().setIsNetworkWriter(NetworkWriter)
        except AttributeError:
           pass
        self.NetworkWriter = NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
    def addIsNetworkWriter(self, NetworkWriter = None):
        if not isinstance(NetworkWriter, list):
            NetworkWriter = [NetworkWriter]
            self.NetworkWriter = []
            self.NetworkWriter = self.NetworkWriter + NetworkWriter
        return self
        self.RtpHeaderHeard = None
        if not self.RtpHeaderHeard:
            self.RtpHeaderHeard = kwargs.pop("RtpHeaderHeard", None)
    def setIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        try:
            super().setIsRtpHeaderHeard(RtpHeaderHeard)
        except AttributeError:
           pass
        self.RtpHeaderHeard = RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
    def addIsRtpHeaderHeard(self, RtpHeaderHeard = None):
        if not isinstance(RtpHeaderHeard, list):
            RtpHeaderHeard = [RtpHeaderHeard]
            self.RtpHeaderHeard = []
            self.RtpHeaderHeard = self.RtpHeaderHeard + RtpHeaderHeard
        return self
        self.StandAlone = None
        if not self.StandAlone:
            self.StandAlone = kwargs.pop("StandAlone", None)
    def setIsStandAlone(self, StandAlone = None):
        try:
            super().setIsStandAlone(StandAlone)
        except AttributeError:
           pass
        self.StandAlone = StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
    def addIsStandAlone(self, StandAlone = None):
        if not isinstance(StandAlone, list):
            StandAlone = [StandAlone]
            self.StandAlone = []
            self.StandAlone = self.StandAlone + StandAlone
        return self
        self.lengthOfModulationParameters = 0
        if not self.lengthOfModulationParameters:
            self.lengthOfModulationParameters = kwargs.pop("lengthOfModulationParameters", 0)
    def setLengthOfModulationParameters(self, lengthOfModulationParameters = 0):
        try:
            super().setLengthOfModulationParameters(lengthOfModulationParameters)
        except AttributeError:
           pass
        self.lengthOfModulationParameters = lengthOfModulationParameters
        return self
    def addLengthOfModulationParameters(self, lengthOfModulationParameters = 0):
        if not isinstance(lengthOfModulationParameters, list):
            lengthOfModulationParameters = [lengthOfModulationParameters]
            self.lengthOfModulationParameters = []
            self.lengthOfModulationParameters = self.lengthOfModulationParameters + lengthOfModulationParameters
        return self
    def addLengthOfModulationParameters(self, lengthOfModulationParameters = 0):
        if not isinstance(lengthOfModulationParameters, list):
            lengthOfModulationParameters = [lengthOfModulationParameters]
            self.lengthOfModulationParameters = []
            self.lengthOfModulationParameters = self.lengthOfModulationParameters + lengthOfModulationParameters
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.modulationTypeDetail = 0
        if not self.modulationTypeDetail:
            self.modulationTypeDetail = kwargs.pop("modulationTypeDetail", 0)
    def setModulationTypeDetail(self, modulationTypeDetail = 0):
        try:
            super().setModulationTypeDetail(modulationTypeDetail)
        except AttributeError:
           pass
        self.modulationTypeDetail = modulationTypeDetail
        return self
    def addModulationTypeDetail(self, modulationTypeDetail = 0):
        if not isinstance(modulationTypeDetail, list):
            modulationTypeDetail = [modulationTypeDetail]
            self.modulationTypeDetail = []
            self.modulationTypeDetail = self.modulationTypeDetail + modulationTypeDetail
        return self
    def addModulationTypeDetail(self, modulationTypeDetail = 0):
        if not isinstance(modulationTypeDetail, list):
            modulationTypeDetail = [modulationTypeDetail]
            self.modulationTypeDetail = []
            self.modulationTypeDetail = self.modulationTypeDetail + modulationTypeDetail
        return self
        self.modulationTypeMajor = 0
        if not self.modulationTypeMajor:
            self.modulationTypeMajor = kwargs.pop("modulationTypeMajor", 0)
    def setModulationTypeMajor(self, modulationTypeMajor = 0):
        try:
            super().setModulationTypeMajor(modulationTypeMajor)
        except AttributeError:
           pass
        self.modulationTypeMajor = modulationTypeMajor
        return self
    def addModulationTypeMajor(self, modulationTypeMajor = 0):
        if not isinstance(modulationTypeMajor, list):
            modulationTypeMajor = [modulationTypeMajor]
            self.modulationTypeMajor = []
            self.modulationTypeMajor = self.modulationTypeMajor + modulationTypeMajor
        return self
    def addModulationTypeMajor(self, modulationTypeMajor = 0):
        if not isinstance(modulationTypeMajor, list):
            modulationTypeMajor = [modulationTypeMajor]
            self.modulationTypeMajor = []
            self.modulationTypeMajor = self.modulationTypeMajor + modulationTypeMajor
        return self
        self.modulationTypeSpreadSpectrum = 0
        if not self.modulationTypeSpreadSpectrum:
            self.modulationTypeSpreadSpectrum = kwargs.pop("modulationTypeSpreadSpectrum", 0)
    def setModulationTypeSpreadSpectrum(self, modulationTypeSpreadSpectrum = 0):
        try:
            super().setModulationTypeSpreadSpectrum(modulationTypeSpreadSpectrum)
        except AttributeError:
           pass
        self.modulationTypeSpreadSpectrum = modulationTypeSpreadSpectrum
        return self
    def addModulationTypeSpreadSpectrum(self, modulationTypeSpreadSpectrum = 0):
        if not isinstance(modulationTypeSpreadSpectrum, list):
            modulationTypeSpreadSpectrum = [modulationTypeSpreadSpectrum]
            self.modulationTypeSpreadSpectrum = []
            self.modulationTypeSpreadSpectrum = self.modulationTypeSpreadSpectrum + modulationTypeSpreadSpectrum
        return self
    def addModulationTypeSpreadSpectrum(self, modulationTypeSpreadSpectrum = 0):
        if not isinstance(modulationTypeSpreadSpectrum, list):
            modulationTypeSpreadSpectrum = [modulationTypeSpreadSpectrum]
            self.modulationTypeSpreadSpectrum = []
            self.modulationTypeSpreadSpectrum = self.modulationTypeSpreadSpectrum + modulationTypeSpreadSpectrum
        return self
        self.modulationTypeSystem = 0
        if not self.modulationTypeSystem:
            self.modulationTypeSystem = kwargs.pop("modulationTypeSystem", 0)
    def setModulationTypeSystem(self, modulationTypeSystem = 0):
        try:
            super().setModulationTypeSystem(modulationTypeSystem)
        except AttributeError:
           pass
        self.modulationTypeSystem = modulationTypeSystem
        return self
    def addModulationTypeSystem(self, modulationTypeSystem = 0):
        if not isinstance(modulationTypeSystem, list):
            modulationTypeSystem = [modulationTypeSystem]
            self.modulationTypeSystem = []
            self.modulationTypeSystem = self.modulationTypeSystem + modulationTypeSystem
        return self
    def addModulationTypeSystem(self, modulationTypeSystem = 0):
        if not isinstance(modulationTypeSystem, list):
            modulationTypeSystem = [modulationTypeSystem]
            self.modulationTypeSystem = []
            self.modulationTypeSystem = self.modulationTypeSystem + modulationTypeSystem
        return self
        self.multicastRelayHost = None
        if not self.multicastRelayHost:
            self.multicastRelayHost = kwargs.pop("multicastRelayHost", None)
    def setMulticastRelayHost(self, multicastRelayHost = None):
        try:
            super().setMulticastRelayHost(multicastRelayHost)
        except AttributeError:
           pass
        self.multicastRelayHost = multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
    def addMulticastRelayHost(self, multicastRelayHost = None):
        if not isinstance(multicastRelayHost, list):
            multicastRelayHost = [multicastRelayHost]
            self.multicastRelayHost = []
            self.multicastRelayHost = self.multicastRelayHost + multicastRelayHost
        return self
        self.multicastRelayPort = 0
        if not self.multicastRelayPort:
            self.multicastRelayPort = kwargs.pop("multicastRelayPort", 0)
    def setMulticastRelayPort(self, multicastRelayPort = 0):
        try:
            super().setMulticastRelayPort(multicastRelayPort)
        except AttributeError:
           pass
        self.multicastRelayPort = multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
    def addMulticastRelayPort(self, multicastRelayPort = 0):
        if not isinstance(multicastRelayPort, list):
            multicastRelayPort = [multicastRelayPort]
            self.multicastRelayPort = []
            self.multicastRelayPort = self.multicastRelayPort + multicastRelayPort
        return self
        self.networkMode = "standAlone"
        if not self.networkMode:
            self.networkMode = kwargs.pop("networkMode", "standAlone")
        if 'standAlone' == self.networkMode:
            pass
        elif 'networkReader' == self.networkMode:
            pass
        elif 'networkWriter' == self.networkMode:
            pass
        else:
            return None
    def setNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        try:
            super().setNetworkMode(networkMode)
        except AttributeError:
           pass
        self.networkMode = networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
    def addNetworkMode(self, networkMode = "standAlone"):
        if 'standAlone' == networkMode:
            pass
        elif 'networkReader' == networkMode:
            pass
        elif 'networkWriter' == networkMode:
            pass
        else:
            return None
        if not isinstance(networkMode, list):
            networkMode = [networkMode]
            self.networkMode = []
            self.networkMode = self.networkMode + networkMode
        return self
        self.port = 0
        if not self.port:
            self.port = kwargs.pop("port", 0)
    def setPort(self, port = 0):
        try:
            super().setPort(port)
        except AttributeError:
           pass
        self.port = port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
    def addPort(self, port = 0):
        if not isinstance(port, list):
            port = [port]
            self.port = []
            self.port = self.port + port
        return self
        self.power = 0.0
        if not self.power:
            self.power = kwargs.pop("power", 0.0)
    def setPower(self, power = 0.0):
        try:
            super().setPower(power)
        except AttributeError:
           pass
        self.power = power
        return self
    def addPower(self, power = 0.0):
        if not isinstance(power, list):
            power = [power]
            self.power = []
            self.power = self.power + power
        return self
    def addPower(self, power = 0.0):
        if not isinstance(power, list):
            power = [power]
            self.power = []
            self.power = self.power + power
        return self
        self.radioEntityTypeCategory = 0
        if not self.radioEntityTypeCategory:
            self.radioEntityTypeCategory = kwargs.pop("radioEntityTypeCategory", 0)
    def setRadioEntityTypeCategory(self, radioEntityTypeCategory = 0):
        try:
            super().setRadioEntityTypeCategory(radioEntityTypeCategory)
        except AttributeError:
           pass
        self.radioEntityTypeCategory = radioEntityTypeCategory
        return self
    def addRadioEntityTypeCategory(self, radioEntityTypeCategory = 0):
        if not isinstance(radioEntityTypeCategory, list):
            radioEntityTypeCategory = [radioEntityTypeCategory]
            self.radioEntityTypeCategory = []
            self.radioEntityTypeCategory = self.radioEntityTypeCategory + radioEntityTypeCategory
        return self
    def addRadioEntityTypeCategory(self, radioEntityTypeCategory = 0):
        if not isinstance(radioEntityTypeCategory, list):
            radioEntityTypeCategory = [radioEntityTypeCategory]
            self.radioEntityTypeCategory = []
            self.radioEntityTypeCategory = self.radioEntityTypeCategory + radioEntityTypeCategory
        return self
        self.radioEntityTypeCountry = 0
        if not self.radioEntityTypeCountry:
            self.radioEntityTypeCountry = kwargs.pop("radioEntityTypeCountry", 0)
    def setRadioEntityTypeCountry(self, radioEntityTypeCountry = 0):
        try:
            super().setRadioEntityTypeCountry(radioEntityTypeCountry)
        except AttributeError:
           pass
        self.radioEntityTypeCountry = radioEntityTypeCountry
        return self
    def addRadioEntityTypeCountry(self, radioEntityTypeCountry = 0):
        if not isinstance(radioEntityTypeCountry, list):
            radioEntityTypeCountry = [radioEntityTypeCountry]
            self.radioEntityTypeCountry = []
            self.radioEntityTypeCountry = self.radioEntityTypeCountry + radioEntityTypeCountry
        return self
    def addRadioEntityTypeCountry(self, radioEntityTypeCountry = 0):
        if not isinstance(radioEntityTypeCountry, list):
            radioEntityTypeCountry = [radioEntityTypeCountry]
            self.radioEntityTypeCountry = []
            self.radioEntityTypeCountry = self.radioEntityTypeCountry + radioEntityTypeCountry
        return self
        self.radioEntityTypeDomain = 0
        if not self.radioEntityTypeDomain:
            self.radioEntityTypeDomain = kwargs.pop("radioEntityTypeDomain", 0)
    def setRadioEntityTypeDomain(self, radioEntityTypeDomain = 0):
        try:
            super().setRadioEntityTypeDomain(radioEntityTypeDomain)
        except AttributeError:
           pass
        self.radioEntityTypeDomain = radioEntityTypeDomain
        return self
    def addRadioEntityTypeDomain(self, radioEntityTypeDomain = 0):
        if not isinstance(radioEntityTypeDomain, list):
            radioEntityTypeDomain = [radioEntityTypeDomain]
            self.radioEntityTypeDomain = []
            self.radioEntityTypeDomain = self.radioEntityTypeDomain + radioEntityTypeDomain
        return self
    def addRadioEntityTypeDomain(self, radioEntityTypeDomain = 0):
        if not isinstance(radioEntityTypeDomain, list):
            radioEntityTypeDomain = [radioEntityTypeDomain]
            self.radioEntityTypeDomain = []
            self.radioEntityTypeDomain = self.radioEntityTypeDomain + radioEntityTypeDomain
        return self
        self.radioEntityTypeKind = 0
        if not self.radioEntityTypeKind:
            self.radioEntityTypeKind = kwargs.pop("radioEntityTypeKind", 0)
    def setRadioEntityTypeKind(self, radioEntityTypeKind = 0):
        try:
            super().setRadioEntityTypeKind(radioEntityTypeKind)
        except AttributeError:
           pass
        self.radioEntityTypeKind = radioEntityTypeKind
        return self
    def addRadioEntityTypeKind(self, radioEntityTypeKind = 0):
        if not isinstance(radioEntityTypeKind, list):
            radioEntityTypeKind = [radioEntityTypeKind]
            self.radioEntityTypeKind = []
            self.radioEntityTypeKind = self.radioEntityTypeKind + radioEntityTypeKind
        return self
    def addRadioEntityTypeKind(self, radioEntityTypeKind = 0):
        if not isinstance(radioEntityTypeKind, list):
            radioEntityTypeKind = [radioEntityTypeKind]
            self.radioEntityTypeKind = []
            self.radioEntityTypeKind = self.radioEntityTypeKind + radioEntityTypeKind
        return self
        self.radioEntityTypeNomenclature = 0
        if not self.radioEntityTypeNomenclature:
            self.radioEntityTypeNomenclature = kwargs.pop("radioEntityTypeNomenclature", 0)
    def setRadioEntityTypeNomenclature(self, radioEntityTypeNomenclature = 0):
        try:
            super().setRadioEntityTypeNomenclature(radioEntityTypeNomenclature)
        except AttributeError:
           pass
        self.radioEntityTypeNomenclature = radioEntityTypeNomenclature
        return self
    def addRadioEntityTypeNomenclature(self, radioEntityTypeNomenclature = 0):
        if not isinstance(radioEntityTypeNomenclature, list):
            radioEntityTypeNomenclature = [radioEntityTypeNomenclature]
            self.radioEntityTypeNomenclature = []
            self.radioEntityTypeNomenclature = self.radioEntityTypeNomenclature + radioEntityTypeNomenclature
        return self
    def addRadioEntityTypeNomenclature(self, radioEntityTypeNomenclature = 0):
        if not isinstance(radioEntityTypeNomenclature, list):
            radioEntityTypeNomenclature = [radioEntityTypeNomenclature]
            self.radioEntityTypeNomenclature = []
            self.radioEntityTypeNomenclature = self.radioEntityTypeNomenclature + radioEntityTypeNomenclature
        return self
        self.radioEntityTypeNomenclatureVersion = 0
        if not self.radioEntityTypeNomenclatureVersion:
            self.radioEntityTypeNomenclatureVersion = kwargs.pop("radioEntityTypeNomenclatureVersion", 0)
    def setRadioEntityTypeNomenclatureVersion(self, radioEntityTypeNomenclatureVersion = 0):
        try:
            super().setRadioEntityTypeNomenclatureVersion(radioEntityTypeNomenclatureVersion)
        except AttributeError:
           pass
        self.radioEntityTypeNomenclatureVersion = radioEntityTypeNomenclatureVersion
        return self
    def addRadioEntityTypeNomenclatureVersion(self, radioEntityTypeNomenclatureVersion = 0):
        if not isinstance(radioEntityTypeNomenclatureVersion, list):
            radioEntityTypeNomenclatureVersion = [radioEntityTypeNomenclatureVersion]
            self.radioEntityTypeNomenclatureVersion = []
            self.radioEntityTypeNomenclatureVersion = self.radioEntityTypeNomenclatureVersion + radioEntityTypeNomenclatureVersion
        return self
    def addRadioEntityTypeNomenclatureVersion(self, radioEntityTypeNomenclatureVersion = 0):
        if not isinstance(radioEntityTypeNomenclatureVersion, list):
            radioEntityTypeNomenclatureVersion = [radioEntityTypeNomenclatureVersion]
            self.radioEntityTypeNomenclatureVersion = []
            self.radioEntityTypeNomenclatureVersion = self.radioEntityTypeNomenclatureVersion + radioEntityTypeNomenclatureVersion
        return self
        self.radioID = 0
        if not self.radioID:
            self.radioID = kwargs.pop("radioID", 0)
    def setRadioID(self, radioID = 0):
        try:
            super().setRadioID(radioID)
        except AttributeError:
           pass
        self.radioID = radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
    def addRadioID(self, radioID = 0):
        if not isinstance(radioID, list):
            radioID = [radioID]
            self.radioID = []
            self.radioID = self.radioID + radioID
        return self
        self.readInterval = 0.1
        if not self.readInterval:
            self.readInterval = kwargs.pop("readInterval", 0.1)
        if self.readInterval == None or self.readInterval  <  0:
            return None
    def setReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        try:
            super().setReadInterval(readInterval)
        except AttributeError:
           pass
        self.readInterval = readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
    def addReadInterval(self, readInterval = 0.1):
        if readInterval == None or readInterval  <  0:
            return None
        if not isinstance(readInterval, list):
            readInterval = [readInterval]
            self.readInterval = []
            self.readInterval = self.readInterval + readInterval
        return self
        self.relativeAntennaLocation = [0, 0, 0]
        if not self.relativeAntennaLocation:
            self.relativeAntennaLocation = kwargs.pop("relativeAntennaLocation", [0, 0, 0])
    def setRelativeAntennaLocation(self, relativeAntennaLocation = [0, 0, 0]):
        try:
            super().setRelativeAntennaLocation(relativeAntennaLocation)
        except AttributeError:
           pass
        self.relativeAntennaLocation = relativeAntennaLocation
        return self
    def addRelativeAntennaLocation(self, relativeAntennaLocation = [0, 0, 0]):
        if not isinstance(relativeAntennaLocation, list):
            relativeAntennaLocation = [relativeAntennaLocation]
            self.relativeAntennaLocation = []
            self.relativeAntennaLocation = self.relativeAntennaLocation + relativeAntennaLocation
        return self
    def addRelativeAntennaLocation(self, relativeAntennaLocation = [0, 0, 0]):
        if not isinstance(relativeAntennaLocation, list):
            relativeAntennaLocation = [relativeAntennaLocation]
            self.relativeAntennaLocation = []
            self.relativeAntennaLocation = self.relativeAntennaLocation + relativeAntennaLocation
        return self
        self.rtpHeaderExpected = False
        if not self.rtpHeaderExpected:
            self.rtpHeaderExpected = kwargs.pop("rtpHeaderExpected", False)
    def setRtpHeaderExpected(self, rtpHeaderExpected = False):
        try:
            super().setRtpHeaderExpected(rtpHeaderExpected)
        except AttributeError:
           pass
        self.rtpHeaderExpected = rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
    def addRtpHeaderExpected(self, rtpHeaderExpected = False):
        if not isinstance(rtpHeaderExpected, list):
            rtpHeaderExpected = [rtpHeaderExpected]
            self.rtpHeaderExpected = []
            self.rtpHeaderExpected = self.rtpHeaderExpected + rtpHeaderExpected
        return self
        self.siteID = 0
        if not self.siteID:
            self.siteID = kwargs.pop("siteID", 0)
    def setSiteID(self, siteID = 0):
        try:
            super().setSiteID(siteID)
        except AttributeError:
           pass
        self.siteID = siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
    def addSiteID(self, siteID = 0):
        if not isinstance(siteID, list):
            siteID = [siteID]
            self.siteID = []
            self.siteID = self.siteID + siteID
        return self
        self.timestamp = None
        if not self.timestamp:
            self.timestamp = kwargs.pop("timestamp", None)
        if self.timestamp == None or self.timestamp  <  0:
            return None
    def setTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        try:
            super().setTimestamp(timestamp)
        except AttributeError:
           pass
        self.timestamp = timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
    def addTimestamp(self, timestamp = None):
        if timestamp == None or timestamp  <  0:
            return None
        if not isinstance(timestamp, list):
            timestamp = [timestamp]
            self.timestamp = []
            self.timestamp = self.timestamp + timestamp
        return self
        self.transmitFrequencyBandwidth = 0
        if not self.transmitFrequencyBandwidth:
            self.transmitFrequencyBandwidth = kwargs.pop("transmitFrequencyBandwidth", 0)
    def setTransmitFrequencyBandwidth(self, transmitFrequencyBandwidth = 0):
        try:
            super().setTransmitFrequencyBandwidth(transmitFrequencyBandwidth)
        except AttributeError:
           pass
        self.transmitFrequencyBandwidth = transmitFrequencyBandwidth
        return self
    def addTransmitFrequencyBandwidth(self, transmitFrequencyBandwidth = 0):
        if not isinstance(transmitFrequencyBandwidth, list):
            transmitFrequencyBandwidth = [transmitFrequencyBandwidth]
            self.transmitFrequencyBandwidth = []
            self.transmitFrequencyBandwidth = self.transmitFrequencyBandwidth + transmitFrequencyBandwidth
        return self
    def addTransmitFrequencyBandwidth(self, transmitFrequencyBandwidth = 0):
        if not isinstance(transmitFrequencyBandwidth, list):
            transmitFrequencyBandwidth = [transmitFrequencyBandwidth]
            self.transmitFrequencyBandwidth = []
            self.transmitFrequencyBandwidth = self.transmitFrequencyBandwidth + transmitFrequencyBandwidth
        return self
        self.transmitState = 0
        if not self.transmitState:
            self.transmitState = kwargs.pop("transmitState", 0)
    def setTransmitState(self, transmitState = 0):
        try:
            super().setTransmitState(transmitState)
        except AttributeError:
           pass
        self.transmitState = transmitState
        return self
    def addTransmitState(self, transmitState = 0):
        if not isinstance(transmitState, list):
            transmitState = [transmitState]
            self.transmitState = []
            self.transmitState = self.transmitState + transmitState
        return self
    def addTransmitState(self, transmitState = 0):
        if not isinstance(transmitState, list):
            transmitState = [transmitState]
            self.transmitState = []
            self.transmitState = self.transmitState + transmitState
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.whichGeometry = 1
        if not self.whichGeometry:
            self.whichGeometry = kwargs.pop("whichGeometry", 1)
    def setWhichGeometry(self, whichGeometry = 1):
        try:
            super().setWhichGeometry(whichGeometry)
        except AttributeError:
           pass
        self.whichGeometry = whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
    def addWhichGeometry(self, whichGeometry = 1):
        if not isinstance(whichGeometry, list):
            whichGeometry = [whichGeometry]
            self.whichGeometry = []
            self.whichGeometry = self.whichGeometry + whichGeometry
        return self
        self.writeInterval = 1.0
        if not self.writeInterval:
            self.writeInterval = kwargs.pop("writeInterval", 1.0)
        if self.writeInterval == None or self.writeInterval  <  0:
            return None
    def setWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        try:
            super().setWriteInterval(writeInterval)
        except AttributeError:
           pass
        self.writeInterval = writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
    def addWriteInterval(self, writeInterval = 1.0):
        if writeInterval == None or writeInterval  <  0:
            return None
        if not isinstance(writeInterval, list):
            writeInterval = [writeInterval]
            self.writeInterval = []
            self.writeInterval = self.writeInterval + writeInterval
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TriangleFanSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(TriangleFanSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fanCount = []
        if not self.fanCount:
            self.fanCount = kwargs.pop("fanCount", [])
        if self.fanCount == None or len(self.fanCount) <= 0 or min(self.fanCount)  <  3:
            return None
    def setFanCount(self, fanCount = []):
        if fanCount == None or len(fanCount) <= 0 or min(fanCount)  <  3:
            return None
        try:
            super().setFanCount(fanCount)
        except AttributeError:
           pass
        self.fanCount = fanCount
        return self
    def addFanCount(self, fanCount = []):
        if fanCount == None or len(fanCount) <= 0 or min(fanCount)  <  3:
            return None
        if not isinstance(fanCount, list):
            fanCount = [fanCount]
            self.fanCount = []
            self.fanCount = self.fanCount + fanCount
        return self
    def addFanCount(self, fanCount = []):
        if fanCount == None or len(fanCount) <= 0 or min(fanCount)  <  3:
            return None
        if not isinstance(fanCount, list):
            fanCount = [fanCount]
            self.fanCount = []
            self.fanCount = self.fanCount + fanCount
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TriangleSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(TriangleSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TriangleSet2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super(TriangleSet2D, self).__init__(**kwargs)
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.solid = False
        if not self.solid:
            self.solid = kwargs.pop("solid", False)
    def setSolid(self, solid = False):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = False):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.vertices = []
        if not self.vertices:
            self.vertices = kwargs.pop("vertices", [])
    def setVertices(self, vertices = []):
        try:
            super().setVertices(vertices)
        except AttributeError:
           pass
        self.vertices = vertices
        return self
    def addVertices(self, vertices = []):
        if not isinstance(vertices, list):
            vertices = [vertices]
            self.vertices = []
            self.vertices = self.vertices + vertices
        return self
    def addVertices(self, vertices = []):
        if not isinstance(vertices, list):
            vertices = [vertices]
            self.vertices = []
            self.vertices = self.vertices + vertices
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TriangleStripSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super(TriangleStripSet, self).__init__(**kwargs)
        self.attrib = []
        if not self.attrib:
            self.attrib = kwargs.pop("attrib", [])
    def setAttrib(self, attrib = []):
        try:
            super().setAttrib(attrib)
        except AttributeError:
           pass
        self.attrib = attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
    def addAttrib(self, attrib = []):
        if not isinstance(attrib, list):
            attrib = [attrib]
            self.attrib = []
            self.attrib = self.attrib + attrib
        return self
        self.ccw = True
        if not self.ccw:
            self.ccw = kwargs.pop("ccw", True)
    def setCcw(self, ccw = True):
        try:
            super().setCcw(ccw)
        except AttributeError:
           pass
        self.ccw = ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
    def addCcw(self, ccw = True):
        if not isinstance(ccw, list):
            ccw = [ccw]
            self.ccw = []
            self.ccw = self.ccw + ccw
        return self
        self.color = None
        if not self.color:
            self.color = kwargs.pop("color", None)
    def setColor(self, color = None):
        try:
            super().setColor(color)
        except AttributeError:
           pass
        self.color = color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
    def addColor(self, color = None):
        if not isinstance(color, list):
            color = [color]
            self.color = []
            self.color = self.color + color
        return self
        self.colorPerVertex = True
        if not self.colorPerVertex:
            self.colorPerVertex = kwargs.pop("colorPerVertex", True)
    def setColorPerVertex(self, colorPerVertex = True):
        try:
            super().setColorPerVertex(colorPerVertex)
        except AttributeError:
           pass
        self.colorPerVertex = colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
    def addColorPerVertex(self, colorPerVertex = True):
        if not isinstance(colorPerVertex, list):
            colorPerVertex = [colorPerVertex]
            self.colorPerVertex = []
            self.colorPerVertex = self.colorPerVertex + colorPerVertex
        return self
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.fogCoord = None
        if not self.fogCoord:
            self.fogCoord = kwargs.pop("fogCoord", None)
    def setFogCoord(self, fogCoord = None):
        try:
            super().setFogCoord(fogCoord)
        except AttributeError:
           pass
        self.fogCoord = fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
    def addFogCoord(self, fogCoord = None):
        if not isinstance(fogCoord, list):
            fogCoord = [fogCoord]
            self.fogCoord = []
            self.fogCoord = self.fogCoord + fogCoord
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.normal = None
        if not self.normal:
            self.normal = kwargs.pop("normal", None)
    def setNormal(self, normal = None):
        try:
            super().setNormal(normal)
        except AttributeError:
           pass
        self.normal = normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
    def addNormal(self, normal = None):
        if not isinstance(normal, list):
            normal = [normal]
            self.normal = []
            self.normal = self.normal + normal
        return self
        self.normalPerVertex = True
        if not self.normalPerVertex:
            self.normalPerVertex = kwargs.pop("normalPerVertex", True)
    def setNormalPerVertex(self, normalPerVertex = True):
        try:
            super().setNormalPerVertex(normalPerVertex)
        except AttributeError:
           pass
        self.normalPerVertex = normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
    def addNormalPerVertex(self, normalPerVertex = True):
        if not isinstance(normalPerVertex, list):
            normalPerVertex = [normalPerVertex]
            self.normalPerVertex = []
            self.normalPerVertex = self.normalPerVertex + normalPerVertex
        return self
        self.solid = True
        if not self.solid:
            self.solid = kwargs.pop("solid", True)
    def setSolid(self, solid = True):
        try:
            super().setSolid(solid)
        except AttributeError:
           pass
        self.solid = solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
    def addSolid(self, solid = True):
        if not isinstance(solid, list):
            solid = [solid]
            self.solid = []
            self.solid = self.solid + solid
        return self
        self.stripCount = []
        if not self.stripCount:
            self.stripCount = kwargs.pop("stripCount", [])
        if self.stripCount == None or len(self.stripCount) <= 0 or min(self.stripCount)  <  3:
            return None
    def setStripCount(self, stripCount = []):
        if stripCount == None or len(stripCount) <= 0 or min(stripCount)  <  3:
            return None
        try:
            super().setStripCount(stripCount)
        except AttributeError:
           pass
        self.stripCount = stripCount
        return self
    def addStripCount(self, stripCount = []):
        if stripCount == None or len(stripCount) <= 0 or min(stripCount)  <  3:
            return None
        if not isinstance(stripCount, list):
            stripCount = [stripCount]
            self.stripCount = []
            self.stripCount = self.stripCount + stripCount
        return self
    def addStripCount(self, stripCount = []):
        if stripCount == None or len(stripCount) <= 0 or min(stripCount)  <  3:
            return None
        if not isinstance(stripCount, list):
            stripCount = [stripCount]
            self.stripCount = []
            self.stripCount = self.stripCount + stripCount
        return self
        self.texCoord = None
        if not self.texCoord:
            self.texCoord = kwargs.pop("texCoord", None)
    def setTexCoord(self, texCoord = None):
        try:
            super().setTexCoord(texCoord)
        except AttributeError:
           pass
        self.texCoord = texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
    def addTexCoord(self, texCoord = None):
        if not isinstance(texCoord, list):
            texCoord = [texCoord]
            self.texCoord = []
            self.texCoord = self.texCoord + texCoord
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class TwoSidedMaterial(X3DMaterialNode):
    def __init__(self, **kwargs):
        super(TwoSidedMaterial, self).__init__(**kwargs)
        self.ambientIntensity = 0.2
        if not self.ambientIntensity:
            self.ambientIntensity = kwargs.pop("ambientIntensity", 0.2)
        if self.ambientIntensity == None or self.ambientIntensity  <  0:
            return None
        if self.ambientIntensity == None or self.ambientIntensity  >  1:
            return None
    def setAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        try:
            super().setAmbientIntensity(ambientIntensity)
        except AttributeError:
           pass
        self.ambientIntensity = ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
    def addAmbientIntensity(self, ambientIntensity = 0.2):
        if ambientIntensity == None or ambientIntensity  <  0:
            return None
        if ambientIntensity == None or ambientIntensity  >  1:
            return None
        if not isinstance(ambientIntensity, list):
            ambientIntensity = [ambientIntensity]
            self.ambientIntensity = []
            self.ambientIntensity = self.ambientIntensity + ambientIntensity
        return self
        self.backAmbientIntensity = 0.2
        if not self.backAmbientIntensity:
            self.backAmbientIntensity = kwargs.pop("backAmbientIntensity", 0.2)
        if self.backAmbientIntensity == None or self.backAmbientIntensity  <  0:
            return None
        if self.backAmbientIntensity == None or self.backAmbientIntensity  >  1:
            return None
    def setBackAmbientIntensity(self, backAmbientIntensity = 0.2):
        if backAmbientIntensity == None or backAmbientIntensity  <  0:
            return None
        if backAmbientIntensity == None or backAmbientIntensity  >  1:
            return None
        try:
            super().setBackAmbientIntensity(backAmbientIntensity)
        except AttributeError:
           pass
        self.backAmbientIntensity = backAmbientIntensity
        return self
    def addBackAmbientIntensity(self, backAmbientIntensity = 0.2):
        if backAmbientIntensity == None or backAmbientIntensity  <  0:
            return None
        if backAmbientIntensity == None or backAmbientIntensity  >  1:
            return None
        if not isinstance(backAmbientIntensity, list):
            backAmbientIntensity = [backAmbientIntensity]
            self.backAmbientIntensity = []
            self.backAmbientIntensity = self.backAmbientIntensity + backAmbientIntensity
        return self
    def addBackAmbientIntensity(self, backAmbientIntensity = 0.2):
        if backAmbientIntensity == None or backAmbientIntensity  <  0:
            return None
        if backAmbientIntensity == None or backAmbientIntensity  >  1:
            return None
        if not isinstance(backAmbientIntensity, list):
            backAmbientIntensity = [backAmbientIntensity]
            self.backAmbientIntensity = []
            self.backAmbientIntensity = self.backAmbientIntensity + backAmbientIntensity
        return self
        self.backDiffuseColor = [0.8, 0.8, 0.8]
        if not self.backDiffuseColor:
            self.backDiffuseColor = kwargs.pop("backDiffuseColor", [0.8, 0.8, 0.8])
        if self.backDiffuseColor == None or len(self.backDiffuseColor) <= 0 or min(self.backDiffuseColor)  <  0:
            return None
        if self.backDiffuseColor == None or len(self.backDiffuseColor) <= 0 or max(self.backDiffuseColor)  >  1:
            return None
    def setBackDiffuseColor(self, backDiffuseColor = [0.8, 0.8, 0.8]):
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or min(backDiffuseColor)  <  0:
            return None
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or max(backDiffuseColor)  >  1:
            return None
        try:
            super().setBackDiffuseColor(backDiffuseColor)
        except AttributeError:
           pass
        self.backDiffuseColor = backDiffuseColor
        return self
    def addBackDiffuseColor(self, backDiffuseColor = [0.8, 0.8, 0.8]):
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or min(backDiffuseColor)  <  0:
            return None
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or max(backDiffuseColor)  >  1:
            return None
        if not isinstance(backDiffuseColor, list):
            backDiffuseColor = [backDiffuseColor]
            self.backDiffuseColor = []
            self.backDiffuseColor = self.backDiffuseColor + backDiffuseColor
        return self
    def addBackDiffuseColor(self, backDiffuseColor = [0.8, 0.8, 0.8]):
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or min(backDiffuseColor)  <  0:
            return None
        if backDiffuseColor == None or len(backDiffuseColor) <= 0 or max(backDiffuseColor)  >  1:
            return None
        if not isinstance(backDiffuseColor, list):
            backDiffuseColor = [backDiffuseColor]
            self.backDiffuseColor = []
            self.backDiffuseColor = self.backDiffuseColor + backDiffuseColor
        return self
        self.backEmissiveColor = [0, 0, 0]
        if not self.backEmissiveColor:
            self.backEmissiveColor = kwargs.pop("backEmissiveColor", [0, 0, 0])
        if self.backEmissiveColor == None or len(self.backEmissiveColor) <= 0 or min(self.backEmissiveColor)  <  0:
            return None
        if self.backEmissiveColor == None or len(self.backEmissiveColor) <= 0 or max(self.backEmissiveColor)  >  1:
            return None
    def setBackEmissiveColor(self, backEmissiveColor = [0, 0, 0]):
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or min(backEmissiveColor)  <  0:
            return None
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or max(backEmissiveColor)  >  1:
            return None
        try:
            super().setBackEmissiveColor(backEmissiveColor)
        except AttributeError:
           pass
        self.backEmissiveColor = backEmissiveColor
        return self
    def addBackEmissiveColor(self, backEmissiveColor = [0, 0, 0]):
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or min(backEmissiveColor)  <  0:
            return None
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or max(backEmissiveColor)  >  1:
            return None
        if not isinstance(backEmissiveColor, list):
            backEmissiveColor = [backEmissiveColor]
            self.backEmissiveColor = []
            self.backEmissiveColor = self.backEmissiveColor + backEmissiveColor
        return self
    def addBackEmissiveColor(self, backEmissiveColor = [0, 0, 0]):
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or min(backEmissiveColor)  <  0:
            return None
        if backEmissiveColor == None or len(backEmissiveColor) <= 0 or max(backEmissiveColor)  >  1:
            return None
        if not isinstance(backEmissiveColor, list):
            backEmissiveColor = [backEmissiveColor]
            self.backEmissiveColor = []
            self.backEmissiveColor = self.backEmissiveColor + backEmissiveColor
        return self
        self.backShininess = 0.2
        if not self.backShininess:
            self.backShininess = kwargs.pop("backShininess", 0.2)
        if self.backShininess == None or self.backShininess  <  0:
            return None
        if self.backShininess == None or self.backShininess  >  1:
            return None
    def setBackShininess(self, backShininess = 0.2):
        if backShininess == None or backShininess  <  0:
            return None
        if backShininess == None or backShininess  >  1:
            return None
        try:
            super().setBackShininess(backShininess)
        except AttributeError:
           pass
        self.backShininess = backShininess
        return self
    def addBackShininess(self, backShininess = 0.2):
        if backShininess == None or backShininess  <  0:
            return None
        if backShininess == None or backShininess  >  1:
            return None
        if not isinstance(backShininess, list):
            backShininess = [backShininess]
            self.backShininess = []
            self.backShininess = self.backShininess + backShininess
        return self
    def addBackShininess(self, backShininess = 0.2):
        if backShininess == None or backShininess  <  0:
            return None
        if backShininess == None or backShininess  >  1:
            return None
        if not isinstance(backShininess, list):
            backShininess = [backShininess]
            self.backShininess = []
            self.backShininess = self.backShininess + backShininess
        return self
        self.backSpecularColor = [0, 0, 0]
        if not self.backSpecularColor:
            self.backSpecularColor = kwargs.pop("backSpecularColor", [0, 0, 0])
        if self.backSpecularColor == None or len(self.backSpecularColor) <= 0 or min(self.backSpecularColor)  <  0:
            return None
        if self.backSpecularColor == None or len(self.backSpecularColor) <= 0 or max(self.backSpecularColor)  >  1:
            return None
    def setBackSpecularColor(self, backSpecularColor = [0, 0, 0]):
        if backSpecularColor == None or len(backSpecularColor) <= 0 or min(backSpecularColor)  <  0:
            return None
        if backSpecularColor == None or len(backSpecularColor) <= 0 or max(backSpecularColor)  >  1:
            return None
        try:
            super().setBackSpecularColor(backSpecularColor)
        except AttributeError:
           pass
        self.backSpecularColor = backSpecularColor
        return self
    def addBackSpecularColor(self, backSpecularColor = [0, 0, 0]):
        if backSpecularColor == None or len(backSpecularColor) <= 0 or min(backSpecularColor)  <  0:
            return None
        if backSpecularColor == None or len(backSpecularColor) <= 0 or max(backSpecularColor)  >  1:
            return None
        if not isinstance(backSpecularColor, list):
            backSpecularColor = [backSpecularColor]
            self.backSpecularColor = []
            self.backSpecularColor = self.backSpecularColor + backSpecularColor
        return self
    def addBackSpecularColor(self, backSpecularColor = [0, 0, 0]):
        if backSpecularColor == None or len(backSpecularColor) <= 0 or min(backSpecularColor)  <  0:
            return None
        if backSpecularColor == None or len(backSpecularColor) <= 0 or max(backSpecularColor)  >  1:
            return None
        if not isinstance(backSpecularColor, list):
            backSpecularColor = [backSpecularColor]
            self.backSpecularColor = []
            self.backSpecularColor = self.backSpecularColor + backSpecularColor
        return self
        self.backTransparency = 0
        if not self.backTransparency:
            self.backTransparency = kwargs.pop("backTransparency", 0)
        if self.backTransparency == None or self.backTransparency  <  0:
            return None
        if self.backTransparency == None or self.backTransparency  >  1:
            return None
    def setBackTransparency(self, backTransparency = 0):
        if backTransparency == None or backTransparency  <  0:
            return None
        if backTransparency == None or backTransparency  >  1:
            return None
        try:
            super().setBackTransparency(backTransparency)
        except AttributeError:
           pass
        self.backTransparency = backTransparency
        return self
    def addBackTransparency(self, backTransparency = 0):
        if backTransparency == None or backTransparency  <  0:
            return None
        if backTransparency == None or backTransparency  >  1:
            return None
        if not isinstance(backTransparency, list):
            backTransparency = [backTransparency]
            self.backTransparency = []
            self.backTransparency = self.backTransparency + backTransparency
        return self
    def addBackTransparency(self, backTransparency = 0):
        if backTransparency == None or backTransparency  <  0:
            return None
        if backTransparency == None or backTransparency  >  1:
            return None
        if not isinstance(backTransparency, list):
            backTransparency = [backTransparency]
            self.backTransparency = []
            self.backTransparency = self.backTransparency + backTransparency
        return self
        self.diffuseColor = [0.8, 0.8, 0.8]
        if not self.diffuseColor:
            self.diffuseColor = kwargs.pop("diffuseColor", [0.8, 0.8, 0.8])
        if self.diffuseColor == None or len(self.diffuseColor) <= 0 or min(self.diffuseColor)  <  0:
            return None
        if self.diffuseColor == None or len(self.diffuseColor) <= 0 or max(self.diffuseColor)  >  1:
            return None
    def setDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        try:
            super().setDiffuseColor(diffuseColor)
        except AttributeError:
           pass
        self.diffuseColor = diffuseColor
        return self
    def addDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        if not isinstance(diffuseColor, list):
            diffuseColor = [diffuseColor]
            self.diffuseColor = []
            self.diffuseColor = self.diffuseColor + diffuseColor
        return self
    def addDiffuseColor(self, diffuseColor = [0.8, 0.8, 0.8]):
        if diffuseColor == None or len(diffuseColor) <= 0 or min(diffuseColor)  <  0:
            return None
        if diffuseColor == None or len(diffuseColor) <= 0 or max(diffuseColor)  >  1:
            return None
        if not isinstance(diffuseColor, list):
            diffuseColor = [diffuseColor]
            self.diffuseColor = []
            self.diffuseColor = self.diffuseColor + diffuseColor
        return self
        self.emissiveColor = [0, 0, 0]
        if not self.emissiveColor:
            self.emissiveColor = kwargs.pop("emissiveColor", [0, 0, 0])
        if self.emissiveColor == None or len(self.emissiveColor) <= 0 or min(self.emissiveColor)  <  0:
            return None
        if self.emissiveColor == None or len(self.emissiveColor) <= 0 or max(self.emissiveColor)  >  1:
            return None
    def setEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        try:
            super().setEmissiveColor(emissiveColor)
        except AttributeError:
           pass
        self.emissiveColor = emissiveColor
        return self
    def addEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        if not isinstance(emissiveColor, list):
            emissiveColor = [emissiveColor]
            self.emissiveColor = []
            self.emissiveColor = self.emissiveColor + emissiveColor
        return self
    def addEmissiveColor(self, emissiveColor = [0, 0, 0]):
        if emissiveColor == None or len(emissiveColor) <= 0 or min(emissiveColor)  <  0:
            return None
        if emissiveColor == None or len(emissiveColor) <= 0 or max(emissiveColor)  >  1:
            return None
        if not isinstance(emissiveColor, list):
            emissiveColor = [emissiveColor]
            self.emissiveColor = []
            self.emissiveColor = self.emissiveColor + emissiveColor
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.separateBackColor = False
        if not self.separateBackColor:
            self.separateBackColor = kwargs.pop("separateBackColor", False)
    def setSeparateBackColor(self, separateBackColor = False):
        try:
            super().setSeparateBackColor(separateBackColor)
        except AttributeError:
           pass
        self.separateBackColor = separateBackColor
        return self
    def addSeparateBackColor(self, separateBackColor = False):
        if not isinstance(separateBackColor, list):
            separateBackColor = [separateBackColor]
            self.separateBackColor = []
            self.separateBackColor = self.separateBackColor + separateBackColor
        return self
    def addSeparateBackColor(self, separateBackColor = False):
        if not isinstance(separateBackColor, list):
            separateBackColor = [separateBackColor]
            self.separateBackColor = []
            self.separateBackColor = self.separateBackColor + separateBackColor
        return self
        self.shininess = 0.2
        if not self.shininess:
            self.shininess = kwargs.pop("shininess", 0.2)
        if self.shininess == None or self.shininess  <  0:
            return None
        if self.shininess == None or self.shininess  >  1:
            return None
    def setShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        try:
            super().setShininess(shininess)
        except AttributeError:
           pass
        self.shininess = shininess
        return self
    def addShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        if not isinstance(shininess, list):
            shininess = [shininess]
            self.shininess = []
            self.shininess = self.shininess + shininess
        return self
    def addShininess(self, shininess = 0.2):
        if shininess == None or shininess  <  0:
            return None
        if shininess == None or shininess  >  1:
            return None
        if not isinstance(shininess, list):
            shininess = [shininess]
            self.shininess = []
            self.shininess = self.shininess + shininess
        return self
        self.specularColor = [0, 0, 0]
        if not self.specularColor:
            self.specularColor = kwargs.pop("specularColor", [0, 0, 0])
        if self.specularColor == None or len(self.specularColor) <= 0 or min(self.specularColor)  <  0:
            return None
        if self.specularColor == None or len(self.specularColor) <= 0 or max(self.specularColor)  >  1:
            return None
    def setSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        try:
            super().setSpecularColor(specularColor)
        except AttributeError:
           pass
        self.specularColor = specularColor
        return self
    def addSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        if not isinstance(specularColor, list):
            specularColor = [specularColor]
            self.specularColor = []
            self.specularColor = self.specularColor + specularColor
        return self
    def addSpecularColor(self, specularColor = [0, 0, 0]):
        if specularColor == None or len(specularColor) <= 0 or min(specularColor)  <  0:
            return None
        if specularColor == None or len(specularColor) <= 0 or max(specularColor)  >  1:
            return None
        if not isinstance(specularColor, list):
            specularColor = [specularColor]
            self.specularColor = []
            self.specularColor = self.specularColor + specularColor
        return self
        self.transparency = 0
        if not self.transparency:
            self.transparency = kwargs.pop("transparency", 0)
        if self.transparency == None or self.transparency  <  0:
            return None
        if self.transparency == None or self.transparency  >  1:
            return None
    def setTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        try:
            super().setTransparency(transparency)
        except AttributeError:
           pass
        self.transparency = transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
    def addTransparency(self, transparency = 0):
        if transparency == None or transparency  <  0:
            return None
        if transparency == None or transparency  >  1:
            return None
        if not isinstance(transparency, list):
            transparency = [transparency]
            self.transparency = []
            self.transparency = self.transparency + transparency
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class UniversalJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super(UniversalJoint, self).__init__(**kwargs)
        self.anchorPoint = [0, 0, 0]
        if not self.anchorPoint:
            self.anchorPoint = kwargs.pop("anchorPoint", [0, 0, 0])
    def setAnchorPoint(self, anchorPoint = [0, 0, 0]):
        try:
            super().setAnchorPoint(anchorPoint)
        except AttributeError:
           pass
        self.anchorPoint = anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
    def addAnchorPoint(self, anchorPoint = [0, 0, 0]):
        if not isinstance(anchorPoint, list):
            anchorPoint = [anchorPoint]
            self.anchorPoint = []
            self.anchorPoint = self.anchorPoint + anchorPoint
        return self
        self.axis1 = [0, 0, 0]
        if not self.axis1:
            self.axis1 = kwargs.pop("axis1", [0, 0, 0])
    def setAxis1(self, axis1 = [0, 0, 0]):
        try:
            super().setAxis1(axis1)
        except AttributeError:
           pass
        self.axis1 = axis1
        return self
    def addAxis1(self, axis1 = [0, 0, 0]):
        if not isinstance(axis1, list):
            axis1 = [axis1]
            self.axis1 = []
            self.axis1 = self.axis1 + axis1
        return self
    def addAxis1(self, axis1 = [0, 0, 0]):
        if not isinstance(axis1, list):
            axis1 = [axis1]
            self.axis1 = []
            self.axis1 = self.axis1 + axis1
        return self
        self.axis2 = [0, 0, 0]
        if not self.axis2:
            self.axis2 = kwargs.pop("axis2", [0, 0, 0])
    def setAxis2(self, axis2 = [0, 0, 0]):
        try:
            super().setAxis2(axis2)
        except AttributeError:
           pass
        self.axis2 = axis2
        return self
    def addAxis2(self, axis2 = [0, 0, 0]):
        if not isinstance(axis2, list):
            axis2 = [axis2]
            self.axis2 = []
            self.axis2 = self.axis2 + axis2
        return self
    def addAxis2(self, axis2 = [0, 0, 0]):
        if not isinstance(axis2, list):
            axis2 = [axis2]
            self.axis2 = []
            self.axis2 = self.axis2 + axis2
        return self
        self.body1 = None
        if not self.body1:
            self.body1 = kwargs.pop("body1", None)
    def setBody1(self, body1 = None):
        try:
            super().setBody1(body1)
        except AttributeError:
           pass
        self.body1 = body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
    def addBody1(self, body1 = None):
        if not isinstance(body1, list):
            body1 = [body1]
            self.body1 = []
            self.body1 = self.body1 + body1
        return self
        self.body1AnchorPoint = []
        if not self.body1AnchorPoint:
            self.body1AnchorPoint = kwargs.pop("body1AnchorPoint", [])
    def setBody1AnchorPoint(self, body1AnchorPoint = []):
        try:
            super().setBody1AnchorPoint(body1AnchorPoint)
        except AttributeError:
           pass
        self.body1AnchorPoint = body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
    def addBody1AnchorPoint(self, body1AnchorPoint = []):
        if not isinstance(body1AnchorPoint, list):
            body1AnchorPoint = [body1AnchorPoint]
            self.body1AnchorPoint = []
            self.body1AnchorPoint = self.body1AnchorPoint + body1AnchorPoint
        return self
        self.body1Axis = []
        if not self.body1Axis:
            self.body1Axis = kwargs.pop("body1Axis", [])
    def setBody1Axis(self, body1Axis = []):
        try:
            super().setBody1Axis(body1Axis)
        except AttributeError:
           pass
        self.body1Axis = body1Axis
        return self
    def addBody1Axis(self, body1Axis = []):
        if not isinstance(body1Axis, list):
            body1Axis = [body1Axis]
            self.body1Axis = []
            self.body1Axis = self.body1Axis + body1Axis
        return self
    def addBody1Axis(self, body1Axis = []):
        if not isinstance(body1Axis, list):
            body1Axis = [body1Axis]
            self.body1Axis = []
            self.body1Axis = self.body1Axis + body1Axis
        return self
        self.body2 = None
        if not self.body2:
            self.body2 = kwargs.pop("body2", None)
    def setBody2(self, body2 = None):
        try:
            super().setBody2(body2)
        except AttributeError:
           pass
        self.body2 = body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
    def addBody2(self, body2 = None):
        if not isinstance(body2, list):
            body2 = [body2]
            self.body2 = []
            self.body2 = self.body2 + body2
        return self
        self.body2AnchorPoint = []
        if not self.body2AnchorPoint:
            self.body2AnchorPoint = kwargs.pop("body2AnchorPoint", [])
    def setBody2AnchorPoint(self, body2AnchorPoint = []):
        try:
            super().setBody2AnchorPoint(body2AnchorPoint)
        except AttributeError:
           pass
        self.body2AnchorPoint = body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
    def addBody2AnchorPoint(self, body2AnchorPoint = []):
        if not isinstance(body2AnchorPoint, list):
            body2AnchorPoint = [body2AnchorPoint]
            self.body2AnchorPoint = []
            self.body2AnchorPoint = self.body2AnchorPoint + body2AnchorPoint
        return self
        self.body2Axis = None
        if not self.body2Axis:
            self.body2Axis = kwargs.pop("body2Axis", None)
    def setBody2Axis(self, body2Axis = None):
        try:
            super().setBody2Axis(body2Axis)
        except AttributeError:
           pass
        self.body2Axis = body2Axis
        return self
    def addBody2Axis(self, body2Axis = None):
        if not isinstance(body2Axis, list):
            body2Axis = [body2Axis]
            self.body2Axis = []
            self.body2Axis = self.body2Axis + body2Axis
        return self
    def addBody2Axis(self, body2Axis = None):
        if not isinstance(body2Axis, list):
            body2Axis = [body2Axis]
            self.body2Axis = []
            self.body2Axis = self.body2Axis + body2Axis
        return self
        self.forceOutput = "NONE"
        if not self.forceOutput:
            self.forceOutput = kwargs.pop("forceOutput", "NONE")
    def setForceOutput(self, forceOutput = "NONE"):
        try:
            super().setForceOutput(forceOutput)
        except AttributeError:
           pass
        self.forceOutput = forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
    def addForceOutput(self, forceOutput = "NONE"):
        if not isinstance(forceOutput, list):
            forceOutput = [forceOutput]
            self.forceOutput = []
            self.forceOutput = self.forceOutput + forceOutput
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.stop1Bounce = 0
        if not self.stop1Bounce:
            self.stop1Bounce = kwargs.pop("stop1Bounce", 0)
        if self.stop1Bounce == None or self.stop1Bounce  <  0:
            return None
        if self.stop1Bounce == None or self.stop1Bounce  >  1:
            return None
    def setStop1Bounce(self, stop1Bounce = 0):
        if stop1Bounce == None or stop1Bounce  <  0:
            return None
        if stop1Bounce == None or stop1Bounce  >  1:
            return None
        try:
            super().setStop1Bounce(stop1Bounce)
        except AttributeError:
           pass
        self.stop1Bounce = stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if stop1Bounce == None or stop1Bounce  <  0:
            return None
        if stop1Bounce == None or stop1Bounce  >  1:
            return None
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
    def addStop1Bounce(self, stop1Bounce = 0):
        if stop1Bounce == None or stop1Bounce  <  0:
            return None
        if stop1Bounce == None or stop1Bounce  >  1:
            return None
        if not isinstance(stop1Bounce, list):
            stop1Bounce = [stop1Bounce]
            self.stop1Bounce = []
            self.stop1Bounce = self.stop1Bounce + stop1Bounce
        return self
        self.stop1ErrorCorrection = 0.8
        if not self.stop1ErrorCorrection:
            self.stop1ErrorCorrection = kwargs.pop("stop1ErrorCorrection", 0.8)
        if self.stop1ErrorCorrection == None or self.stop1ErrorCorrection  <  0:
            return None
        if self.stop1ErrorCorrection == None or self.stop1ErrorCorrection  >  1:
            return None
    def setStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if stop1ErrorCorrection == None or stop1ErrorCorrection  <  0:
            return None
        if stop1ErrorCorrection == None or stop1ErrorCorrection  >  1:
            return None
        try:
            super().setStop1ErrorCorrection(stop1ErrorCorrection)
        except AttributeError:
           pass
        self.stop1ErrorCorrection = stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if stop1ErrorCorrection == None or stop1ErrorCorrection  <  0:
            return None
        if stop1ErrorCorrection == None or stop1ErrorCorrection  >  1:
            return None
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
    def addStop1ErrorCorrection(self, stop1ErrorCorrection = 0.8):
        if stop1ErrorCorrection == None or stop1ErrorCorrection  <  0:
            return None
        if stop1ErrorCorrection == None or stop1ErrorCorrection  >  1:
            return None
        if not isinstance(stop1ErrorCorrection, list):
            stop1ErrorCorrection = [stop1ErrorCorrection]
            self.stop1ErrorCorrection = []
            self.stop1ErrorCorrection = self.stop1ErrorCorrection + stop1ErrorCorrection
        return self
        self.stop2Bounce = 0
        if not self.stop2Bounce:
            self.stop2Bounce = kwargs.pop("stop2Bounce", 0)
        if self.stop2Bounce == None or self.stop2Bounce  <  0:
            return None
        if self.stop2Bounce == None or self.stop2Bounce  >  1:
            return None
    def setStop2Bounce(self, stop2Bounce = 0):
        if stop2Bounce == None or stop2Bounce  <  0:
            return None
        if stop2Bounce == None or stop2Bounce  >  1:
            return None
        try:
            super().setStop2Bounce(stop2Bounce)
        except AttributeError:
           pass
        self.stop2Bounce = stop2Bounce
        return self
    def addStop2Bounce(self, stop2Bounce = 0):
        if stop2Bounce == None or stop2Bounce  <  0:
            return None
        if stop2Bounce == None or stop2Bounce  >  1:
            return None
        if not isinstance(stop2Bounce, list):
            stop2Bounce = [stop2Bounce]
            self.stop2Bounce = []
            self.stop2Bounce = self.stop2Bounce + stop2Bounce
        return self
    def addStop2Bounce(self, stop2Bounce = 0):
        if stop2Bounce == None or stop2Bounce  <  0:
            return None
        if stop2Bounce == None or stop2Bounce  >  1:
            return None
        if not isinstance(stop2Bounce, list):
            stop2Bounce = [stop2Bounce]
            self.stop2Bounce = []
            self.stop2Bounce = self.stop2Bounce + stop2Bounce
        return self
        self.stop2ErrorCorrection = 0.8
        if not self.stop2ErrorCorrection:
            self.stop2ErrorCorrection = kwargs.pop("stop2ErrorCorrection", 0.8)
        if self.stop2ErrorCorrection == None or self.stop2ErrorCorrection  <  0:
            return None
        if self.stop2ErrorCorrection == None or self.stop2ErrorCorrection  >  1:
            return None
    def setStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        if stop2ErrorCorrection == None or stop2ErrorCorrection  <  0:
            return None
        if stop2ErrorCorrection == None or stop2ErrorCorrection  >  1:
            return None
        try:
            super().setStop2ErrorCorrection(stop2ErrorCorrection)
        except AttributeError:
           pass
        self.stop2ErrorCorrection = stop2ErrorCorrection
        return self
    def addStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        if stop2ErrorCorrection == None or stop2ErrorCorrection  <  0:
            return None
        if stop2ErrorCorrection == None or stop2ErrorCorrection  >  1:
            return None
        if not isinstance(stop2ErrorCorrection, list):
            stop2ErrorCorrection = [stop2ErrorCorrection]
            self.stop2ErrorCorrection = []
            self.stop2ErrorCorrection = self.stop2ErrorCorrection + stop2ErrorCorrection
        return self
    def addStop2ErrorCorrection(self, stop2ErrorCorrection = 0.8):
        if stop2ErrorCorrection == None or stop2ErrorCorrection  <  0:
            return None
        if stop2ErrorCorrection == None or stop2ErrorCorrection  >  1:
            return None
        if not isinstance(stop2ErrorCorrection, list):
            stop2ErrorCorrection = [stop2ErrorCorrection]
            self.stop2ErrorCorrection = []
            self.stop2ErrorCorrection = self.stop2ErrorCorrection + stop2ErrorCorrection
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Viewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super(Viewpoint, self).__init__(**kwargs)
        self.bindTime = None
        if not self.bindTime:
            self.bindTime = kwargs.pop("bindTime", None)
    def setBindTime(self, bindTime = None):
        try:
            super().setBindTime(bindTime)
        except AttributeError:
           pass
        self.bindTime = bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
    def addBindTime(self, bindTime = None):
        if not isinstance(bindTime, list):
            bindTime = [bindTime]
            self.bindTime = []
            self.bindTime = self.bindTime + bindTime
        return self
        self.centerOfRotation = [0, 0, 0]
        if not self.centerOfRotation:
            self.centerOfRotation = kwargs.pop("centerOfRotation", [0, 0, 0])
    def setCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        try:
            super().setCenterOfRotation(centerOfRotation)
        except AttributeError:
           pass
        self.centerOfRotation = centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
    def addCenterOfRotation(self, centerOfRotation = [0, 0, 0]):
        if not isinstance(centerOfRotation, list):
            centerOfRotation = [centerOfRotation]
            self.centerOfRotation = []
            self.centerOfRotation = self.centerOfRotation + centerOfRotation
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.fieldOfView = 0.7854
        if not self.fieldOfView:
            self.fieldOfView = kwargs.pop("fieldOfView", 0.7854)
        if self.fieldOfView == None or self.fieldOfView  <=  0:
            return None
        if self.fieldOfView == None or self.fieldOfView  >=  3.1416:
            return None
    def setFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        try:
            super().setFieldOfView(fieldOfView)
        except AttributeError:
           pass
        self.fieldOfView = fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
    def addFieldOfView(self, fieldOfView = 0.7854):
        if fieldOfView == None or fieldOfView  <=  0:
            return None
        if fieldOfView == None or fieldOfView  >=  3.1416:
            return None
        if not isinstance(fieldOfView, list):
            fieldOfView = [fieldOfView]
            self.fieldOfView = []
            self.fieldOfView = self.fieldOfView + fieldOfView
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Bound = None
        if not self.Bound:
            self.Bound = kwargs.pop("Bound", None)
    def setIsBound(self, Bound = None):
        try:
            super().setIsBound(Bound)
        except AttributeError:
           pass
        self.Bound = Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
    def addIsBound(self, Bound = None):
        if not isinstance(Bound, list):
            Bound = [Bound]
            self.Bound = []
            self.Bound = self.Bound + Bound
        return self
        self.jump = True
        if not self.jump:
            self.jump = kwargs.pop("jump", True)
    def setJump(self, jump = True):
        try:
            super().setJump(jump)
        except AttributeError:
           pass
        self.jump = jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
    def addJump(self, jump = True):
        if not isinstance(jump, list):
            jump = [jump]
            self.jump = []
            self.jump = self.jump + jump
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.orientation = [0, 0, 1, 0]
        if not self.orientation:
            self.orientation = kwargs.pop("orientation", [0, 0, 1, 0])
    def setOrientation(self, orientation = [0, 0, 1, 0]):
        try:
            super().setOrientation(orientation)
        except AttributeError:
           pass
        self.orientation = orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
    def addOrientation(self, orientation = [0, 0, 1, 0]):
        if not isinstance(orientation, list):
            orientation = [orientation]
            self.orientation = []
            self.orientation = self.orientation + orientation
        return self
        self.position = [0, 0, 10]
        if not self.position:
            self.position = kwargs.pop("position", [0, 0, 10])
    def setPosition(self, position = [0, 0, 10]):
        try:
            super().setPosition(position)
        except AttributeError:
           pass
        self.position = position
        return self
    def addPosition(self, position = [0, 0, 10]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
    def addPosition(self, position = [0, 0, 10]):
        if not isinstance(position, list):
            position = [position]
            self.position = []
            self.position = self.position + position
        return self
        self.retainUserOffsets = False
        if not self.retainUserOffsets:
            self.retainUserOffsets = kwargs.pop("retainUserOffsets", False)
    def setRetainUserOffsets(self, retainUserOffsets = False):
        try:
            super().setRetainUserOffsets(retainUserOffsets)
        except AttributeError:
           pass
        self.retainUserOffsets = retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
        self.Bind = None
        if not self.Bind:
            self.Bind = kwargs.pop("Bind", None)
    def setSet_bind(self, Bind = None):
        try:
            super().setSet_bind(Bind)
        except AttributeError:
           pass
        self.Bind = Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
    def addSet_bind(self, Bind = None):
        if not isinstance(Bind, list):
            Bind = [Bind]
            self.Bind = []
            self.Bind = self.Bind + Bind
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setIS(self, IS = []):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = []):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def removeIS(self, IS):
        self.IS = [x for x in self.IS if x not in IS]
        return self.IS
    def getIS(self, IS = []):
        return self.IS
    def IS_changed(self, IS = []):
        return self.IS
    def getIS(self, IS = []):
        return self.IS


class ViewpointGroup(X3DChildNode):
    def __init__(self, **kwargs):
        super(ViewpointGroup, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.description = None
        if not self.description:
            self.description = kwargs.pop("description", None)
    def setDescription(self, description = None):
        try:
            super().setDescription(description)
        except AttributeError:
           pass
        self.description = description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
    def addDescription(self, description = None):
        if not isinstance(description, list):
            description = [description]
            self.description = []
            self.description = self.description + description
        return self
        self.displayed = True
        if not self.displayed:
            self.displayed = kwargs.pop("displayed", True)
    def setDisplayed(self, displayed = True):
        try:
            super().setDisplayed(displayed)
        except AttributeError:
           pass
        self.displayed = displayed
        return self
    def addDisplayed(self, displayed = True):
        if not isinstance(displayed, list):
            displayed = [displayed]
            self.displayed = []
            self.displayed = self.displayed + displayed
        return self
    def addDisplayed(self, displayed = True):
        if not isinstance(displayed, list):
            displayed = [displayed]
            self.displayed = []
            self.displayed = self.displayed + displayed
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.retainUserOffsets = False
        if not self.retainUserOffsets:
            self.retainUserOffsets = kwargs.pop("retainUserOffsets", False)
    def setRetainUserOffsets(self, retainUserOffsets = False):
        try:
            super().setRetainUserOffsets(retainUserOffsets)
        except AttributeError:
           pass
        self.retainUserOffsets = retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
    def addRetainUserOffsets(self, retainUserOffsets = False):
        if not isinstance(retainUserOffsets, list):
            retainUserOffsets = [retainUserOffsets]
            self.retainUserOffsets = []
            self.retainUserOffsets = self.retainUserOffsets + retainUserOffsets
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
    def setSize(self, size = [0, 0, 0]):
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Viewport(X3DViewportNode):
    def __init__(self, **kwargs):
        super(Viewport, self).__init__(**kwargs)
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setAddChildren(self, Children = []):
        try:
            super().setAddChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addAddChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.clipBoundary = [0, 1, 0, 1]
        if not self.clipBoundary:
            self.clipBoundary = kwargs.pop("clipBoundary", [0, 1, 0, 1])
        if self.clipBoundary == None or len(self.clipBoundary) <= 0 or min(self.clipBoundary)  <  0:
            return None
        if self.clipBoundary == None or len(self.clipBoundary) <= 0 or max(self.clipBoundary)  >  1:
            return None
    def setClipBoundary(self, clipBoundary = [0, 1, 0, 1]):
        if clipBoundary == None or len(clipBoundary) <= 0 or min(clipBoundary)  <  0:
            return None
        if clipBoundary == None or len(clipBoundary) <= 0 or max(clipBoundary)  >  1:
            return None
        try:
            super().setClipBoundary(clipBoundary)
        except AttributeError:
           pass
        self.clipBoundary = clipBoundary
        return self
    def addClipBoundary(self, clipBoundary = [0, 1, 0, 1]):
        if clipBoundary == None or len(clipBoundary) <= 0 or min(clipBoundary)  <  0:
            return None
        if clipBoundary == None or len(clipBoundary) <= 0 or max(clipBoundary)  >  1:
            return None
        if not isinstance(clipBoundary, list):
            clipBoundary = [clipBoundary]
            self.clipBoundary = []
            self.clipBoundary = self.clipBoundary + clipBoundary
        return self
    def addClipBoundary(self, clipBoundary = [0, 1, 0, 1]):
        if clipBoundary == None or len(clipBoundary) <= 0 or min(clipBoundary)  <  0:
            return None
        if clipBoundary == None or len(clipBoundary) <= 0 or max(clipBoundary)  >  1:
            return None
        if not isinstance(clipBoundary, list):
            clipBoundary = [clipBoundary]
            self.clipBoundary = []
            self.clipBoundary = self.clipBoundary + clipBoundary
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.Children = []
        if not self.Children:
            self.Children = kwargs.pop("Children", [])
    def setRemoveChildren(self, Children = []):
        try:
            super().setRemoveChildren(Children)
        except AttributeError:
           pass
        self.Children = Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
    def addRemoveChildren(self, Children = []):
        if not isinstance(Children, list):
            Children = [Children]
            self.Children = []
            self.Children = self.Children + Children
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class VisibilitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super(VisibilitySensor, self).__init__(**kwargs)
        self.center = [0, 0, 0]
        if not self.center:
            self.center = kwargs.pop("center", [0, 0, 0])
    def setCenter(self, center = [0, 0, 0]):
        try:
            super().setCenter(center)
        except AttributeError:
           pass
        self.center = center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
    def addCenter(self, center = [0, 0, 0]):
        if not isinstance(center, list):
            center = [center]
            self.center = []
            self.center = self.center + center
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.enterTime = None
        if not self.enterTime:
            self.enterTime = kwargs.pop("enterTime", None)
    def setEnterTime(self, enterTime = None):
        try:
            super().setEnterTime(enterTime)
        except AttributeError:
           pass
        self.enterTime = enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
    def addEnterTime(self, enterTime = None):
        if not isinstance(enterTime, list):
            enterTime = [enterTime]
            self.enterTime = []
            self.enterTime = self.enterTime + enterTime
        return self
        self.exitTime = None
        if not self.exitTime:
            self.exitTime = kwargs.pop("exitTime", None)
    def setExitTime(self, exitTime = None):
        try:
            super().setExitTime(exitTime)
        except AttributeError:
           pass
        self.exitTime = exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
    def addExitTime(self, exitTime = None):
        if not isinstance(exitTime, list):
            exitTime = [exitTime]
            self.exitTime = []
            self.exitTime = self.exitTime + exitTime
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.size = [0, 0, 0]
        if not self.size:
            self.size = kwargs.pop("size", [0, 0, 0])
        if self.size == None or len(self.size) <= 0 or min(self.size)  <  0:
            return None
    def setSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        try:
            super().setSize(size)
        except AttributeError:
           pass
        self.size = size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
    def addSize(self, size = [0, 0, 0]):
        if size == None or len(size) <= 0 or min(size)  <  0:
            return None
        if not isinstance(size, list):
            size = [size]
            self.size = []
            self.size = self.size + size
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class VolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super(VolumeData, self).__init__(**kwargs)
        self.bboxCenter = [0, 0, 0]
        if not self.bboxCenter:
            self.bboxCenter = kwargs.pop("bboxCenter", [0, 0, 0])
    def setBboxCenter(self, bboxCenter = [0, 0, 0]):
        try:
            super().setBboxCenter(bboxCenter)
        except AttributeError:
           pass
        self.bboxCenter = bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
    def addBboxCenter(self, bboxCenter = [0, 0, 0]):
        if not isinstance(bboxCenter, list):
            bboxCenter = [bboxCenter]
            self.bboxCenter = []
            self.bboxCenter = self.bboxCenter + bboxCenter
        return self
        self.bboxSize = [-1, -1, -1]
        if not self.bboxSize:
            self.bboxSize = kwargs.pop("bboxSize", [-1, -1, -1])
    def setBboxSize(self, bboxSize = [-1, -1, -1]):
        try:
            super().setBboxSize(bboxSize)
        except AttributeError:
           pass
        self.bboxSize = bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
    def addBboxSize(self, bboxSize = [-1, -1, -1]):
        if not isinstance(bboxSize, list):
            bboxSize = [bboxSize]
            self.bboxSize = []
            self.bboxSize = self.bboxSize + bboxSize
        return self
        self.dimensions = [1, 1, 1]
        if not self.dimensions:
            self.dimensions = kwargs.pop("dimensions", [1, 1, 1])
        if self.dimensions == None or len(self.dimensions) <= 0 or min(self.dimensions)  <=  0:
            return None
    def setDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        try:
            super().setDimensions(dimensions)
        except AttributeError:
           pass
        self.dimensions = dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
    def addDimensions(self, dimensions = [1, 1, 1]):
        if dimensions == None or len(dimensions) <= 0 or min(dimensions)  <=  0:
            return None
        if not isinstance(dimensions, list):
            dimensions = [dimensions]
            self.dimensions = []
            self.dimensions = self.dimensions + dimensions
        return self
        self.displayBBox = False
        if not self.displayBBox:
            self.displayBBox = kwargs.pop("displayBBox", False)
    def setDisplayBBox(self, displayBBox = False):
        try:
            super().setDisplayBBox(displayBBox)
        except AttributeError:
           pass
        self.displayBBox = displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
    def addDisplayBBox(self, displayBBox = False):
        if not isinstance(displayBBox, list):
            displayBBox = [displayBBox]
            self.displayBBox = []
            self.displayBBox = self.displayBBox + displayBBox
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.renderStyle = None
        if not self.renderStyle:
            self.renderStyle = kwargs.pop("renderStyle", None)
    def setRenderStyle(self, renderStyle = None):
        try:
            super().setRenderStyle(renderStyle)
        except AttributeError:
           pass
        self.renderStyle = renderStyle
        return self
    def addRenderStyle(self, renderStyle = None):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
    def addRenderStyle(self, renderStyle = None):
        if not isinstance(renderStyle, list):
            renderStyle = [renderStyle]
            self.renderStyle = []
            self.renderStyle = self.renderStyle + renderStyle
        return self
        self.visible = True
        if not self.visible:
            self.visible = kwargs.pop("visible", True)
    def setVisible(self, visible = True):
        try:
            super().setVisible(visible)
        except AttributeError:
           pass
        self.visible = visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
    def addVisible(self, visible = True):
        if not isinstance(visible, list):
            visible = [visible]
            self.visible = []
            self.visible = self.visible + visible
        return self
        self.voxels = None
        if not self.voxels:
            self.voxels = kwargs.pop("voxels", None)
    def setVoxels(self, voxels = None):
        try:
            super().setVoxels(voxels)
        except AttributeError:
           pass
        self.voxels = voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
    def addVoxels(self, voxels = None):
        if not isinstance(voxels, list):
            voxels = [voxels]
            self.voxels = []
            self.voxels = self.voxels + voxels
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class VolumeEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super(VolumeEmitter, self).__init__(**kwargs)
        self.coord = None
        if not self.coord:
            self.coord = kwargs.pop("coord", None)
    def setCoord(self, coord = None):
        try:
            super().setCoord(coord)
        except AttributeError:
           pass
        self.coord = coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
    def addCoord(self, coord = None):
        if not isinstance(coord, list):
            coord = [coord]
            self.coord = []
            self.coord = self.coord + coord
        return self
        self.coordIndex = -1
        if not self.coordIndex:
            self.coordIndex = kwargs.pop("coordIndex", -1)
        if self.coordIndex == None or len(self.coordIndex) <= 0 or min(self.coordIndex)  <  -1:
            return None
    def setCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        try:
            super().setCoordIndex(coordIndex)
        except AttributeError:
           pass
        self.coordIndex = coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
    def addCoordIndex(self, coordIndex = -1):
        if coordIndex == None or len(coordIndex) <= 0 or min(coordIndex)  <  -1:
            return None
        if not isinstance(coordIndex, list):
            coordIndex = [coordIndex]
            self.coordIndex = []
            self.coordIndex = self.coordIndex + coordIndex
        return self
        self.direction = [0, 1, 0]
        if not self.direction:
            self.direction = kwargs.pop("direction", [0, 1, 0])
        if self.direction == None or len(self.direction) <= 0 or min(self.direction)  <  -1:
            return None
        if self.direction == None or len(self.direction) <= 0 or max(self.direction)  >  1:
            return None
    def setDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [0, 1, 0]):
        if direction == None or len(direction) <= 0 or min(direction)  <  -1:
            return None
        if direction == None or len(direction) <= 0 or max(direction)  >  1:
            return None
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.internal = True
        if not self.internal:
            self.internal = kwargs.pop("internal", True)
    def setInternal(self, internal = True):
        try:
            super().setInternal(internal)
        except AttributeError:
           pass
        self.internal = internal
        return self
    def addInternal(self, internal = True):
        if not isinstance(internal, list):
            internal = [internal]
            self.internal = []
            self.internal = self.internal + internal
        return self
    def addInternal(self, internal = True):
        if not isinstance(internal, list):
            internal = [internal]
            self.internal = []
            self.internal = self.internal + internal
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.mass = 0
        if not self.mass:
            self.mass = kwargs.pop("mass", 0)
        if self.mass == None or self.mass  <  0:
            return None
    def setMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        try:
            super().setMass(mass)
        except AttributeError:
           pass
        self.mass = mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
    def addMass(self, mass = 0):
        if mass == None or mass  <  0:
            return None
        if not isinstance(mass, list):
            mass = [mass]
            self.mass = []
            self.mass = self.mass + mass
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.CoordIndex = []
        if not self.CoordIndex:
            self.CoordIndex = kwargs.pop("CoordIndex", [])
        if self.CoordIndex == None or len(self.CoordIndex) <= 0 or min(self.CoordIndex)  <  -1:
            return None
    def setSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        try:
            super().setSet_coordIndex(CoordIndex)
        except AttributeError:
           pass
        self.CoordIndex = CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
    def addSet_coordIndex(self, CoordIndex = []):
        if CoordIndex == None or len(CoordIndex) <= 0 or min(CoordIndex)  <  -1:
            return None
        if not isinstance(CoordIndex, list):
            CoordIndex = [CoordIndex]
            self.CoordIndex = []
            self.CoordIndex = self.CoordIndex + CoordIndex
        return self
        self.speed = 0
        if not self.speed:
            self.speed = kwargs.pop("speed", 0)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.surfaceArea = 0
        if not self.surfaceArea:
            self.surfaceArea = kwargs.pop("surfaceArea", 0)
        if self.surfaceArea == None or self.surfaceArea  <  0:
            return None
    def setSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        try:
            super().setSurfaceArea(surfaceArea)
        except AttributeError:
           pass
        self.surfaceArea = surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
    def addSurfaceArea(self, surfaceArea = 0):
        if surfaceArea == None or surfaceArea  <  0:
            return None
        if not isinstance(surfaceArea, list):
            surfaceArea = [surfaceArea]
            self.surfaceArea = []
            self.surfaceArea = self.surfaceArea + surfaceArea
        return self
        self.variation = 0.25
        if not self.variation:
            self.variation = kwargs.pop("variation", 0.25)
        if self.variation == None or self.variation  <  0:
            return None
    def setVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        try:
            super().setVariation(variation)
        except AttributeError:
           pass
        self.variation = variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
    def addVariation(self, variation = 0.25):
        if variation == None or variation  <  0:
            return None
        if not isinstance(variation, list):
            variation = [variation]
            self.variation = []
            self.variation = self.variation + variation
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class VolumePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super(VolumePickSensor, self).__init__(**kwargs)
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.intersectionType = "BOUNDS"
        if not self.intersectionType:
            self.intersectionType = kwargs.pop("intersectionType", "BOUNDS")
    def setIntersectionType(self, intersectionType = "BOUNDS"):
        try:
            super().setIntersectionType(intersectionType)
        except AttributeError:
           pass
        self.intersectionType = intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
    def addIntersectionType(self, intersectionType = "BOUNDS"):
        if not isinstance(intersectionType, list):
            intersectionType = [intersectionType]
            self.intersectionType = []
            self.intersectionType = self.intersectionType + intersectionType
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.Active = None
        if not self.Active:
            self.Active = kwargs.pop("Active", None)
    def setIsActive(self, Active = None):
        try:
            super().setIsActive(Active)
        except AttributeError:
           pass
        self.Active = Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
    def addIsActive(self, Active = None):
        if not isinstance(Active, list):
            Active = [Active]
            self.Active = []
            self.Active = self.Active + Active
        return self
        self.matchCriterion = "MATCH_ANY"
        if not self.matchCriterion:
            self.matchCriterion = kwargs.pop("matchCriterion", "MATCH_ANY")
        if 'MATCH_ANY' == self.matchCriterion:
            pass
        elif 'MATCH_EVERY' == self.matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == self.matchCriterion:
            pass
        else:
            return None
    def setMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        try:
            super().setMatchCriterion(matchCriterion)
        except AttributeError:
           pass
        self.matchCriterion = matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
    def addMatchCriterion(self, matchCriterion = "MATCH_ANY"):
        if 'MATCH_ANY' == matchCriterion:
            pass
        elif 'MATCH_EVERY' == matchCriterion:
            pass
        elif 'MATCH_ONLY_ONE' == matchCriterion:
            pass
        else:
            return None
        if not isinstance(matchCriterion, list):
            matchCriterion = [matchCriterion]
            self.matchCriterion = []
            self.matchCriterion = self.matchCriterion + matchCriterion
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.objectType = "ALL"
        if not self.objectType:
            self.objectType = kwargs.pop("objectType", "ALL")
    def setObjectType(self, objectType = "ALL"):
        try:
            super().setObjectType(objectType)
        except AttributeError:
           pass
        self.objectType = objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
    def addObjectType(self, objectType = "ALL"):
        if not isinstance(objectType, list):
            objectType = [objectType]
            self.objectType = []
            self.objectType = self.objectType + objectType
        return self
        self.pickedGeometry = []
        if not self.pickedGeometry:
            self.pickedGeometry = kwargs.pop("pickedGeometry", [])
    def setPickedGeometry(self, pickedGeometry = []):
        try:
            super().setPickedGeometry(pickedGeometry)
        except AttributeError:
           pass
        self.pickedGeometry = pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
    def addPickedGeometry(self, pickedGeometry = []):
        if not isinstance(pickedGeometry, list):
            pickedGeometry = [pickedGeometry]
            self.pickedGeometry = []
            self.pickedGeometry = self.pickedGeometry + pickedGeometry
        return self
        self.pickingGeometry = None
        if not self.pickingGeometry:
            self.pickingGeometry = kwargs.pop("pickingGeometry", None)
    def setPickingGeometry(self, pickingGeometry = None):
        try:
            super().setPickingGeometry(pickingGeometry)
        except AttributeError:
           pass
        self.pickingGeometry = pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
    def addPickingGeometry(self, pickingGeometry = None):
        if not isinstance(pickingGeometry, list):
            pickingGeometry = [pickingGeometry]
            self.pickingGeometry = []
            self.pickingGeometry = self.pickingGeometry + pickingGeometry
        return self
        self.pickTarget = []
        if not self.pickTarget:
            self.pickTarget = kwargs.pop("pickTarget", [])
    def setPickTarget(self, pickTarget = []):
        try:
            super().setPickTarget(pickTarget)
        except AttributeError:
           pass
        self.pickTarget = pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
    def addPickTarget(self, pickTarget = []):
        if not isinstance(pickTarget, list):
            pickTarget = [pickTarget]
            self.pickTarget = []
            self.pickTarget = self.pickTarget + pickTarget
        return self
        self.sortOrder = "CLOSEST"
        if not self.sortOrder:
            self.sortOrder = kwargs.pop("sortOrder", "CLOSEST")
    def setSortOrder(self, sortOrder = "CLOSEST"):
        try:
            super().setSortOrder(sortOrder)
        except AttributeError:
           pass
        self.sortOrder = sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
    def addSortOrder(self, sortOrder = "CLOSEST"):
        if not isinstance(sortOrder, list):
            sortOrder = [sortOrder]
            self.sortOrder = []
            self.sortOrder = self.sortOrder + sortOrder
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class WindPhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super(WindPhysicsModel, self).__init__(**kwargs)
        self.direction = [1, 0, 0]
        if not self.direction:
            self.direction = kwargs.pop("direction", [1, 0, 0])
    def setDirection(self, direction = [1, 0, 0]):
        try:
            super().setDirection(direction)
        except AttributeError:
           pass
        self.direction = direction
        return self
    def addDirection(self, direction = [1, 0, 0]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
    def addDirection(self, direction = [1, 0, 0]):
        if not isinstance(direction, list):
            direction = [direction]
            self.direction = []
            self.direction = self.direction + direction
        return self
        self.enabled = True
        if not self.enabled:
            self.enabled = kwargs.pop("enabled", True)
    def setEnabled(self, enabled = True):
        try:
            super().setEnabled(enabled)
        except AttributeError:
           pass
        self.enabled = enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
    def addEnabled(self, enabled = True):
        if not isinstance(enabled, list):
            enabled = [enabled]
            self.enabled = []
            self.enabled = self.enabled + enabled
        return self
        self.gustiness = 0.1
        if not self.gustiness:
            self.gustiness = kwargs.pop("gustiness", 0.1)
        if self.gustiness == None or self.gustiness  <  0:
            return None
    def setGustiness(self, gustiness = 0.1):
        if gustiness == None or gustiness  <  0:
            return None
        try:
            super().setGustiness(gustiness)
        except AttributeError:
           pass
        self.gustiness = gustiness
        return self
    def addGustiness(self, gustiness = 0.1):
        if gustiness == None or gustiness  <  0:
            return None
        if not isinstance(gustiness, list):
            gustiness = [gustiness]
            self.gustiness = []
            self.gustiness = self.gustiness + gustiness
        return self
    def addGustiness(self, gustiness = 0.1):
        if gustiness == None or gustiness  <  0:
            return None
        if not isinstance(gustiness, list):
            gustiness = [gustiness]
            self.gustiness = []
            self.gustiness = self.gustiness + gustiness
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.speed = 0.1
        if not self.speed:
            self.speed = kwargs.pop("speed", 0.1)
        if self.speed == None or self.speed  <  0:
            return None
    def setSpeed(self, speed = 0.1):
        if speed == None or speed  <  0:
            return None
        try:
            super().setSpeed(speed)
        except AttributeError:
           pass
        self.speed = speed
        return self
    def addSpeed(self, speed = 0.1):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
    def addSpeed(self, speed = 0.1):
        if speed == None or speed  <  0:
            return None
        if not isinstance(speed, list):
            speed = [speed]
            self.speed = []
            self.speed = self.speed + speed
        return self
        self.turbulence = 0
        if not self.turbulence:
            self.turbulence = kwargs.pop("turbulence", 0)
        if self.turbulence == None or self.turbulence  <  0:
            return None
        if self.turbulence == None or self.turbulence  >  1:
            return None
    def setTurbulence(self, turbulence = 0):
        if turbulence == None or turbulence  <  0:
            return None
        if turbulence == None or turbulence  >  1:
            return None
        try:
            super().setTurbulence(turbulence)
        except AttributeError:
           pass
        self.turbulence = turbulence
        return self
    def addTurbulence(self, turbulence = 0):
        if turbulence == None or turbulence  <  0:
            return None
        if turbulence == None or turbulence  >  1:
            return None
        if not isinstance(turbulence, list):
            turbulence = [turbulence]
            self.turbulence = []
            self.turbulence = self.turbulence + turbulence
        return self
    def addTurbulence(self, turbulence = 0):
        if turbulence == None or turbulence  <  0:
            return None
        if turbulence == None or turbulence  >  1:
            return None
        if not isinstance(turbulence, list):
            turbulence = [turbulence]
            self.turbulence = []
            self.turbulence = self.turbulence + turbulence
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class WorldInfo(X3DInfoNode):
    def __init__(self, **kwargs):
        super(WorldInfo, self).__init__(**kwargs)
        self.info = []
        if not self.info:
            self.info = kwargs.pop("info", [])
    def setInfo(self, info = []):
        try:
            super().setInfo(info)
        except AttributeError:
           pass
        self.info = info
        return self
    def addInfo(self, info = []):
        if not isinstance(info, list):
            info = [info]
            self.info = []
            self.info = self.info + info
        return self
    def addInfo(self, info = []):
        if not isinstance(info, list):
            info = [info]
            self.info = []
            self.info = self.info + info
        return self
        self.IS = None
        if not self.IS:
            self.IS = kwargs.pop("IS", None)
    def setIS(self, IS = None):
        try:
            super().setIS(IS)
        except AttributeError:
           pass
        self.IS = IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
    def addIS(self, IS = None):
        if not isinstance(IS, list):
            IS = [IS]
            self.IS = []
            self.IS = self.IS + IS
        return self
        self.metadata = None
        if not self.metadata:
            self.metadata = kwargs.pop("metadata", None)
    def setMetadata(self, metadata = None):
        try:
            super().setMetadata(metadata)
        except AttributeError:
           pass
        self.metadata = metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
    def addMetadata(self, metadata = None):
        if not isinstance(metadata, list):
            metadata = [metadata]
            self.metadata = []
            self.metadata = self.metadata + metadata
        return self
        self.title = None
        if not self.title:
            self.title = kwargs.pop("title", None)
    def setTitle(self, title = None):
        try:
            super().setTitle(title)
        except AttributeError:
           pass
        self.title = title
        return self
    def addTitle(self, title = None):
        if not isinstance(title, list):
            title = [title]
            self.title = []
            self.title = self.title + title
        return self
    def addTitle(self, title = None):
        if not isinstance(title, list):
            title = [title]
            self.title = []
            self.title = self.title + title
        return self
        self.DEF = None
        if not self.DEF:
            self.DEF = kwargs.pop("DEF", None)
    def setDEF(self, DEF = None):
        try:
            super().setDEF(DEF)
        except AttributeError:
           pass
        self.DEF = DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
    def addDEF(self, DEF = None):
        if not isinstance(DEF, list):
            DEF = [DEF]
            self.DEF = []
            self.DEF = self.DEF + DEF
        return self
        self.USE = None
        if not self.USE:
            self.USE = kwargs.pop("USE", None)
    def setUSE(self, USE = None):
        try:
            super().setUSE(USE)
        except AttributeError:
           pass
        self.USE = USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
    def addUSE(self, USE = None):
        if not isinstance(USE, list):
            USE = [USE]
            self.USE = []
            self.USE = self.USE + USE
        return self
        self.class_ = None
        if not self.class_:
            self.class_ = kwargs.pop("class_", None)
    def setClass(self, class_ = None):
        try:
            super().setClass(class_)
        except AttributeError:
           pass
        self.class_ = class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def addClass(self, class_ = None):
        if not isinstance(class_, list):
            class_ = [class_]
            self.class_ = []
            self.class_ = self.class_ + class_
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class component(object):
    def __init__(self, **kwargs):
        super(component, self).__init__()
        self.level = 1
        if not self.level:
            self.level = kwargs.pop("level", 1)
        if self.level == None or self.level  <  1:
            return None
        if self.level == None or self.level  >  5:
            return None
    def setLevel(self, level = 1):
        if level == None or level  <  1:
            return None
        if level == None or level  >  5:
            return None
        try:
            super().setLevel(level)
        except AttributeError:
           pass
        self.level = level
        return self
    def addLevel(self, level = 1):
        if level == None or level  <  1:
            return None
        if level == None or level  >  5:
            return None
        if not isinstance(level, list):
            level = [level]
            self.level = []
            self.level = self.level + level
        return self
    def addLevel(self, level = 1):
        if level == None or level  <  1:
            return None
        if level == None or level  >  5:
            return None
        if not isinstance(level, list):
            level = [level]
            self.level = []
            self.level = self.level + level
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
        if 'Core' == self.name:
            pass
        elif 'CADGeometry' == self.name:
            pass
        elif 'CubeMapTexturing' == self.name:
            pass
        elif 'DIS' == self.name:
            pass
        elif 'EnvironmentalEffects' == self.name:
            pass
        elif 'EnvironmentalSensor' == self.name:
            pass
        elif 'EventUtilities' == self.name:
            pass
        elif 'Followers' == self.name:
            pass
        elif 'Geometry2D' == self.name:
            pass
        elif 'Geometry3D' == self.name:
            pass
        elif 'Geospatial' == self.name:
            pass
        elif 'Grouping' == self.name:
            pass
        elif 'HAnim' == self.name:
            pass
        elif 'H-Anim' == self.name:
            pass
        elif 'Interpolation' == self.name:
            pass
        elif 'KeyDeviceSensor' == self.name:
            pass
        elif 'Layering' == self.name:
            pass
        elif 'Layout' == self.name:
            pass
        elif 'Lighting' == self.name:
            pass
        elif 'Navigation' == self.name:
            pass
        elif 'Networking' == self.name:
            pass
        elif 'NURBS' == self.name:
            pass
        elif 'ParticleSystems' == self.name:
            pass
        elif 'Picking' == self.name:
            pass
        elif 'PointingDeviceSensor' == self.name:
            pass
        elif 'Rendering' == self.name:
            pass
        elif 'RigidBodyPhysics' == self.name:
            pass
        elif 'Scripting' == self.name:
            pass
        elif 'Shaders' == self.name:
            pass
        elif 'Shape' == self.name:
            pass
        elif 'Sound' == self.name:
            pass
        elif 'Text' == self.name:
            pass
        elif 'Texturing' == self.name:
            pass
        elif 'Texturing3D' == self.name:
            pass
        elif 'Time' == self.name:
            pass
        elif 'VolumeRendering' == self.name:
            pass
        else:
            return None
    def setName(self, name = None):
        if 'Core' == name:
            pass
        elif 'CADGeometry' == name:
            pass
        elif 'CubeMapTexturing' == name:
            pass
        elif 'DIS' == name:
            pass
        elif 'EnvironmentalEffects' == name:
            pass
        elif 'EnvironmentalSensor' == name:
            pass
        elif 'EventUtilities' == name:
            pass
        elif 'Followers' == name:
            pass
        elif 'Geometry2D' == name:
            pass
        elif 'Geometry3D' == name:
            pass
        elif 'Geospatial' == name:
            pass
        elif 'Grouping' == name:
            pass
        elif 'HAnim' == name:
            pass
        elif 'H-Anim' == name:
            pass
        elif 'Interpolation' == name:
            pass
        elif 'KeyDeviceSensor' == name:
            pass
        elif 'Layering' == name:
            pass
        elif 'Layout' == name:
            pass
        elif 'Lighting' == name:
            pass
        elif 'Navigation' == name:
            pass
        elif 'Networking' == name:
            pass
        elif 'NURBS' == name:
            pass
        elif 'ParticleSystems' == name:
            pass
        elif 'Picking' == name:
            pass
        elif 'PointingDeviceSensor' == name:
            pass
        elif 'Rendering' == name:
            pass
        elif 'RigidBodyPhysics' == name:
            pass
        elif 'Scripting' == name:
            pass
        elif 'Shaders' == name:
            pass
        elif 'Shape' == name:
            pass
        elif 'Sound' == name:
            pass
        elif 'Text' == name:
            pass
        elif 'Texturing' == name:
            pass
        elif 'Texturing3D' == name:
            pass
        elif 'Time' == name:
            pass
        elif 'VolumeRendering' == name:
            pass
        else:
            return None
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if 'Core' == name:
            pass
        elif 'CADGeometry' == name:
            pass
        elif 'CubeMapTexturing' == name:
            pass
        elif 'DIS' == name:
            pass
        elif 'EnvironmentalEffects' == name:
            pass
        elif 'EnvironmentalSensor' == name:
            pass
        elif 'EventUtilities' == name:
            pass
        elif 'Followers' == name:
            pass
        elif 'Geometry2D' == name:
            pass
        elif 'Geometry3D' == name:
            pass
        elif 'Geospatial' == name:
            pass
        elif 'Grouping' == name:
            pass
        elif 'HAnim' == name:
            pass
        elif 'H-Anim' == name:
            pass
        elif 'Interpolation' == name:
            pass
        elif 'KeyDeviceSensor' == name:
            pass
        elif 'Layering' == name:
            pass
        elif 'Layout' == name:
            pass
        elif 'Lighting' == name:
            pass
        elif 'Navigation' == name:
            pass
        elif 'Networking' == name:
            pass
        elif 'NURBS' == name:
            pass
        elif 'ParticleSystems' == name:
            pass
        elif 'Picking' == name:
            pass
        elif 'PointingDeviceSensor' == name:
            pass
        elif 'Rendering' == name:
            pass
        elif 'RigidBodyPhysics' == name:
            pass
        elif 'Scripting' == name:
            pass
        elif 'Shaders' == name:
            pass
        elif 'Shape' == name:
            pass
        elif 'Sound' == name:
            pass
        elif 'Text' == name:
            pass
        elif 'Texturing' == name:
            pass
        elif 'Texturing3D' == name:
            pass
        elif 'Time' == name:
            pass
        elif 'VolumeRendering' == name:
            pass
        else:
            return None
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if 'Core' == name:
            pass
        elif 'CADGeometry' == name:
            pass
        elif 'CubeMapTexturing' == name:
            pass
        elif 'DIS' == name:
            pass
        elif 'EnvironmentalEffects' == name:
            pass
        elif 'EnvironmentalSensor' == name:
            pass
        elif 'EventUtilities' == name:
            pass
        elif 'Followers' == name:
            pass
        elif 'Geometry2D' == name:
            pass
        elif 'Geometry3D' == name:
            pass
        elif 'Geospatial' == name:
            pass
        elif 'Grouping' == name:
            pass
        elif 'HAnim' == name:
            pass
        elif 'H-Anim' == name:
            pass
        elif 'Interpolation' == name:
            pass
        elif 'KeyDeviceSensor' == name:
            pass
        elif 'Layering' == name:
            pass
        elif 'Layout' == name:
            pass
        elif 'Lighting' == name:
            pass
        elif 'Navigation' == name:
            pass
        elif 'Networking' == name:
            pass
        elif 'NURBS' == name:
            pass
        elif 'ParticleSystems' == name:
            pass
        elif 'Picking' == name:
            pass
        elif 'PointingDeviceSensor' == name:
            pass
        elif 'Rendering' == name:
            pass
        elif 'RigidBodyPhysics' == name:
            pass
        elif 'Scripting' == name:
            pass
        elif 'Shaders' == name:
            pass
        elif 'Shape' == name:
            pass
        elif 'Sound' == name:
            pass
        elif 'Text' == name:
            pass
        elif 'Texturing' == name:
            pass
        elif 'Texturing3D' == name:
            pass
        elif 'Time' == name:
            pass
        elif 'VolumeRendering' == name:
            pass
        else:
            return None
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class connect(object):
    def __init__(self, **kwargs):
        super(connect, self).__init__()
        self.nodeField = None
        if not self.nodeField:
            self.nodeField = kwargs.pop("nodeField", None)
    def setNodeField(self, nodeField = None):
        try:
            super().setNodeField(nodeField)
        except AttributeError:
           pass
        self.nodeField = nodeField
        return self
    def addNodeField(self, nodeField = None):
        if not isinstance(nodeField, list):
            nodeField = [nodeField]
            self.nodeField = []
            self.nodeField = self.nodeField + nodeField
        return self
    def addNodeField(self, nodeField = None):
        if not isinstance(nodeField, list):
            nodeField = [nodeField]
            self.nodeField = []
            self.nodeField = self.nodeField + nodeField
        return self
        self.protoField = None
        if not self.protoField:
            self.protoField = kwargs.pop("protoField", None)
    def setProtoField(self, protoField = None):
        try:
            super().setProtoField(protoField)
        except AttributeError:
           pass
        self.protoField = protoField
        return self
    def addProtoField(self, protoField = None):
        if not isinstance(protoField, list):
            protoField = [protoField]
            self.protoField = []
            self.protoField = self.protoField + protoField
        return self
    def addProtoField(self, protoField = None):
        if not isinstance(protoField, list):
            protoField = [protoField]
            self.protoField = []
            self.protoField = self.protoField + protoField
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class EXPORT(object):
    def __init__(self, **kwargs):
        super(EXPORT, self).__init__()
        self.AS = None
        if not self.AS:
            self.AS = kwargs.pop("AS", None)
    def setAS(self, AS = None):
        try:
            super().setAS(AS)
        except AttributeError:
           pass
        self.AS = AS
        return self
    def addAS(self, AS = None):
        if not isinstance(AS, list):
            AS = [AS]
            self.AS = []
            self.AS = self.AS + AS
        return self
    def addAS(self, AS = None):
        if not isinstance(AS, list):
            AS = [AS]
            self.AS = []
            self.AS = self.AS + AS
        return self
        self.localDEF = None
        if not self.localDEF:
            self.localDEF = kwargs.pop("localDEF", None)
    def setLocalDEF(self, localDEF = None):
        try:
            super().setLocalDEF(localDEF)
        except AttributeError:
           pass
        self.localDEF = localDEF
        return self
    def addLocalDEF(self, localDEF = None):
        if not isinstance(localDEF, list):
            localDEF = [localDEF]
            self.localDEF = []
            self.localDEF = self.localDEF + localDEF
        return self
    def addLocalDEF(self, localDEF = None):
        if not isinstance(localDEF, list):
            localDEF = [localDEF]
            self.localDEF = []
            self.localDEF = self.localDEF + localDEF
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ExternProtoDeclare(object):
    def __init__(self, **kwargs):
        super(ExternProtoDeclare, self).__init__()
        self.appinfo = None
        if not self.appinfo:
            self.appinfo = kwargs.pop("appinfo", None)
    def setAppinfo(self, appinfo = None):
        try:
            super().setAppinfo(appinfo)
        except AttributeError:
           pass
        self.appinfo = appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
        self.documentation = None
        if not self.documentation:
            self.documentation = kwargs.pop("documentation", None)
    def setDocumentation(self, documentation = None):
        try:
            super().setDocumentation(documentation)
        except AttributeError:
           pass
        self.documentation = documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.url = []
        if not self.url:
            self.url = kwargs.pop("url", [])
    def setUrl(self, url = []):
        try:
            super().setUrl(url)
        except AttributeError:
           pass
        self.url = url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def addUrl(self, url = []):
        if not isinstance(url, list):
            url = [url]
            self.url = []
            self.url = self.url + url
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class field(object):
    def __init__(self, **kwargs):
        super(field, self).__init__()
        self.accessType = None
        if not self.accessType:
            self.accessType = kwargs.pop("accessType", None)
        if 'initializeOnly' == self.accessType:
            pass
        elif 'inputOnly' == self.accessType:
            pass
        elif 'outputOnly' == self.accessType:
            pass
        elif 'inputOutput' == self.accessType:
            pass
        else:
            return None
    def setAccessType(self, accessType = None):
        if 'initializeOnly' == accessType:
            pass
        elif 'inputOnly' == accessType:
            pass
        elif 'outputOnly' == accessType:
            pass
        elif 'inputOutput' == accessType:
            pass
        else:
            return None
        try:
            super().setAccessType(accessType)
        except AttributeError:
           pass
        self.accessType = accessType
        return self
    def addAccessType(self, accessType = None):
        if 'initializeOnly' == accessType:
            pass
        elif 'inputOnly' == accessType:
            pass
        elif 'outputOnly' == accessType:
            pass
        elif 'inputOutput' == accessType:
            pass
        else:
            return None
        if not isinstance(accessType, list):
            accessType = [accessType]
            self.accessType = []
            self.accessType = self.accessType + accessType
        return self
    def addAccessType(self, accessType = None):
        if 'initializeOnly' == accessType:
            pass
        elif 'inputOnly' == accessType:
            pass
        elif 'outputOnly' == accessType:
            pass
        elif 'inputOutput' == accessType:
            pass
        else:
            return None
        if not isinstance(accessType, list):
            accessType = [accessType]
            self.accessType = []
            self.accessType = self.accessType + accessType
        return self
        self.appinfo = None
        if not self.appinfo:
            self.appinfo = kwargs.pop("appinfo", None)
    def setAppinfo(self, appinfo = None):
        try:
            super().setAppinfo(appinfo)
        except AttributeError:
           pass
        self.appinfo = appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.documentation = None
        if not self.documentation:
            self.documentation = kwargs.pop("documentation", None)
    def setDocumentation(self, documentation = None):
        try:
            super().setDocumentation(documentation)
        except AttributeError:
           pass
        self.documentation = documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.type = None
        if not self.type:
            self.type = kwargs.pop("type", None)
        if 'SFBool' == self.type:
            pass
        elif 'MFBool' == self.type:
            pass
        elif 'SFColor' == self.type:
            pass
        elif 'MFColor' == self.type:
            pass
        elif 'SFColorRGBA' == self.type:
            pass
        elif 'MFColorRGBA' == self.type:
            pass
        elif 'SFDouble' == self.type:
            pass
        elif 'MFDouble' == self.type:
            pass
        elif 'SFFloat' == self.type:
            pass
        elif 'MFFloat' == self.type:
            pass
        elif 'SFImage' == self.type:
            pass
        elif 'MFImage' == self.type:
            pass
        elif 'SFInt32' == self.type:
            pass
        elif 'SFNode' == self.type:
            pass
        elif 'MFNode' == self.type:
            pass
        elif 'MFInt32' == self.type:
            pass
        elif 'SFRotation' == self.type:
            pass
        elif 'MFRotation' == self.type:
            pass
        elif 'SFString' == self.type:
            pass
        elif 'MFString' == self.type:
            pass
        elif 'SFTime' == self.type:
            pass
        elif 'MFTime' == self.type:
            pass
        elif 'SFVec2d' == self.type:
            pass
        elif 'MFVec2d' == self.type:
            pass
        elif 'SFVec2f' == self.type:
            pass
        elif 'MFVec2f' == self.type:
            pass
        elif 'SFVec3d' == self.type:
            pass
        elif 'MFVec3d' == self.type:
            pass
        elif 'SFVec3f' == self.type:
            pass
        elif 'MFVec3f' == self.type:
            pass
        elif 'SFVec4d' == self.type:
            pass
        elif 'MFVec4d' == self.type:
            pass
        elif 'SFVec4f' == self.type:
            pass
        elif 'MFVec4f' == self.type:
            pass
        elif 'SFMatrix3d' == self.type:
            pass
        elif 'MFMatrix3d' == self.type:
            pass
        elif 'SFMatrix3f' == self.type:
            pass
        elif 'MFMatrix3f' == self.type:
            pass
        elif 'SFMatrix4d' == self.type:
            pass
        elif 'MFMatrix4d' == self.type:
            pass
        elif 'SFMatrix4f' == self.type:
            pass
        elif 'MFMatrix4f' == self.type:
            pass
        else:
            return None
    def setType(self, type = None):
        if 'SFBool' == type:
            pass
        elif 'MFBool' == type:
            pass
        elif 'SFColor' == type:
            pass
        elif 'MFColor' == type:
            pass
        elif 'SFColorRGBA' == type:
            pass
        elif 'MFColorRGBA' == type:
            pass
        elif 'SFDouble' == type:
            pass
        elif 'MFDouble' == type:
            pass
        elif 'SFFloat' == type:
            pass
        elif 'MFFloat' == type:
            pass
        elif 'SFImage' == type:
            pass
        elif 'MFImage' == type:
            pass
        elif 'SFInt32' == type:
            pass
        elif 'SFNode' == type:
            pass
        elif 'MFNode' == type:
            pass
        elif 'MFInt32' == type:
            pass
        elif 'SFRotation' == type:
            pass
        elif 'MFRotation' == type:
            pass
        elif 'SFString' == type:
            pass
        elif 'MFString' == type:
            pass
        elif 'SFTime' == type:
            pass
        elif 'MFTime' == type:
            pass
        elif 'SFVec2d' == type:
            pass
        elif 'MFVec2d' == type:
            pass
        elif 'SFVec2f' == type:
            pass
        elif 'MFVec2f' == type:
            pass
        elif 'SFVec3d' == type:
            pass
        elif 'MFVec3d' == type:
            pass
        elif 'SFVec3f' == type:
            pass
        elif 'MFVec3f' == type:
            pass
        elif 'SFVec4d' == type:
            pass
        elif 'MFVec4d' == type:
            pass
        elif 'SFVec4f' == type:
            pass
        elif 'MFVec4f' == type:
            pass
        elif 'SFMatrix3d' == type:
            pass
        elif 'MFMatrix3d' == type:
            pass
        elif 'SFMatrix3f' == type:
            pass
        elif 'MFMatrix3f' == type:
            pass
        elif 'SFMatrix4d' == type:
            pass
        elif 'MFMatrix4d' == type:
            pass
        elif 'SFMatrix4f' == type:
            pass
        elif 'MFMatrix4f' == type:
            pass
        else:
            return None
        try:
            super().setType(type)
        except AttributeError:
           pass
        self.type = type
        return self
    def addType(self, type = None):
        if 'SFBool' == type:
            pass
        elif 'MFBool' == type:
            pass
        elif 'SFColor' == type:
            pass
        elif 'MFColor' == type:
            pass
        elif 'SFColorRGBA' == type:
            pass
        elif 'MFColorRGBA' == type:
            pass
        elif 'SFDouble' == type:
            pass
        elif 'MFDouble' == type:
            pass
        elif 'SFFloat' == type:
            pass
        elif 'MFFloat' == type:
            pass
        elif 'SFImage' == type:
            pass
        elif 'MFImage' == type:
            pass
        elif 'SFInt32' == type:
            pass
        elif 'SFNode' == type:
            pass
        elif 'MFNode' == type:
            pass
        elif 'MFInt32' == type:
            pass
        elif 'SFRotation' == type:
            pass
        elif 'MFRotation' == type:
            pass
        elif 'SFString' == type:
            pass
        elif 'MFString' == type:
            pass
        elif 'SFTime' == type:
            pass
        elif 'MFTime' == type:
            pass
        elif 'SFVec2d' == type:
            pass
        elif 'MFVec2d' == type:
            pass
        elif 'SFVec2f' == type:
            pass
        elif 'MFVec2f' == type:
            pass
        elif 'SFVec3d' == type:
            pass
        elif 'MFVec3d' == type:
            pass
        elif 'SFVec3f' == type:
            pass
        elif 'MFVec3f' == type:
            pass
        elif 'SFVec4d' == type:
            pass
        elif 'MFVec4d' == type:
            pass
        elif 'SFVec4f' == type:
            pass
        elif 'MFVec4f' == type:
            pass
        elif 'SFMatrix3d' == type:
            pass
        elif 'MFMatrix3d' == type:
            pass
        elif 'SFMatrix3f' == type:
            pass
        elif 'MFMatrix3f' == type:
            pass
        elif 'SFMatrix4d' == type:
            pass
        elif 'MFMatrix4d' == type:
            pass
        elif 'SFMatrix4f' == type:
            pass
        elif 'MFMatrix4f' == type:
            pass
        else:
            return None
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
    def addType(self, type = None):
        if 'SFBool' == type:
            pass
        elif 'MFBool' == type:
            pass
        elif 'SFColor' == type:
            pass
        elif 'MFColor' == type:
            pass
        elif 'SFColorRGBA' == type:
            pass
        elif 'MFColorRGBA' == type:
            pass
        elif 'SFDouble' == type:
            pass
        elif 'MFDouble' == type:
            pass
        elif 'SFFloat' == type:
            pass
        elif 'MFFloat' == type:
            pass
        elif 'SFImage' == type:
            pass
        elif 'MFImage' == type:
            pass
        elif 'SFInt32' == type:
            pass
        elif 'SFNode' == type:
            pass
        elif 'MFNode' == type:
            pass
        elif 'MFInt32' == type:
            pass
        elif 'SFRotation' == type:
            pass
        elif 'MFRotation' == type:
            pass
        elif 'SFString' == type:
            pass
        elif 'MFString' == type:
            pass
        elif 'SFTime' == type:
            pass
        elif 'MFTime' == type:
            pass
        elif 'SFVec2d' == type:
            pass
        elif 'MFVec2d' == type:
            pass
        elif 'SFVec2f' == type:
            pass
        elif 'MFVec2f' == type:
            pass
        elif 'SFVec3d' == type:
            pass
        elif 'MFVec3d' == type:
            pass
        elif 'SFVec3f' == type:
            pass
        elif 'MFVec3f' == type:
            pass
        elif 'SFVec4d' == type:
            pass
        elif 'MFVec4d' == type:
            pass
        elif 'SFVec4f' == type:
            pass
        elif 'MFVec4f' == type:
            pass
        elif 'SFMatrix3d' == type:
            pass
        elif 'MFMatrix3d' == type:
            pass
        elif 'SFMatrix3f' == type:
            pass
        elif 'MFMatrix3f' == type:
            pass
        elif 'SFMatrix4d' == type:
            pass
        elif 'MFMatrix4d' == type:
            pass
        elif 'SFMatrix4f' == type:
            pass
        elif 'MFMatrix4f' == type:
            pass
        else:
            return None
        if not isinstance(type, list):
            type = [type]
            self.type = []
            self.type = self.type + type
        return self
        self.value = None
        if not self.value:
            self.value = kwargs.pop("value", None)
    def setValue(self, value = None):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = None):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = None):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class fieldValue(object):
    def __init__(self, **kwargs):
        super(fieldValue, self).__init__()
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.value = None
        if not self.value:
            self.value = kwargs.pop("value", None)
    def setValue(self, value = None):
        try:
            super().setValue(value)
        except AttributeError:
           pass
        self.value = value
        return self
    def addValue(self, value = None):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def addValue(self, value = None):
        if not isinstance(value, list):
            value = [value]
            self.value = []
            self.value = self.value + value
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class head(object):
    def __init__(self, **kwargs):
        pass
        self.component = []
        if not self.component:
            self.component = kwargs.pop("component", [])
    def setComponent(self, component = []):
        try:
            super().setComponent(component)
        except AttributeError:
           pass
        self.component = component
        return self
    def addComponent(self, component = []):
        if not isinstance(component, list):
            component = [component]
            self.component = []
            self.component = self.component + component
        return self
    def addComponent(self, component = []):
        if not isinstance(component, list):
            component = [component]
            self.component = []
            self.component = self.component + component
        return self
        self.meta = []
        if not self.meta:
            self.meta = kwargs.pop("meta", [])
    def setMeta(self, meta = []):
        try:
            super().setMeta(meta)
        except AttributeError:
           pass
        self.meta = meta
        return self
    def addMeta(self, meta = []):
        if not isinstance(meta, list):
            meta = [meta]
            self.meta = []
            self.meta = self.meta + meta
        return self
    def addMeta(self, meta = []):
        if not isinstance(meta, list):
            meta = [meta]
            self.meta = []
            self.meta = self.meta + meta
        return self
        self.unit = []
        if not self.unit:
            self.unit = kwargs.pop("unit", [])
    def setUnit(self, unit = []):
        try:
            super().setUnit(unit)
        except AttributeError:
           pass
        self.unit = unit
        return self
    def addUnit(self, unit = []):
        if not isinstance(unit, list):
            unit = [unit]
            self.unit = []
            self.unit = self.unit + unit
        return self
    def addUnit(self, unit = []):
        if not isinstance(unit, list):
            unit = [unit]
            self.unit = []
            self.unit = self.unit + unit
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setMeta(self, meta = []):
        try:
            super().setMeta(meta)
        except AttributeError:
           pass
        self.meta = meta
        return self
    def addMeta(self, meta = []):
        if not isinstance(meta, list):
            meta = [meta]
            self.meta = []
            self.meta = self.meta + meta
        return self
    def addMeta(self, meta = []):
        if not isinstance(meta, list):
            meta = [meta]
            self.meta = []
            self.meta = self.meta + meta
        return self
    def removeMeta(self, meta):
        self.meta = [x for x in self.meta if x not in meta]
        return self.meta
    def removeMeta(self, meta):
        self.meta = [x for x in self.meta if x not in meta]
        return self.meta
    def getMeta(self, meta = []):
        return self.meta
    def meta_changed(self, meta = []):
        return self.meta
    def getMeta(self, meta = []):
        return self.meta


class IMPORT(object):
    def __init__(self, **kwargs):
        super(IMPORT, self).__init__()
        self.AS = None
        if not self.AS:
            self.AS = kwargs.pop("AS", None)
    def setAS(self, AS = None):
        try:
            super().setAS(AS)
        except AttributeError:
           pass
        self.AS = AS
        return self
    def addAS(self, AS = None):
        if not isinstance(AS, list):
            AS = [AS]
            self.AS = []
            self.AS = self.AS + AS
        return self
    def addAS(self, AS = None):
        if not isinstance(AS, list):
            AS = [AS]
            self.AS = []
            self.AS = self.AS + AS
        return self
        self.importedDEF = None
        if not self.importedDEF:
            self.importedDEF = kwargs.pop("importedDEF", None)
    def setImportedDEF(self, importedDEF = None):
        try:
            super().setImportedDEF(importedDEF)
        except AttributeError:
           pass
        self.importedDEF = importedDEF
        return self
    def addImportedDEF(self, importedDEF = None):
        if not isinstance(importedDEF, list):
            importedDEF = [importedDEF]
            self.importedDEF = []
            self.importedDEF = self.importedDEF + importedDEF
        return self
    def addImportedDEF(self, importedDEF = None):
        if not isinstance(importedDEF, list):
            importedDEF = [importedDEF]
            self.importedDEF = []
            self.importedDEF = self.importedDEF + importedDEF
        return self
        self.inlineDEF = None
        if not self.inlineDEF:
            self.inlineDEF = kwargs.pop("inlineDEF", None)
    def setInlineDEF(self, inlineDEF = None):
        try:
            super().setInlineDEF(inlineDEF)
        except AttributeError:
           pass
        self.inlineDEF = inlineDEF
        return self
    def addInlineDEF(self, inlineDEF = None):
        if not isinstance(inlineDEF, list):
            inlineDEF = [inlineDEF]
            self.inlineDEF = []
            self.inlineDEF = self.inlineDEF + inlineDEF
        return self
    def addInlineDEF(self, inlineDEF = None):
        if not isinstance(inlineDEF, list):
            inlineDEF = [inlineDEF]
            self.inlineDEF = []
            self.inlineDEF = self.inlineDEF + inlineDEF
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class IS(object):
    def __init__(self, **kwargs):
        super(IS, self).__init__()
        self.connect = []
        if not self.connect:
            self.connect = kwargs.pop("connect", [])
    def setConnect(self, connect = []):
        try:
            super().setConnect(connect)
        except AttributeError:
           pass
        self.connect = connect
        return self
    def addConnect(self, connect = []):
        if not isinstance(connect, list):
            connect = [connect]
            self.connect = []
            self.connect = self.connect + connect
        return self
    def addConnect(self, connect = []):
        if not isinstance(connect, list):
            connect = [connect]
            self.connect = []
            self.connect = self.connect + connect
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class meta(object):
    def __init__(self, **kwargs):
        pass
        self.content = None
        if not self.content:
            self.content = kwargs.pop("content", None)
    def setContent(self, content = None):
        try:
            super().setContent(content)
        except AttributeError:
           pass
        self.content = content
        return self
    def addContent(self, content = None):
        if not isinstance(content, list):
            content = [content]
            self.content = []
            self.content = self.content + content
        return self
    def addContent(self, content = None):
        if not isinstance(content, list):
            content = [content]
            self.content = []
            self.content = self.content + content
        return self
        self.dir = None
        if not self.dir:
            self.dir = kwargs.pop("dir", None)
        if 'rtl' == self.dir:
            pass
        elif 'ltr' == self.dir:
            pass
        else:
            return None
    def setDir(self, dir = None):
        if 'rtl' == dir:
            pass
        elif 'ltr' == dir:
            pass
        else:
            return None
        try:
            super().setDir(dir)
        except AttributeError:
           pass
        self.dir = dir
        return self
    def addDir(self, dir = None):
        if 'rtl' == dir:
            pass
        elif 'ltr' == dir:
            pass
        else:
            return None
        if not isinstance(dir, list):
            dir = [dir]
            self.dir = []
            self.dir = self.dir + dir
        return self
    def addDir(self, dir = None):
        if 'rtl' == dir:
            pass
        elif 'ltr' == dir:
            pass
        else:
            return None
        if not isinstance(dir, list):
            dir = [dir]
            self.dir = []
            self.dir = self.dir + dir
        return self
        self.http_equiv = None
        if not self.http_equiv:
            self.http_equiv = kwargs.pop("http_equiv", None)
    def setHttp_equiv(self, http_equiv = None):
        try:
            super().setHttp_equiv(http_equiv)
        except AttributeError:
           pass
        self.http_equiv = http_equiv
        return self
    def addHttp_equiv(self, http_equiv = None):
        if not isinstance(http_equiv, list):
            http_equiv = [http_equiv]
            self.http_equiv = []
            self.http_equiv = self.http_equiv + http_equiv
        return self
    def addHttp_equiv(self, http_equiv = None):
        if not isinstance(http_equiv, list):
            http_equiv = [http_equiv]
            self.http_equiv = []
            self.http_equiv = self.http_equiv + http_equiv
        return self
        self.lang = None
        if not self.lang:
            self.lang = kwargs.pop("lang", None)
    def setLang(self, lang = None):
        try:
            super().setLang(lang)
        except AttributeError:
           pass
        self.lang = lang
        return self
    def addLang(self, lang = None):
        if not isinstance(lang, list):
            lang = [lang]
            self.lang = []
            self.lang = self.lang + lang
        return self
    def addLang(self, lang = None):
        if not isinstance(lang, list):
            lang = [lang]
            self.lang = []
            self.lang = self.lang + lang
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.scheme = None
        if not self.scheme:
            self.scheme = kwargs.pop("scheme", None)
    def setScheme(self, scheme = None):
        try:
            super().setScheme(scheme)
        except AttributeError:
           pass
        self.scheme = scheme
        return self
    def addScheme(self, scheme = None):
        if not isinstance(scheme, list):
            scheme = [scheme]
            self.scheme = []
            self.scheme = self.scheme + scheme
        return self
    def addScheme(self, scheme = None):
        if not isinstance(scheme, list):
            scheme = [scheme]
            self.scheme = []
            self.scheme = self.scheme + scheme
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProtoBody(object):
    def __init__(self, **kwargs):
        super(ProtoBody, self).__init__()
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProtoDeclare(object):
    def __init__(self, **kwargs):
        super(ProtoDeclare, self).__init__()
        self.appinfo = None
        if not self.appinfo:
            self.appinfo = kwargs.pop("appinfo", None)
    def setAppinfo(self, appinfo = None):
        try:
            super().setAppinfo(appinfo)
        except AttributeError:
           pass
        self.appinfo = appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
    def addAppinfo(self, appinfo = None):
        if not isinstance(appinfo, list):
            appinfo = [appinfo]
            self.appinfo = []
            self.appinfo = self.appinfo + appinfo
        return self
        self.documentation = None
        if not self.documentation:
            self.documentation = kwargs.pop("documentation", None)
    def setDocumentation(self, documentation = None):
        try:
            super().setDocumentation(documentation)
        except AttributeError:
           pass
        self.documentation = documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
    def addDocumentation(self, documentation = None):
        if not isinstance(documentation, list):
            documentation = [documentation]
            self.documentation = []
            self.documentation = self.documentation + documentation
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
        self.ProtoBody = None
        if not self.ProtoBody:
            self.ProtoBody = kwargs.pop("ProtoBody", None)
    def setProtoBody(self, ProtoBody = None):
        try:
            super().setProtoBody(ProtoBody)
        except AttributeError:
           pass
        self.ProtoBody = ProtoBody
        return self
    def addProtoBody(self, ProtoBody = None):
        if not isinstance(ProtoBody, list):
            ProtoBody = [ProtoBody]
            self.ProtoBody = []
            self.ProtoBody = self.ProtoBody + ProtoBody
        return self
    def addProtoBody(self, ProtoBody = None):
        if not isinstance(ProtoBody, list):
            ProtoBody = [ProtoBody]
            self.ProtoBody = []
            self.ProtoBody = self.ProtoBody + ProtoBody
        return self
        self.ProtoInterface = None
        if not self.ProtoInterface:
            self.ProtoInterface = kwargs.pop("ProtoInterface", None)
    def setProtoInterface(self, ProtoInterface = None):
        try:
            super().setProtoInterface(ProtoInterface)
        except AttributeError:
           pass
        self.ProtoInterface = ProtoInterface
        return self
    def addProtoInterface(self, ProtoInterface = None):
        if not isinstance(ProtoInterface, list):
            ProtoInterface = [ProtoInterface]
            self.ProtoInterface = []
            self.ProtoInterface = self.ProtoInterface + ProtoInterface
        return self
    def addProtoInterface(self, ProtoInterface = None):
        if not isinstance(ProtoInterface, list):
            ProtoInterface = [ProtoInterface]
            self.ProtoInterface = []
            self.ProtoInterface = self.ProtoInterface + ProtoInterface
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ProtoInterface(object):
    def __init__(self, **kwargs):
        super(ProtoInterface, self).__init__()
        self.field = []
        if not self.field:
            self.field = kwargs.pop("field", [])
    def setField(self, field = []):
        try:
            super().setField(field)
        except AttributeError:
           pass
        self.field = field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def addField(self, field = []):
        if not isinstance(field, list):
            field = [field]
            self.field = []
            self.field = self.field + field
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class ROUTE(object):
    def __init__(self, **kwargs):
        super(ROUTE, self).__init__()
        self.fromField = None
        if not self.fromField:
            self.fromField = kwargs.pop("fromField", None)
    def setFromField(self, fromField = None):
        try:
            super().setFromField(fromField)
        except AttributeError:
           pass
        self.fromField = fromField
        return self
    def addFromField(self, fromField = None):
        if not isinstance(fromField, list):
            fromField = [fromField]
            self.fromField = []
            self.fromField = self.fromField + fromField
        return self
    def addFromField(self, fromField = None):
        if not isinstance(fromField, list):
            fromField = [fromField]
            self.fromField = []
            self.fromField = self.fromField + fromField
        return self
        self.fromNode = None
        if not self.fromNode:
            self.fromNode = kwargs.pop("fromNode", None)
    def setFromNode(self, fromNode = None):
        try:
            super().setFromNode(fromNode)
        except AttributeError:
           pass
        self.fromNode = fromNode
        return self
    def addFromNode(self, fromNode = None):
        if not isinstance(fromNode, list):
            fromNode = [fromNode]
            self.fromNode = []
            self.fromNode = self.fromNode + fromNode
        return self
    def addFromNode(self, fromNode = None):
        if not isinstance(fromNode, list):
            fromNode = [fromNode]
            self.fromNode = []
            self.fromNode = self.fromNode + fromNode
        return self
        self.toField = None
        if not self.toField:
            self.toField = kwargs.pop("toField", None)
    def setToField(self, toField = None):
        try:
            super().setToField(toField)
        except AttributeError:
           pass
        self.toField = toField
        return self
    def addToField(self, toField = None):
        if not isinstance(toField, list):
            toField = [toField]
            self.toField = []
            self.toField = self.toField + toField
        return self
    def addToField(self, toField = None):
        if not isinstance(toField, list):
            toField = [toField]
            self.toField = []
            self.toField = self.toField + toField
        return self
        self.toNode = None
        if not self.toNode:
            self.toNode = kwargs.pop("toNode", None)
    def setToNode(self, toNode = None):
        try:
            super().setToNode(toNode)
        except AttributeError:
           pass
        self.toNode = toNode
        return self
    def addToNode(self, toNode = None):
        if not isinstance(toNode, list):
            toNode = [toNode]
            self.toNode = []
            self.toNode = self.toNode + toNode
        return self
    def addToNode(self, toNode = None):
        if not isinstance(toNode, list):
            toNode = [toNode]
            self.toNode = []
            self.toNode = self.toNode + toNode
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class Scene(object):
    def __init__(self, **kwargs):
        super(Scene, self).__init__()
        self.children = []
        if not self.children:
            self.children = kwargs.pop("children", [])
    def setChildren(self, children = []):
        try:
            super().setChildren(children)
        except AttributeError:
           pass
        self.children = children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def addChildren(self, children = []):
        if not isinstance(children, list):
            children = [children]
            self.children = []
            self.children = self.children + children
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def setLayerSet(self, LayerSet = []):
        try:
            super().setLayerSet(LayerSet)
        except AttributeError:
           pass
        self.LayerSet = LayerSet
        return self
    def addLayerSet(self, LayerSet = []):
        if not isinstance(LayerSet, list):
            LayerSet = [LayerSet]
            self.LayerSet = []
            self.LayerSet = self.LayerSet + LayerSet
        return self
    def addLayerSet(self, LayerSet = []):
        if not isinstance(LayerSet, list):
            LayerSet = [LayerSet]
            self.LayerSet = []
            self.LayerSet = self.LayerSet + LayerSet
        return self
    def removeLayerSet(self, LayerSet):
        self.LayerSet = [x for x in self.LayerSet if x not in LayerSet]
        return self.LayerSet
    def removeLayerSet(self, LayerSet):
        self.LayerSet = [x for x in self.LayerSet if x not in LayerSet]
        return self.LayerSet
    def getLayerSet(self, LayerSet = []):
        return self.LayerSet
    def LayerSet_changed(self, LayerSet = []):
        return self.LayerSet
    def getLayerSet(self, LayerSet = []):
        return self.LayerSet


class unit(object):
    def __init__(self, **kwargs):
        super(unit, self).__init__()
        self.category = None
        if not self.category:
            self.category = kwargs.pop("category", None)
        if 'angle' == self.category:
            pass
        elif 'force' == self.category:
            pass
        elif 'length' == self.category:
            pass
        elif 'mass' == self.category:
            pass
        else:
            return None
    def setCategory(self, category = None):
        if 'angle' == category:
            pass
        elif 'force' == category:
            pass
        elif 'length' == category:
            pass
        elif 'mass' == category:
            pass
        else:
            return None
        try:
            super().setCategory(category)
        except AttributeError:
           pass
        self.category = category
        return self
    def addCategory(self, category = None):
        if 'angle' == category:
            pass
        elif 'force' == category:
            pass
        elif 'length' == category:
            pass
        elif 'mass' == category:
            pass
        else:
            return None
        if not isinstance(category, list):
            category = [category]
            self.category = []
            self.category = self.category + category
        return self
    def addCategory(self, category = None):
        if 'angle' == category:
            pass
        elif 'force' == category:
            pass
        elif 'length' == category:
            pass
        elif 'mass' == category:
            pass
        else:
            return None
        if not isinstance(category, list):
            category = [category]
            self.category = []
            self.category = self.category + category
        return self
        self.conversionFactor = 1.0
        if not self.conversionFactor:
            self.conversionFactor = kwargs.pop("conversionFactor", 1.0)
        if self.conversionFactor == None or self.conversionFactor  <=  0:
            return None
    def setConversionFactor(self, conversionFactor = 1.0):
        if conversionFactor == None or conversionFactor  <=  0:
            return None
        try:
            super().setConversionFactor(conversionFactor)
        except AttributeError:
           pass
        self.conversionFactor = conversionFactor
        return self
    def addConversionFactor(self, conversionFactor = 1.0):
        if conversionFactor == None or conversionFactor  <=  0:
            return None
        if not isinstance(conversionFactor, list):
            conversionFactor = [conversionFactor]
            self.conversionFactor = []
            self.conversionFactor = self.conversionFactor + conversionFactor
        return self
    def addConversionFactor(self, conversionFactor = 1.0):
        if conversionFactor == None or conversionFactor  <=  0:
            return None
        if not isinstance(conversionFactor, list):
            conversionFactor = [conversionFactor]
            self.conversionFactor = []
            self.conversionFactor = self.conversionFactor + conversionFactor
        return self
        self.name = None
        if not self.name:
            self.name = kwargs.pop("name", None)
    def setName(self, name = None):
        try:
            super().setName(name)
        except AttributeError:
           pass
        self.name = name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def addName(self, name = None):
        if not isinstance(name, list):
            name = [name]
            self.name = []
            self.name = self.name + name
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class X3D(object):
    def __init__(self, **kwargs):
        pass
        self.head = None
        if not self.head:
            self.head = kwargs.pop("head", None)
    def setHead(self, head = None):
        try:
            super().setHead(head)
        except AttributeError:
           pass
        self.head = head
        return self
    def addHead(self, head = None):
        if not isinstance(head, list):
            head = [head]
            self.head = []
            self.head = self.head + head
        return self
    def addHead(self, head = None):
        if not isinstance(head, list):
            head = [head]
            self.head = []
            self.head = self.head + head
        return self
        self.profile = "Immersive"
        if not self.profile:
            self.profile = kwargs.pop("profile", "Immersive")
        if 'Core' == self.profile:
            pass
        elif 'Interchange' == self.profile:
            pass
        elif 'CADInterchange' == self.profile:
            pass
        elif 'Interactive' == self.profile:
            pass
        elif 'Immersive' == self.profile:
            pass
        elif 'MedicalInterchange' == self.profile:
            pass
        elif 'MPEG4Interactive' == self.profile:
            pass
        elif 'Full' == self.profile:
            pass
        else:
            return None
    def setProfile(self, profile = "Immersive"):
        if 'Core' == profile:
            pass
        elif 'Interchange' == profile:
            pass
        elif 'CADInterchange' == profile:
            pass
        elif 'Interactive' == profile:
            pass
        elif 'Immersive' == profile:
            pass
        elif 'MedicalInterchange' == profile:
            pass
        elif 'MPEG4Interactive' == profile:
            pass
        elif 'Full' == profile:
            pass
        else:
            return None
        try:
            super().setProfile(profile)
        except AttributeError:
           pass
        self.profile = profile
        return self
    def addProfile(self, profile = "Immersive"):
        if 'Core' == profile:
            pass
        elif 'Interchange' == profile:
            pass
        elif 'CADInterchange' == profile:
            pass
        elif 'Interactive' == profile:
            pass
        elif 'Immersive' == profile:
            pass
        elif 'MedicalInterchange' == profile:
            pass
        elif 'MPEG4Interactive' == profile:
            pass
        elif 'Full' == profile:
            pass
        else:
            return None
        if not isinstance(profile, list):
            profile = [profile]
            self.profile = []
            self.profile = self.profile + profile
        return self
    def addProfile(self, profile = "Immersive"):
        if 'Core' == profile:
            pass
        elif 'Interchange' == profile:
            pass
        elif 'CADInterchange' == profile:
            pass
        elif 'Interactive' == profile:
            pass
        elif 'Immersive' == profile:
            pass
        elif 'MedicalInterchange' == profile:
            pass
        elif 'MPEG4Interactive' == profile:
            pass
        elif 'Full' == profile:
            pass
        else:
            return None
        if not isinstance(profile, list):
            profile = [profile]
            self.profile = []
            self.profile = self.profile + profile
        return self
        self.Scene = None
        if not self.Scene:
            self.Scene = kwargs.pop("Scene", None)
    def setScene(self, Scene = None):
        try:
            super().setScene(Scene)
        except AttributeError:
           pass
        self.Scene = Scene
        return self
    def addScene(self, Scene = None):
        if not isinstance(Scene, list):
            Scene = [Scene]
            self.Scene = []
            self.Scene = self.Scene + Scene
        return self
    def addScene(self, Scene = None):
        if not isinstance(Scene, list):
            Scene = [Scene]
            self.Scene = []
            self.Scene = self.Scene + Scene
        return self
        self.version = "4.0"
        if not self.version:
            self.version = kwargs.pop("version", "4.0")
        if '3.0' == self.version:
            pass
        elif '3.1' == self.version:
            pass
        elif '3.2' == self.version:
            pass
        elif '3.3' == self.version:
            pass
        elif '4.0' == self.version:
            pass
        else:
            return None
    def setVersion(self, version = "4.0"):
        if '3.0' == version:
            pass
        elif '3.1' == version:
            pass
        elif '3.2' == version:
            pass
        elif '3.3' == version:
            pass
        elif '4.0' == version:
            pass
        else:
            return None
        try:
            super().setVersion(version)
        except AttributeError:
           pass
        self.version = version
        return self
    def addVersion(self, version = "4.0"):
        if '3.0' == version:
            pass
        elif '3.1' == version:
            pass
        elif '3.2' == version:
            pass
        elif '3.3' == version:
            pass
        elif '4.0' == version:
            pass
        else:
            return None
        if not isinstance(version, list):
            version = [version]
            self.version = []
            self.version = self.version + version
        return self
    def addVersion(self, version = "4.0"):
        if '3.0' == version:
            pass
        elif '3.1' == version:
            pass
        elif '3.2' == version:
            pass
        elif '3.3' == version:
            pass
        elif '4.0' == version:
            pass
        else:
            return None
        if not isinstance(version, list):
            version = [version]
            self.version = []
            self.version = self.version + version
        return self
    def setComments(self, comments = None):
        try:
            super().setComments(comments)
        except AttributeError:
           pass
        self.comments = comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self
    def addComments(self, comments = None):
        if not isinstance(comments, list):
            comments = [comments]
            self.comments = []
            self.comments = self.comments + comments
        return self


class SFBool(object):
    def __init__(self, **kwargs):
        super(SFBool, self).__init__(**kwargs)


class MFBool(object):
    def __init__(self, **kwargs):
        super(MFBool, self).__init__(**kwargs)


class SFColor(object):
    def __init__(self, **kwargs):
        super(SFColor, self).__init__(**kwargs)


class MFColor(object):
    def __init__(self, **kwargs):
        super(MFColor, self).__init__(**kwargs)


class SFColorRGBA(object):
    def __init__(self, **kwargs):
        super(SFColorRGBA, self).__init__(**kwargs)


class MFColorRGBA(object):
    def __init__(self, **kwargs):
        super(MFColorRGBA, self).__init__(**kwargs)


class SFDouble(object):
    def __init__(self, **kwargs):
        super(SFDouble, self).__init__(**kwargs)


class MFDouble(object):
    def __init__(self, **kwargs):
        super(MFDouble, self).__init__(**kwargs)


class SFFloat(object):
    def __init__(self, **kwargs):
        super(SFFloat, self).__init__(**kwargs)


class MFFloat(object):
    def __init__(self, **kwargs):
        super(MFFloat, self).__init__(**kwargs)


class SFImage(object):
    def __init__(self, **kwargs):
        super(SFImage, self).__init__(**kwargs)


class MFImage(object):
    def __init__(self, **kwargs):
        super(MFImage, self).__init__(**kwargs)


class SFInt32(object):
    def __init__(self, **kwargs):
        super(SFInt32, self).__init__(**kwargs)


class MFInt32(object):
    def __init__(self, **kwargs):
        super(MFInt32, self).__init__(**kwargs)


class SFMatrix3d(object):
    def __init__(self, **kwargs):
        super(SFMatrix3d, self).__init__(**kwargs)


class MFMatrix3d(object):
    def __init__(self, **kwargs):
        super(MFMatrix3d, self).__init__(**kwargs)


class SFMatrix3f(object):
    def __init__(self, **kwargs):
        super(SFMatrix3f, self).__init__(**kwargs)


class MFMatrix3f(object):
    def __init__(self, **kwargs):
        super(MFMatrix3f, self).__init__(**kwargs)


class SFMatrix4d(object):
    def __init__(self, **kwargs):
        super(SFMatrix4d, self).__init__(**kwargs)


class MFMatrix4d(object):
    def __init__(self, **kwargs):
        super(MFMatrix4d, self).__init__(**kwargs)


class SFMatrix4f(object):
    def __init__(self, **kwargs):
        super(SFMatrix4f, self).__init__(**kwargs)


class MFMatrix4f(object):
    def __init__(self, **kwargs):
        super(MFMatrix4f, self).__init__(**kwargs)


class SFString(object):
    def __init__(self, **kwargs):
        super(SFString, self).__init__(**kwargs)


class SFNode(object):
    def __init__(self, **kwargs):
        super(SFNode, self).__init__(**kwargs)


class MFNode(object):
    def __init__(self, **kwargs):
        super(MFNode, self).__init__(**kwargs)


class SFRotation(object):
    def __init__(self, **kwargs):
        super(SFRotation, self).__init__(**kwargs)


class MFRotation(object):
    def __init__(self, **kwargs):
        super(MFRotation, self).__init__(**kwargs)


class MFString(object):
    def __init__(self, **kwargs):
        super(MFString, self).__init__()


class SFTime(object):
    def __init__(self, **kwargs):
        super(SFTime, self).__init__(**kwargs)


class MFTime(object):
    def __init__(self, **kwargs):
        super(MFTime, self).__init__(**kwargs)


class SFVec2d(object):
    def __init__(self, **kwargs):
        super(SFVec2d, self).__init__(**kwargs)


class MFVec2d(object):
    def __init__(self, **kwargs):
        super(MFVec2d, self).__init__(**kwargs)


class SFVec2f(object):
    def __init__(self, **kwargs):
        super(SFVec2f, self).__init__(**kwargs)


class MFVec2f(object):
    def __init__(self, **kwargs):
        super(MFVec2f, self).__init__(**kwargs)


class SFVec3d(object):
    def __init__(self, **kwargs):
        super(SFVec3d, self).__init__(**kwargs)


class MFVec3d(object):
    def __init__(self, **kwargs):
        super(MFVec3d, self).__init__(**kwargs)


class SFVec3f(object):
    def __init__(self, **kwargs):
        super(SFVec3f, self).__init__(**kwargs)


class MFVec3f(object):
    def __init__(self, **kwargs):
        super(MFVec3f, self).__init__(**kwargs)


class SFVec4d(object):
    def __init__(self, **kwargs):
        super(SFVec4d, self).__init__(**kwargs)


class MFVec4d(object):
    def __init__(self, **kwargs):
        super(MFVec4d, self).__init__(**kwargs)


class SFVec4f(object):
    def __init__(self, **kwargs):
        super(SFVec4f, self).__init__(**kwargs)


class MFVec4f(object):
    def __init__(self, **kwargs):
        super(MFVec4f, self).__init__(**kwargs)


