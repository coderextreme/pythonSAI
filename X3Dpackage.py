class InvalidFieldValueException (BaseException):
    def __init__(self):
        return

class InvalidFieldTypeException (BaseException):
    def __init__(self):
        return
class X3DNode():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DAppearanceChildNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DAppearanceChildNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DAppearanceChildNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DAppearanceChildNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DAppearanceChildNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DAppearanceNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DAppearanceNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DAppearanceNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DAppearanceNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DAppearanceNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DChildNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DChildNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DChildNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DChildNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DChildNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBindableNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_metadata(self, set_metadata_ = None):
        super(X3DBindableNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, set_bind_):
        super(X3DBindableNode, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_DEF(self, set_DEF_):
        super(X3DBindableNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DBindableNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DBindableNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBackgroundNode(X3DBindableNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_groundAngle(self, set_groundAngle_):
        super(X3DBackgroundNode, self).set_groundAngle(set_groundAngle_)
        if type(set_groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_groundAngle_ < 0:
                raise InvalidFieldValueException()
        if set_groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.set_groundAngle_ = set_groundAngle_

    def get_groundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def set_groundColor(self, set_groundColor_):
        super(X3DBackgroundNode, self).set_groundColor(set_groundColor_)
        if type(set_groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_groundColor_ < 0:
                raise InvalidFieldValueException()
        if set_groundColor_ > 1:
                raise InvalidFieldValueException()
        self.set_groundColor_ = set_groundColor_

    def get_groundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_metadata(self, set_metadata_ = None):
        super(X3DBackgroundNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, set_bind_):
        super(X3DBackgroundNode, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_skyAngle(self, set_skyAngle_):
        super(X3DBackgroundNode, self).set_skyAngle(set_skyAngle_)
        if type(set_skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_skyAngle_ < 0:
                raise InvalidFieldValueException()
        if set_skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.set_skyAngle_ = set_skyAngle_

    def get_skyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def set_skyColor(self, set_skyColor_ = [0, 0, 0]):
        super(X3DBackgroundNode, self).set_skyColor(set_skyColor_)
        if type(set_skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_skyColor_ < 0:
                raise InvalidFieldValueException()
        if set_skyColor_ > 1:
                raise InvalidFieldValueException()
        self.set_skyColor_ = set_skyColor_

    def get_skyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def set_transparency(self, set_transparency_ = 0):
        super(X3DBackgroundNode, self).set_transparency(set_transparency_)
        if type(set_transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_transparency_ < 0:
                raise InvalidFieldValueException()
        if set_transparency_ > 1:
                raise InvalidFieldValueException()
        self.set_transparency_ = set_transparency_

    def get_transparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def set_DEF(self, set_DEF_):
        super(X3DBackgroundNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DBackgroundNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DBackgroundNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFollowerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DFollowerNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DFollowerNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DFollowerNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DFollowerNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DChaserNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DChaserNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DChaserNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DChaserNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DChaserNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DGeometricPropertyNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DGeometricPropertyNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DGeometricPropertyNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DGeometricPropertyNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DGeometricPropertyNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DColorNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DColorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DColorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DColorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DColorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVolumeRenderStyleNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DVolumeRenderStyleNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(X3DVolumeRenderStyleNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DVolumeRenderStyleNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DVolumeRenderStyleNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DVolumeRenderStyleNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DComposableVolumeRenderStyleNode(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DComposableVolumeRenderStyleNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(X3DComposableVolumeRenderStyleNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DComposableVolumeRenderStyleNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DComposableVolumeRenderStyleNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DComposableVolumeRenderStyleNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DGeometryNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DGeometryNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DGeometryNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DGeometryNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DGeometryNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DComposedGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(X3DComposedGeometryNode, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(X3DComposedGeometryNode, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(X3DComposedGeometryNode, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(X3DComposedGeometryNode, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(X3DComposedGeometryNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(X3DComposedGeometryNode, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_texCoord(self, set_texCoord_ = None):
        super(X3DComposedGeometryNode, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(X3DComposedGeometryNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DComposedGeometryNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DComposedGeometryNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DCoordinateNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DCoordinateNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DCoordinateNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DCoordinateNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DDamperNode(X3DFollowerNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DDamperNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_tau(self, set_tau_ = 0.3):
        super(X3DDamperNode, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(X3DDamperNode, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_

    def set_DEF(self, set_DEF_):
        super(X3DDamperNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DDamperNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DDamperNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSensorNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPointingDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_description(self, set_description_):
        super(X3DPointingDeviceSensorNode, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(X3DPointingDeviceSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(X3DPointingDeviceSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DPointingDeviceSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DPointingDeviceSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DPointingDeviceSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DDragSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_autoOffset(self, set_autoOffset_ = True):
        super(X3DDragSensorNode, self).set_autoOffset(set_autoOffset_)
        if type(set_autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoOffset_ = set_autoOffset_

    def get_autoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def set_description(self, set_description_):
        super(X3DDragSensorNode, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(X3DDragSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(X3DDragSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_trackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def set_DEF(self, set_DEF_):
        super(X3DDragSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DDragSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DDragSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DEnvironmentalSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DEnvironmentalSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DEnvironmentalSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DEnvironmentalSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DEnvironmentalSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DEnvironmentalSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTextureNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTextureNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTextureNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTextureNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DEnvironmentTextureNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DEnvironmentTextureNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DEnvironmentTextureNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DEnvironmentTextureNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DEnvironmentTextureNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFontStyleNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DFontStyleNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DFontStyleNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DFontStyleNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DFontStyleNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DBoundedObject():
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    pass


class X3DGroupingNode(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(X3DGroupingNode, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(X3DGroupingNode, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(X3DGroupingNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(X3DGroupingNode, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(X3DGroupingNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DGroupingNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DGroupingNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DInfoNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DInfoNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DInfoNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DInfoNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DInfoNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DInterpolatorNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(X3DInterpolatorNode, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_metadata(self, set_metadata_ = None):
        super(X3DInterpolatorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(X3DInterpolatorNode, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_
    def set_DEF(self, set_DEF_):
        super(X3DInterpolatorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DInterpolatorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DInterpolatorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DKeyDeviceSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DKeyDeviceSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DKeyDeviceSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DKeyDeviceSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DKeyDeviceSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DKeyDeviceSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLayerNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_isPickable(self, set_isPickable_ = True):
        super(X3DLayerNode, self).set_isPickable(set_isPickable_)
        if type(set_isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_isPickable_ = set_isPickable_

    def get_isPickable(self):
        if type(self.isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPickable_

    def set_metadata(self, set_metadata_ = None):
        super(X3DLayerNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_viewport(self, set_viewport_ = None):
        super(X3DLayerNode, self).set_viewport(set_viewport_)
        if type(set_viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_viewport_ = set_viewport_

    def get_viewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def set_DEF(self, set_DEF_):
        super(X3DLayerNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DLayerNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DLayerNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLayoutNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DLayoutNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DLayoutNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DLayoutNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DLayoutNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DLightNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0):
        super(X3DLightNode, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(X3DLightNode, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_intensity(self, set_intensity_ = 1):
        super(X3DLightNode, self).set_intensity(set_intensity_)
        if type(set_intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensity_ < 0:
                raise InvalidFieldValueException()
        if set_intensity_ > 1:
                raise InvalidFieldValueException()
        self.set_intensity_ = set_intensity_

    def get_intensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def set_metadata(self, set_metadata_ = None):
        super(X3DLightNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_on(self, set_on_ = True):
        super(X3DLightNode, self).set_on(set_on_)
        if type(set_on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_on_ = set_on_

    def get_on(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def set_DEF(self, set_DEF_):
        super(X3DLightNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DLightNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DLightNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DMaterialNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DMaterialNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DMaterialNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DMaterialNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DMaterialNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNBodyCollidableNode(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DNBodyCollidableNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(X3DNBodyCollidableNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(X3DNBodyCollidableNode, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(X3DNBodyCollidableNode, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(X3DNBodyCollidableNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNBodyCollidableNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNBodyCollidableNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNBodyCollisionSpaceNode(X3DNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DNBodyCollisionSpaceNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(X3DNBodyCollisionSpaceNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DNBodyCollisionSpaceNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNBodyCollisionSpaceNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNBodyCollisionSpaceNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNetworkSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DNetworkSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(X3DNetworkSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DNetworkSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNetworkSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNetworkSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNormalNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DNormalNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DNormalNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNormalNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNormalNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNurbsControlCurveNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_controlPoint(self, set_controlPoint_):
        super(X3DNurbsControlCurveNode, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(X3DNurbsControlCurveNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DNurbsControlCurveNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNurbsControlCurveNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNurbsControlCurveNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParametricGeometryNode(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DParametricGeometryNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DParametricGeometryNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DParametricGeometryNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DParametricGeometryNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DNurbsSurfaceGeometryNode(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_texCoord(self, set_texCoord_ = None):
        super(X3DNurbsSurfaceGeometryNode, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_uTessellation(self, set_uTessellation_ = 0):
        super(X3DNurbsSurfaceGeometryNode, self).set_uTessellation(set_uTessellation_)
        if type(set_uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_uTessellation_ = set_uTessellation_

    def get_uTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def set_vTessellation(self, set_vTessellation_ = 0):
        super(X3DNurbsSurfaceGeometryNode, self).set_vTessellation(set_vTessellation_)
        if type(set_vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_vTessellation_ = set_vTessellation_

    def get_vTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def set_weight(self, set_weight_):
        super(X3DNurbsSurfaceGeometryNode, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(X3DNurbsSurfaceGeometryNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DNurbsSurfaceGeometryNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DNurbsSurfaceGeometryNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParticleEmitterNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_mass(self, set_mass_ = 0):
        super(X3DParticleEmitterNode, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(X3DParticleEmitterNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_speed(self, set_speed_ = 0):
        super(X3DParticleEmitterNode, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(X3DParticleEmitterNode, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(X3DParticleEmitterNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DParticleEmitterNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DParticleEmitterNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DParticlePhysicsModelNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DParticlePhysicsModelNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(X3DParticlePhysicsModelNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DParticlePhysicsModelNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DParticlePhysicsModelNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DParticlePhysicsModelNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPickSensorNode(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def set_enabled(self, set_enabled_ = True):
        super(X3DPickSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_matchCriterion(self, set_matchCriterion_ = "MATCH_ANY"):
        super(X3DPickSensorNode, self).set_matchCriterion(set_matchCriterion_)
        if type(set_matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == set_matchCriterion_:
            pass
        elif 'MATCH_EVERY' == set_matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == set_matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_matchCriterion_ = set_matchCriterion_

    def get_matchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def set_metadata(self, set_metadata_ = None):
        super(X3DPickSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(X3DPickSensorNode, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def get_pickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def set_pickingGeometry(self, set_pickingGeometry_ = None):
        super(X3DPickSensorNode, self).set_pickingGeometry(set_pickingGeometry_)
        if type(set_pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_pickingGeometry_ = set_pickingGeometry_

    def get_pickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def set_pickTarget(self, set_pickTarget_):
        super(X3DPickSensorNode, self).set_pickTarget(set_pickTarget_)
        if type(set_pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_pickTarget_ = set_pickTarget_

    def get_pickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def set_DEF(self, set_DEF_):
        super(X3DPickSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DPickSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DPickSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DProductStructureChildNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DProductStructureChildNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(X3DProductStructureChildNode, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_DEF(self, set_DEF_):
        super(X3DProductStructureChildNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DProductStructureChildNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DProductStructureChildNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DPrototypeInstance(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DPrototypeInstance, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    pass


class X3DRigidJointNode(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_body1(self, set_body1_ = None):
        super(X3DRigidJointNode, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def set_body2(self, set_body2_ = None):
        super(X3DRigidJointNode, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(X3DRigidJointNode, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_metadata(self, set_metadata_ = None):
        super(X3DRigidJointNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DRigidJointNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DRigidJointNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DRigidJointNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DUrlObject():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_url(self, set_url_):
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    pass


class X3DScriptNode(X3DChildNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DScriptNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(X3DScriptNode, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(X3DScriptNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DScriptNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DScriptNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSequencerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(X3DSequencerNode, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_metadata(self, set_metadata_ = None):
        super(X3DSequencerNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_next(self, set_next_):
        super(X3DSequencerNode, self).set_next(set_next_)
        if type(set_next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_next_ = set_next_
    def set_previous(self, set_previous_):
        super(X3DSequencerNode, self).set_previous(set_previous_)
        if type(set_previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_previous_ = set_previous_
    def set_fraction(self, set_fraction_):
        super(X3DSequencerNode, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_
    def set_DEF(self, set_DEF_):
        super(X3DSequencerNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DSequencerNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DSequencerNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DShaderNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def set_activate(self, set_activate_):
        super(X3DShaderNode, self).set_activate(set_activate_)
        if type(set_activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_activate_ = set_activate_

    def get_isSelected(self):
        if type(self.isSelected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isSelected_


    def get_isValid(self):
        if type(self.isValid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isValid_

    def set_metadata(self, set_metadata_ = None):
        super(X3DShaderNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DShaderNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DShaderNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DShaderNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DShapeNode(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_appearance(self, set_appearance_ = None):
        super(X3DShapeNode, self).set_appearance(set_appearance_)
        if type(set_appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_appearance_ = set_appearance_

    def get_appearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def set_geometry(self, set_geometry_ = None):
        super(X3DShapeNode, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_metadata(self, set_metadata_ = None):
        super(X3DShapeNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DShapeNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DShapeNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DShapeNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSoundNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DSoundNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DSoundNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DSoundNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DSoundNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTimeDependentNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_elapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isPaused(self):
        if type(self.isPaused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPaused_

    def set_loop(self, set_loop_ = False):
        super(X3DTimeDependentNode, self).set_loop(set_loop_)
        if type(set_loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_loop_ = set_loop_

    def get_loop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def set_metadata(self, set_metadata_ = None):
        super(X3DTimeDependentNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_pauseTime(self, set_pauseTime_ = 0):
        super(X3DTimeDependentNode, self).set_pauseTime(set_pauseTime_)
        if type(set_pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_pauseTime_ = set_pauseTime_

    def get_pauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def set_resumeTime(self, set_resumeTime_ = 0):
        super(X3DTimeDependentNode, self).set_resumeTime(set_resumeTime_)
        if type(set_resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_resumeTime_ = set_resumeTime_

    def get_resumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def set_startTime(self, set_startTime_ = 0):
        super(X3DTimeDependentNode, self).set_startTime(set_startTime_)
        if type(set_startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_startTime_ = set_startTime_

    def get_startTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def set_stopTime(self, set_stopTime_ = 0):
        super(X3DTimeDependentNode, self).set_stopTime(set_stopTime_)
        if type(set_stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_stopTime_ = set_stopTime_

    def get_stopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def set_DEF(self, set_DEF_):
        super(X3DTimeDependentNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTimeDependentNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTimeDependentNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DSoundSourceNode(X3DTimeDependentNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_description(self, set_description_):
        super(X3DSoundSourceNode, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def get_duration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def get_elapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isPaused(self):
        if type(self.isPaused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPaused_

    def set_loop(self, set_loop_ = False):
        super(X3DSoundSourceNode, self).set_loop(set_loop_)
        if type(set_loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_loop_ = set_loop_

    def get_loop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def set_metadata(self, set_metadata_ = None):
        super(X3DSoundSourceNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_pauseTime(self, set_pauseTime_ = 0):
        super(X3DSoundSourceNode, self).set_pauseTime(set_pauseTime_)
        if type(set_pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_pauseTime_ = set_pauseTime_

    def get_pauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def set_pitch(self, set_pitch_ = 1.0):
        super(X3DSoundSourceNode, self).set_pitch(set_pitch_)
        if type(set_pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_pitch_ <= 0:
                raise InvalidFieldValueException()
        self.set_pitch_ = set_pitch_

    def get_pitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def set_resumeTime(self, set_resumeTime_ = 0):
        super(X3DSoundSourceNode, self).set_resumeTime(set_resumeTime_)
        if type(set_resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_resumeTime_ = set_resumeTime_

    def get_resumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def set_startTime(self, set_startTime_ = 0):
        super(X3DSoundSourceNode, self).set_startTime(set_startTime_)
        if type(set_startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_startTime_ = set_startTime_

    def get_startTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def set_stopTime(self, set_stopTime_ = 0):
        super(X3DSoundSourceNode, self).set_stopTime(set_stopTime_)
        if type(set_stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_stopTime_ = set_stopTime_

    def get_stopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def set_DEF(self, set_DEF_):
        super(X3DSoundSourceNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DSoundSourceNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DSoundSourceNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTexture2DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTexture2DNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTexture2DNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTexture2DNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTexture2DNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTexture3DNode(X3DTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTexture3DNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTexture3DNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTexture3DNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTexture3DNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureCoordinateNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTextureCoordinateNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTextureCoordinateNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTextureCoordinateNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTextureCoordinateNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTextureTransformNode(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTextureTransformNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTextureTransformNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTextureTransformNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTextureTransformNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTouchSensorNode(X3DPointingDeviceSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_description(self, set_description_):
        super(X3DTouchSensorNode, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(X3DTouchSensorNode, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(X3DTouchSensorNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_touchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def set_DEF(self, set_DEF_):
        super(X3DTouchSensorNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTouchSensorNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTouchSensorNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DTriggerNode(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DTriggerNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DTriggerNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DTriggerNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DTriggerNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVertexAttributeNode(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(X3DVertexAttributeNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(X3DVertexAttributeNode, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_DEF(self, set_DEF_):
        super(X3DVertexAttributeNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DVertexAttributeNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DVertexAttributeNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DViewpointNode(X3DBindableNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_description(self, set_description_):
        super(X3DViewpointNode, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_jump(self, set_jump_ = True):
        super(X3DViewpointNode, self).set_jump(set_jump_)
        if type(set_jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_jump_ = set_jump_

    def get_jump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def set_metadata(self, set_metadata_ = None):
        super(X3DViewpointNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(X3DViewpointNode, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_retainUserOffsets(self, set_retainUserOffsets_ = False):
        super(X3DViewpointNode, self).set_retainUserOffsets(set_retainUserOffsets_)
        if type(set_retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_retainUserOffsets_ = set_retainUserOffsets_

    def get_retainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, set_bind_):
        super(X3DViewpointNode, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_DEF(self, set_DEF_):
        super(X3DViewpointNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DViewpointNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DViewpointNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DViewportNode(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(X3DViewportNode, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(X3DViewportNode, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(X3DViewportNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(X3DViewportNode, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(X3DViewportNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DViewportNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DViewportNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DVolumeDataNode(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_dimensions(self, set_dimensions_ = [1, 1, 1]):
        super(X3DVolumeDataNode, self).set_dimensions(set_dimensions_)
        if type(set_dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.set_dimensions_ = set_dimensions_

    def get_dimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def set_metadata(self, set_metadata_ = None):
        super(X3DVolumeDataNode, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(X3DVolumeDataNode, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(X3DVolumeDataNode, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(X3DVolumeDataNode, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class X3DFogObject():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_color(self, set_color_ = [1, 1, 1]):
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_fogType(self, set_fogType_ = "LINEAR"):
        if type(set_fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == set_fogType_:
            pass
        elif 'EXPONENTIAL' == set_fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_fogType_ = set_fogType_

    def get_fogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_

    def set_visibilityRange(self, set_visibilityRange_ = 0):
        if type(set_visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.set_visibilityRange_ = set_visibilityRange_

    def get_visibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    pass


class X3DMetadataObject():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    pass


class X3DPickableObject():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_pickable(self, set_pickable_ = True):
        if type(set_pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_pickable_ = set_pickable_

    def get_pickable(self):
        if type(self.pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.pickable_

    pass


class X3DProgrammableShaderObject():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_DEF(self, set_DEF_):
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Anchor(X3DGroupingNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Anchor, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Anchor, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_description(self, set_description_):
        super(Anchor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_metadata(self, set_metadata_ = None):
        super(Anchor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_parameter(self, set_parameter_):
        super(Anchor, self).set_parameter(set_parameter_)
        if type(set_parameter_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_parameter_ = set_parameter_

    def get_parameter(self):
        if type(self.parameter_) is not MFString:
            raise InvalidFieldTypeException()
        return self.parameter_

    def remove_children(self, remove_children_):
        super(Anchor, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_url(self, set_url_):
        super(Anchor, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(Anchor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Anchor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Anchor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Appearance(X3DAppearanceNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_fillProperties(self, set_fillProperties_ = None):
        super(Appearance, self).set_fillProperties(set_fillProperties_)
        if type(set_fillProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fillProperties_ = set_fillProperties_

    def get_fillProperties(self):
        if type(self.fillProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fillProperties_

    def set_lineProperties(self, set_lineProperties_ = None):
        super(Appearance, self).set_lineProperties(set_lineProperties_)
        if type(set_lineProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_lineProperties_ = set_lineProperties_

    def get_lineProperties(self):
        if type(self.lineProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.lineProperties_

    def set_material(self, set_material_ = None):
        super(Appearance, self).set_material(set_material_)
        if type(set_material_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_material_ = set_material_

    def get_material(self):
        if type(self.material_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.material_

    def set_metadata(self, set_metadata_ = None):
        super(Appearance, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_shaders(self, set_shaders_):
        super(Appearance, self).set_shaders(set_shaders_)
        if type(set_shaders_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_shaders_ = set_shaders_

    def get_shaders(self):
        if type(self.shaders_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.shaders_

    def set_texture(self, set_texture_ = None):
        super(Appearance, self).set_texture(set_texture_)
        if type(set_texture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texture_ = set_texture_

    def get_texture(self):
        if type(self.texture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def set_textureTransform(self, set_textureTransform_ = None):
        super(Appearance, self).set_textureTransform(set_textureTransform_)
        if type(set_textureTransform_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_textureTransform_ = set_textureTransform_

    def get_textureTransform(self):
        if type(self.textureTransform_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.textureTransform_

    def set_DEF(self, set_DEF_):
        super(Appearance, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Appearance, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Appearance, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Arc2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(endAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if endAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if endAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.endAngle_ = kwargs.pop("endAngle", 1.570796)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(startAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if startAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if startAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.startAngle_ = kwargs.pop("startAngle", 0)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Arc2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Arc2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Arc2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Arc2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ArcClose2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closureType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PIE' == closureType_:
            pass
        elif 'CHORD' == closureType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.closureType_ = kwargs.pop("closureType", "PIE")
        if type(endAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if endAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if endAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.endAngle_ = kwargs.pop("endAngle", 1.570796)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        if type(startAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if startAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if startAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.startAngle_ = kwargs.pop("startAngle", 0)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ArcClose2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(ArcClose2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ArcClose2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ArcClose2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class AudioClip(X3DSoundSourceNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_description(self, set_description_):
        super(AudioClip, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def get_duration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def get_elapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isPaused(self):
        if type(self.isPaused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPaused_

    def set_loop(self, set_loop_ = False):
        super(AudioClip, self).set_loop(set_loop_)
        if type(set_loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_loop_ = set_loop_

    def get_loop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def set_metadata(self, set_metadata_ = None):
        super(AudioClip, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_pauseTime(self, set_pauseTime_ = 0):
        super(AudioClip, self).set_pauseTime(set_pauseTime_)
        if type(set_pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_pauseTime_ = set_pauseTime_

    def get_pauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def set_pitch(self, set_pitch_ = 1.0):
        super(AudioClip, self).set_pitch(set_pitch_)
        if type(set_pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_pitch_ <= 0:
                raise InvalidFieldValueException()
        self.set_pitch_ = set_pitch_

    def get_pitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def set_resumeTime(self, set_resumeTime_ = 0):
        super(AudioClip, self).set_resumeTime(set_resumeTime_)
        if type(set_resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_resumeTime_ = set_resumeTime_

    def get_resumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def set_startTime(self, set_startTime_ = 0):
        super(AudioClip, self).set_startTime(set_startTime_)
        if type(set_startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_startTime_ = set_startTime_

    def get_startTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def set_stopTime(self, set_stopTime_ = 0):
        super(AudioClip, self).set_stopTime(set_stopTime_)
        if type(set_stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_stopTime_ = set_stopTime_

    def get_stopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def set_url(self, set_url_):
        super(AudioClip, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(AudioClip, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(AudioClip, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(AudioClip, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Background(X3DBackgroundNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_backUrl(self, set_backUrl_):
        super(Background, self).set_backUrl(set_backUrl_)
        if type(set_backUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_backUrl_ = set_backUrl_

    def get_backUrl(self):
        if type(self.backUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.backUrl_


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_bottomUrl(self, set_bottomUrl_):
        super(Background, self).set_bottomUrl(set_bottomUrl_)
        if type(set_bottomUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_bottomUrl_ = set_bottomUrl_

    def get_bottomUrl(self):
        if type(self.bottomUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.bottomUrl_

    def set_frontUrl(self, set_frontUrl_):
        super(Background, self).set_frontUrl(set_frontUrl_)
        if type(set_frontUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_frontUrl_ = set_frontUrl_

    def get_frontUrl(self):
        if type(self.frontUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.frontUrl_

    def set_groundAngle(self, set_groundAngle_):
        super(Background, self).set_groundAngle(set_groundAngle_)
        if type(set_groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_groundAngle_ < 0:
                raise InvalidFieldValueException()
        if set_groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.set_groundAngle_ = set_groundAngle_

    def get_groundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def set_groundColor(self, set_groundColor_):
        super(Background, self).set_groundColor(set_groundColor_)
        if type(set_groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_groundColor_ < 0:
                raise InvalidFieldValueException()
        if set_groundColor_ > 1:
                raise InvalidFieldValueException()
        self.set_groundColor_ = set_groundColor_

    def get_groundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_leftUrl(self, set_leftUrl_):
        super(Background, self).set_leftUrl(set_leftUrl_)
        if type(set_leftUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_leftUrl_ = set_leftUrl_

    def get_leftUrl(self):
        if type(self.leftUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.leftUrl_

    def set_metadata(self, set_metadata_ = None):
        super(Background, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rightUrl(self, set_rightUrl_):
        super(Background, self).set_rightUrl(set_rightUrl_)
        if type(set_rightUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_rightUrl_ = set_rightUrl_

    def get_rightUrl(self):
        if type(self.rightUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.rightUrl_

    def set_bind(self, set_bind_):
        super(Background, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_skyAngle(self, set_skyAngle_):
        super(Background, self).set_skyAngle(set_skyAngle_)
        if type(set_skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_skyAngle_ < 0:
                raise InvalidFieldValueException()
        if set_skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.set_skyAngle_ = set_skyAngle_

    def get_skyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def set_skyColor(self, set_skyColor_ = [0, 0, 0]):
        super(Background, self).set_skyColor(set_skyColor_)
        if type(set_skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_skyColor_ < 0:
                raise InvalidFieldValueException()
        if set_skyColor_ > 1:
                raise InvalidFieldValueException()
        self.set_skyColor_ = set_skyColor_

    def get_skyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def set_topUrl(self, set_topUrl_):
        super(Background, self).set_topUrl(set_topUrl_)
        if type(set_topUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_topUrl_ = set_topUrl_

    def get_topUrl(self):
        if type(self.topUrl_) is not MFString:
            raise InvalidFieldTypeException()
        return self.topUrl_

    def set_transparency(self, set_transparency_ = 0):
        super(Background, self).set_transparency(set_transparency_)
        if type(set_transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_transparency_ < 0:
                raise InvalidFieldValueException()
        if set_transparency_ > 1:
                raise InvalidFieldValueException()
        self.set_transparency_ = set_transparency_

    def get_transparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def set_DEF(self, set_DEF_):
        super(Background, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Background, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Background, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BallJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_anchorPoint(self, set_anchorPoint_ = [0, 0, 0]):
        super(BallJoint, self).set_anchorPoint(set_anchorPoint_)
        if type(set_anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_anchorPoint_ = set_anchorPoint_

    def get_anchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def set_body1(self, set_body1_ = None):
        super(BallJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def get_body1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_

    def set_body2(self, set_body2_ = None):
        super(BallJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def get_body2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(BallJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_metadata(self, set_metadata_ = None):
        super(BallJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(BallJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BallJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BallJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Billboard(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Billboard, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_axisOfRotation(self, set_axisOfRotation_ = [0, 1, 0]):
        super(Billboard, self).set_axisOfRotation(set_axisOfRotation_)
        if type(set_axisOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axisOfRotation_ = set_axisOfRotation_

    def get_axisOfRotation(self):
        if type(self.axisOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axisOfRotation_

    def set_children(self, set_children_):
        super(Billboard, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(Billboard, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Billboard, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(Billboard, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Billboard, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Billboard, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BlendedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(BlendedVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(BlendedVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_renderStyle(self, set_renderStyle_ = None):
        super(BlendedVolumeStyle, self).set_renderStyle(set_renderStyle_)
        if type(set_renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_renderStyle_ = set_renderStyle_

    def get_renderStyle(self):
        if type(self.renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def set_voxels(self, set_voxels_ = None):
        super(BlendedVolumeStyle, self).set_voxels(set_voxels_)
        if type(set_voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_voxels_ = set_voxels_

    def get_voxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def set_weightConstant1(self, set_weightConstant1_ = 0.5):
        super(BlendedVolumeStyle, self).set_weightConstant1(set_weightConstant1_)
        if type(set_weightConstant1_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_weightConstant1_ < 0:
                raise InvalidFieldValueException()
        if set_weightConstant1_ > 1:
                raise InvalidFieldValueException()
        self.set_weightConstant1_ = set_weightConstant1_

    def get_weightConstant1(self):
        if type(self.weightConstant1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weightConstant1_

    def set_weightConstant2(self, set_weightConstant2_ = 0.5):
        super(BlendedVolumeStyle, self).set_weightConstant2(set_weightConstant2_)
        if type(set_weightConstant2_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_weightConstant2_ < 0:
                raise InvalidFieldValueException()
        if set_weightConstant2_ > 1:
                raise InvalidFieldValueException()
        self.set_weightConstant2_ = set_weightConstant2_

    def get_weightConstant2(self):
        if type(self.weightConstant2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weightConstant2_

    def set_weightFunction1(self, set_weightFunction1_ = "CONSTANT"):
        super(BlendedVolumeStyle, self).set_weightFunction1(set_weightFunction1_)
        if type(set_weightFunction1_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CONSTANT' == set_weightFunction1_:
            pass
        elif 'ALPHA1' == set_weightFunction1_:
            pass
        elif 'ALPHA2' == set_weightFunction1_:
            pass
        elif 'ONE_MINUS_ALPHA1' == set_weightFunction1_:
            pass
        elif 'ONE_MINUS_ALPHA2' == set_weightFunction1_:
            pass
        elif 'TABLE' == set_weightFunction1_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_weightFunction1_ = set_weightFunction1_

    def get_weightFunction1(self):
        if type(self.weightFunction1_) is not SFString:
            raise InvalidFieldTypeException()
        return self.weightFunction1_

    def set_weightFunction2(self, set_weightFunction2_ = "CONSTANT"):
        super(BlendedVolumeStyle, self).set_weightFunction2(set_weightFunction2_)
        if type(set_weightFunction2_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CONSTANT' == set_weightFunction2_:
            pass
        elif 'ALPHA1' == set_weightFunction2_:
            pass
        elif 'ALPHA2' == set_weightFunction2_:
            pass
        elif 'ONE_MINUS_ALPHA1' == set_weightFunction2_:
            pass
        elif 'ONE_MINUS_ALPHA2' == set_weightFunction2_:
            pass
        elif 'TABLE' == set_weightFunction2_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_weightFunction2_ = set_weightFunction2_

    def get_weightFunction2(self):
        if type(self.weightFunction2_) is not SFString:
            raise InvalidFieldTypeException()
        return self.weightFunction2_

    def set_weightTransferFunction1(self, set_weightTransferFunction1_ = None):
        super(BlendedVolumeStyle, self).set_weightTransferFunction1(set_weightTransferFunction1_)
        if type(set_weightTransferFunction1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_weightTransferFunction1_ = set_weightTransferFunction1_

    def get_weightTransferFunction1(self):
        if type(self.weightTransferFunction1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.weightTransferFunction1_

    def set_weightTransferFunction2(self, set_weightTransferFunction2_ = None):
        super(BlendedVolumeStyle, self).set_weightTransferFunction2(set_weightTransferFunction2_)
        if type(set_weightTransferFunction2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_weightTransferFunction2_ = set_weightTransferFunction2_

    def get_weightTransferFunction2(self):
        if type(self.weightTransferFunction2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.weightTransferFunction2_

    def set_DEF(self, set_DEF_):
        super(BlendedVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BlendedVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BlendedVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanFilter(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_inputFalse(self):
        if type(self.inputFalse_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputFalse_


    def get_inputNegate(self):
        if type(self.inputNegate_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputNegate_


    def get_inputTrue(self):
        if type(self.inputTrue_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.inputTrue_

    def set_metadata(self, set_metadata_ = None):
        super(BooleanFilter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, set_boolean_):
        super(BooleanFilter, self).set_boolean(set_boolean_)
        if type(set_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_boolean_ = set_boolean_
    def set_DEF(self, set_DEF_):
        super(BooleanFilter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BooleanFilter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BooleanFilter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanSequencer(X3DSequencerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(BooleanSequencer, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(BooleanSequencer, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFBool:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(BooleanSequencer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_next(self, set_next_):
        super(BooleanSequencer, self).set_next(set_next_)
        if type(set_next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_next_ = set_next_
    def set_previous(self, set_previous_):
        super(BooleanSequencer, self).set_previous(set_previous_)
        if type(set_previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_previous_ = set_previous_
    def set_fraction(self, set_fraction_):
        super(BooleanSequencer, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(BooleanSequencer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BooleanSequencer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BooleanSequencer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanToggle(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(BooleanToggle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, set_boolean_):
        super(BooleanToggle, self).set_boolean(set_boolean_)
        if type(set_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_boolean_ = set_boolean_
    def set_toggle(self, set_toggle_ = False):
        super(BooleanToggle, self).set_toggle(set_toggle_)
        if type(set_toggle_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_toggle_ = set_toggle_

    def get_toggle(self):
        if type(self.toggle_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.toggle_

    def set_DEF(self, set_DEF_):
        super(BooleanToggle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BooleanToggle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BooleanToggle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BooleanTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(BooleanTrigger, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_triggerTime(self, set_triggerTime_):
        super(BooleanTrigger, self).set_triggerTime(set_triggerTime_)
        if type(set_triggerTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_triggerTime_ = set_triggerTime_

    def get_triggerTrue(self):
        if type(self.triggerTrue_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.triggerTrue_

    def set_DEF(self, set_DEF_):
        super(BooleanTrigger, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BooleanTrigger, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BooleanTrigger, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BoundaryEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_boundaryOpacity(self, set_boundaryOpacity_ = 0.9):
        super(BoundaryEnhancementVolumeStyle, self).set_boundaryOpacity(set_boundaryOpacity_)
        if type(set_boundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_boundaryOpacity_ < 0:
                raise InvalidFieldValueException()
        if set_boundaryOpacity_ > 1:
                raise InvalidFieldValueException()
        self.set_boundaryOpacity_ = set_boundaryOpacity_

    def get_boundaryOpacity(self):
        if type(self.boundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.boundaryOpacity_

    def set_enabled(self, set_enabled_ = True):
        super(BoundaryEnhancementVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(BoundaryEnhancementVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_opacityFactor(self, set_opacityFactor_ = 2):
        super(BoundaryEnhancementVolumeStyle, self).set_opacityFactor(set_opacityFactor_)
        if type(set_opacityFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_opacityFactor_ < 0:
                raise InvalidFieldValueException()
        self.set_opacityFactor_ = set_opacityFactor_

    def get_opacityFactor(self):
        if type(self.opacityFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.opacityFactor_

    def set_retainedOpacity(self, set_retainedOpacity_ = 0.2):
        super(BoundaryEnhancementVolumeStyle, self).set_retainedOpacity(set_retainedOpacity_)
        if type(set_retainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_retainedOpacity_ < 0:
                raise InvalidFieldValueException()
        if set_retainedOpacity_ > 1:
                raise InvalidFieldValueException()
        self.set_retainedOpacity_ = set_retainedOpacity_

    def get_retainedOpacity(self):
        if type(self.retainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.retainedOpacity_

    def set_DEF(self, set_DEF_):
        super(BoundaryEnhancementVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BoundaryEnhancementVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BoundaryEnhancementVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class BoundedPhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(BoundedPhysicsModel, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_geometry(self, set_geometry_ = None):
        super(BoundedPhysicsModel, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_metadata(self, set_metadata_ = None):
        super(BoundedPhysicsModel, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(BoundedPhysicsModel, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(BoundedPhysicsModel, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(BoundedPhysicsModel, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Box(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [2, 2, 2])
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Box, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Box, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Box, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Box, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADAssembly(X3DGroupingNode, X3DProductStructureChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(CADAssembly, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(CADAssembly, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(CADAssembly, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(CADAssembly, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(CADAssembly, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(CADAssembly, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CADAssembly, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CADAssembly, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADFace(X3DProductStructureChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_metadata(self, set_metadata_ = None):
        super(CADFace, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(CADFace, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_shape(self, set_shape_ = None):
        super(CADFace, self).set_shape(set_shape_)
        if type(set_shape_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_shape_ = set_shape_

    def get_shape(self):
        if type(self.shape_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.shape_

    def set_DEF(self, set_DEF_):
        super(CADFace, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CADFace, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CADFace, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADLayer(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(CADLayer, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(CADLayer, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(CADLayer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(CADLayer, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(CADLayer, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_visible(self, set_visible_):
        super(CADLayer, self).set_visible(set_visible_)
        if type(set_visible_) is not MFBool:
            raise InvalidFieldTypeException()
        self.set_visible_ = set_visible_

    def get_visible(self):
        if type(self.visible_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.visible_

    def set_DEF(self, set_DEF_):
        super(CADLayer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CADLayer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CADLayer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CADPart(X3DProductStructureChildNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(CADPart, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_center(self, set_center_ = [0, 0, 0]):
        super(CADPart, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(CADPart, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(CADPart, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(CADPart, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(CADPart, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(CADPart, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(CADPart, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(CADPart, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(CADPart, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(CADPart, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CADPart, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CADPart, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CartoonVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_colorSteps(self, set_colorSteps_ = 4):
        super(CartoonVolumeStyle, self).set_colorSteps(set_colorSteps_)
        if type(set_colorSteps_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_colorSteps_ < 1:
                raise InvalidFieldValueException()
        if set_colorSteps_ > 64:
                raise InvalidFieldValueException()
        self.set_colorSteps_ = set_colorSteps_

    def get_colorSteps(self):
        if type(self.colorSteps_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.colorSteps_

    def set_enabled(self, set_enabled_ = True):
        super(CartoonVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(CartoonVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orthogonalColor(self, set_orthogonalColor_ = [1, 1, 1, 1]):
        super(CartoonVolumeStyle, self).set_orthogonalColor(set_orthogonalColor_)
        if type(set_orthogonalColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_orthogonalColor_ < 0:
                raise InvalidFieldValueException()
        if set_orthogonalColor_ > 1:
                raise InvalidFieldValueException()
        self.set_orthogonalColor_ = set_orthogonalColor_

    def get_orthogonalColor(self):
        if type(self.orthogonalColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.orthogonalColor_

    def set_parallelColor(self, set_parallelColor_ = [0, 0, 0, 1]):
        super(CartoonVolumeStyle, self).set_parallelColor(set_parallelColor_)
        if type(set_parallelColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_parallelColor_ < 0:
                raise InvalidFieldValueException()
        if set_parallelColor_ > 1:
                raise InvalidFieldValueException()
        self.set_parallelColor_ = set_parallelColor_

    def get_parallelColor(self):
        if type(self.parallelColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.parallelColor_

    def set_surfaceNormals(self, set_surfaceNormals_ = None):
        super(CartoonVolumeStyle, self).set_surfaceNormals(set_surfaceNormals_)
        if type(set_surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_surfaceNormals_ = set_surfaceNormals_

    def get_surfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def set_DEF(self, set_DEF_):
        super(CartoonVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CartoonVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CartoonVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Circle2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Circle2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Circle2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Circle2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Circle2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ClipPlane(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(ClipPlane, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(ClipPlane, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_plane(self, set_plane_ = [0, 1, 0, 0]):
        super(ClipPlane, self).set_plane(set_plane_)
        if type(set_plane_) is not SFVec4f:
            raise InvalidFieldTypeException()
        if set_plane_ < -1:
                raise InvalidFieldValueException()
        if set_plane_ > 1:
                raise InvalidFieldValueException()
        self.set_plane_ = set_plane_

    def get_plane(self):
        if type(self.plane_) is not SFVec4f:
            raise InvalidFieldTypeException()
        return self.plane_

    def set_DEF(self, set_DEF_):
        super(ClipPlane, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ClipPlane, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ClipPlane, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollidableOffset(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(collidable_) is not SFNode:
            raise InvalidFieldTypeException()
        self.collidable_ = kwargs.pop("collidable", None)
        return

    def set_enabled(self, set_enabled_ = True):
        super(CollidableOffset, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(CollidableOffset, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(CollidableOffset, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(CollidableOffset, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(CollidableOffset, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CollidableOffset, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CollidableOffset, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollidableShape(X3DNBodyCollidableNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(shape_) is not SFNode:
            raise InvalidFieldTypeException()
        self.shape_ = kwargs.pop("shape", None)
        return

    def set_enabled(self, set_enabled_ = True):
        super(CollidableShape, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(CollidableShape, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(CollidableShape, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(CollidableShape, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(CollidableShape, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CollidableShape, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CollidableShape, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Collision(X3DGroupingNode, X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(proxy_) is not SFNode:
            raise InvalidFieldTypeException()
        self.proxy_ = kwargs.pop("proxy", None)
        return

    def add_children(self, add_children_):
        super(Collision, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Collision, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def get_collideTime(self):
        if type(self.collideTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.collideTime_

    def set_enabled(self, set_enabled_ = True):
        super(Collision, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(Collision, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Collision, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(Collision, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Collision, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Collision, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionCollection(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_appliedParameters(self, set_appliedParameters_ = "BOUNCE"):
        super(CollisionCollection, self).set_appliedParameters(set_appliedParameters_)
        if type(set_appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        if '"BOUNCE"' == set_appliedParameters_:
            pass
        elif '"USER_FRICTION"' == set_appliedParameters_:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == set_appliedParameters_:
            pass
        elif '"ERROR_REDUCTION"' == set_appliedParameters_:
            pass
        elif '"CONSTANT_FORCE"' == set_appliedParameters_:
            pass
        elif '"SPEED-1"' == set_appliedParameters_:
            pass
        elif '"SPEED-2"' == set_appliedParameters_:
            pass
        elif '"SLIP-1"' == set_appliedParameters_:
            pass
        elif '"SLIP-2"' == set_appliedParameters_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_appliedParameters_ = set_appliedParameters_

    def get_appliedParameters(self):
        if type(self.appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        return self.appliedParameters_

    def set_bounce(self, set_bounce_ = 0):
        super(CollisionCollection, self).set_bounce(set_bounce_)
        if type(set_bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_bounce_ < 0:
                raise InvalidFieldValueException()
        if set_bounce_ > 1:
                raise InvalidFieldValueException()
        self.set_bounce_ = set_bounce_

    def get_bounce(self):
        if type(self.bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.bounce_

    def set_collidables(self, set_collidables_):
        super(CollisionCollection, self).set_collidables(set_collidables_)
        if type(set_collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_collidables_ = set_collidables_

    def get_collidables(self):
        if type(self.collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.collidables_

    def set_enabled(self, set_enabled_ = True):
        super(CollisionCollection, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_frictionCoefficients(self, set_frictionCoefficients_ = [0, 0]):
        super(CollisionCollection, self).set_frictionCoefficients(set_frictionCoefficients_)
        if type(set_frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if set_frictionCoefficients_ < 0:
                raise InvalidFieldValueException()
        self.set_frictionCoefficients_ = set_frictionCoefficients_

    def get_frictionCoefficients(self):
        if type(self.frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.frictionCoefficients_

    def set_metadata(self, set_metadata_ = None):
        super(CollisionCollection, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minBounceSpeed(self, set_minBounceSpeed_ = 0.1):
        super(CollisionCollection, self).set_minBounceSpeed(set_minBounceSpeed_)
        if type(set_minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_minBounceSpeed_ < 0:
                raise InvalidFieldValueException()
        self.set_minBounceSpeed_ = set_minBounceSpeed_

    def get_minBounceSpeed(self):
        if type(self.minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBounceSpeed_

    def set_slipFactors(self, set_slipFactors_ = [0, 0]):
        super(CollisionCollection, self).set_slipFactors(set_slipFactors_)
        if type(set_slipFactors_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_slipFactors_ = set_slipFactors_

    def get_slipFactors(self):
        if type(self.slipFactors_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.slipFactors_

    def set_softnessConstantForceMix(self, set_softnessConstantForceMix_ = 0.0001):
        super(CollisionCollection, self).set_softnessConstantForceMix(set_softnessConstantForceMix_)
        if type(set_softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_softnessConstantForceMix_ < 0:
                raise InvalidFieldValueException()
        if set_softnessConstantForceMix_ > 1:
                raise InvalidFieldValueException()
        self.set_softnessConstantForceMix_ = set_softnessConstantForceMix_

    def get_softnessConstantForceMix(self):
        if type(self.softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessConstantForceMix_

    def set_softnessErrorCorrection(self, set_softnessErrorCorrection_ = 0.8):
        super(CollisionCollection, self).set_softnessErrorCorrection(set_softnessErrorCorrection_)
        if type(set_softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_softnessErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if set_softnessErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.set_softnessErrorCorrection_ = set_softnessErrorCorrection_

    def get_softnessErrorCorrection(self):
        if type(self.softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessErrorCorrection_

    def set_surfaceSpeed(self, set_surfaceSpeed_ = [0, 0]):
        super(CollisionCollection, self).set_surfaceSpeed(set_surfaceSpeed_)
        if type(set_surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_surfaceSpeed_ = set_surfaceSpeed_

    def get_surfaceSpeed(self):
        if type(self.surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.surfaceSpeed_

    def set_DEF(self, set_DEF_):
        super(CollisionCollection, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CollisionCollection, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CollisionCollection, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionSensor(X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_collider(self, set_collider_ = None):
        super(CollisionSensor, self).set_collider(set_collider_)
        if type(set_collider_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_collider_ = set_collider_

    def get_collider(self):
        if type(self.collider_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.collider_


    def get_contacts(self):
        if type(self.contacts_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.contacts_

    def set_enabled(self, set_enabled_ = True):
        super(CollisionSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_intersections(self):
        if type(self.intersections_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.intersections_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(CollisionSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(CollisionSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CollisionSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CollisionSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CollisionSpace(X3DNBodyCollisionSpaceNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_collidables(self, set_collidables_):
        super(CollisionSpace, self).set_collidables(set_collidables_)
        if type(set_collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_collidables_ = set_collidables_

    def get_collidables(self):
        if type(self.collidables_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.collidables_

    def set_enabled(self, set_enabled_ = True):
        super(CollisionSpace, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(CollisionSpace, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_useGeometry(self, set_useGeometry_ = False):
        super(CollisionSpace, self).set_useGeometry(set_useGeometry_)
        if type(set_useGeometry_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_useGeometry_ = set_useGeometry_

    def get_useGeometry(self):
        if type(self.useGeometry_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useGeometry_

    def set_DEF(self, set_DEF_):
        super(CollisionSpace, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CollisionSpace, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CollisionSpace, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Color(X3DColorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_color(self, set_color_):
        super(Color, self).set_color(set_color_)
        if type(set_color_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_metadata(self, set_metadata_ = None):
        super(Color, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Color, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Color, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Color, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialDestination_ < 0:
                raise InvalidFieldValueException()
        if initialDestination_ > 1:
                raise InvalidFieldValueException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if type(initialValue_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialValue_ < 0:
                raise InvalidFieldValueException()
        if initialValue_ > 1:
                raise InvalidFieldValueException()
        self.initialValue_ = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(ColorChaser, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(ColorChaser, self).set_destination(set_destination_)
        if type(set_destination_) is not SFColor:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(ColorChaser, self).set_value(set_value_)
        if type(set_value_) is not SFColor:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ColorChaser, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ColorChaser, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ColorChaser, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialDestination_ < 0:
                raise InvalidFieldValueException()
        if initialDestination_ > 1:
                raise InvalidFieldValueException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0.8, 0.8, 0.8])
        if type(initialValue_) is not SFColor:
            raise InvalidFieldTypeException()
        if initialValue_ < 0:
                raise InvalidFieldValueException()
        if initialValue_ > 1:
                raise InvalidFieldValueException()
        self.initialValue_ = kwargs.pop("initialValue", [0.8, 0.8, 0.8])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(ColorDamper, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(ColorDamper, self).set_destination(set_destination_)
        if type(set_destination_) is not SFColor:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(ColorDamper, self).set_value(set_value_)
        if type(set_value_) is not SFColor:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(ColorDamper, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(ColorDamper, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ColorDamper, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ColorDamper, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ColorDamper, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(ColorInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(ColorInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_keyValue_ < 0:
                raise InvalidFieldValueException()
        if set_keyValue_ > 1:
                raise InvalidFieldValueException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(ColorInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(ColorInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ColorInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ColorInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ColorInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ColorRGBA(X3DColorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_color(self, set_color_):
        super(ColorRGBA, self).set_color(set_color_)
        if type(set_color_) is not MFColorRGBA:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not MFColorRGBA:
            raise InvalidFieldTypeException()
        return self.color_

    def set_metadata(self, set_metadata_ = None):
        super(ColorRGBA, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(ColorRGBA, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ColorRGBA, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ColorRGBA, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedCubeMapTexture(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_back(self, set_back_ = None):
        super(ComposedCubeMapTexture, self).set_back(set_back_)
        if type(set_back_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_back_ = set_back_

    def get_back(self):
        if type(self.back_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.back_

    def set_bottom(self, set_bottom_ = None):
        super(ComposedCubeMapTexture, self).set_bottom(set_bottom_)
        if type(set_bottom_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_bottom_ = set_bottom_

    def get_bottom(self):
        if type(self.bottom_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.bottom_

    def set_front(self, set_front_ = None):
        super(ComposedCubeMapTexture, self).set_front(set_front_)
        if type(set_front_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_front_ = set_front_

    def get_front(self):
        if type(self.front_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.front_

    def set_left(self, set_left_ = None):
        super(ComposedCubeMapTexture, self).set_left(set_left_)
        if type(set_left_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_left_ = set_left_

    def get_left(self):
        if type(self.left_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.left_

    def set_metadata(self, set_metadata_ = None):
        super(ComposedCubeMapTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_right(self, set_right_ = None):
        super(ComposedCubeMapTexture, self).set_right(set_right_)
        if type(set_right_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_right_ = set_right_

    def get_right(self):
        if type(self.right_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.right_

    def set_top(self, set_top_ = None):
        super(ComposedCubeMapTexture, self).set_top(set_top_)
        if type(set_top_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_top_ = set_top_

    def get_top(self):
        if type(self.top_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.top_

    def set_DEF(self, set_DEF_):
        super(ComposedCubeMapTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ComposedCubeMapTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ComposedCubeMapTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedShader(X3DShaderNode, X3DProgrammableShaderObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def set_activate(self, set_activate_):
        super(ComposedShader, self).set_activate(set_activate_)
        if type(set_activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_activate_ = set_activate_

    def get_isSelected(self):
        if type(self.isSelected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isSelected_


    def get_isValid(self):
        if type(self.isValid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isValid_

    def set_metadata(self, set_metadata_ = None):
        super(ComposedShader, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_parts(self, set_parts_):
        super(ComposedShader, self).set_parts(set_parts_)
        if type(set_parts_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_parts_ = set_parts_

    def get_parts(self):
        if type(self.parts_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.parts_

    def set_DEF(self, set_DEF_):
        super(ComposedShader, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ComposedShader, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ComposedShader, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedTexture3D(X3DTexture3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ComposedTexture3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_texture(self, set_texture_):
        super(ComposedTexture3D, self).set_texture(set_texture_)
        if type(set_texture_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_texture_ = set_texture_

    def get_texture(self):
        if type(self.texture_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def set_DEF(self, set_DEF_):
        super(ComposedTexture3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ComposedTexture3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ComposedTexture3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ComposedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(ComposedVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(ComposedVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_renderStyle(self, set_renderStyle_):
        super(ComposedVolumeStyle, self).set_renderStyle(set_renderStyle_)
        if type(set_renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_renderStyle_ = set_renderStyle_

    def get_renderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def set_DEF(self, set_DEF_):
        super(ComposedVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ComposedVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ComposedVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Cone(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.bottom_ = kwargs.pop("bottom", True)
        if type(bottomRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if bottomRadius_ <= 0:
                raise InvalidFieldValueException()
        self.bottomRadius_ = kwargs.pop("bottomRadius", 1)
        if type(height_) is not SFFloat:
            raise InvalidFieldTypeException()
        if height_ <= 0:
                raise InvalidFieldValueException()
        self.height_ = kwargs.pop("height", 2)
        if type(side_) is not SFBool:
            raise InvalidFieldTypeException()
        self.side_ = kwargs.pop("side", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Cone, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Cone, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Cone, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Cone, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ConeEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_angle(self, set_angle_ = 0.7854):
        super(ConeEmitter, self).set_angle(set_angle_)
        if type(set_angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_angle_ < 0:
                raise InvalidFieldValueException()
        if set_angle_ > 3.1416:
                raise InvalidFieldValueException()
        self.set_angle_ = set_angle_

    def get_angle(self):
        if type(self.angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angle_

    def set_direction(self, set_direction_ = [0, 1, 0]):
        super(ConeEmitter, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_direction_ < -1:
                raise InvalidFieldValueException()
        if set_direction_ > 1:
                raise InvalidFieldValueException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_mass(self, set_mass_ = 0):
        super(ConeEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(ConeEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_position(self, set_position_ = [0, 0, 0]):
        super(ConeEmitter, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_speed(self, set_speed_ = 0):
        super(ConeEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(ConeEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(ConeEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ConeEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ConeEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Contact(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_appliedParameters(self, set_appliedParameters_ = "BOUNCE"):
        super(Contact, self).set_appliedParameters(set_appliedParameters_)
        if type(set_appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        if '"BOUNCE"' == set_appliedParameters_:
            pass
        elif '"USER_FRICTION"' == set_appliedParameters_:
            pass
        elif '"FRICTION_COEFFICIENT-2"' == set_appliedParameters_:
            pass
        elif '"ERROR_REDUCTION"' == set_appliedParameters_:
            pass
        elif '"CONSTANT_FORCE"' == set_appliedParameters_:
            pass
        elif '"SPEED-1"' == set_appliedParameters_:
            pass
        elif '"SPEED-2"' == set_appliedParameters_:
            pass
        elif '"SLIP-1"' == set_appliedParameters_:
            pass
        elif '"SLIP-2"' == set_appliedParameters_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_appliedParameters_ = set_appliedParameters_

    def get_appliedParameters(self):
        if type(self.appliedParameters_) is not MFString:
            raise InvalidFieldTypeException()
        return self.appliedParameters_

    def set_body1(self, set_body1_ = None):
        super(Contact, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def set_body2(self, set_body2_ = None):
        super(Contact, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def set_bounce(self, set_bounce_ = 0):
        super(Contact, self).set_bounce(set_bounce_)
        if type(set_bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_bounce_ < 0:
                raise InvalidFieldValueException()
        if set_bounce_ > 1:
                raise InvalidFieldValueException()
        self.set_bounce_ = set_bounce_

    def get_bounce(self):
        if type(self.bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.bounce_

    def set_contactNormal(self, set_contactNormal_ = [0, 1, 0]):
        super(Contact, self).set_contactNormal(set_contactNormal_)
        if type(set_contactNormal_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_contactNormal_ = set_contactNormal_

    def get_contactNormal(self):
        if type(self.contactNormal_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.contactNormal_

    def set_depth(self, set_depth_ = 0):
        super(Contact, self).set_depth(set_depth_)
        if type(set_depth_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_depth_ = set_depth_

    def get_depth(self):
        if type(self.depth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.depth_

    def set_frictionCoefficients(self, set_frictionCoefficients_ = [0, 0]):
        super(Contact, self).set_frictionCoefficients(set_frictionCoefficients_)
        if type(set_frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if set_frictionCoefficients_ < 0:
                raise InvalidFieldValueException()
        self.set_frictionCoefficients_ = set_frictionCoefficients_

    def get_frictionCoefficients(self):
        if type(self.frictionCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.frictionCoefficients_

    def set_frictionDirection(self, set_frictionDirection_ = [0, 1, 0]):
        super(Contact, self).set_frictionDirection(set_frictionDirection_)
        if type(set_frictionDirection_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_frictionDirection_ = set_frictionDirection_

    def get_frictionDirection(self):
        if type(self.frictionDirection_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.frictionDirection_

    def set_geometry1(self, set_geometry1_ = None):
        super(Contact, self).set_geometry1(set_geometry1_)
        if type(set_geometry1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry1_ = set_geometry1_

    def get_geometry1(self):
        if type(self.geometry1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry1_

    def set_geometry2(self, set_geometry2_ = None):
        super(Contact, self).set_geometry2(set_geometry2_)
        if type(set_geometry2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry2_ = set_geometry2_

    def get_geometry2(self):
        if type(self.geometry2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry2_

    def set_metadata(self, set_metadata_ = None):
        super(Contact, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minBounceSpeed(self, set_minBounceSpeed_ = 0):
        super(Contact, self).set_minBounceSpeed(set_minBounceSpeed_)
        if type(set_minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_minBounceSpeed_ < 0:
                raise InvalidFieldValueException()
        self.set_minBounceSpeed_ = set_minBounceSpeed_

    def get_minBounceSpeed(self):
        if type(self.minBounceSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBounceSpeed_

    def set_position(self, set_position_ = [0, 0, 0]):
        super(Contact, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_slipCoefficients(self, set_slipCoefficients_ = [0, 0]):
        super(Contact, self).set_slipCoefficients(set_slipCoefficients_)
        if type(set_slipCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_slipCoefficients_ = set_slipCoefficients_

    def get_slipCoefficients(self):
        if type(self.slipCoefficients_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.slipCoefficients_

    def set_softnessConstantForceMix(self, set_softnessConstantForceMix_ = 0.0001):
        super(Contact, self).set_softnessConstantForceMix(set_softnessConstantForceMix_)
        if type(set_softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_softnessConstantForceMix_ < 0:
                raise InvalidFieldValueException()
        if set_softnessConstantForceMix_ > 1:
                raise InvalidFieldValueException()
        self.set_softnessConstantForceMix_ = set_softnessConstantForceMix_

    def get_softnessConstantForceMix(self):
        if type(self.softnessConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessConstantForceMix_

    def set_softnessErrorCorrection(self, set_softnessErrorCorrection_ = 0.8):
        super(Contact, self).set_softnessErrorCorrection(set_softnessErrorCorrection_)
        if type(set_softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_softnessErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if set_softnessErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.set_softnessErrorCorrection_ = set_softnessErrorCorrection_

    def get_softnessErrorCorrection(self):
        if type(self.softnessErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.softnessErrorCorrection_

    def set_surfaceSpeed(self, set_surfaceSpeed_ = [0, 0]):
        super(Contact, self).set_surfaceSpeed(set_surfaceSpeed_)
        if type(set_surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_surfaceSpeed_ = set_surfaceSpeed_

    def get_surfaceSpeed(self):
        if type(self.surfaceSpeed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.surfaceSpeed_

    def set_DEF(self, set_DEF_):
        super(Contact, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Contact, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Contact, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Contour2D(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def add_children(self, add_children_):
        super(Contour2D, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Contour2D, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(Contour2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Contour2D, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(Contour2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Contour2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Contour2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ContourPolyline2D(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_controlPoint(self, set_controlPoint_):
        super(ContourPolyline2D, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(ContourPolyline2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(ContourPolyline2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ContourPolyline2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ContourPolyline2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Coordinate(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(Coordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(Coordinate, self).set_point(set_point_)
        if type(set_point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(Coordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Coordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Coordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(CoordinateChaser, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(CoordinateChaser, self).set_destination(set_destination_)
        if type(set_destination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(CoordinateChaser, self).set_value(set_value_)
        if type(set_value_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(CoordinateChaser, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CoordinateChaser, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CoordinateChaser, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(CoordinateDamper, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(CoordinateDamper, self).set_destination(set_destination_)
        if type(set_destination_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(CoordinateDamper, self).set_value(set_value_)
        if type(set_value_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(CoordinateDamper, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(CoordinateDamper, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(CoordinateDamper, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CoordinateDamper, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CoordinateDamper, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateDouble(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(CoordinateDouble, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(CoordinateDouble, self).set_point(set_point_)
        if type(set_point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(CoordinateDouble, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CoordinateDouble, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CoordinateDouble, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(CoordinateInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(CoordinateInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(CoordinateInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(CoordinateInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(CoordinateInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CoordinateInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CoordinateInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CoordinateInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(CoordinateInterpolator2D, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(CoordinateInterpolator2D, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(CoordinateInterpolator2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(CoordinateInterpolator2D, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(CoordinateInterpolator2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CoordinateInterpolator2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CoordinateInterpolator2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Cylinder(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.bottom_ = kwargs.pop("bottom", True)
        if type(height_) is not SFFloat:
            raise InvalidFieldTypeException()
        if height_ <= 0:
                raise InvalidFieldValueException()
        self.height_ = kwargs.pop("height", 2)
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(side_) is not SFBool:
            raise InvalidFieldTypeException()
        self.side_ = kwargs.pop("side", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Cylinder, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_top(self, set_top_ = True):
        super(Cylinder, self).set_top(set_top_)
        if type(set_top_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_top_ = set_top_

    def get_top(self):
        if type(self.top_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.top_

    def set_DEF(self, set_DEF_):
        super(Cylinder, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Cylinder, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Cylinder, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class CylinderSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_autoOffset(self, set_autoOffset_ = True):
        super(CylinderSensor, self).set_autoOffset(set_autoOffset_)
        if type(set_autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoOffset_ = set_autoOffset_

    def get_autoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def set_axisRotation(self, set_axisRotation_ = [0, 1, 0, 0]):
        super(CylinderSensor, self).set_axisRotation(set_axisRotation_)
        if type(set_axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_axisRotation_ = set_axisRotation_

    def get_axisRotation(self):
        if type(self.axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.axisRotation_

    def set_description(self, set_description_):
        super(CylinderSensor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_diskAngle(self, set_diskAngle_ = 0.26179167):
        super(CylinderSensor, self).set_diskAngle(set_diskAngle_)
        if type(set_diskAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_diskAngle_ < 0:
                raise InvalidFieldValueException()
        if set_diskAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.set_diskAngle_ = set_diskAngle_

    def get_diskAngle(self):
        if type(self.diskAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.diskAngle_

    def set_enabled(self, set_enabled_ = True):
        super(CylinderSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_maxAngle(self, set_maxAngle_ = -1):
        super(CylinderSensor, self).set_maxAngle(set_maxAngle_)
        if type(set_maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_maxAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if set_maxAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.set_maxAngle_ = set_maxAngle_

    def get_maxAngle(self):
        if type(self.maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle_

    def set_metadata(self, set_metadata_ = None):
        super(CylinderSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minAngle(self, set_minAngle_ = 0):
        super(CylinderSensor, self).set_minAngle(set_minAngle_)
        if type(set_minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_minAngle_ <= -6.2832:
                raise InvalidFieldValueException()
        if set_minAngle_ >= 6.2832:
                raise InvalidFieldValueException()
        self.set_minAngle_ = set_minAngle_

    def get_minAngle(self):
        if type(self.minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle_

    def set_offset(self, set_offset_ = 0):
        super(CylinderSensor, self).set_offset(set_offset_)
        if type(set_offset_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_offset_ = set_offset_

    def get_offset(self):
        if type(self.offset_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.offset_


    def get_rotation_changed(self):
        if type(self.rotation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_changed_


    def get_trackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def set_DEF(self, set_DEF_):
        super(CylinderSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(CylinderSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(CylinderSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DirectionalLight(X3DLightNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0):
        super(DirectionalLight, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(DirectionalLight, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_direction(self, set_direction_ = [0, 0, -1]):
        super(DirectionalLight, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_global(self, set_global_ = False):
        super(DirectionalLight, self).set_global(set_global_)
        if type(set_global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_global_ = set_global_

    def get_global(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def set_intensity(self, set_intensity_ = 1):
        super(DirectionalLight, self).set_intensity(set_intensity_)
        if type(set_intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensity_ < 0:
                raise InvalidFieldValueException()
        if set_intensity_ > 1:
                raise InvalidFieldValueException()
        self.set_intensity_ = set_intensity_

    def get_intensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def set_metadata(self, set_metadata_ = None):
        super(DirectionalLight, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_on(self, set_on_ = True):
        super(DirectionalLight, self).set_on(set_on_)
        if type(set_on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_on_ = set_on_

    def get_on(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def set_DEF(self, set_DEF_):
        super(DirectionalLight, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(DirectionalLight, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(DirectionalLight, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DISEntityManager(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_addedEntities(self):
        if type(self.addedEntities_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.addedEntities_

    def set_address(self, set_address_ = "localhost"):
        super(DISEntityManager, self).set_address(set_address_)
        if type(set_address_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_address_ = set_address_

    def get_address(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def set_applicationID(self, set_applicationID_ = 0):
        super(DISEntityManager, self).set_applicationID(set_applicationID_)
        if type(set_applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_applicationID_ = set_applicationID_

    def get_applicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def set_mapping(self, set_mapping_):
        super(DISEntityManager, self).set_mapping(set_mapping_)
        if type(set_mapping_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_mapping_ = set_mapping_

    def get_mapping(self):
        if type(self.mapping_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.mapping_

    def set_metadata(self, set_metadata_ = None):
        super(DISEntityManager, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_port(self, set_port_ = 0):
        super(DISEntityManager, self).set_port(set_port_)
        if type(set_port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_port_ = set_port_

    def get_port(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_


    def get_removedEntities(self):
        if type(self.removedEntities_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.removedEntities_

    def set_siteID(self, set_siteID_ = 0):
        super(DISEntityManager, self).set_siteID(set_siteID_)
        if type(set_siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_siteID_ = set_siteID_

    def get_siteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_

    def set_DEF(self, set_DEF_):
        super(DISEntityManager, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(DISEntityManager, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(DISEntityManager, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DISEntityTypeMapping(X3DInfoNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(category_) is not SFInt32:
            raise InvalidFieldTypeException()
        if category_ < 0:
                raise InvalidFieldValueException()
        if category_ > 255:
                raise InvalidFieldValueException()
        self.category_ = kwargs.pop("category", 0)
        if type(country_) is not SFInt32:
            raise InvalidFieldTypeException()
        if country_ < 0:
                raise InvalidFieldValueException()
        if country_ > 65535:
                raise InvalidFieldValueException()
        self.country_ = kwargs.pop("country", 0)
        if type(domain_) is not SFInt32:
            raise InvalidFieldTypeException()
        if domain_ < 0:
                raise InvalidFieldValueException()
        if domain_ > 255:
                raise InvalidFieldValueException()
        self.domain_ = kwargs.pop("domain", 0)
        if type(extra_) is not SFInt32:
            raise InvalidFieldTypeException()
        if extra_ < 0:
                raise InvalidFieldValueException()
        if extra_ > 255:
                raise InvalidFieldValueException()
        self.extra_ = kwargs.pop("extra", 0)
        if type(kind_) is not SFInt32:
            raise InvalidFieldTypeException()
        if kind_ < 0:
                raise InvalidFieldValueException()
        if kind_ > 255:
                raise InvalidFieldValueException()
        self.kind_ = kwargs.pop("kind", 0)
        if type(specific_) is not SFInt32:
            raise InvalidFieldTypeException()
        if specific_ < 0:
                raise InvalidFieldValueException()
        if specific_ > 255:
                raise InvalidFieldValueException()
        self.specific_ = kwargs.pop("specific", 0)
        if type(subcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        if subcategory_ < 0:
                raise InvalidFieldValueException()
        if subcategory_ > 255:
                raise InvalidFieldValueException()
        self.subcategory_ = kwargs.pop("subcategory", 0)
        return

    def set_metadata(self, set_metadata_ = None):
        super(DISEntityTypeMapping, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(DISEntityTypeMapping, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(DISEntityTypeMapping, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(DISEntityTypeMapping, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(DISEntityTypeMapping, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Disk2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(innerRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if innerRadius_ < 0:
                raise InvalidFieldValueException()
        self.innerRadius_ = kwargs.pop("innerRadius", 0)
        if type(outerRadius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if outerRadius_ <= 0:
                raise InvalidFieldValueException()
        self.outerRadius_ = kwargs.pop("outerRadius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Disk2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Disk2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Disk2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Disk2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class DoubleAxisHingeJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_anchorPoint(self, set_anchorPoint_ = [0, 0, 0]):
        super(DoubleAxisHingeJoint, self).set_anchorPoint(set_anchorPoint_)
        if type(set_anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_anchorPoint_ = set_anchorPoint_

    def get_anchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def set_axis1(self, set_axis1_ = [0, 0, 0]):
        super(DoubleAxisHingeJoint, self).set_axis1(set_axis1_)
        if type(set_axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis1_ = set_axis1_

    def get_axis1(self):
        if type(self.axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis1_

    def set_axis2(self, set_axis2_ = [0, 0, 0]):
        super(DoubleAxisHingeJoint, self).set_axis2(set_axis2_)
        if type(set_axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis2_ = set_axis2_

    def get_axis2(self):
        if type(self.axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis2_

    def set_body1(self, set_body1_ = None):
        super(DoubleAxisHingeJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def get_body1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_


    def get_body1Axis(self):
        if type(self.body1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1Axis_

    def set_body2(self, set_body2_ = None):
        super(DoubleAxisHingeJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def get_body2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_


    def get_body2Axis(self):
        if type(self.body2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2Axis_

    def set_desiredAngularVelocity1(self, set_desiredAngularVelocity1_ = 0):
        super(DoubleAxisHingeJoint, self).set_desiredAngularVelocity1(set_desiredAngularVelocity1_)
        if type(set_desiredAngularVelocity1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_desiredAngularVelocity1_ = set_desiredAngularVelocity1_

    def get_desiredAngularVelocity1(self):
        if type(self.desiredAngularVelocity1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.desiredAngularVelocity1_

    def set_desiredAngularVelocity2(self, set_desiredAngularVelocity2_ = 0):
        super(DoubleAxisHingeJoint, self).set_desiredAngularVelocity2(set_desiredAngularVelocity2_)
        if type(set_desiredAngularVelocity2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_desiredAngularVelocity2_ = set_desiredAngularVelocity2_

    def get_desiredAngularVelocity2(self):
        if type(self.desiredAngularVelocity2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.desiredAngularVelocity2_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(DoubleAxisHingeJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_


    def get_hinge1Angle(self):
        if type(self.hinge1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge1Angle_


    def get_hinge1AngleRate(self):
        if type(self.hinge1AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge1AngleRate_


    def get_hinge2Angle(self):
        if type(self.hinge2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge2Angle_


    def get_hinge2AngleRate(self):
        if type(self.hinge2AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.hinge2AngleRate_

    def set_maxAngle1(self, set_maxAngle1_ = 3.141592653):
        super(DoubleAxisHingeJoint, self).set_maxAngle1(set_maxAngle1_)
        if type(set_maxAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxAngle1_ = set_maxAngle1_

    def get_maxAngle1(self):
        if type(self.maxAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle1_

    def set_maxTorque1(self, set_maxTorque1_ = 0):
        super(DoubleAxisHingeJoint, self).set_maxTorque1(set_maxTorque1_)
        if type(set_maxTorque1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxTorque1_ = set_maxTorque1_

    def get_maxTorque1(self):
        if type(self.maxTorque1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxTorque1_

    def set_maxTorque2(self, set_maxTorque2_ = 0):
        super(DoubleAxisHingeJoint, self).set_maxTorque2(set_maxTorque2_)
        if type(set_maxTorque2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxTorque2_ = set_maxTorque2_

    def get_maxTorque2(self):
        if type(self.maxTorque2_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxTorque2_

    def set_metadata(self, set_metadata_ = None):
        super(DoubleAxisHingeJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minAngle1(self, set_minAngle1_ = -3.141592653):
        super(DoubleAxisHingeJoint, self).set_minAngle1(set_minAngle1_)
        if type(set_minAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_minAngle1_ = set_minAngle1_

    def get_minAngle1(self):
        if type(self.minAngle1_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle1_

    def set_stop1Bounce(self, set_stop1Bounce_ = 0):
        super(DoubleAxisHingeJoint, self).set_stop1Bounce(set_stop1Bounce_)
        if type(set_stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop1Bounce_ = set_stop1Bounce_

    def get_stop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def set_stop1ConstantForceMix(self, set_stop1ConstantForceMix_ = 0.001):
        super(DoubleAxisHingeJoint, self).set_stop1ConstantForceMix(set_stop1ConstantForceMix_)
        if type(set_stop1ConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop1ConstantForceMix_ = set_stop1ConstantForceMix_

    def get_stop1ConstantForceMix(self):
        if type(self.stop1ConstantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ConstantForceMix_

    def set_stop1ErrorCorrection(self, set_stop1ErrorCorrection_ = 0.8):
        super(DoubleAxisHingeJoint, self).set_stop1ErrorCorrection(set_stop1ErrorCorrection_)
        if type(set_stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop1ErrorCorrection_ = set_stop1ErrorCorrection_

    def get_stop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def set_suspensionErrorCorrection(self, set_suspensionErrorCorrection_ = 0.8):
        super(DoubleAxisHingeJoint, self).set_suspensionErrorCorrection(set_suspensionErrorCorrection_)
        if type(set_suspensionErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_suspensionErrorCorrection_ = set_suspensionErrorCorrection_

    def get_suspensionErrorCorrection(self):
        if type(self.suspensionErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.suspensionErrorCorrection_

    def set_suspensionForce(self, set_suspensionForce_ = 0):
        super(DoubleAxisHingeJoint, self).set_suspensionForce(set_suspensionForce_)
        if type(set_suspensionForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_suspensionForce_ = set_suspensionForce_

    def get_suspensionForce(self):
        if type(self.suspensionForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.suspensionForce_

    def set_DEF(self, set_DEF_):
        super(DoubleAxisHingeJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(DoubleAxisHingeJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(DoubleAxisHingeJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EaseInEaseOut(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_easeInEaseOut(self, set_easeInEaseOut_):
        super(EaseInEaseOut, self).set_easeInEaseOut(set_easeInEaseOut_)
        if type(set_easeInEaseOut_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_easeInEaseOut_ = set_easeInEaseOut_

    def get_easeInEaseOut(self):
        if type(self.easeInEaseOut_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.easeInEaseOut_

    def set_key(self, set_key_):
        super(EaseInEaseOut, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_metadata(self, set_metadata_ = None):
        super(EaseInEaseOut, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_modifiedFraction_changed(self):
        if type(self.modifiedFraction_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.modifiedFraction_changed_

    def set_fraction(self, set_fraction_):
        super(EaseInEaseOut, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_
    def set_DEF(self, set_DEF_):
        super(EaseInEaseOut, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(EaseInEaseOut, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(EaseInEaseOut, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EdgeEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_edgeColor(self, set_edgeColor_ = [0, 0, 0, 1]):
        super(EdgeEnhancementVolumeStyle, self).set_edgeColor(set_edgeColor_)
        if type(set_edgeColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_edgeColor_ < 0:
                raise InvalidFieldValueException()
        if set_edgeColor_ > 1:
                raise InvalidFieldValueException()
        self.set_edgeColor_ = set_edgeColor_

    def get_edgeColor(self):
        if type(self.edgeColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.edgeColor_

    def set_enabled(self, set_enabled_ = True):
        super(EdgeEnhancementVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_gradientThreshold(self, set_gradientThreshold_ = 0.4):
        super(EdgeEnhancementVolumeStyle, self).set_gradientThreshold(set_gradientThreshold_)
        if type(set_gradientThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_gradientThreshold_ < 0:
                raise InvalidFieldValueException()
        if set_gradientThreshold_ > 3.1416:
                raise InvalidFieldValueException()
        self.set_gradientThreshold_ = set_gradientThreshold_

    def get_gradientThreshold(self):
        if type(self.gradientThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.gradientThreshold_

    def set_metadata(self, set_metadata_ = None):
        super(EdgeEnhancementVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_surfaceNormals(self, set_surfaceNormals_ = None):
        super(EdgeEnhancementVolumeStyle, self).set_surfaceNormals(set_surfaceNormals_)
        if type(set_surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_surfaceNormals_ = set_surfaceNormals_

    def get_surfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def set_DEF(self, set_DEF_):
        super(EdgeEnhancementVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(EdgeEnhancementVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(EdgeEnhancementVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ElevationGrid(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.height_ = kwargs.pop("height", [0, 0, 0, 0])
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(xDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if xDimension_ < 0:
                raise InvalidFieldValueException()
        self.xDimension_ = kwargs.pop("xDimension", 2)
        if type(xSpacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if xSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.xSpacing_ = kwargs.pop("xSpacing", 1.0)
        if type(zDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if zDimension_ < 0:
                raise InvalidFieldValueException()
        self.zDimension_ = kwargs.pop("zDimension", 2)
        if type(zSpacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if zSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.zSpacing_ = kwargs.pop("zSpacing", 1.0)
        return

    def set_attrib(self, set_attrib_):
        super(ElevationGrid, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(ElevationGrid, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(ElevationGrid, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(ElevationGrid, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(ElevationGrid, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_height(self, set_height_):
        super(ElevationGrid, self).set_height(set_height_)
        if type(set_height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_height_ = set_height_
    def set_texCoord(self, set_texCoord_ = None):
        super(ElevationGrid, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(ElevationGrid, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ElevationGrid, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ElevationGrid, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class EspduTransform(X3DGroupingNode, X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def add_children(self, add_children_):
        super(EspduTransform, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_address(self, set_address_ = "localhost"):
        super(EspduTransform, self).set_address(set_address_)
        if type(set_address_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_address_ = set_address_

    def get_address(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def set_applicationID(self, set_applicationID_ = 0):
        super(EspduTransform, self).set_applicationID(set_applicationID_)
        if type(set_applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_applicationID_ = set_applicationID_

    def get_applicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def set_articulationParameterArray(self, set_articulationParameterArray_):
        super(EspduTransform, self).set_articulationParameterArray(set_articulationParameterArray_)
        if type(set_articulationParameterArray_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterArray_ = set_articulationParameterArray_

    def get_articulationParameterArray(self):
        if type(self.articulationParameterArray_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterArray_

    def set_articulationParameterChangeIndicatorArray(self, set_articulationParameterChangeIndicatorArray_):
        super(EspduTransform, self).set_articulationParameterChangeIndicatorArray(set_articulationParameterChangeIndicatorArray_)
        if type(set_articulationParameterChangeIndicatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_articulationParameterChangeIndicatorArray_ = set_articulationParameterChangeIndicatorArray_

    def get_articulationParameterChangeIndicatorArray(self):
        if type(self.articulationParameterChangeIndicatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterChangeIndicatorArray_

    def set_articulationParameterCount(self, set_articulationParameterCount_ = 0):
        super(EspduTransform, self).set_articulationParameterCount(set_articulationParameterCount_)
        if type(set_articulationParameterCount_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_articulationParameterCount_ = set_articulationParameterCount_

    def get_articulationParameterCount(self):
        if type(self.articulationParameterCount_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterCount_

    def set_articulationParameterDesignatorArray(self, set_articulationParameterDesignatorArray_):
        super(EspduTransform, self).set_articulationParameterDesignatorArray(set_articulationParameterDesignatorArray_)
        if type(set_articulationParameterDesignatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_articulationParameterDesignatorArray_ = set_articulationParameterDesignatorArray_

    def get_articulationParameterDesignatorArray(self):
        if type(self.articulationParameterDesignatorArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterDesignatorArray_

    def set_articulationParameterIdPartAttachedToArray(self, set_articulationParameterIdPartAttachedToArray_):
        super(EspduTransform, self).set_articulationParameterIdPartAttachedToArray(set_articulationParameterIdPartAttachedToArray_)
        if type(set_articulationParameterIdPartAttachedToArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_articulationParameterIdPartAttachedToArray_ = set_articulationParameterIdPartAttachedToArray_

    def get_articulationParameterIdPartAttachedToArray(self):
        if type(self.articulationParameterIdPartAttachedToArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterIdPartAttachedToArray_

    def set_articulationParameterTypeArray(self, set_articulationParameterTypeArray_):
        super(EspduTransform, self).set_articulationParameterTypeArray(set_articulationParameterTypeArray_)
        if type(set_articulationParameterTypeArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_articulationParameterTypeArray_ = set_articulationParameterTypeArray_

    def get_articulationParameterTypeArray(self):
        if type(self.articulationParameterTypeArray_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.articulationParameterTypeArray_


    def get_articulationParameterValue0_changed(self):
        if type(self.articulationParameterValue0_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue0_changed_


    def get_articulationParameterValue1_changed(self):
        if type(self.articulationParameterValue1_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue1_changed_


    def get_articulationParameterValue2_changed(self):
        if type(self.articulationParameterValue2_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue2_changed_


    def get_articulationParameterValue3_changed(self):
        if type(self.articulationParameterValue3_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue3_changed_


    def get_articulationParameterValue4_changed(self):
        if type(self.articulationParameterValue4_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue4_changed_


    def get_articulationParameterValue5_changed(self):
        if type(self.articulationParameterValue5_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue5_changed_


    def get_articulationParameterValue6_changed(self):
        if type(self.articulationParameterValue6_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue6_changed_


    def get_articulationParameterValue7_changed(self):
        if type(self.articulationParameterValue7_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.articulationParameterValue7_changed_

    def set_center(self, set_center_ = [0, 0, 0]):
        super(EspduTransform, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(EspduTransform, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def get_collideTime(self):
        if type(self.collideTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.collideTime_

    def set_collisionType(self, set_collisionType_ = 0):
        super(EspduTransform, self).set_collisionType(set_collisionType_)
        if type(set_collisionType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_collisionType_ = set_collisionType_

    def get_collisionType(self):
        if type(self.collisionType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.collisionType_

    def set_deadReckoning(self, set_deadReckoning_ = 0):
        super(EspduTransform, self).set_deadReckoning(set_deadReckoning_)
        if type(set_deadReckoning_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_deadReckoning_ = set_deadReckoning_

    def get_deadReckoning(self):
        if type(self.deadReckoning_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.deadReckoning_


    def get_detonateTime(self):
        if type(self.detonateTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.detonateTime_

    def set_detonationLocation(self, set_detonationLocation_ = [0, 0, 0]):
        super(EspduTransform, self).set_detonationLocation(set_detonationLocation_)
        if type(set_detonationLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_detonationLocation_ = set_detonationLocation_

    def get_detonationLocation(self):
        if type(self.detonationLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.detonationLocation_

    def set_detonationRelativeLocation(self, set_detonationRelativeLocation_ = [0, 0, 0]):
        super(EspduTransform, self).set_detonationRelativeLocation(set_detonationRelativeLocation_)
        if type(set_detonationRelativeLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_detonationRelativeLocation_ = set_detonationRelativeLocation_

    def get_detonationRelativeLocation(self):
        if type(self.detonationRelativeLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.detonationRelativeLocation_

    def set_detonationResult(self, set_detonationResult_ = 0):
        super(EspduTransform, self).set_detonationResult(set_detonationResult_)
        if type(set_detonationResult_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_detonationResult_ = set_detonationResult_

    def get_detonationResult(self):
        if type(self.detonationResult_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.detonationResult_

    def set_enabled(self, set_enabled_ = True):
        super(EspduTransform, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_entityCategory(self, set_entityCategory_ = 0):
        super(EspduTransform, self).set_entityCategory(set_entityCategory_)
        if type(set_entityCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityCategory_ = set_entityCategory_

    def get_entityCategory(self):
        if type(self.entityCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityCategory_

    def set_entityCountry(self, set_entityCountry_ = 0):
        super(EspduTransform, self).set_entityCountry(set_entityCountry_)
        if type(set_entityCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityCountry_ = set_entityCountry_

    def get_entityCountry(self):
        if type(self.entityCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityCountry_

    def set_entityDomain(self, set_entityDomain_ = 0):
        super(EspduTransform, self).set_entityDomain(set_entityDomain_)
        if type(set_entityDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityDomain_ = set_entityDomain_

    def get_entityDomain(self):
        if type(self.entityDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityDomain_

    def set_entityExtra(self, set_entityExtra_ = 0):
        super(EspduTransform, self).set_entityExtra(set_entityExtra_)
        if type(set_entityExtra_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityExtra_ = set_entityExtra_

    def get_entityExtra(self):
        if type(self.entityExtra_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityExtra_

    def set_entityID(self, set_entityID_ = 0):
        super(EspduTransform, self).set_entityID(set_entityID_)
        if type(set_entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityID_ = set_entityID_

    def get_entityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def set_entityKind(self, set_entityKind_ = 0):
        super(EspduTransform, self).set_entityKind(set_entityKind_)
        if type(set_entityKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityKind_ = set_entityKind_

    def get_entityKind(self):
        if type(self.entityKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityKind_

    def set_entitySpecific(self, set_entitySpecific_ = 0):
        super(EspduTransform, self).set_entitySpecific(set_entitySpecific_)
        if type(set_entitySpecific_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entitySpecific_ = set_entitySpecific_

    def get_entitySpecific(self):
        if type(self.entitySpecific_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entitySpecific_

    def set_entitySubcategory(self, set_entitySubcategory_ = 0):
        super(EspduTransform, self).set_entitySubcategory(set_entitySubcategory_)
        if type(set_entitySubcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entitySubcategory_ = set_entitySubcategory_

    def get_entitySubcategory(self):
        if type(self.entitySubcategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entitySubcategory_

    def set_eventApplicationID(self, set_eventApplicationID_ = 0):
        super(EspduTransform, self).set_eventApplicationID(set_eventApplicationID_)
        if type(set_eventApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_eventApplicationID_ = set_eventApplicationID_

    def get_eventApplicationID(self):
        if type(self.eventApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventApplicationID_

    def set_eventEntityID(self, set_eventEntityID_ = 0):
        super(EspduTransform, self).set_eventEntityID(set_eventEntityID_)
        if type(set_eventEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_eventEntityID_ = set_eventEntityID_

    def get_eventEntityID(self):
        if type(self.eventEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventEntityID_

    def set_eventNumber(self, set_eventNumber_ = 0):
        super(EspduTransform, self).set_eventNumber(set_eventNumber_)
        if type(set_eventNumber_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_eventNumber_ = set_eventNumber_

    def get_eventNumber(self):
        if type(self.eventNumber_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventNumber_

    def set_eventSiteID(self, set_eventSiteID_ = 0):
        super(EspduTransform, self).set_eventSiteID(set_eventSiteID_)
        if type(set_eventSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_eventSiteID_ = set_eventSiteID_

    def get_eventSiteID(self):
        if type(self.eventSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.eventSiteID_

    def set_fired1(self, set_fired1_ = False):
        super(EspduTransform, self).set_fired1(set_fired1_)
        if type(set_fired1_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_fired1_ = set_fired1_

    def get_fired1(self):
        if type(self.fired1_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fired1_

    def set_fired2(self, set_fired2_ = False):
        super(EspduTransform, self).set_fired2(set_fired2_)
        if type(set_fired2_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_fired2_ = set_fired2_

    def get_fired2(self):
        if type(self.fired2_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fired2_


    def get_firedTime(self):
        if type(self.firedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.firedTime_

    def set_fireMissionIndex(self, set_fireMissionIndex_ = 0):
        super(EspduTransform, self).set_fireMissionIndex(set_fireMissionIndex_)
        if type(set_fireMissionIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_fireMissionIndex_ = set_fireMissionIndex_

    def get_fireMissionIndex(self):
        if type(self.fireMissionIndex_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.fireMissionIndex_

    def set_firingRange(self, set_firingRange_ = 0):
        super(EspduTransform, self).set_firingRange(set_firingRange_)
        if type(set_firingRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_firingRange_ = set_firingRange_

    def get_firingRange(self):
        if type(self.firingRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.firingRange_

    def set_firingRate(self, set_firingRate_ = 0):
        super(EspduTransform, self).set_firingRate(set_firingRate_)
        if type(set_firingRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_firingRate_ = set_firingRate_

    def get_firingRate(self):
        if type(self.firingRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.firingRate_

    def set_forceID(self, set_forceID_ = 0):
        super(EspduTransform, self).set_forceID(set_forceID_)
        if type(set_forceID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_forceID_ = set_forceID_

    def get_forceID(self):
        if type(self.forceID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.forceID_

    def set_fuse(self, set_fuse_ = 0):
        super(EspduTransform, self).set_fuse(set_fuse_)
        if type(set_fuse_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_fuse_ = set_fuse_

    def get_fuse(self):
        if type(self.fuse_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.fuse_

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(EspduTransform, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isCollided(self):
        if type(self.isCollided_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isCollided_


    def get_isDetonated(self):
        if type(self.isDetonated_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isDetonated_


    def get_isNetworkReader(self):
        if type(self.isNetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkReader_


    def get_isNetworkWriter(self):
        if type(self.isNetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkWriter_


    def get_isRtpHeaderHeard(self):
        if type(self.isRtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isRtpHeaderHeard_


    def get_isStandAlone(self):
        if type(self.isStandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isStandAlone_

    def set_linearAcceleration(self, set_linearAcceleration_ = [0, 0, 0]):
        super(EspduTransform, self).set_linearAcceleration(set_linearAcceleration_)
        if type(set_linearAcceleration_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_linearAcceleration_ = set_linearAcceleration_

    def get_linearAcceleration(self):
        if type(self.linearAcceleration_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearAcceleration_

    def set_linearVelocity(self, set_linearVelocity_ = [0, 0, 0]):
        super(EspduTransform, self).set_linearVelocity(set_linearVelocity_)
        if type(set_linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_linearVelocity_ = set_linearVelocity_

    def get_linearVelocity(self):
        if type(self.linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearVelocity_

    def set_marking(self, set_marking_):
        super(EspduTransform, self).set_marking(set_marking_)
        if type(set_marking_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_marking_ = set_marking_

    def get_marking(self):
        if type(self.marking_) is not SFString:
            raise InvalidFieldTypeException()
        return self.marking_

    def set_metadata(self, set_metadata_ = None):
        super(EspduTransform, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_multicastRelayHost(self, set_multicastRelayHost_):
        super(EspduTransform, self).set_multicastRelayHost(set_multicastRelayHost_)
        if type(set_multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_multicastRelayHost_ = set_multicastRelayHost_

    def get_multicastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def set_multicastRelayPort(self, set_multicastRelayPort_ = 0):
        super(EspduTransform, self).set_multicastRelayPort(set_multicastRelayPort_)
        if type(set_multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_multicastRelayPort_ = set_multicastRelayPort_

    def get_multicastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def set_munitionApplicationID(self, set_munitionApplicationID_ = 0):
        super(EspduTransform, self).set_munitionApplicationID(set_munitionApplicationID_)
        if type(set_munitionApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_munitionApplicationID_ = set_munitionApplicationID_

    def get_munitionApplicationID(self):
        if type(self.munitionApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionApplicationID_

    def set_munitionEndPoint(self, set_munitionEndPoint_ = [0, 0, 0]):
        super(EspduTransform, self).set_munitionEndPoint(set_munitionEndPoint_)
        if type(set_munitionEndPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_munitionEndPoint_ = set_munitionEndPoint_

    def get_munitionEndPoint(self):
        if type(self.munitionEndPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.munitionEndPoint_

    def set_munitionEntityID(self, set_munitionEntityID_ = 0):
        super(EspduTransform, self).set_munitionEntityID(set_munitionEntityID_)
        if type(set_munitionEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_munitionEntityID_ = set_munitionEntityID_

    def get_munitionEntityID(self):
        if type(self.munitionEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionEntityID_

    def set_munitionQuantity(self, set_munitionQuantity_ = 0):
        super(EspduTransform, self).set_munitionQuantity(set_munitionQuantity_)
        if type(set_munitionQuantity_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_munitionQuantity_ = set_munitionQuantity_

    def get_munitionQuantity(self):
        if type(self.munitionQuantity_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionQuantity_

    def set_munitionSiteID(self, set_munitionSiteID_ = 0):
        super(EspduTransform, self).set_munitionSiteID(set_munitionSiteID_)
        if type(set_munitionSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_munitionSiteID_ = set_munitionSiteID_

    def get_munitionSiteID(self):
        if type(self.munitionSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.munitionSiteID_

    def set_munitionStartPoint(self, set_munitionStartPoint_ = [0, 0, 0]):
        super(EspduTransform, self).set_munitionStartPoint(set_munitionStartPoint_)
        if type(set_munitionStartPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_munitionStartPoint_ = set_munitionStartPoint_

    def get_munitionStartPoint(self):
        if type(self.munitionStartPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.munitionStartPoint_

    def set_networkMode(self, set_networkMode_ = "standAlone"):
        super(EspduTransform, self).set_networkMode(set_networkMode_)
        if type(set_networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == set_networkMode_:
            pass
        elif 'networkReader' == set_networkMode_:
            pass
        elif 'networkWriter' == set_networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_networkMode_ = set_networkMode_

    def get_networkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def set_port(self, set_port_ = 0):
        super(EspduTransform, self).set_port(set_port_)
        if type(set_port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_port_ = set_port_

    def get_port(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def set_readInterval(self, set_readInterval_ = 0.1):
        super(EspduTransform, self).set_readInterval(set_readInterval_)
        if type(set_readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_readInterval_ = set_readInterval_

    def get_readInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def remove_children(self, remove_children_):
        super(EspduTransform, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(EspduTransform, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(EspduTransform, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(EspduTransform, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_articulationParameterValue0(self, set_articulationParameterValue0_):
        super(EspduTransform, self).set_articulationParameterValue0(set_articulationParameterValue0_)
        if type(set_articulationParameterValue0_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue0_ = set_articulationParameterValue0_
    def set_articulationParameterValue1(self, set_articulationParameterValue1_):
        super(EspduTransform, self).set_articulationParameterValue1(set_articulationParameterValue1_)
        if type(set_articulationParameterValue1_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue1_ = set_articulationParameterValue1_
    def set_articulationParameterValue2(self, set_articulationParameterValue2_):
        super(EspduTransform, self).set_articulationParameterValue2(set_articulationParameterValue2_)
        if type(set_articulationParameterValue2_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue2_ = set_articulationParameterValue2_
    def set_articulationParameterValue3(self, set_articulationParameterValue3_):
        super(EspduTransform, self).set_articulationParameterValue3(set_articulationParameterValue3_)
        if type(set_articulationParameterValue3_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue3_ = set_articulationParameterValue3_
    def set_articulationParameterValue4(self, set_articulationParameterValue4_):
        super(EspduTransform, self).set_articulationParameterValue4(set_articulationParameterValue4_)
        if type(set_articulationParameterValue4_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue4_ = set_articulationParameterValue4_
    def set_articulationParameterValue5(self, set_articulationParameterValue5_):
        super(EspduTransform, self).set_articulationParameterValue5(set_articulationParameterValue5_)
        if type(set_articulationParameterValue5_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue5_ = set_articulationParameterValue5_
    def set_articulationParameterValue6(self, set_articulationParameterValue6_):
        super(EspduTransform, self).set_articulationParameterValue6(set_articulationParameterValue6_)
        if type(set_articulationParameterValue6_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue6_ = set_articulationParameterValue6_
    def set_articulationParameterValue7(self, set_articulationParameterValue7_):
        super(EspduTransform, self).set_articulationParameterValue7(set_articulationParameterValue7_)
        if type(set_articulationParameterValue7_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_articulationParameterValue7_ = set_articulationParameterValue7_
    def set_siteID(self, set_siteID_ = 0):
        super(EspduTransform, self).set_siteID(set_siteID_)
        if type(set_siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_siteID_ = set_siteID_

    def get_siteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def get_timestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(EspduTransform, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_warhead(self, set_warhead_ = 0):
        super(EspduTransform, self).set_warhead(set_warhead_)
        if type(set_warhead_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_warhead_ = set_warhead_

    def get_warhead(self):
        if type(self.warhead_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.warhead_

    def set_writeInterval(self, set_writeInterval_ = 1.0):
        super(EspduTransform, self).set_writeInterval(set_writeInterval_)
        if type(set_writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_writeInterval_ = set_writeInterval_

    def get_writeInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def set_DEF(self, set_DEF_):
        super(EspduTransform, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(EspduTransform, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(EspduTransform, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ExplosionEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_mass(self, set_mass_ = 0):
        super(ExplosionEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(ExplosionEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_position(self, set_position_ = [0, 0, 0]):
        super(ExplosionEmitter, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_speed(self, set_speed_ = 0):
        super(ExplosionEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(ExplosionEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(ExplosionEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ExplosionEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ExplosionEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Extrusion(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(beginCap_) is not SFBool:
            raise InvalidFieldTypeException()
        self.beginCap_ = kwargs.pop("beginCap", True)
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(convex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.convex_ = kwargs.pop("convex", True)
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0.0)
        if type(crossSection_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.crossSection_ = kwargs.pop("crossSection", [1, 1, 1, -1, -1, -1, -1, 1, 1, 1])
        if type(endCap_) is not SFBool:
            raise InvalidFieldTypeException()
        self.endCap_ = kwargs.pop("endCap", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(spine_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.spine_ = kwargs.pop("spine", [0, 0, 0, 0, 1, 0])
        return

    def set_metadata(self, set_metadata_ = None):
        super(Extrusion, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(Extrusion, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_scale(self, set_scale_ = [1, 1]):
        super(Extrusion, self).set_scale(set_scale_)
        if type(set_scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_crossSection(self, set_crossSection_):
        super(Extrusion, self).set_crossSection(set_crossSection_)
        if type(set_crossSection_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_crossSection_ = set_crossSection_
    def set_orientation(self, set_orientation_):
        super(Extrusion, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_
    def set_scale(self, set_scale_):
        super(Extrusion, self).set_scale(set_scale_)
        if type(set_scale_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_
    def set_spine(self, set_spine_):
        super(Extrusion, self).set_spine(set_spine_)
        if type(set_spine_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_spine_ = set_spine_
    def set_DEF(self, set_DEF_):
        super(Extrusion, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Extrusion, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Extrusion, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FillProperties(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_filled(self, set_filled_ = True):
        super(FillProperties, self).set_filled(set_filled_)
        if type(set_filled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_filled_ = set_filled_

    def get_filled(self):
        if type(self.filled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.filled_

    def set_hatchColor(self, set_hatchColor_ = [1, 1, 1]):
        super(FillProperties, self).set_hatchColor(set_hatchColor_)
        if type(set_hatchColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_hatchColor_ < 0:
                raise InvalidFieldValueException()
        if set_hatchColor_ > 1:
                raise InvalidFieldValueException()
        self.set_hatchColor_ = set_hatchColor_

    def get_hatchColor(self):
        if type(self.hatchColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.hatchColor_

    def set_hatched(self, set_hatched_ = True):
        super(FillProperties, self).set_hatched(set_hatched_)
        if type(set_hatched_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_hatched_ = set_hatched_

    def get_hatched(self):
        if type(self.hatched_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.hatched_

    def set_hatchStyle(self, set_hatchStyle_ = 1):
        super(FillProperties, self).set_hatchStyle(set_hatchStyle_)
        if type(set_hatchStyle_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_hatchStyle_ = set_hatchStyle_

    def get_hatchStyle(self):
        if type(self.hatchStyle_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.hatchStyle_

    def set_metadata(self, set_metadata_ = None):
        super(FillProperties, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(FillProperties, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(FillProperties, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(FillProperties, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FloatVertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(numComponents_) is not SFInt32:
            raise InvalidFieldTypeException()
        if numComponents_ < 1:
                raise InvalidFieldValueException()
        if numComponents_ > 4:
                raise InvalidFieldValueException()
        self.numComponents_ = kwargs.pop("numComponents", 4)
        return

    def set_metadata(self, set_metadata_ = None):
        super(FloatVertexAttribute, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(FloatVertexAttribute, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_value(self, set_value_):
        super(FloatVertexAttribute, self).set_value(set_value_)
        if type(set_value_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(FloatVertexAttribute, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(FloatVertexAttribute, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(FloatVertexAttribute, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Fog(X3DBindableNode, X3DFogObject):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(Fog, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_fogType(self, set_fogType_ = "LINEAR"):
        super(Fog, self).set_fogType(set_fogType_)
        if type(set_fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == set_fogType_:
            pass
        elif 'EXPONENTIAL' == set_fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_fogType_ = set_fogType_

    def get_fogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_metadata(self, set_metadata_ = None):
        super(Fog, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, set_bind_):
        super(Fog, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_visibilityRange(self, set_visibilityRange_ = 0):
        super(Fog, self).set_visibilityRange(set_visibilityRange_)
        if type(set_visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.set_visibilityRange_ = set_visibilityRange_

    def get_visibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    def set_DEF(self, set_DEF_):
        super(Fog, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Fog, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Fog, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FogCoordinate(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_depth(self, set_depth_):
        super(FogCoordinate, self).set_depth(set_depth_)
        if type(set_depth_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_depth_ < 0:
                raise InvalidFieldValueException()
        if set_depth_ > 1:
                raise InvalidFieldValueException()
        self.set_depth_ = set_depth_

    def get_depth(self):
        if type(self.depth_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.depth_

    def set_metadata(self, set_metadata_ = None):
        super(FogCoordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(FogCoordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(FogCoordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(FogCoordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class FontStyle(X3DFontStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(family_) is not MFString:
            raise InvalidFieldTypeException()
        if '"SANS"' == family_:
            pass
        elif '"SERIF"' == family_:
            pass
        elif '"TYPEWRITER"' == family_:
            pass
        else:
            raise InvalidFieldValueException()
        self.family_ = kwargs.pop("family", "SERIF")
        if type(horizontal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.horizontal_ = kwargs.pop("horizontal", True)
        if type(justify_) is not MFString:
            raise InvalidFieldTypeException()
        if '"MIDDLE"' == justify_:
            pass
        elif '"MIDDLE" "BEGIN"' == justify_:
            pass
        elif '"MIDDLE" "END"' == justify_:
            pass
        elif '"MIDDLE" "FIRST"' == justify_:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify_:
            pass
        elif '"BEGIN"' == justify_:
            pass
        elif '"BEGIN" "BEGIN"' == justify_:
            pass
        elif '"BEGIN" "END"' == justify_:
            pass
        elif '"BEGIN" "FIRST"' == justify_:
            pass
        elif '"BEGIN" "MIDDLE"' == justify_:
            pass
        elif '"END"' == justify_:
            pass
        elif '"END" "BEGIN"' == justify_:
            pass
        elif '"END" "END"' == justify_:
            pass
        elif '"END" "FIRST"' == justify_:
            pass
        elif '"END" "MIDDLE"' == justify_:
            pass
        elif '"FIRST"' == justify_:
            pass
        elif '"FIRST" "BEGIN"' == justify_:
            pass
        elif '"FIRST" "END"' == justify_:
            pass
        elif '"FIRST" "FIRST"' == justify_:
            pass
        elif '"FIRST" "MIDDLE"' == justify_:
            pass
        else:
            raise InvalidFieldValueException()
        self.justify_ = kwargs.pop("justify", "BEGIN")
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        self.language_ = kwargs.pop("language")
        if type(leftToRight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.leftToRight_ = kwargs.pop("leftToRight", True)
        if type(size_) is not SFFloat:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", 1.0)
        if type(spacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if spacing_ < 0:
                raise InvalidFieldValueException()
        self.spacing_ = kwargs.pop("spacing", 1.0)
        if type(style_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PLAIN' == style_:
            pass
        elif 'BOLD' == style_:
            pass
        elif 'ITALIC' == style_:
            pass
        elif 'BOLDITALIC' == style_:
            pass
        else:
            raise InvalidFieldValueException()
        self.style_ = kwargs.pop("style", "PLAIN")
        if type(topToBottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.topToBottom_ = kwargs.pop("topToBottom", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(FontStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(FontStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(FontStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(FontStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ForcePhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(ForcePhysicsModel, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_force(self, set_force_ = [0, -9.8, 0]):
        super(ForcePhysicsModel, self).set_force(set_force_)
        if type(set_force_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_force_ = set_force_

    def get_force(self):
        if type(self.force_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.force_

    def set_metadata(self, set_metadata_ = None):
        super(ForcePhysicsModel, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(ForcePhysicsModel, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ForcePhysicsModel, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ForcePhysicsModel, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeneratedCubeMapTexture(X3DEnvironmentTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFInt32:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", 128)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(GeneratedCubeMapTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_update(self, set_update_ = "NONE"):
        super(GeneratedCubeMapTexture, self).set_update(set_update_)
        if type(set_update_) is not SFString:
            raise InvalidFieldTypeException()
        if 'NONE' == set_update_:
            pass
        elif 'NEXT_FRAME_ONLY' == set_update_:
            pass
        elif 'ALWAYS' == set_update_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_update_ = set_update_

    def get_update(self):
        if type(self.update_) is not SFString:
            raise InvalidFieldTypeException()
        return self.update_

    def set_DEF(self, set_DEF_):
        super(GeneratedCubeMapTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeneratedCubeMapTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeneratedCubeMapTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoCoordinate(X3DCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def set_metadata(self, set_metadata_ = None):
        super(GeoCoordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(GeoCoordinate, self).set_point(set_point_)
        if type(set_point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(GeoCoordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoCoordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoCoordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoElevationGrid(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(creaseAngle_) is not SFDouble:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(geoGridOrigin_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.geoGridOrigin_ = kwargs.pop("geoGridOrigin", [0, 0, 0])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(height_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.height_ = kwargs.pop("height", [0, 0, 0, 0])
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(xDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if xDimension_ < 0:
                raise InvalidFieldValueException()
        self.xDimension_ = kwargs.pop("xDimension", 2)
        if type(xSpacing_) is not SFDouble:
            raise InvalidFieldTypeException()
        if xSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.xSpacing_ = kwargs.pop("xSpacing", 1.0)
        if type(zDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if zDimension_ < 0:
                raise InvalidFieldValueException()
        self.zDimension_ = kwargs.pop("zDimension", 2)
        if type(zSpacing_) is not SFDouble:
            raise InvalidFieldTypeException()
        if zSpacing_ <= 0:
                raise InvalidFieldValueException()
        self.zSpacing_ = kwargs.pop("zSpacing", 1.0)
        return

    def set_color(self, set_color_ = None):
        super(GeoElevationGrid, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_metadata(self, set_metadata_ = None):
        super(GeoElevationGrid, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(GeoElevationGrid, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_height(self, set_height_):
        super(GeoElevationGrid, self).set_height(set_height_)
        if type(set_height_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_height_ = set_height_
    def set_texCoord(self, set_texCoord_ = None):
        super(GeoElevationGrid, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_yScale(self, set_yScale_ = 1):
        super(GeoElevationGrid, self).set_yScale(set_yScale_)
        if type(set_yScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_yScale_ < 0:
                raise InvalidFieldValueException()
        self.set_yScale_ = set_yScale_

    def get_yScale(self):
        if type(self.yScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.yScale_

    def set_DEF(self, set_DEF_):
        super(GeoElevationGrid, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoElevationGrid, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoElevationGrid, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoLocation(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def add_children(self, add_children_):
        super(GeoLocation, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(GeoLocation, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(GeoLocation, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def set_metadata(self, set_metadata_ = None):
        super(GeoLocation, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(GeoLocation, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(GeoLocation, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoLocation, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoLocation, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoLOD(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.center_ = kwargs.pop("center", [0, 0, 0])
        if type(child1Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child1Url_ = kwargs.pop("child1Url")
        if type(child2Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child2Url_ = kwargs.pop("child2Url")
        if type(child3Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child3Url_ = kwargs.pop("child3Url")
        if type(child4Url_) is not MFString:
            raise InvalidFieldTypeException()
        self.child4Url_ = kwargs.pop("child4Url")
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(range_) is not SFFloat:
            raise InvalidFieldTypeException()
        if range_ < 0:
                raise InvalidFieldValueException()
        self.range_ = kwargs.pop("range", 10)
        if type(rootNode_) is not MFNode:
            raise InvalidFieldTypeException()
        self.rootNode_ = kwargs.pop("rootNode")
        if type(rootUrl_) is not MFString:
            raise InvalidFieldTypeException()
        self.rootUrl_ = kwargs.pop("rootUrl")
        return


    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def get_level_changed(self):
        if type(self.level_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_changed_

    def set_metadata(self, set_metadata_ = None):
        super(GeoLOD, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(GeoLOD, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoLOD, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoLOD, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoMetadata(X3DInfoNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_data(self, set_data_):
        super(GeoMetadata, self).set_data(set_data_)
        if type(set_data_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_data_ = set_data_

    def get_data(self):
        if type(self.data_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.data_

    def set_metadata(self, set_metadata_ = None):
        super(GeoMetadata, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_summary(self, set_summary_):
        super(GeoMetadata, self).set_summary(set_summary_)
        if type(set_summary_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_summary_ = set_summary_

    def get_summary(self):
        if type(self.summary_) is not MFString:
            raise InvalidFieldTypeException()
        return self.summary_

    def set_url(self, set_url_):
        super(GeoMetadata, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(GeoMetadata, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoMetadata, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoMetadata, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoOrigin(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rotateYUp_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rotateYUp_ = kwargs.pop("rotateYUp", False)
        return

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(GeoOrigin, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def set_metadata(self, set_metadata_ = None):
        super(GeoOrigin, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(GeoOrigin, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoOrigin, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoOrigin, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoPositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return


    def get_geovalue_changed(self):
        if type(self.geovalue_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geovalue_changed_

    def set_key(self, set_key_):
        super(GeoPositionInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(GeoPositionInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec3d:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec3d:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(GeoPositionInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(GeoPositionInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(GeoPositionInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoPositionInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoPositionInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoProximitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(GeoProximitySensor, self).set_center(set_center_)
        if type(set_center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.center_


    def get_centerOfRotation_changed(self):
        if type(self.centerOfRotation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_changed_

    def set_enabled(self, set_enabled_ = True):
        super(GeoProximitySensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_enterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def get_exitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_

    def set_geoCenter(self, set_geoCenter_ = [0, 0, 0]):
        super(GeoProximitySensor, self).set_geoCenter(set_geoCenter_)
        if type(set_geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCenter_ = set_geoCenter_

    def get_geoCenter(self):
        if type(self.geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCenter_


    def get_geoCoord_changed(self):
        if type(self.geoCoord_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoord_changed_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(GeoProximitySensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_orientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def get_position_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def set_DEF(self, set_DEF_):
        super(GeoProximitySensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoProximitySensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoProximitySensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoTouchSensor(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def set_description(self, set_description_):
        super(GeoTouchSensor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(GeoTouchSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_hitGeoCoord_changed(self):
        if type(self.hitGeoCoord_changed_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.hitGeoCoord_changed_


    def get_hitNormal_changed(self):
        if type(self.hitNormal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitNormal_changed_


    def get_hitPoint_changed(self):
        if type(self.hitPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitPoint_changed_


    def get_hitTexCoord_changed(self):
        if type(self.hitTexCoord_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.hitTexCoord_changed_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(GeoTouchSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_touchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def set_DEF(self, set_DEF_):
        super(GeoTouchSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoTouchSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoTouchSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoTransform(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        return

    def add_children(self, add_children_):
        super(GeoTransform, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(GeoTransform, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_geoCenter(self, set_geoCenter_ = [0, 0, 0]):
        super(GeoTransform, self).set_geoCenter(set_geoCenter_)
        if type(set_geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCenter_ = set_geoCenter_

    def get_geoCenter(self):
        if type(self.geoCenter_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCenter_

    def set_metadata(self, set_metadata_ = None):
        super(GeoTransform, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(GeoTransform, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(GeoTransform, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(GeoTransform, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_scale_ <= 0:
                raise InvalidFieldValueException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(GeoTransform, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(GeoTransform, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(GeoTransform, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoTransform, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoTransform, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class GeoViewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(geoOrigin_) is not SFNode:
            raise InvalidFieldTypeException()
        self.geoOrigin_ = kwargs.pop("geoOrigin", None)
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(speedFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        if speedFactor_ < 0:
                raise InvalidFieldValueException()
        self.speedFactor_ = kwargs.pop("speedFactor", 1.0)
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_centerOfRotation(self, set_centerOfRotation_ = [0, 0, 0]):
        super(GeoViewpoint, self).set_centerOfRotation(set_centerOfRotation_)
        if type(set_centerOfRotation_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_centerOfRotation_ = set_centerOfRotation_

    def get_centerOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def set_description(self, set_description_):
        super(GeoViewpoint, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_fieldOfView(self, set_fieldOfView_ = 0.7854):
        super(GeoViewpoint, self).set_fieldOfView(set_fieldOfView_)
        if type(set_fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_fieldOfView_ <= 0:
                raise InvalidFieldValueException()
        if set_fieldOfView_ >= 3.1416:
                raise InvalidFieldValueException()
        self.set_fieldOfView_ = set_fieldOfView_

    def get_fieldOfView(self):
        if type(self.fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_jump(self, set_jump_ = True):
        super(GeoViewpoint, self).set_jump(set_jump_)
        if type(set_jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_jump_ = set_jump_

    def get_jump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def set_metadata(self, set_metadata_ = None):
        super(GeoViewpoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(GeoViewpoint, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_position(self, set_position_ = [0, 0, 100000]):
        super(GeoViewpoint, self).set_position(set_position_)
        if type(set_position_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.position_

    def set_retainUserOffsets(self, set_retainUserOffsets_ = False):
        super(GeoViewpoint, self).set_retainUserOffsets(set_retainUserOffsets_)
        if type(set_retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_retainUserOffsets_ = set_retainUserOffsets_

    def get_retainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, set_bind_):
        super(GeoViewpoint, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_DEF(self, set_DEF_):
        super(GeoViewpoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(GeoViewpoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(GeoViewpoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Group(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Group, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Group, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(Group, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Group, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(Group, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Group, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Group, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimDisplacer(X3DGeometricPropertyNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < 0:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        return

    def set_displacements(self, set_displacements_):
        super(HAnimDisplacer, self).set_displacements(set_displacements_)
        if type(set_displacements_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_displacements_ = set_displacements_

    def get_displacements(self):
        if type(self.displacements_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.displacements_

    def set_metadata(self, set_metadata_ = None):
        super(HAnimDisplacer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(HAnimDisplacer, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'sellion' == set_name_:
            pass
        elif 'r_infraorbitale' == set_name_:
            pass
        elif 'l_infraorbitale' == set_name_:
            pass
        elif 'supramenton' == set_name_:
            pass
        elif 'r_tragion' == set_name_:
            pass
        elif 'r_gonion' == set_name_:
            pass
        elif 'l_tragion' == set_name_:
            pass
        elif 'l_gonion' == set_name_:
            pass
        elif 'nuchale' == set_name_:
            pass
        elif 'r_clavicale' == set_name_:
            pass
        elif 'suprasternale' == set_name_:
            pass
        elif 'l_clavicale' == set_name_:
            pass
        elif 'r_thelion' == set_name_:
            pass
        elif 'l_thelion' == set_name_:
            pass
        elif 'substernale' == set_name_:
            pass
        elif 'r_rib10' == set_name_:
            pass
        elif 'r_asis' == set_name_:
            pass
        elif 'l_rib10' == set_name_:
            pass
        elif 'l_asis' == set_name_:
            pass
        elif 'r_iliocristale' == set_name_:
            pass
        elif 'r_trochanterion' == set_name_:
            pass
        elif 'l_iliocristale' == set_name_:
            pass
        elif 'l_trochanterion' == set_name_:
            pass
        elif 'cervicale' == set_name_:
            pass
        elif 'rib10_midspine' == set_name_:
            pass
        elif 'r_psis' == set_name_:
            pass
        elif 'l_psis' == set_name_:
            pass
        elif 'waist_preferred_post' == set_name_:
            pass
        elif 'r_acromion' == set_name_:
            pass
        elif 'r_axilla_ant' == set_name_:
            pass
        elif 'r_radial_styloid' == set_name_:
            pass
        elif 'r_axilla_post' == set_name_:
            pass
        elif 'r_olecranon' == set_name_:
            pass
        elif 'r_humeral_lateral_epicn' == set_name_:
            pass
        elif 'r_humeral_medial_epicn' == set_name_:
            pass
        elif 'r_radiale' == set_name_:
            pass
        elif 'r_metacarpal_pha2' == set_name_:
            pass
        elif 'r_dactylion' == set_name_:
            pass
        elif 'r_ulnar_styloid' == set_name_:
            pass
        elif 'r_metacarpal_pha5' == set_name_:
            pass
        elif 'l_acromion' == set_name_:
            pass
        elif 'l_axilla_ant' == set_name_:
            pass
        elif 'l_radial_styloid' == set_name_:
            pass
        elif 'l_axilla_post' == set_name_:
            pass
        elif 'l_olecranon' == set_name_:
            pass
        elif 'l_humeral_lateral_epicn' == set_name_:
            pass
        elif 'l_humeral_medial_epicn' == set_name_:
            pass
        elif 'l_radiale' == set_name_:
            pass
        elif 'l_metacarpal_pha2' == set_name_:
            pass
        elif 'l_dactylion' == set_name_:
            pass
        elif 'l_ulnar_styloid' == set_name_:
            pass
        elif 'l_metacarpal_pha5' == set_name_:
            pass
        elif 'r_knee_crease' == set_name_:
            pass
        elif 'r_femoral_lateral_epicn' == set_name_:
            pass
        elif 'r_femoral_medial_epicn' == set_name_:
            pass
        elif 'r_metatarsal_pha5' == set_name_:
            pass
        elif 'r_lateral_malleolus' == set_name_:
            pass
        elif 'r_medial_malleolus' == set_name_:
            pass
        elif 'r_sphyrion' == set_name_:
            pass
        elif 'r_metatarsal_pha1' == set_name_:
            pass
        elif 'r_calcaneous_post' == set_name_:
            pass
        elif 'r_digit2' == set_name_:
            pass
        elif 'l_knee_crease' == set_name_:
            pass
        elif 'l_femoral_lateral_epicn' == set_name_:
            pass
        elif 'l_femoral_medial_epicn' == set_name_:
            pass
        elif 'l_metatarsal_pha5' == set_name_:
            pass
        elif 'l_lateral_malleolus' == set_name_:
            pass
        elif 'l_medial_malleolus' == set_name_:
            pass
        elif 'l_sphyrion' == set_name_:
            pass
        elif 'l_metatarsal_pha1' == set_name_:
            pass
        elif 'l_calcaneous_post' == set_name_:
            pass
        elif 'l_digit2' == set_name_:
            pass
        elif 'crotch' == set_name_:
            pass
        elif 'r_neck_base' == set_name_:
            pass
        elif 'l_neck_base' == set_name_:
            pass
        elif 'navel' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_weight(self, set_weight_ = 0.0):
        super(HAnimDisplacer, self).set_weight(set_weight_)
        if type(set_weight_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(HAnimDisplacer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(HAnimDisplacer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(HAnimDisplacer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimHumanoid(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(HAnimHumanoid, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_info(self, set_info_):
        super(HAnimHumanoid, self).set_info(set_info_)
        if type(set_info_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_info_ = set_info_

    def get_info(self):
        if type(self.info_) is not MFString:
            raise InvalidFieldTypeException()
        return self.info_

    def set_joints(self, set_joints_):
        super(HAnimHumanoid, self).set_joints(set_joints_)
        if type(set_joints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_joints_ = set_joints_

    def get_joints(self):
        if type(self.joints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.joints_

    def set_metadata(self, set_metadata_ = None):
        super(HAnimHumanoid, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(HAnimHumanoid, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(HAnimHumanoid, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(HAnimHumanoid, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_scale_ <= 0:
                raise InvalidFieldValueException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimHumanoid, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_segments(self, set_segments_):
        super(HAnimHumanoid, self).set_segments(set_segments_)
        if type(set_segments_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_segments_ = set_segments_

    def get_segments(self):
        if type(self.segments_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.segments_

    def set_sites(self, set_sites_):
        super(HAnimHumanoid, self).set_sites(set_sites_)
        if type(set_sites_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_sites_ = set_sites_

    def get_sites(self):
        if type(self.sites_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.sites_

    def set_skeleton(self, set_skeleton_):
        super(HAnimHumanoid, self).set_skeleton(set_skeleton_)
        if type(set_skeleton_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_skeleton_ = set_skeleton_

    def get_skeleton(self):
        if type(self.skeleton_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skeleton_

    def set_skin(self, set_skin_):
        super(HAnimHumanoid, self).set_skin(set_skin_)
        if type(set_skin_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_skin_ = set_skin_

    def get_skin(self):
        if type(self.skin_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.skin_

    def set_skinCoord(self, set_skinCoord_ = None):
        super(HAnimHumanoid, self).set_skinCoord(set_skinCoord_)
        if type(set_skinCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_skinCoord_ = set_skinCoord_

    def get_skinCoord(self):
        if type(self.skinCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.skinCoord_

    def set_skinNormal(self, set_skinNormal_ = None):
        super(HAnimHumanoid, self).set_skinNormal(set_skinNormal_)
        if type(set_skinNormal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_skinNormal_ = set_skinNormal_

    def get_skinNormal(self):
        if type(self.skinNormal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.skinNormal_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(HAnimHumanoid, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_version(self, set_version_ = "2.2"):
        super(HAnimHumanoid, self).set_version(set_version_)
        if type(set_version_) is not SFString:
            raise InvalidFieldTypeException()
        if '2.0' == set_version_:
            pass
        elif '2.2' == set_version_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_version_ = set_version_

    def get_version(self):
        if type(self.version_) is not SFString:
            raise InvalidFieldTypeException()
        return self.version_

    def set_viewpoints(self, set_viewpoints_):
        super(HAnimHumanoid, self).set_viewpoints(set_viewpoints_)
        if type(set_viewpoints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_viewpoints_ = set_viewpoints_

    def get_viewpoints(self):
        if type(self.viewpoints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.viewpoints_

    def set_DEF(self, set_DEF_):
        super(HAnimHumanoid, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(HAnimHumanoid, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(HAnimHumanoid, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimJoint(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(HAnimJoint, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_center(self, set_center_ = [0, 0, 0]):
        super(HAnimJoint, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(HAnimJoint, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_displacers(self, set_displacers_):
        super(HAnimJoint, self).set_displacers(set_displacers_)
        if type(set_displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_displacers_ = set_displacers_

    def get_displacers(self):
        if type(self.displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.displacers_

    def set_limitOrientation(self, set_limitOrientation_ = [0, 0, 1, 0]):
        super(HAnimJoint, self).set_limitOrientation(set_limitOrientation_)
        if type(set_limitOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_limitOrientation_ = set_limitOrientation_

    def get_limitOrientation(self):
        if type(self.limitOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.limitOrientation_

    def set_llimit(self, set_llimit_):
        super(HAnimJoint, self).set_llimit(set_llimit_)
        if type(set_llimit_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_llimit_ = set_llimit_

    def get_llimit(self):
        if type(self.llimit_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.llimit_

    def set_metadata(self, set_metadata_ = None):
        super(HAnimJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(HAnimJoint, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'HumanoidRoot' == set_name_:
            pass
        elif 'sacroiliac' == set_name_:
            pass
        elif 'l_hip' == set_name_:
            pass
        elif 'l_knee' == set_name_:
            pass
        elif 'l_ankle' == set_name_:
            pass
        elif 'l_subtalar' == set_name_:
            pass
        elif 'l_midtarsal' == set_name_:
            pass
        elif 'l_metatarsal' == set_name_:
            pass
        elif 'r_hip' == set_name_:
            pass
        elif 'r_knee' == set_name_:
            pass
        elif 'r_ankle' == set_name_:
            pass
        elif 'r_subtalar' == set_name_:
            pass
        elif 'r_midtarsal' == set_name_:
            pass
        elif 'r_metatarsal' == set_name_:
            pass
        elif 'vl5' == set_name_:
            pass
        elif 'vl4' == set_name_:
            pass
        elif 'vl3' == set_name_:
            pass
        elif 'vl2' == set_name_:
            pass
        elif 'vl1' == set_name_:
            pass
        elif 'vt12' == set_name_:
            pass
        elif 'vt11' == set_name_:
            pass
        elif 'vt10' == set_name_:
            pass
        elif 'vt9' == set_name_:
            pass
        elif 'vt8' == set_name_:
            pass
        elif 'vt7' == set_name_:
            pass
        elif 'vt6' == set_name_:
            pass
        elif 'vt5' == set_name_:
            pass
        elif 'vt4' == set_name_:
            pass
        elif 'vt3' == set_name_:
            pass
        elif 'vt2' == set_name_:
            pass
        elif 'vt1' == set_name_:
            pass
        elif 'vc7' == set_name_:
            pass
        elif 'vc6' == set_name_:
            pass
        elif 'vc5' == set_name_:
            pass
        elif 'vc4' == set_name_:
            pass
        elif 'vc3' == set_name_:
            pass
        elif 'vc2' == set_name_:
            pass
        elif 'vc1' == set_name_:
            pass
        elif 'skullbase' == set_name_:
            pass
        elif 'l_eyelid_joint' == set_name_:
            pass
        elif 'r_eyelid_joint' == set_name_:
            pass
        elif 'l_eyeball_joint' == set_name_:
            pass
        elif 'r_eyeball_joint' == set_name_:
            pass
        elif 'l_eyebrow_joint' == set_name_:
            pass
        elif 'r_eyebrow_joint' == set_name_:
            pass
        elif 'temporomandibular' == set_name_:
            pass
        elif 'l_sternoclavicular' == set_name_:
            pass
        elif 'l_acromioclavicular' == set_name_:
            pass
        elif 'l_shoulder' == set_name_:
            pass
        elif 'l_elbow' == set_name_:
            pass
        elif 'l_wrist' == set_name_:
            pass
        elif 'l_thumb1' == set_name_:
            pass
        elif 'l_thumb2' == set_name_:
            pass
        elif 'l_thumb3' == set_name_:
            pass
        elif 'l_index0' == set_name_:
            pass
        elif 'l_index1' == set_name_:
            pass
        elif 'l_index2' == set_name_:
            pass
        elif 'l_index3' == set_name_:
            pass
        elif 'l_middle0' == set_name_:
            pass
        elif 'l_middle1' == set_name_:
            pass
        elif 'l_middle2' == set_name_:
            pass
        elif 'l_middle3' == set_name_:
            pass
        elif 'l_ring0' == set_name_:
            pass
        elif 'l_ring1' == set_name_:
            pass
        elif 'l_ring2' == set_name_:
            pass
        elif 'l_ring3' == set_name_:
            pass
        elif 'l_pinky0' == set_name_:
            pass
        elif 'l_pinky1' == set_name_:
            pass
        elif 'l_pinky2' == set_name_:
            pass
        elif 'l_pinky3' == set_name_:
            pass
        elif 'r_sternoclavicular' == set_name_:
            pass
        elif 'r_acromioclavicular' == set_name_:
            pass
        elif 'r_shoulder' == set_name_:
            pass
        elif 'r_elbow' == set_name_:
            pass
        elif 'r_wrist' == set_name_:
            pass
        elif 'r_thumb1' == set_name_:
            pass
        elif 'r_thumb2' == set_name_:
            pass
        elif 'r_thumb3' == set_name_:
            pass
        elif 'r_index0' == set_name_:
            pass
        elif 'r_index1' == set_name_:
            pass
        elif 'r_index2' == set_name_:
            pass
        elif 'r_index3' == set_name_:
            pass
        elif 'r_middle0' == set_name_:
            pass
        elif 'r_middle1' == set_name_:
            pass
        elif 'r_middle2' == set_name_:
            pass
        elif 'r_middle3' == set_name_:
            pass
        elif 'r_ring0' == set_name_:
            pass
        elif 'r_ring1' == set_name_:
            pass
        elif 'r_ring2' == set_name_:
            pass
        elif 'r_ring3' == set_name_:
            pass
        elif 'r_pinky0' == set_name_:
            pass
        elif 'r_pinky1' == set_name_:
            pass
        elif 'r_pinky2' == set_name_:
            pass
        elif 'r_pinky3' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(HAnimJoint, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(HAnimJoint, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(HAnimJoint, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_scale_ <= 0:
                raise InvalidFieldValueException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimJoint, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_skinCoordIndex(self, set_skinCoordIndex_):
        super(HAnimJoint, self).set_skinCoordIndex(set_skinCoordIndex_)
        if type(set_skinCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if set_skinCoordIndex_ < 0:
                raise InvalidFieldValueException()
        self.set_skinCoordIndex_ = set_skinCoordIndex_

    def get_skinCoordIndex(self):
        if type(self.skinCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.skinCoordIndex_

    def set_skinCoordWeight(self, set_skinCoordWeight_):
        super(HAnimJoint, self).set_skinCoordWeight(set_skinCoordWeight_)
        if type(set_skinCoordWeight_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_skinCoordWeight_ = set_skinCoordWeight_

    def get_skinCoordWeight(self):
        if type(self.skinCoordWeight_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skinCoordWeight_

    def set_stiffness(self, set_stiffness_ = [1, 1, 1]):
        super(HAnimJoint, self).set_stiffness(set_stiffness_)
        if type(set_stiffness_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_stiffness_ < 0:
                raise InvalidFieldValueException()
        if set_stiffness_ > 1:
                raise InvalidFieldValueException()
        self.set_stiffness_ = set_stiffness_

    def get_stiffness(self):
        if type(self.stiffness_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.stiffness_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(HAnimJoint, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_ulimit(self, set_ulimit_):
        super(HAnimJoint, self).set_ulimit(set_ulimit_)
        if type(set_ulimit_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_ulimit_ = set_ulimit_

    def get_ulimit(self):
        if type(self.ulimit_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.ulimit_

    def set_DEF(self, set_DEF_):
        super(HAnimJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(HAnimJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(HAnimJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimSegment(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(HAnimSegment, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_centerOfMass(self, set_centerOfMass_ = [0, 0, 0]):
        super(HAnimSegment, self).set_centerOfMass(set_centerOfMass_)
        if type(set_centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_centerOfMass_ = set_centerOfMass_

    def get_centerOfMass(self):
        if type(self.centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfMass_

    def set_children(self, set_children_):
        super(HAnimSegment, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_coord(self, set_coord_ = None):
        super(HAnimSegment, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_displacers(self, set_displacers_):
        super(HAnimSegment, self).set_displacers(set_displacers_)
        if type(set_displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_displacers_ = set_displacers_

    def get_displacers(self):
        if type(self.displacers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.displacers_

    def set_mass(self, set_mass_ = 0):
        super(HAnimSegment, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(HAnimSegment, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_momentsOfInertia(self, set_momentsOfInertia_ = [0, 0, 0, 0, 0, 0, 0, 0, 0]):
        super(HAnimSegment, self).set_momentsOfInertia(set_momentsOfInertia_)
        if type(set_momentsOfInertia_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_momentsOfInertia_ < 0:
                raise InvalidFieldValueException()
        self.set_momentsOfInertia_ = set_momentsOfInertia_

    def get_momentsOfInertia(self):
        if type(self.momentsOfInertia_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.momentsOfInertia_

    def set_name(self, set_name_):
        super(HAnimSegment, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'sacrum' == set_name_:
            pass
        elif 'pelvis' == set_name_:
            pass
        elif 'l_thigh' == set_name_:
            pass
        elif 'l_calf' == set_name_:
            pass
        elif 'l_hindfoot' == set_name_:
            pass
        elif 'l_midproximal' == set_name_:
            pass
        elif 'l_middistal' == set_name_:
            pass
        elif 'l_forefoot' == set_name_:
            pass
        elif 'r_thigh' == set_name_:
            pass
        elif 'r_calf' == set_name_:
            pass
        elif 'r_hindfoot' == set_name_:
            pass
        elif 'r_midproximal' == set_name_:
            pass
        elif 'r_middistal' == set_name_:
            pass
        elif 'r_forefoot' == set_name_:
            pass
        elif 'l5' == set_name_:
            pass
        elif 'l4' == set_name_:
            pass
        elif 'l3' == set_name_:
            pass
        elif 'l2' == set_name_:
            pass
        elif 'l1' == set_name_:
            pass
        elif 't12' == set_name_:
            pass
        elif 't11' == set_name_:
            pass
        elif 't10' == set_name_:
            pass
        elif 't9' == set_name_:
            pass
        elif 't8' == set_name_:
            pass
        elif 't7' == set_name_:
            pass
        elif 't6' == set_name_:
            pass
        elif 't5' == set_name_:
            pass
        elif 't4' == set_name_:
            pass
        elif 't3' == set_name_:
            pass
        elif 't2' == set_name_:
            pass
        elif 't1' == set_name_:
            pass
        elif 'c7' == set_name_:
            pass
        elif 'c6' == set_name_:
            pass
        elif 'c5' == set_name_:
            pass
        elif 'c4' == set_name_:
            pass
        elif 'c3' == set_name_:
            pass
        elif 'c2' == set_name_:
            pass
        elif 'c1' == set_name_:
            pass
        elif 'skull' == set_name_:
            pass
        elif 'l_eyelid' == set_name_:
            pass
        elif 'r_eyelid' == set_name_:
            pass
        elif 'l_eyeball' == set_name_:
            pass
        elif 'r_eyeball' == set_name_:
            pass
        elif 'l_eyebrow' == set_name_:
            pass
        elif 'r_eyebrow' == set_name_:
            pass
        elif 'jaw' == set_name_:
            pass
        elif 'l_clavicle' == set_name_:
            pass
        elif 'l_scapula' == set_name_:
            pass
        elif 'l_upperarm' == set_name_:
            pass
        elif 'l_forearm' == set_name_:
            pass
        elif 'l_hand' == set_name_:
            pass
        elif 'l_thumb_metacarpal' == set_name_:
            pass
        elif 'l_thumb_proximal' == set_name_:
            pass
        elif 'l_thumb_distal' == set_name_:
            pass
        elif 'l_index_metacarpal' == set_name_:
            pass
        elif 'l_index_proximal' == set_name_:
            pass
        elif 'l_index_middle' == set_name_:
            pass
        elif 'l_index_distal' == set_name_:
            pass
        elif 'l_middle_metacarpal' == set_name_:
            pass
        elif 'l_middle_proximal' == set_name_:
            pass
        elif 'l_middle_middle' == set_name_:
            pass
        elif 'l_middle_distal' == set_name_:
            pass
        elif 'l_ring_metacarpal' == set_name_:
            pass
        elif 'l_ring_proximal' == set_name_:
            pass
        elif 'l_ring_middle' == set_name_:
            pass
        elif 'l_ring_distal' == set_name_:
            pass
        elif 'l_pinky_metacarpal' == set_name_:
            pass
        elif 'l_pinky_proximal' == set_name_:
            pass
        elif 'l_pinky_middle' == set_name_:
            pass
        elif 'l_pinky_distal' == set_name_:
            pass
        elif 'r_clavicle' == set_name_:
            pass
        elif 'r_scapula' == set_name_:
            pass
        elif 'r_upperarm' == set_name_:
            pass
        elif 'r_forearm' == set_name_:
            pass
        elif 'r_hand' == set_name_:
            pass
        elif 'r_thumb_metacarpal' == set_name_:
            pass
        elif 'r_thumb_proximal' == set_name_:
            pass
        elif 'r_thumb_distal' == set_name_:
            pass
        elif 'r_index_metacarpal' == set_name_:
            pass
        elif 'r_index_proximal' == set_name_:
            pass
        elif 'r_index_middle' == set_name_:
            pass
        elif 'r_index_distal' == set_name_:
            pass
        elif 'r_middle_metacarpal' == set_name_:
            pass
        elif 'r_middle_proximal' == set_name_:
            pass
        elif 'r_middle_middle' == set_name_:
            pass
        elif 'r_middle_distal' == set_name_:
            pass
        elif 'r_ring_metacarpal' == set_name_:
            pass
        elif 'r_ring_proximal' == set_name_:
            pass
        elif 'r_ring_middle' == set_name_:
            pass
        elif 'r_ring_distal' == set_name_:
            pass
        elif 'r_pinky_metacarpal' == set_name_:
            pass
        elif 'r_pinky_proximal' == set_name_:
            pass
        elif 'r_pinky_middle' == set_name_:
            pass
        elif 'r_pinky_distal' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(HAnimSegment, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(HAnimSegment, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(HAnimSegment, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(HAnimSegment, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class HAnimSite(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(HAnimSite, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_center(self, set_center_ = [0, 0, 0]):
        super(HAnimSite, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(HAnimSite, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(HAnimSite, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(HAnimSite, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'cervicale' == set_name_:
            pass
        elif 'crotch' == set_name_:
            pass
        elif 'l_acromion' == set_name_:
            pass
        elif 'l_asis' == set_name_:
            pass
        elif 'l_axilla_ant' == set_name_:
            pass
        elif 'l_axilla_post' == set_name_:
            pass
        elif 'l_calcaneous_post' == set_name_:
            pass
        elif 'l_clavicale' == set_name_:
            pass
        elif 'l_dactylion' == set_name_:
            pass
        elif 'l_digit2' == set_name_:
            pass
        elif 'l_femoral_lateral_epicn' == set_name_:
            pass
        elif 'l_femoral_medial_epicn' == set_name_:
            pass
        elif 'l_forefoot_tip' == set_name_:
            pass
        elif 'l_gonion' == set_name_:
            pass
        elif 'l_hand_tip' == set_name_:
            pass
        elif 'l_humeral_lateral_epicn' == set_name_:
            pass
        elif 'l_humeral_medial_epicn' == set_name_:
            pass
        elif 'l_iliocristale' == set_name_:
            pass
        elif 'l_index_distal_tip' == set_name_:
            pass
        elif 'l_infraorbitale' == set_name_:
            pass
        elif 'l_knee_crease' == set_name_:
            pass
        elif 'l_lateral_malleolus' == set_name_:
            pass
        elif 'l_medial_malleolus' == set_name_:
            pass
        elif 'l_metacarpal_pha2' == set_name_:
            pass
        elif 'l_metacarpal_pha5' == set_name_:
            pass
        elif 'l_metatarsal_pha1' == set_name_:
            pass
        elif 'l_metatarsal_pha5' == set_name_:
            pass
        elif 'l_middle_distal_tip' == set_name_:
            pass
        elif 'l_neck_base' == set_name_:
            pass
        elif 'l_olecranon' == set_name_:
            pass
        elif 'l_pinky_distal_tip' == set_name_:
            pass
        elif 'l_psis' == set_name_:
            pass
        elif 'l_radial_styloid' == set_name_:
            pass
        elif 'l_radiale' == set_name_:
            pass
        elif 'l_rib10' == set_name_:
            pass
        elif 'l_ring_distal_tip' == set_name_:
            pass
        elif 'l_sphyrion' == set_name_:
            pass
        elif 'l_thelion' == set_name_:
            pass
        elif 'l_thumb_distal_tip' == set_name_:
            pass
        elif 'l_tragion' == set_name_:
            pass
        elif 'l_trochanterion' == set_name_:
            pass
        elif 'l_ulnar_styloid' == set_name_:
            pass
        elif 'navel' == set_name_:
            pass
        elif 'nuchale' == set_name_:
            pass
        elif 'r_acromion' == set_name_:
            pass
        elif 'r_asis' == set_name_:
            pass
        elif 'r_axilla_ant' == set_name_:
            pass
        elif 'r_axilla_post' == set_name_:
            pass
        elif 'r_calcaneous_post' == set_name_:
            pass
        elif 'r_clavicale' == set_name_:
            pass
        elif 'r_dactylion' == set_name_:
            pass
        elif 'r_digit2' == set_name_:
            pass
        elif 'r_femoral_lateral_epicn' == set_name_:
            pass
        elif 'r_femoral_medial_epicn' == set_name_:
            pass
        elif 'r_forefoot_tip' == set_name_:
            pass
        elif 'r_gonion' == set_name_:
            pass
        elif 'r_hand_tip' == set_name_:
            pass
        elif 'r_humeral_lateral_epicn' == set_name_:
            pass
        elif 'r_humeral_medial_epicn' == set_name_:
            pass
        elif 'r_iliocristale' == set_name_:
            pass
        elif 'r_index_distal_tip' == set_name_:
            pass
        elif 'r_infraorbitale' == set_name_:
            pass
        elif 'r_knee_crease' == set_name_:
            pass
        elif 'r_lateral_malleolus' == set_name_:
            pass
        elif 'r_medial_malleolus' == set_name_:
            pass
        elif 'r_metacarpal_pha2' == set_name_:
            pass
        elif 'r_metacarpal_pha5' == set_name_:
            pass
        elif 'r_metatarsal_pha1' == set_name_:
            pass
        elif 'r_metatarsal_pha5' == set_name_:
            pass
        elif 'r_middle_distal_tip' == set_name_:
            pass
        elif 'r_neck_base' == set_name_:
            pass
        elif 'r_olecranon' == set_name_:
            pass
        elif 'r_pinky_distal_tip' == set_name_:
            pass
        elif 'r_psis' == set_name_:
            pass
        elif 'r_radial_styloid' == set_name_:
            pass
        elif 'r_radiale' == set_name_:
            pass
        elif 'r_rib10' == set_name_:
            pass
        elif 'r_ring_distal_tip' == set_name_:
            pass
        elif 'r_sphyrion' == set_name_:
            pass
        elif 'r_thelion' == set_name_:
            pass
        elif 'r_thumb_distal_tip' == set_name_:
            pass
        elif 'r_tragion' == set_name_:
            pass
        elif 'r_trochanterion' == set_name_:
            pass
        elif 'r_ulnar_styloid' == set_name_:
            pass
        elif 'rib10_midspine' == set_name_:
            pass
        elif 'sellion' == set_name_:
            pass
        elif 'skull_tip' == set_name_:
            pass
        elif 'substernale' == set_name_:
            pass
        elif 'supramenton' == set_name_:
            pass
        elif 'suprasternale' == set_name_:
            pass
        elif 'waist_preferred_post' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def remove_children(self, remove_children_):
        super(HAnimSite, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(HAnimSite, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(HAnimSite, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_scale_ <= 0:
                raise InvalidFieldValueException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(HAnimSite, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(HAnimSite, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(HAnimSite, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(HAnimSite, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(HAnimSite, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageCubeMapTexture(X3DEnvironmentTextureNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ImageCubeMapTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(ImageCubeMapTexture, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(ImageCubeMapTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ImageCubeMapTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ImageCubeMapTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageTexture(X3DTexture2DNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ImageTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(ImageTexture, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(ImageTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ImageTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ImageTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ImageTexture3D(X3DTexture3DNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ImageTexture3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(ImageTexture3D, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(ImageTexture3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ImageTexture3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ImageTexture3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedFaceSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if colorIndex_ < -1:
                raise InvalidFieldValueException()
        self.colorIndex_ = kwargs.pop("colorIndex")
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(convex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.convex_ = kwargs.pop("convex", True)
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        if type(creaseAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if creaseAngle_ < 0:
                raise InvalidFieldValueException()
        self.creaseAngle_ = kwargs.pop("creaseAngle", 0)
        if type(normalIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if normalIndex_ < -1:
                raise InvalidFieldValueException()
        self.normalIndex_ = kwargs.pop("normalIndex")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(texCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if texCoordIndex_ < -1:
                raise InvalidFieldValueException()
        self.texCoordIndex_ = kwargs.pop("texCoordIndex")
        return

    def set_attrib(self, set_attrib_):
        super(IndexedFaceSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedFaceSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedFaceSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedFaceSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedFaceSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(IndexedFaceSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_colorIndex(self, set_colorIndex_):
        super(IndexedFaceSet, self).set_colorIndex(set_colorIndex_)
        if type(set_colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_colorIndex_ = set_colorIndex_
    def set_coordIndex(self, set_coordIndex_):
        super(IndexedFaceSet, self).set_coordIndex(set_coordIndex_)
        if type(set_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_coordIndex_ = set_coordIndex_
    def set_normalIndex(self, set_normalIndex_):
        super(IndexedFaceSet, self).set_normalIndex(set_normalIndex_)
        if type(set_normalIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_normalIndex_ = set_normalIndex_
    def set_texCoordIndex(self, set_texCoordIndex_):
        super(IndexedFaceSet, self).set_texCoordIndex(set_texCoordIndex_)
        if type(set_texCoordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_texCoordIndex_ = set_texCoordIndex_
    def set_texCoord(self, set_texCoord_ = None):
        super(IndexedFaceSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(IndexedFaceSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedFaceSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedFaceSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedLineSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if colorIndex_ < -1:
                raise InvalidFieldValueException()
        self.colorIndex_ = kwargs.pop("colorIndex")
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex")
        return

    def set_attrib(self, set_attrib_):
        super(IndexedLineSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedLineSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedLineSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedLineSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedLineSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_colorIndex(self, set_colorIndex_):
        super(IndexedLineSet, self).set_colorIndex(set_colorIndex_)
        if type(set_colorIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_colorIndex_ = set_colorIndex_
    def set_coordIndex(self, set_coordIndex_):
        super(IndexedLineSet, self).set_coordIndex(set_coordIndex_)
        if type(set_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_coordIndex_ = set_coordIndex_
    def set_DEF(self, set_DEF_):
        super(IndexedLineSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedLineSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedLineSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedQuadSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < 0:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(IndexedQuadSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedQuadSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedQuadSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedQuadSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedQuadSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(IndexedQuadSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, set_index_):
        super(IndexedQuadSet, self).set_index(set_index_)
        if type(set_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_index_ = set_index_
    def set_texCoord(self, set_texCoord_ = None):
        super(IndexedQuadSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(IndexedQuadSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedQuadSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedQuadSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleFanSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < -1:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(IndexedTriangleFanSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedTriangleFanSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedTriangleFanSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedTriangleFanSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedTriangleFanSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(IndexedTriangleFanSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, set_index_):
        super(IndexedTriangleFanSet, self).set_index(set_index_)
        if type(set_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_index_ = set_index_
    def set_texCoord(self, set_texCoord_ = None):
        super(IndexedTriangleFanSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(IndexedTriangleFanSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedTriangleFanSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedTriangleFanSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < 0:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(IndexedTriangleSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedTriangleSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedTriangleSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedTriangleSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedTriangleSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(IndexedTriangleSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, set_index_):
        super(IndexedTriangleSet, self).set_index(set_index_)
        if type(set_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_index_ = set_index_
    def set_texCoord(self, set_texCoord_ = None):
        super(IndexedTriangleSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(IndexedTriangleSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedTriangleSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedTriangleSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IndexedTriangleStripSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(index_) is not MFInt32:
            raise InvalidFieldTypeException()
        if index_ < -1:
                raise InvalidFieldValueException()
        self.index_ = kwargs.pop("index")
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(IndexedTriangleStripSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(IndexedTriangleStripSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(IndexedTriangleStripSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(IndexedTriangleStripSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(IndexedTriangleStripSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(IndexedTriangleStripSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_index(self, set_index_):
        super(IndexedTriangleStripSet, self).set_index(set_index_)
        if type(set_index_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_index_ = set_index_
    def set_texCoord(self, set_texCoord_ = None):
        super(IndexedTriangleStripSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(IndexedTriangleStripSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IndexedTriangleStripSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IndexedTriangleStripSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Inline(X3DChildNode, X3DBoundedObject, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_load(self, set_load_ = True):
        super(Inline, self).set_load(set_load_)
        if type(set_load_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_load_ = set_load_

    def get_load(self):
        if type(self.load_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.load_

    def set_metadata(self, set_metadata_ = None):
        super(Inline, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(Inline, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(Inline, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Inline, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Inline, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IntegerSequencer(X3DSequencerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(IntegerSequencer, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(IntegerSequencer, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(IntegerSequencer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_next(self, set_next_):
        super(IntegerSequencer, self).set_next(set_next_)
        if type(set_next_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_next_ = set_next_
    def set_previous(self, set_previous_):
        super(IntegerSequencer, self).set_previous(set_previous_)
        if type(set_previous_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_previous_ = set_previous_
    def set_fraction(self, set_fraction_):
        super(IntegerSequencer, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(IntegerSequencer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IntegerSequencer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IntegerSequencer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IntegerTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_integerKey(self, set_integerKey_ = -1):
        super(IntegerTrigger, self).set_integerKey(set_integerKey_)
        if type(set_integerKey_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_integerKey_ = set_integerKey_

    def get_integerKey(self):
        if type(self.integerKey_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.integerKey_

    def set_metadata(self, set_metadata_ = None):
        super(IntegerTrigger, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, set_boolean_):
        super(IntegerTrigger, self).set_boolean(set_boolean_)
        if type(set_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_boolean_ = set_boolean_

    def get_triggerValue(self):
        if type(self.triggerValue_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.triggerValue_

    def set_DEF(self, set_DEF_):
        super(IntegerTrigger, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IntegerTrigger, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IntegerTrigger, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class IsoSurfaceVolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_contourStepSize(self, set_contourStepSize_ = 0):
        super(IsoSurfaceVolumeData, self).set_contourStepSize(set_contourStepSize_)
        if type(set_contourStepSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_contourStepSize_ = set_contourStepSize_

    def get_contourStepSize(self):
        if type(self.contourStepSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.contourStepSize_

    def set_dimensions(self, set_dimensions_ = [1, 1, 1]):
        super(IsoSurfaceVolumeData, self).set_dimensions(set_dimensions_)
        if type(set_dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.set_dimensions_ = set_dimensions_

    def get_dimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def set_gradients(self, set_gradients_ = None):
        super(IsoSurfaceVolumeData, self).set_gradients(set_gradients_)
        if type(set_gradients_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_gradients_ = set_gradients_

    def get_gradients(self):
        if type(self.gradients_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.gradients_

    def set_metadata(self, set_metadata_ = None):
        super(IsoSurfaceVolumeData, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_renderStyle(self, set_renderStyle_):
        super(IsoSurfaceVolumeData, self).set_renderStyle(set_renderStyle_)
        if type(set_renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_renderStyle_ = set_renderStyle_

    def get_renderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def set_surfaceTolerance(self, set_surfaceTolerance_ = 0):
        super(IsoSurfaceVolumeData, self).set_surfaceTolerance(set_surfaceTolerance_)
        if type(set_surfaceTolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_surfaceTolerance_ < 0:
                raise InvalidFieldValueException()
        self.set_surfaceTolerance_ = set_surfaceTolerance_

    def get_surfaceTolerance(self):
        if type(self.surfaceTolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.surfaceTolerance_

    def set_surfaceValues(self, set_surfaceValues_):
        super(IsoSurfaceVolumeData, self).set_surfaceValues(set_surfaceValues_)
        if type(set_surfaceValues_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_surfaceValues_ = set_surfaceValues_

    def get_surfaceValues(self):
        if type(self.surfaceValues_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.surfaceValues_

    def set_voxels(self, set_voxels_ = None):
        super(IsoSurfaceVolumeData, self).set_voxels(set_voxels_)
        if type(set_voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_voxels_ = set_voxels_

    def get_voxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def set_DEF(self, set_DEF_):
        super(IsoSurfaceVolumeData, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(IsoSurfaceVolumeData, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(IsoSurfaceVolumeData, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class KeySensor(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_actionKeyPress(self):
        if type(self.actionKeyPress_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.actionKeyPress_


    def get_actionKeyRelease(self):
        if type(self.actionKeyRelease_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.actionKeyRelease_


    def get_altKey(self):
        if type(self.altKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.altKey_


    def get_controlKey(self):
        if type(self.controlKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.controlKey_

    def set_enabled(self, set_enabled_ = True):
        super(KeySensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_keyPress(self):
        if type(self.keyPress_) is not SFString:
            raise InvalidFieldTypeException()
        return self.keyPress_


    def get_keyRelease(self):
        if type(self.keyRelease_) is not SFString:
            raise InvalidFieldTypeException()
        return self.keyRelease_

    def set_metadata(self, set_metadata_ = None):
        super(KeySensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_shiftKey(self):
        if type(self.shiftKey_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.shiftKey_

    def set_DEF(self, set_DEF_):
        super(KeySensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(KeySensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(KeySensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Layer(X3DLayerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def add_children(self, add_children_):
        super(Layer, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Layer, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_isPickable(self, set_isPickable_ = True):
        super(Layer, self).set_isPickable(set_isPickable_)
        if type(set_isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_isPickable_ = set_isPickable_

    def get_isPickable(self):
        if type(self.isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPickable_

    def set_metadata(self, set_metadata_ = None):
        super(Layer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Layer, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_viewport(self, set_viewport_ = None):
        super(Layer, self).set_viewport(set_viewport_)
        if type(set_viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_viewport_ = set_viewport_

    def get_viewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def set_DEF(self, set_DEF_):
        super(Layer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Layer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Layer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayerSet(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(order_) is not MFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 0)
        return

    def set_activeLayer(self, set_activeLayer_ = 0):
        super(LayerSet, self).set_activeLayer(set_activeLayer_)
        if type(set_activeLayer_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_activeLayer_ < 0:
                raise InvalidFieldValueException()
        self.set_activeLayer_ = set_activeLayer_

    def get_activeLayer(self):
        if type(self.activeLayer_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.activeLayer_

    def set_layers(self, set_layers_):
        super(LayerSet, self).set_layers(set_layers_)
        if type(set_layers_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_layers_ = set_layers_

    def get_layers(self):
        if type(self.layers_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.layers_

    def set_metadata(self, set_metadata_ = None):
        super(LayerSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(LayerSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LayerSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LayerSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Layout(X3DLayoutNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [1, 1])
        return

    def set_align(self, set_align_ = ["CENTER", "CENTER"]):
        super(Layout, self).set_align(set_align_)
        if type(set_align_) is not MFString:
            raise InvalidFieldTypeException()
        if '"CENTER"' == set_align_:
            pass
        elif '"LEFT" "BOTTOM"' == set_align_:
            pass
        elif '"LEFT" "CENTER"' == set_align_:
            pass
        elif '"LEFT" "TOP"' == set_align_:
            pass
        elif '"CENTER" "BOTTOM"' == set_align_:
            pass
        elif '"CENTER" "CENTER"' == set_align_:
            pass
        elif '"CENTER" "TOP"' == set_align_:
            pass
        elif '"RIGHT" "BOTTOM"' == set_align_:
            pass
        elif '"RIGHT" "CENTER"' == set_align_:
            pass
        elif '"RIGHT" "TOP"' == set_align_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_align_ = set_align_

    def get_align(self):
        if type(self.align_) is not MFString:
            raise InvalidFieldTypeException()
        return self.align_

    def set_metadata(self, set_metadata_ = None):
        super(Layout, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_offset(self, set_offset_ = [0, 0]):
        super(Layout, self).set_offset(set_offset_)
        if type(set_offset_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_offset_ = set_offset_

    def get_offset(self):
        if type(self.offset_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.offset_

    def set_offsetUnits(self, set_offsetUnits_ = ["WORLD", "WORLD"]):
        super(Layout, self).set_offsetUnits(set_offsetUnits_)
        if type(set_offsetUnits_) is not MFString:
            raise InvalidFieldTypeException()
        if '"WORLD"' == set_offsetUnits_:
            pass
        elif '"WORLD" "WORLD"' == set_offsetUnits_:
            pass
        elif '"WORLD" "PIXEL"' == set_offsetUnits_:
            pass
        elif '"FRACTION"' == set_offsetUnits_:
            pass
        elif '"FRACTION" "WORLD"' == set_offsetUnits_:
            pass
        elif '"FRACTION" "FRACTION"' == set_offsetUnits_:
            pass
        elif '"FRACTION" "PIXEL"' == set_offsetUnits_:
            pass
        elif '"PIXEL"' == set_offsetUnits_:
            pass
        elif '"PIXEL" "WORLD"' == set_offsetUnits_:
            pass
        elif '"PIXEL" "FRACTION"' == set_offsetUnits_:
            pass
        elif '"PIXEL" "PIXEL"' == set_offsetUnits_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_offsetUnits_ = set_offsetUnits_

    def get_offsetUnits(self):
        if type(self.offsetUnits_) is not MFString:
            raise InvalidFieldTypeException()
        return self.offsetUnits_

    def set_scaleMode(self, set_scaleMode_ = ["NONE", "NONE"]):
        super(Layout, self).set_scaleMode(set_scaleMode_)
        if type(set_scaleMode_) is not MFString:
            raise InvalidFieldTypeException()
        if '"NONE"' == set_scaleMode_:
            pass
        elif '"NONE" "NONE"' == set_scaleMode_:
            pass
        elif '"NONE" "FRACTION"' == set_scaleMode_:
            pass
        elif '"NONE" "STRETCH"' == set_scaleMode_:
            pass
        elif '"NONE" "PIXEL"' == set_scaleMode_:
            pass
        elif '"FRACTION"' == set_scaleMode_:
            pass
        elif '"FRACTION" "NONE"' == set_scaleMode_:
            pass
        elif '"FRACTION" "FRACTION"' == set_scaleMode_:
            pass
        elif '"FRACTION" "STRETCH"' == set_scaleMode_:
            pass
        elif '"FRACTION" "PIXEL"' == set_scaleMode_:
            pass
        elif '"STRETCH"' == set_scaleMode_:
            pass
        elif '"STRETCH" "NONE"' == set_scaleMode_:
            pass
        elif '"STRETCH" "FRACTION"' == set_scaleMode_:
            pass
        elif '"STRETCH" "STRETCH"' == set_scaleMode_:
            pass
        elif '"STRETCH" "PIXEL"' == set_scaleMode_:
            pass
        elif '"PIXEL"' == set_scaleMode_:
            pass
        elif '"PIXEL" "NONE"' == set_scaleMode_:
            pass
        elif '"PIXEL" "FRACTION"' == set_scaleMode_:
            pass
        elif '"PIXEL" "STRETCH"' == set_scaleMode_:
            pass
        elif '"PIXEL" "PIXEL"' == set_scaleMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_scaleMode_ = set_scaleMode_

    def get_scaleMode(self):
        if type(self.scaleMode_) is not MFString:
            raise InvalidFieldTypeException()
        return self.scaleMode_

    def set_sizeUnits(self, set_sizeUnits_ = ["WORLD", "WORLD"]):
        super(Layout, self).set_sizeUnits(set_sizeUnits_)
        if type(set_sizeUnits_) is not MFString:
            raise InvalidFieldTypeException()
        if '"WORLD"' == set_sizeUnits_:
            pass
        elif '"WORLD" "WORLD"' == set_sizeUnits_:
            pass
        elif '"WORLD" "FRACTION"' == set_sizeUnits_:
            pass
        elif '"WORLD" "PIXEL"' == set_sizeUnits_:
            pass
        elif '"FRACTION"' == set_sizeUnits_:
            pass
        elif '"FRACTION" "WORLD"' == set_sizeUnits_:
            pass
        elif '"FRACTION" "FRACTION"' == set_sizeUnits_:
            pass
        elif '"FRACTION" "PIXEL"' == set_sizeUnits_:
            pass
        elif '"PIXEL"' == set_sizeUnits_:
            pass
        elif '"PIXEL" "WORLD"' == set_sizeUnits_:
            pass
        elif '"PIXEL" "FRACTION"' == set_sizeUnits_:
            pass
        elif '"PIXEL" "PIXEL"' == set_sizeUnits_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_sizeUnits_ = set_sizeUnits_

    def get_sizeUnits(self):
        if type(self.sizeUnits_) is not MFString:
            raise InvalidFieldTypeException()
        return self.sizeUnits_

    def set_DEF(self, set_DEF_):
        super(Layout, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Layout, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Layout, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayoutGroup(X3DNode, X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(LayoutGroup, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(LayoutGroup, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_layout(self, set_layout_ = None):
        super(LayoutGroup, self).set_layout(set_layout_)
        if type(set_layout_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_layout_ = set_layout_

    def get_layout(self):
        if type(self.layout_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.layout_

    def set_metadata(self, set_metadata_ = None):
        super(LayoutGroup, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(LayoutGroup, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_viewport(self, set_viewport_ = None):
        super(LayoutGroup, self).set_viewport(set_viewport_)
        if type(set_viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_viewport_ = set_viewport_

    def get_viewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def set_DEF(self, set_DEF_):
        super(LayoutGroup, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LayoutGroup, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LayoutGroup, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LayoutLayer(X3DLayerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def add_children(self, add_children_):
        super(LayoutLayer, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(LayoutLayer, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_isPickable(self, set_isPickable_ = True):
        super(LayoutLayer, self).set_isPickable(set_isPickable_)
        if type(set_isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_isPickable_ = set_isPickable_

    def get_isPickable(self):
        if type(self.isPickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPickable_

    def set_layout(self, set_layout_ = None):
        super(LayoutLayer, self).set_layout(set_layout_)
        if type(set_layout_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_layout_ = set_layout_

    def get_layout(self):
        if type(self.layout_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.layout_

    def set_metadata(self, set_metadata_ = None):
        super(LayoutLayer, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(LayoutLayer, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_viewport(self, set_viewport_ = None):
        super(LayoutLayer, self).set_viewport(set_viewport_)
        if type(set_viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_viewport_ = set_viewport_

    def get_viewport(self):
        if type(self.viewport_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.viewport_

    def set_DEF(self, set_DEF_):
        super(LayoutLayer, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LayoutLayer, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LayoutLayer, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LinePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def set_enabled(self, set_enabled_ = True):
        super(LinePickSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_matchCriterion(self, set_matchCriterion_ = "MATCH_ANY"):
        super(LinePickSensor, self).set_matchCriterion(set_matchCriterion_)
        if type(set_matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == set_matchCriterion_:
            pass
        elif 'MATCH_EVERY' == set_matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == set_matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_matchCriterion_ = set_matchCriterion_

    def get_matchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def set_metadata(self, set_metadata_ = None):
        super(LinePickSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(LinePickSensor, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def get_pickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_


    def get_pickedNormal(self):
        if type(self.pickedNormal_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedNormal_


    def get_pickedPoint(self):
        if type(self.pickedPoint_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedPoint_


    def get_pickedTextureCoordinate(self):
        if type(self.pickedTextureCoordinate_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedTextureCoordinate_

    def set_pickingGeometry(self, set_pickingGeometry_ = None):
        super(LinePickSensor, self).set_pickingGeometry(set_pickingGeometry_)
        if type(set_pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_pickingGeometry_ = set_pickingGeometry_

    def get_pickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def set_pickTarget(self, set_pickTarget_):
        super(LinePickSensor, self).set_pickTarget(set_pickTarget_)
        if type(set_pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_pickTarget_ = set_pickTarget_

    def get_pickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def set_DEF(self, set_DEF_):
        super(LinePickSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LinePickSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LinePickSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LineProperties(X3DAppearanceChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_applied(self, set_applied_ = True):
        super(LineProperties, self).set_applied(set_applied_)
        if type(set_applied_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_applied_ = set_applied_

    def get_applied(self):
        if type(self.applied_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.applied_

    def set_linetype(self, set_linetype_ = 1):
        super(LineProperties, self).set_linetype(set_linetype_)
        if type(set_linetype_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_linetype_ < 1:
                raise InvalidFieldValueException()
        self.set_linetype_ = set_linetype_

    def get_linetype(self):
        if type(self.linetype_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.linetype_

    def set_linewidthScaleFactor(self, set_linewidthScaleFactor_ = 0):
        super(LineProperties, self).set_linewidthScaleFactor(set_linewidthScaleFactor_)
        if type(set_linewidthScaleFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_linewidthScaleFactor_ = set_linewidthScaleFactor_

    def get_linewidthScaleFactor(self):
        if type(self.linewidthScaleFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.linewidthScaleFactor_

    def set_metadata(self, set_metadata_ = None):
        super(LineProperties, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(LineProperties, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LineProperties, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LineProperties, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LineSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_attrib(self, set_attrib_):
        super(LineSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(LineSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(LineSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(LineSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(LineSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_vertexCount(self, set_vertexCount_):
        super(LineSet, self).set_vertexCount(set_vertexCount_)
        if type(set_vertexCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if set_vertexCount_ < 2:
                raise InvalidFieldValueException()
        self.set_vertexCount_ = set_vertexCount_

    def get_vertexCount(self):
        if type(self.vertexCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.vertexCount_

    def set_DEF(self, set_DEF_):
        super(LineSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LineSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LineSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LoadSensor(X3DNetworkSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(LoadSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isLoaded(self):
        if type(self.isLoaded_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isLoaded_


    def get_loadTime(self):
        if type(self.loadTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.loadTime_

    def set_metadata(self, set_metadata_ = None):
        super(LoadSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_progress(self):
        if type(self.progress_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.progress_

    def set_timeOut(self, set_timeOut_ = 0):
        super(LoadSensor, self).set_timeOut(set_timeOut_)
        if type(set_timeOut_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_timeOut_ < 0:
                raise InvalidFieldValueException()
        self.set_timeOut_ = set_timeOut_

    def get_timeOut(self):
        if type(self.timeOut_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timeOut_

    def set_watchList(self, set_watchList_):
        super(LoadSensor, self).set_watchList(set_watchList_)
        if type(set_watchList_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_watchList_ = set_watchList_

    def get_watchList(self):
        if type(self.watchList_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.watchList_

    def set_DEF(self, set_DEF_):
        super(LoadSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LoadSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LoadSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LocalFog(X3DChildNode, X3DFogObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_color(self, set_color_ = [1, 1, 1]):
        super(LocalFog, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_enabled(self, set_enabled_ = True):
        super(LocalFog, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_fogType(self, set_fogType_ = "LINEAR"):
        super(LocalFog, self).set_fogType(set_fogType_)
        if type(set_fogType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINEAR' == set_fogType_:
            pass
        elif 'EXPONENTIAL' == set_fogType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_fogType_ = set_fogType_

    def get_fogType(self):
        if type(self.fogType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fogType_

    def set_metadata(self, set_metadata_ = None):
        super(LocalFog, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_visibilityRange(self, set_visibilityRange_ = 0):
        super(LocalFog, self).set_visibilityRange(set_visibilityRange_)
        if type(set_visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_visibilityRange_ < 0:
                raise InvalidFieldValueException()
        self.set_visibilityRange_ = set_visibilityRange_

    def get_visibilityRange(self):
        if type(self.visibilityRange_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityRange_

    def set_DEF(self, set_DEF_):
        super(LocalFog, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LocalFog, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LocalFog, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class LOD(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.center_ = kwargs.pop("center", [0, 0, 0])
        if type(forceTransitions_) is not SFBool:
            raise InvalidFieldTypeException()
        self.forceTransitions_ = kwargs.pop("forceTransitions", False)
        if type(range_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.range_ = kwargs.pop("range")
        return

    def add_children(self, add_children_):
        super(LOD, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(LOD, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_


    def get_level_changed(self):
        if type(self.level_changed_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_changed_

    def set_metadata(self, set_metadata_ = None):
        super(LOD, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(LOD, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(LOD, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(LOD, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(LOD, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Material(X3DMaterialNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0.2):
        super(Material, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_diffuseColor(self, set_diffuseColor_ = [0.8, 0.8, 0.8]):
        super(Material, self).set_diffuseColor(set_diffuseColor_)
        if type(set_diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_diffuseColor_ < 0:
                raise InvalidFieldValueException()
        if set_diffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.set_diffuseColor_ = set_diffuseColor_

    def get_diffuseColor(self):
        if type(self.diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.diffuseColor_

    def set_emissiveColor(self, set_emissiveColor_ = [0, 0, 0]):
        super(Material, self).set_emissiveColor(set_emissiveColor_)
        if type(set_emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_emissiveColor_ < 0:
                raise InvalidFieldValueException()
        if set_emissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.set_emissiveColor_ = set_emissiveColor_

    def get_emissiveColor(self):
        if type(self.emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.emissiveColor_

    def set_metadata(self, set_metadata_ = None):
        super(Material, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_shininess(self, set_shininess_ = 0.2):
        super(Material, self).set_shininess(set_shininess_)
        if type(set_shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_shininess_ < 0:
                raise InvalidFieldValueException()
        if set_shininess_ > 1:
                raise InvalidFieldValueException()
        self.set_shininess_ = set_shininess_

    def get_shininess(self):
        if type(self.shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.shininess_

    def set_specularColor(self, set_specularColor_ = [0, 0, 0]):
        super(Material, self).set_specularColor(set_specularColor_)
        if type(set_specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_specularColor_ < 0:
                raise InvalidFieldValueException()
        if set_specularColor_ > 1:
                raise InvalidFieldValueException()
        self.set_specularColor_ = set_specularColor_

    def get_specularColor(self):
        if type(self.specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.specularColor_

    def set_transparency(self, set_transparency_ = 0):
        super(Material, self).set_transparency(set_transparency_)
        if type(set_transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_transparency_ < 0:
                raise InvalidFieldValueException()
        if set_transparency_ > 1:
                raise InvalidFieldValueException()
        self.set_transparency_ = set_transparency_

    def get_transparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def set_DEF(self, set_DEF_):
        super(Material, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Material, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Material, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Matrix3VertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(Matrix3VertexAttribute, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(Matrix3VertexAttribute, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_value(self, set_value_):
        super(Matrix3VertexAttribute, self).set_value(set_value_)
        if type(set_value_) is not MFMatrix3f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFMatrix3f:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(Matrix3VertexAttribute, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Matrix3VertexAttribute, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Matrix3VertexAttribute, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Matrix4VertexAttribute(X3DVertexAttributeNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(Matrix4VertexAttribute, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(Matrix4VertexAttribute, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_value(self, set_value_):
        super(Matrix4VertexAttribute, self).set_value(set_value_)
        if type(set_value_) is not MFMatrix4f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFMatrix4f:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(Matrix4VertexAttribute, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Matrix4VertexAttribute, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Matrix4VertexAttribute, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataBoolean(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataBoolean, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataBoolean, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataBoolean, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataBoolean, self).set_value(set_value_)
        if type(set_value_) is not MFBool:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataBoolean, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataBoolean, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataBoolean, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataDouble(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataDouble, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataDouble, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataDouble, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataDouble, self).set_value(set_value_)
        if type(set_value_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataDouble, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataDouble, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataDouble, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataFloat(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataFloat, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataFloat, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataFloat, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataFloat, self).set_value(set_value_)
        if type(set_value_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataFloat, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataFloat, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataFloat, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataInteger(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataInteger, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataInteger, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataInteger, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataInteger, self).set_value(set_value_)
        if type(set_value_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataInteger, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataInteger, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataInteger, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataSet(X3DNode, X3DMetadataObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataSet, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataSet, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataSet, self).set_value(set_value_)
        if type(set_value_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MetadataString(X3DMetadataObject, X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MetadataString, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(MetadataString, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_reference(self, set_reference_):
        super(MetadataString, self).set_reference(set_reference_)
        if type(set_reference_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_reference_ = set_reference_

    def get_reference(self):
        if type(self.reference_) is not SFString:
            raise InvalidFieldTypeException()
        return self.reference_

    def set_value(self, set_value_):
        super(MetadataString, self).set_value(set_value_)
        if type(set_value_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not MFString:
            raise InvalidFieldTypeException()
        return self.value_

    def set_DEF(self, set_DEF_):
        super(MetadataString, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MetadataString, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MetadataString, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MotorJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(autoCalc_) is not SFBool:
            raise InvalidFieldTypeException()
        self.autoCalc_ = kwargs.pop("autoCalc", False)
        return

    def set_axis1Angle(self, set_axis1Angle_ = 0):
        super(MotorJoint, self).set_axis1Angle(set_axis1Angle_)
        if type(set_axis1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis1Angle_ = set_axis1Angle_

    def get_axis1Angle(self):
        if type(self.axis1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis1Angle_

    def set_axis1Torque(self, set_axis1Torque_ = 0):
        super(MotorJoint, self).set_axis1Torque(set_axis1Torque_)
        if type(set_axis1Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis1Torque_ = set_axis1Torque_

    def get_axis1Torque(self):
        if type(self.axis1Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis1Torque_

    def set_axis2Angle(self, set_axis2Angle_ = 0):
        super(MotorJoint, self).set_axis2Angle(set_axis2Angle_)
        if type(set_axis2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis2Angle_ = set_axis2Angle_

    def get_axis2Angle(self):
        if type(self.axis2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis2Angle_

    def set_axis2Torque(self, set_axis2Torque_ = 0):
        super(MotorJoint, self).set_axis2Torque(set_axis2Torque_)
        if type(set_axis2Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis2Torque_ = set_axis2Torque_

    def get_axis2Torque(self):
        if type(self.axis2Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis2Torque_

    def set_axis3Angle(self, set_axis3Angle_ = 0):
        super(MotorJoint, self).set_axis3Angle(set_axis3Angle_)
        if type(set_axis3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis3Angle_ = set_axis3Angle_

    def get_axis3Angle(self):
        if type(self.axis3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis3Angle_

    def set_axis3Torque(self, set_axis3Torque_ = 0):
        super(MotorJoint, self).set_axis3Torque(set_axis3Torque_)
        if type(set_axis3Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_axis3Torque_ = set_axis3Torque_

    def get_axis3Torque(self):
        if type(self.axis3Torque_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.axis3Torque_

    def set_body1(self, set_body1_ = None):
        super(MotorJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def set_body2(self, set_body2_ = None):
        super(MotorJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def set_enabledAxes(self, set_enabledAxes_ = 1):
        super(MotorJoint, self).set_enabledAxes(set_enabledAxes_)
        if type(set_enabledAxes_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_enabledAxes_ < 0:
                raise InvalidFieldValueException()
        if set_enabledAxes_ > 3:
                raise InvalidFieldValueException()
        self.set_enabledAxes_ = set_enabledAxes_

    def get_enabledAxes(self):
        if type(self.enabledAxes_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.enabledAxes_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(MotorJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_metadata(self, set_metadata_ = None):
        super(MotorJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_motor1Angle(self):
        if type(self.motor1Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor1Angle_


    def get_motor1AngleRate(self):
        if type(self.motor1AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor1AngleRate_

    def set_motor1Axis(self, set_motor1Axis_ = [0, 0, 0]):
        super(MotorJoint, self).set_motor1Axis(set_motor1Axis_)
        if type(set_motor1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_motor1Axis_ = set_motor1Axis_

    def get_motor1Axis(self):
        if type(self.motor1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor1Axis_


    def get_motor2Angle(self):
        if type(self.motor2Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor2Angle_


    def get_motor2AngleRate(self):
        if type(self.motor2AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor2AngleRate_

    def set_motor2Axis(self, set_motor2Axis_ = [0, 0, 0]):
        super(MotorJoint, self).set_motor2Axis(set_motor2Axis_)
        if type(set_motor2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_motor2Axis_ = set_motor2Axis_

    def get_motor2Axis(self):
        if type(self.motor2Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor2Axis_


    def get_motor3Angle(self):
        if type(self.motor3Angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor3Angle_


    def get_motor3AngleRate(self):
        if type(self.motor3AngleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.motor3AngleRate_

    def set_motor3Axis(self, set_motor3Axis_ = [0, 0, 0]):
        super(MotorJoint, self).set_motor3Axis(set_motor3Axis_)
        if type(set_motor3Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_motor3Axis_ = set_motor3Axis_

    def get_motor3Axis(self):
        if type(self.motor3Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.motor3Axis_

    def set_stop1Bounce(self, set_stop1Bounce_ = 0):
        super(MotorJoint, self).set_stop1Bounce(set_stop1Bounce_)
        if type(set_stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop1Bounce_ = set_stop1Bounce_

    def get_stop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def set_stop1ErrorCorrection(self, set_stop1ErrorCorrection_ = 0.8):
        super(MotorJoint, self).set_stop1ErrorCorrection(set_stop1ErrorCorrection_)
        if type(set_stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop1ErrorCorrection_ = set_stop1ErrorCorrection_

    def get_stop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def set_stop2Bounce(self, set_stop2Bounce_ = 0):
        super(MotorJoint, self).set_stop2Bounce(set_stop2Bounce_)
        if type(set_stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop2Bounce_ = set_stop2Bounce_

    def get_stop2Bounce(self):
        if type(self.stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2Bounce_

    def set_stop2ErrorCorrection(self, set_stop2ErrorCorrection_ = 0.8):
        super(MotorJoint, self).set_stop2ErrorCorrection(set_stop2ErrorCorrection_)
        if type(set_stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop2ErrorCorrection_ = set_stop2ErrorCorrection_

    def get_stop2ErrorCorrection(self):
        if type(self.stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2ErrorCorrection_

    def set_stop3Bounce(self, set_stop3Bounce_ = 0):
        super(MotorJoint, self).set_stop3Bounce(set_stop3Bounce_)
        if type(set_stop3Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop3Bounce_ = set_stop3Bounce_

    def get_stop3Bounce(self):
        if type(self.stop3Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop3Bounce_

    def set_stop3ErrorCorrection(self, set_stop3ErrorCorrection_ = 0.8):
        super(MotorJoint, self).set_stop3ErrorCorrection(set_stop3ErrorCorrection_)
        if type(set_stop3ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stop3ErrorCorrection_ = set_stop3ErrorCorrection_

    def get_stop3ErrorCorrection(self):
        if type(self.stop3ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop3ErrorCorrection_

    def set_DEF(self, set_DEF_):
        super(MotorJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MotorJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MotorJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MovieTexture(X3DSoundSourceNode, X3DTexture2DNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_description(self, set_description_):
        super(MovieTexture, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_


    def get_duration_changed(self):
        if type(self.duration_changed_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.duration_changed_


    def get_elapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isPaused(self):
        if type(self.isPaused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPaused_

    def set_loop(self, set_loop_ = False):
        super(MovieTexture, self).set_loop(set_loop_)
        if type(set_loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_loop_ = set_loop_

    def get_loop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def set_metadata(self, set_metadata_ = None):
        super(MovieTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_pauseTime(self, set_pauseTime_ = 0):
        super(MovieTexture, self).set_pauseTime(set_pauseTime_)
        if type(set_pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_pauseTime_ = set_pauseTime_

    def get_pauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def set_pitch(self, set_pitch_ = 1.0):
        super(MovieTexture, self).set_pitch(set_pitch_)
        if type(set_pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_pitch_ <= 0:
                raise InvalidFieldValueException()
        self.set_pitch_ = set_pitch_

    def get_pitch(self):
        if type(self.pitch_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.pitch_

    def set_resumeTime(self, set_resumeTime_ = 0):
        super(MovieTexture, self).set_resumeTime(set_resumeTime_)
        if type(set_resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_resumeTime_ = set_resumeTime_

    def get_resumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def set_speed(self, set_speed_ = 1.0):
        super(MovieTexture, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_startTime(self, set_startTime_ = 0):
        super(MovieTexture, self).set_startTime(set_startTime_)
        if type(set_startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_startTime_ = set_startTime_

    def get_startTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def set_stopTime(self, set_stopTime_ = 0):
        super(MovieTexture, self).set_stopTime(set_stopTime_)
        if type(set_stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_stopTime_ = set_stopTime_

    def get_stopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_

    def set_url(self, set_url_):
        super(MovieTexture, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(MovieTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MovieTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MovieTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTexture(X3DTextureNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_alpha(self, set_alpha_ = 1):
        super(MultiTexture, self).set_alpha(set_alpha_)
        if type(set_alpha_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_alpha_ < 0:
                raise InvalidFieldValueException()
        if set_alpha_ > 1:
                raise InvalidFieldValueException()
        self.set_alpha_ = set_alpha_

    def get_alpha(self):
        if type(self.alpha_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.alpha_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(MultiTexture, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_function(self, set_function_):
        super(MultiTexture, self).set_function(set_function_)
        if type(set_function_) is not MFString:
            raise InvalidFieldTypeException()
        if '"COMPLEMENT"' == set_function_:
            pass
        elif '"ALPHAREPLICATE"' == set_function_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_function_ = set_function_

    def get_function(self):
        if type(self.function_) is not MFString:
            raise InvalidFieldTypeException()
        return self.function_

    def set_metadata(self, set_metadata_ = None):
        super(MultiTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_mode(self, set_mode_):
        super(MultiTexture, self).set_mode(set_mode_)
        if type(set_mode_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ADD"' == set_mode_:
            pass
        elif '"ADDSIGNED"' == set_mode_:
            pass
        elif '"ADDSIGNED2X"' == set_mode_:
            pass
        elif '"ADDSMOOTH"' == set_mode_:
            pass
        elif '"BLENDCURRENTALPHA"' == set_mode_:
            pass
        elif '"BLENDDIFFUSEALPHA"' == set_mode_:
            pass
        elif '"BLENDFACTORALPHA"' == set_mode_:
            pass
        elif '"BLENDTEXTUREALPHA"' == set_mode_:
            pass
        elif '"DOTPRODUCT3"' == set_mode_:
            pass
        elif '"MODULATE"' == set_mode_:
            pass
        elif '"MODULATE2X"' == set_mode_:
            pass
        elif '"MODULATE4X"' == set_mode_:
            pass
        elif '"MODULATEALPHA_ADDCOLOR"' == set_mode_:
            pass
        elif '"MODULATEINVALPHA_ADDCOLOR"' == set_mode_:
            pass
        elif '"MODULATEINVCOLOR_ADDALPHA"' == set_mode_:
            pass
        elif '"OFF"' == set_mode_:
            pass
        elif '"REPLACE"' == set_mode_:
            pass
        elif '"SELECTARG1"' == set_mode_:
            pass
        elif '"SELECTARG2"' == set_mode_:
            pass
        elif '"SUBTRACT"' == set_mode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_mode_ = set_mode_

    def get_mode(self):
        if type(self.mode_) is not MFString:
            raise InvalidFieldTypeException()
        return self.mode_

    def set_source(self, set_source_):
        super(MultiTexture, self).set_source(set_source_)
        if type(set_source_) is not MFString:
            raise InvalidFieldTypeException()
        if '"DIFFUSE"' == set_source_:
            pass
        elif '"FACTOR"' == set_source_:
            pass
        elif '"SPECULAR"' == set_source_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_source_ = set_source_

    def get_source(self):
        if type(self.source_) is not MFString:
            raise InvalidFieldTypeException()
        return self.source_

    def set_texture(self, set_texture_):
        super(MultiTexture, self).set_texture(set_texture_)
        if type(set_texture_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_texture_ = set_texture_

    def get_texture(self):
        if type(self.texture_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texture_

    def set_DEF(self, set_DEF_):
        super(MultiTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MultiTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MultiTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTextureCoordinate(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MultiTextureCoordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_texCoord(self, set_texCoord_):
        super(MultiTextureCoordinate, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(MultiTextureCoordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MultiTextureCoordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MultiTextureCoordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class MultiTextureTransform(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(MultiTextureTransform, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_textureTransform(self, set_textureTransform_):
        super(MultiTextureTransform, self).set_textureTransform(set_textureTransform_)
        if type(set_textureTransform_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_textureTransform_ = set_textureTransform_

    def get_textureTransform(self):
        if type(self.textureTransform_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.textureTransform_

    def set_DEF(self, set_DEF_):
        super(MultiTextureTransform, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(MultiTextureTransform, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(MultiTextureTransform, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NavigationInfo(X3DBindableNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_avatarSize(self, set_avatarSize_ = [0.25, 1.6, 0.75]):
        super(NavigationInfo, self).set_avatarSize(set_avatarSize_)
        if type(set_avatarSize_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_avatarSize_ < 0:
                raise InvalidFieldValueException()
        self.set_avatarSize_ = set_avatarSize_

    def get_avatarSize(self):
        if type(self.avatarSize_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.avatarSize_


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_headlight(self, set_headlight_ = True):
        super(NavigationInfo, self).set_headlight(set_headlight_)
        if type(set_headlight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_headlight_ = set_headlight_

    def get_headlight(self):
        if type(self.headlight_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.headlight_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_metadata(self, set_metadata_ = None):
        super(NavigationInfo, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_bind(self, set_bind_):
        super(NavigationInfo, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_speed(self, set_speed_ = 1):
        super(NavigationInfo, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_


    def get_transitionComplete(self):
        if type(self.transitionComplete_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.transitionComplete_

    def set_transitionTime(self, set_transitionTime_ = 1.0):
        super(NavigationInfo, self).set_transitionTime(set_transitionTime_)
        if type(set_transitionTime_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_transitionTime_ < 0:
                raise InvalidFieldValueException()
        self.set_transitionTime_ = set_transitionTime_

    def get_transitionTime(self):
        if type(self.transitionTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.transitionTime_

    def set_transitionType(self, set_transitionType_ = "LINEAR"):
        super(NavigationInfo, self).set_transitionType(set_transitionType_)
        if type(set_transitionType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"TELEPORT"' == set_transitionType_:
            pass
        elif '"LINEAR"' == set_transitionType_:
            pass
        elif '"ANIMATE"' == set_transitionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_transitionType_ = set_transitionType_

    def get_transitionType(self):
        if type(self.transitionType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.transitionType_

    def set_type(self, set_type_ = ["EXAMINE", "ANY"]):
        super(NavigationInfo, self).set_type(set_type_)
        if type(set_type_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ANY"' == set_type_:
            pass
        elif '"WALK"' == set_type_:
            pass
        elif '"EXAMINE"' == set_type_:
            pass
        elif '"FLY"' == set_type_:
            pass
        elif '"LOOKAT"' == set_type_:
            pass
        elif '"NONE"' == set_type_:
            pass
        elif '"EXPLORE"' == set_type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_type_ = set_type_

    def get_type(self):
        if type(self.type_) is not MFString:
            raise InvalidFieldTypeException()
        return self.type_

    def set_visibilityLimit(self, set_visibilityLimit_ = 0):
        super(NavigationInfo, self).set_visibilityLimit(set_visibilityLimit_)
        if type(set_visibilityLimit_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_visibilityLimit_ < 0:
                raise InvalidFieldValueException()
        self.set_visibilityLimit_ = set_visibilityLimit_

    def get_visibilityLimit(self):
        if type(self.visibilityLimit_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.visibilityLimit_

    def set_DEF(self, set_DEF_):
        super(NavigationInfo, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NavigationInfo, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NavigationInfo, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Normal(X3DNormalNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(Normal, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_vector(self, set_vector_):
        super(Normal, self).set_vector(set_vector_)
        if type(set_vector_) is not MFVec3f:
            raise InvalidFieldTypeException()
        if set_vector_ < -1:
                raise InvalidFieldValueException()
        if set_vector_ > 1:
                raise InvalidFieldValueException()
        self.set_vector_ = set_vector_

    def get_vector(self):
        if type(self.vector_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.vector_

    def set_DEF(self, set_DEF_):
        super(Normal, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Normal, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Normal, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NormalInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(NormalInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(NormalInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(NormalInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(NormalInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(NormalInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NormalInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NormalInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsCurve(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsCurve, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsCurve, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_tessellation(self, set_tessellation_ = 0):
        super(NurbsCurve, self).set_tessellation(set_tessellation_)
        if type(set_tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_tessellation_ = set_tessellation_

    def get_tessellation(self):
        if type(self.tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tessellation_

    def set_weight(self, set_weight_):
        super(NurbsCurve, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsCurve, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsCurve, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsCurve, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsCurve2D(X3DNurbsControlCurveNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 2:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return

    def set_controlPoint(self, set_controlPoint_):
        super(NurbsCurve2D, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not MFVec2d:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsCurve2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_tessellation(self, set_tessellation_ = 0):
        super(NurbsCurve2D, self).set_tessellation(set_tessellation_)
        if type(set_tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_tessellation_ = set_tessellation_

    def get_tessellation(self):
        if type(self.tessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tessellation_

    def set_weight(self, set_weight_):
        super(NurbsCurve2D, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsCurve2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsCurve2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsCurve2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsOrientationInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsOrientationInterpolator, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsOrientationInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_order(self, set_order_ = 3):
        super(NurbsOrientationInterpolator, self).set_order(set_order_)
        if type(set_order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_order_ < 2:
                raise InvalidFieldValueException()
        self.set_order_ = set_order_

    def get_order(self):
        if type(self.order_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.order_

    def set_fraction(self, set_fraction_):
        super(NurbsOrientationInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_weight(self, set_weight_):
        super(NurbsOrientationInterpolator, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsOrientationInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsOrientationInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsOrientationInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsPatchSurface(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsPatchSurface, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsPatchSurface, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_texCoord(self, set_texCoord_ = None):
        super(NurbsPatchSurface, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_uTessellation(self, set_uTessellation_ = 0):
        super(NurbsPatchSurface, self).set_uTessellation(set_uTessellation_)
        if type(set_uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_uTessellation_ = set_uTessellation_

    def get_uTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def set_vTessellation(self, set_vTessellation_ = 0):
        super(NurbsPatchSurface, self).set_vTessellation(set_vTessellation_)
        if type(set_vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_vTessellation_ = set_vTessellation_

    def get_vTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def set_weight(self, set_weight_):
        super(NurbsPatchSurface, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsPatchSurface, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsPatchSurface, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsPatchSurface, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsPositionInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(knot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.knot_ = kwargs.pop("knot")
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsPositionInterpolator, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsPositionInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_order(self, set_order_ = 3):
        super(NurbsPositionInterpolator, self).set_order(set_order_)
        if type(set_order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_order_ < 2:
                raise InvalidFieldValueException()
        self.set_order_ = set_order_

    def get_order(self):
        if type(self.order_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.order_

    def set_fraction(self, set_fraction_):
        super(NurbsPositionInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_weight(self, set_weight_):
        super(NurbsPositionInterpolator, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsPositionInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsPositionInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsPositionInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSet(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_addGeometry(self, set_addGeometry_):
        super(NurbsSet, self).set_addGeometry(set_addGeometry_)
        if type(set_addGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_addGeometry_ = set_addGeometry_
    def set_geometry(self, set_geometry_):
        super(NurbsSet, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeGeometry(self, removeGeometry_):
        super(NurbsSet, self).removeGeometry(removeGeometry_)
        if type(removeGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.removeGeometry_ = removeGeometry_
    def set_tessellationScale(self, set_tessellationScale_ = 1.0):
        super(NurbsSet, self).set_tessellationScale(set_tessellationScale_)
        if type(set_tessellationScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_tessellationScale_ <= 0:
                raise InvalidFieldValueException()
        self.set_tessellationScale_ = set_tessellationScale_

    def get_tessellationScale(self):
        if type(self.tessellationScale_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tessellationScale_

    def set_DEF(self, set_DEF_):
        super(NurbsSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSurfaceInterpolator(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsSurfaceInterpolator, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsSurfaceInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_normal_changed(self):
        if type(self.normal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.normal_changed_


    def get_position_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def set_fraction(self, set_fraction_):
        super(NurbsSurfaceInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_
    def set_weight(self, set_weight_):
        super(NurbsSurfaceInterpolator, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsSurfaceInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsSurfaceInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsSurfaceInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSweptSurface(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_crossSectionCurve(self, set_crossSectionCurve_ = None):
        super(NurbsSweptSurface, self).set_crossSectionCurve(set_crossSectionCurve_)
        if type(set_crossSectionCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_crossSectionCurve_ = set_crossSectionCurve_

    def get_crossSectionCurve(self):
        if type(self.crossSectionCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.crossSectionCurve_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsSweptSurface, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_trajectoryCurve(self, set_trajectoryCurve_ = None):
        super(NurbsSweptSurface, self).set_trajectoryCurve(set_trajectoryCurve_)
        if type(set_trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_trajectoryCurve_ = set_trajectoryCurve_

    def get_trajectoryCurve(self):
        if type(self.trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.trajectoryCurve_

    def set_DEF(self, set_DEF_):
        super(NurbsSweptSurface, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsSweptSurface, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsSweptSurface, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsSwungSurface(X3DParametricGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(NurbsSwungSurface, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_profileCurve(self, set_profileCurve_ = None):
        super(NurbsSwungSurface, self).set_profileCurve(set_profileCurve_)
        if type(set_profileCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_profileCurve_ = set_profileCurve_

    def get_profileCurve(self):
        if type(self.profileCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.profileCurve_

    def set_trajectoryCurve(self, set_trajectoryCurve_ = None):
        super(NurbsSwungSurface, self).set_trajectoryCurve(set_trajectoryCurve_)
        if type(set_trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_trajectoryCurve_ = set_trajectoryCurve_

    def get_trajectoryCurve(self):
        if type(self.trajectoryCurve_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.trajectoryCurve_

    def set_DEF(self, set_DEF_):
        super(NurbsSwungSurface, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsSwungSurface, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsSwungSurface, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsTextureCoordinate(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def set_controlPoint(self, set_controlPoint_):
        super(NurbsTextureCoordinate, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsTextureCoordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_weight(self, set_weight_):
        super(NurbsTextureCoordinate, self).set_weight(set_weight_)
        if type(set_weight_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsTextureCoordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsTextureCoordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsTextureCoordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class NurbsTrimmedSurface(X3DNurbsSurfaceGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        if type(uClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.uClosed_ = kwargs.pop("uClosed", False)
        if type(uDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uDimension_ < 0:
                raise InvalidFieldValueException()
        self.uDimension_ = kwargs.pop("uDimension", 0)
        if type(uKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.uKnot_ = kwargs.pop("uKnot")
        if type(uOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if uOrder_ < 2:
                raise InvalidFieldValueException()
        self.uOrder_ = kwargs.pop("uOrder", 3)
        if type(vClosed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.vClosed_ = kwargs.pop("vClosed", False)
        if type(vDimension_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vDimension_ < 0:
                raise InvalidFieldValueException()
        self.vDimension_ = kwargs.pop("vDimension", 0)
        if type(vKnot_) is not MFDouble:
            raise InvalidFieldTypeException()
        self.vKnot_ = kwargs.pop("vKnot")
        if type(vOrder_) is not SFInt32:
            raise InvalidFieldTypeException()
        if vOrder_ < 2:
                raise InvalidFieldValueException()
        self.vOrder_ = kwargs.pop("vOrder", 3)
        return

    def set_addTrimmingContour(self, set_addTrimmingContour_):
        super(NurbsTrimmedSurface, self).set_addTrimmingContour(set_addTrimmingContour_)
        if type(set_addTrimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_addTrimmingContour_ = set_addTrimmingContour_
    def set_controlPoint(self, set_controlPoint_ = None):
        super(NurbsTrimmedSurface, self).set_controlPoint(set_controlPoint_)
        if type(set_controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_controlPoint_ = set_controlPoint_

    def get_controlPoint(self):
        if type(self.controlPoint_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.controlPoint_

    def set_metadata(self, set_metadata_ = None):
        super(NurbsTrimmedSurface, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def removeTrimmingContour(self, removeTrimmingContour_):
        super(NurbsTrimmedSurface, self).removeTrimmingContour(removeTrimmingContour_)
        if type(removeTrimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.removeTrimmingContour_ = removeTrimmingContour_
    def set_texCoord(self, set_texCoord_ = None):
        super(NurbsTrimmedSurface, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_trimmingContour(self, set_trimmingContour_):
        super(NurbsTrimmedSurface, self).set_trimmingContour(set_trimmingContour_)
        if type(set_trimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_trimmingContour_ = set_trimmingContour_

    def get_trimmingContour(self):
        if type(self.trimmingContour_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.trimmingContour_

    def set_uTessellation(self, set_uTessellation_ = 0):
        super(NurbsTrimmedSurface, self).set_uTessellation(set_uTessellation_)
        if type(set_uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_uTessellation_ = set_uTessellation_

    def get_uTessellation(self):
        if type(self.uTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.uTessellation_

    def set_vTessellation(self, set_vTessellation_ = 0):
        super(NurbsTrimmedSurface, self).set_vTessellation(set_vTessellation_)
        if type(set_vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_vTessellation_ = set_vTessellation_

    def get_vTessellation(self):
        if type(self.vTessellation_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.vTessellation_

    def set_weight(self, set_weight_):
        super(NurbsTrimmedSurface, self).set_weight(set_weight_)
        if type(set_weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        if set_weight_ <= 0:
                raise InvalidFieldValueException()
        self.set_weight_ = set_weight_

    def get_weight(self):
        if type(self.weight_) is not MFDouble:
            raise InvalidFieldTypeException()
        return self.weight_

    def set_DEF(self, set_DEF_):
        super(NurbsTrimmedSurface, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(NurbsTrimmedSurface, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(NurbsTrimmedSurface, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OpacityMapVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(OpacityMapVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(OpacityMapVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_transferFunction(self, set_transferFunction_ = None):
        super(OpacityMapVolumeStyle, self).set_transferFunction(set_transferFunction_)
        if type(set_transferFunction_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_transferFunction_ = set_transferFunction_

    def get_transferFunction(self):
        if type(self.transferFunction_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.transferFunction_

    def set_DEF(self, set_DEF_):
        super(OpacityMapVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(OpacityMapVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(OpacityMapVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 1, 0, 0])
        if type(initialValue_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 1, 0, 0])
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(OrientationChaser, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(OrientationChaser, self).set_destination(set_destination_)
        if type(set_destination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(OrientationChaser, self).set_value(set_value_)
        if type(set_value_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(OrientationChaser, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(OrientationChaser, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(OrientationChaser, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 1, 0, 0])
        if type(initialValue_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 1, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(OrientationDamper, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(OrientationDamper, self).set_destination(set_destination_)
        if type(set_destination_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(OrientationDamper, self).set_value(set_value_)
        if type(set_value_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(OrientationDamper, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(OrientationDamper, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(OrientationDamper, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(OrientationDamper, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(OrientationDamper, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrientationInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(OrientationInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(OrientationInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(OrientationInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(OrientationInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(OrientationInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(OrientationInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(OrientationInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class OrthoViewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_centerOfRotation(self, set_centerOfRotation_ = [0, 0, 0]):
        super(OrthoViewpoint, self).set_centerOfRotation(set_centerOfRotation_)
        if type(set_centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_centerOfRotation_ = set_centerOfRotation_

    def get_centerOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def set_description(self, set_description_):
        super(OrthoViewpoint, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_fieldOfView(self, set_fieldOfView_ = [-1, -1, 1, 1]):
        super(OrthoViewpoint, self).set_fieldOfView(set_fieldOfView_)
        if type(set_fieldOfView_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_fieldOfView_ = set_fieldOfView_

    def get_fieldOfView(self):
        if type(self.fieldOfView_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_jump(self, set_jump_ = True):
        super(OrthoViewpoint, self).set_jump(set_jump_)
        if type(set_jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_jump_ = set_jump_

    def get_jump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def set_metadata(self, set_metadata_ = None):
        super(OrthoViewpoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(OrthoViewpoint, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_position(self, set_position_ = [0, 0, 10]):
        super(OrthoViewpoint, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_retainUserOffsets(self, set_retainUserOffsets_ = False):
        super(OrthoViewpoint, self).set_retainUserOffsets(set_retainUserOffsets_)
        if type(set_retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_retainUserOffsets_ = set_retainUserOffsets_

    def get_retainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, set_bind_):
        super(OrthoViewpoint, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_DEF(self, set_DEF_):
        super(OrthoViewpoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(OrthoViewpoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(OrthoViewpoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PackagedShader(X3DShaderNode, X3DUrlObject, X3DProgrammableShaderObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def set_activate(self, set_activate_):
        super(PackagedShader, self).set_activate(set_activate_)
        if type(set_activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_activate_ = set_activate_

    def get_isSelected(self):
        if type(self.isSelected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isSelected_


    def get_isValid(self):
        if type(self.isValid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isValid_

    def set_metadata(self, set_metadata_ = None):
        super(PackagedShader, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(PackagedShader, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(PackagedShader, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PackagedShader, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PackagedShader, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ParticleSystem(X3DShapeNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(colorKey_) is not MFFloat:
            raise InvalidFieldTypeException()
        if colorKey_ < 0:
                raise InvalidFieldValueException()
        self.colorKey_ = kwargs.pop("colorKey")
        if type(colorRamp_) is not SFNode:
            raise InvalidFieldTypeException()
        self.colorRamp_ = kwargs.pop("colorRamp", None)
        if type(emitter_) is not SFNode:
            raise InvalidFieldTypeException()
        self.emitter_ = kwargs.pop("emitter", None)
        if type(geometryType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'LINE' == geometryType_:
            pass
        elif 'POINT' == geometryType_:
            pass
        elif 'QUAD' == geometryType_:
            pass
        elif 'SPRITE' == geometryType_:
            pass
        elif 'TRIANGLE' == geometryType_:
            pass
        elif 'GEOMETRY' == geometryType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.geometryType_ = kwargs.pop("geometryType", "QUAD")
        if type(physics_) is not MFNode:
            raise InvalidFieldTypeException()
        self.physics_ = kwargs.pop("physics")
        if type(texCoordKey_) is not MFFloat:
            raise InvalidFieldTypeException()
        if texCoordKey_ < 0:
                raise InvalidFieldValueException()
        self.texCoordKey_ = kwargs.pop("texCoordKey")
        if type(texCoordRamp_) is not SFNode:
            raise InvalidFieldTypeException()
        self.texCoordRamp_ = kwargs.pop("texCoordRamp", None)
        return

    def set_appearance(self, set_appearance_ = None):
        super(ParticleSystem, self).set_appearance(set_appearance_)
        if type(set_appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_appearance_ = set_appearance_

    def get_appearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def set_createParticles(self, set_createParticles_ = True):
        super(ParticleSystem, self).set_createParticles(set_createParticles_)
        if type(set_createParticles_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_createParticles_ = set_createParticles_

    def get_createParticles(self):
        if type(self.createParticles_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.createParticles_

    def set_enabled(self, set_enabled_ = True):
        super(ParticleSystem, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_geometry(self, set_geometry_ = None):
        super(ParticleSystem, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_geometry(self, set_geometry_ = None):
        super(ParticleSystem, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_lifetimeVariation(self, set_lifetimeVariation_ = 0.25):
        super(ParticleSystem, self).set_lifetimeVariation(set_lifetimeVariation_)
        if type(set_lifetimeVariation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_lifetimeVariation_ < 0:
                raise InvalidFieldValueException()
        if set_lifetimeVariation_ > 1:
                raise InvalidFieldValueException()
        self.set_lifetimeVariation_ = set_lifetimeVariation_

    def get_lifetimeVariation(self):
        if type(self.lifetimeVariation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.lifetimeVariation_

    def set_maxParticles(self, set_maxParticles_ = 200):
        super(ParticleSystem, self).set_maxParticles(set_maxParticles_)
        if type(set_maxParticles_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_maxParticles_ < 0:
                raise InvalidFieldValueException()
        self.set_maxParticles_ = set_maxParticles_

    def get_maxParticles(self):
        if type(self.maxParticles_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.maxParticles_

    def set_metadata(self, set_metadata_ = None):
        super(ParticleSystem, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_particleLifetime(self, set_particleLifetime_ = 5):
        super(ParticleSystem, self).set_particleLifetime(set_particleLifetime_)
        if type(set_particleLifetime_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_particleLifetime_ < 0:
                raise InvalidFieldValueException()
        self.set_particleLifetime_ = set_particleLifetime_

    def get_particleLifetime(self):
        if type(self.particleLifetime_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.particleLifetime_

    def set_particleSize(self, set_particleSize_ = [0.02, 0.02]):
        super(ParticleSystem, self).set_particleSize(set_particleSize_)
        if type(set_particleSize_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if set_particleSize_ < 0:
                raise InvalidFieldValueException()
        self.set_particleSize_ = set_particleSize_

    def get_particleSize(self):
        if type(self.particleSize_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.particleSize_

    def set_DEF(self, set_DEF_):
        super(ParticleSystem, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ParticleSystem, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ParticleSystem, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PickableGroup(X3DGroupingNode, X3DPickableObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(PickableGroup, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(PickableGroup, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(PickableGroup, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(PickableGroup, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_

    def set_pickable(self, set_pickable_ = True):
        super(PickableGroup, self).set_pickable(set_pickable_)
        if type(set_pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_pickable_ = set_pickable_

    def get_pickable(self):
        if type(self.pickable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.pickable_

    def remove_children(self, remove_children_):
        super(PickableGroup, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(PickableGroup, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PickableGroup, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PickableGroup, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PixelTexture(X3DTexture2DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", True)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", True)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_image(self, set_image_ = [0, 0, 0]):
        super(PixelTexture, self).set_image(set_image_)
        if type(set_image_) is not SFImage:
            raise InvalidFieldTypeException()
        self.set_image_ = set_image_

    def get_image(self):
        if type(self.image_) is not SFImage:
            raise InvalidFieldTypeException()
        return self.image_

    def set_metadata(self, set_metadata_ = None):
        super(PixelTexture, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(PixelTexture, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PixelTexture, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PixelTexture, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PixelTexture3D(X3DTexture3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(repeatR_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatR_ = kwargs.pop("repeatR", False)
        if type(repeatS_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatS_ = kwargs.pop("repeatS", False)
        if type(repeatT_) is not SFBool:
            raise InvalidFieldTypeException()
        self.repeatT_ = kwargs.pop("repeatT", False)
        if type(textureProperties_) is not SFNode:
            raise InvalidFieldTypeException()
        self.textureProperties_ = kwargs.pop("textureProperties", None)
        return

    def set_image(self, set_image_ = [0, 0, 0, 0]):
        super(PixelTexture3D, self).set_image(set_image_)
        if type(set_image_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_image_ = set_image_

    def get_image(self):
        if type(self.image_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.image_

    def set_metadata(self, set_metadata_ = None):
        super(PixelTexture3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(PixelTexture3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PixelTexture3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PixelTexture3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PlaneSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_autoOffset(self, set_autoOffset_ = True):
        super(PlaneSensor, self).set_autoOffset(set_autoOffset_)
        if type(set_autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoOffset_ = set_autoOffset_

    def get_autoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def set_axisRotation(self, set_axisRotation_ = [0, 1, 0, 0]):
        super(PlaneSensor, self).set_axisRotation(set_axisRotation_)
        if type(set_axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_axisRotation_ = set_axisRotation_

    def get_axisRotation(self):
        if type(self.axisRotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.axisRotation_

    def set_description(self, set_description_):
        super(PlaneSensor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(PlaneSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_maxPosition(self, set_maxPosition_ = [-1, -1]):
        super(PlaneSensor, self).set_maxPosition(set_maxPosition_)
        if type(set_maxPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_maxPosition_ = set_maxPosition_

    def get_maxPosition(self):
        if type(self.maxPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.maxPosition_

    def set_metadata(self, set_metadata_ = None):
        super(PlaneSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minPosition(self, set_minPosition_ = [0, 0]):
        super(PlaneSensor, self).set_minPosition(set_minPosition_)
        if type(set_minPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_minPosition_ = set_minPosition_

    def get_minPosition(self):
        if type(self.minPosition_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.minPosition_

    def set_offset(self, set_offset_ = [0, 0, 0]):
        super(PlaneSensor, self).set_offset(set_offset_)
        if type(set_offset_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_offset_ = set_offset_

    def get_offset(self):
        if type(self.offset_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.offset_


    def get_trackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_


    def get_translation_changed(self):
        if type(self.translation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_changed_

    def set_DEF(self, set_DEF_):
        super(PlaneSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PlaneSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PlaneSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_direction(self, set_direction_ = [0, 1, 0]):
        super(PointEmitter, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_mass(self, set_mass_ = 0):
        super(PointEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(PointEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_position(self, set_position_ = [0, 0, 0]):
        super(PointEmitter, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_speed(self, set_speed_ = 0):
        super(PointEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(PointEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(PointEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PointEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PointEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointLight(X3DLightNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ < 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 100)
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0):
        super(PointLight, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_attenuation(self, set_attenuation_ = [1, 0, 0]):
        super(PointLight, self).set_attenuation(set_attenuation_)
        if type(set_attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_attenuation_ < 0:
                raise InvalidFieldValueException()
        self.set_attenuation_ = set_attenuation_

    def get_attenuation(self):
        if type(self.attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.attenuation_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(PointLight, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_global(self, set_global_ = True):
        super(PointLight, self).set_global(set_global_)
        if type(set_global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_global_ = set_global_

    def get_global(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def set_intensity(self, set_intensity_ = 1):
        super(PointLight, self).set_intensity(set_intensity_)
        if type(set_intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensity_ < 0:
                raise InvalidFieldValueException()
        if set_intensity_ > 1:
                raise InvalidFieldValueException()
        self.set_intensity_ = set_intensity_

    def get_intensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def set_location(self, set_location_ = [0, 0, 0]):
        super(PointLight, self).set_location(set_location_)
        if type(set_location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_location_ = set_location_

    def get_location(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def set_metadata(self, set_metadata_ = None):
        super(PointLight, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_on(self, set_on_ = True):
        super(PointLight, self).set_on(set_on_)
        if type(set_on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_on_ = set_on_

    def get_on(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def set_DEF(self, set_DEF_):
        super(PointLight, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PointLight, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PointLight, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointPickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def set_enabled(self, set_enabled_ = True):
        super(PointPickSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_matchCriterion(self, set_matchCriterion_ = "MATCH_ANY"):
        super(PointPickSensor, self).set_matchCriterion(set_matchCriterion_)
        if type(set_matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == set_matchCriterion_:
            pass
        elif 'MATCH_EVERY' == set_matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == set_matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_matchCriterion_ = set_matchCriterion_

    def get_matchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def set_metadata(self, set_metadata_ = None):
        super(PointPickSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(PointPickSensor, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def get_pickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_


    def get_pickedPoint(self):
        if type(self.pickedPoint_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.pickedPoint_

    def set_pickingGeometry(self, set_pickingGeometry_ = None):
        super(PointPickSensor, self).set_pickingGeometry(set_pickingGeometry_)
        if type(set_pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_pickingGeometry_ = set_pickingGeometry_

    def get_pickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def set_pickTarget(self, set_pickTarget_):
        super(PointPickSensor, self).set_pickTarget(set_pickTarget_)
        if type(set_pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_pickTarget_ = set_pickTarget_

    def get_pickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def set_DEF(self, set_DEF_):
        super(PointPickSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PointPickSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PointPickSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PointSet(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_attrib(self, set_attrib_):
        super(PointSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(PointSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(PointSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(PointSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(PointSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(PointSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PointSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PointSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Polyline2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(lineSegments_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.lineSegments_ = kwargs.pop("lineSegments")
        return

    def set_metadata(self, set_metadata_ = None):
        super(Polyline2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Polyline2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Polyline2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Polyline2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PolylineEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_coord(self, set_coord_ = None):
        super(PolylineEmitter, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_direction(self, set_direction_ = [0, 1, 0]):
        super(PolylineEmitter, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_direction_ < -1:
                raise InvalidFieldValueException()
        if set_direction_ > 1:
                raise InvalidFieldValueException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_mass(self, set_mass_ = 0):
        super(PolylineEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(PolylineEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, set_coordIndex_):
        super(PolylineEmitter, self).set_coordIndex(set_coordIndex_)
        if type(set_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_coordIndex_ = set_coordIndex_
    def set_speed(self, set_speed_ = 0):
        super(PolylineEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(PolylineEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(PolylineEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PolylineEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PolylineEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Polypoint2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(Polypoint2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(Polypoint2D, self).set_point(set_point_)
        if type(set_point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(Polypoint2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Polypoint2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Polypoint2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(PositionChaser, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(PositionChaser, self).set_destination(set_destination_)
        if type(set_destination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(PositionChaser, self).set_value(set_value_)
        if type(set_value_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionChaser, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionChaser, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionChaser, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionChaser2D(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0])
        if type(initialValue_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0])
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(PositionChaser2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(PositionChaser2D, self).set_destination(set_destination_)
        if type(set_destination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(PositionChaser2D, self).set_value(set_value_)
        if type(set_value_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionChaser2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionChaser2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionChaser2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0, 0])
        if type(initialValue_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(PositionDamper, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(PositionDamper, self).set_destination(set_destination_)
        if type(set_destination_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(PositionDamper, self).set_value(set_value_)
        if type(set_value_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(PositionDamper, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(PositionDamper, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionDamper, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionDamper, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionDamper, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionDamper2D(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", [0, 0])
        if type(initialValue_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", [0, 0])
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(PositionDamper2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(PositionDamper2D, self).set_destination(set_destination_)
        if type(set_destination_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(PositionDamper2D, self).set_value(set_value_)
        if type(set_value_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(PositionDamper2D, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(PositionDamper2D, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionDamper2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionDamper2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionDamper2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(PositionInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(PositionInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(PositionInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(PositionInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PositionInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(PositionInterpolator2D, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(PositionInterpolator2D, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(PositionInterpolator2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(PositionInterpolator2D, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(PositionInterpolator2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PositionInterpolator2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PositionInterpolator2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class PrimitivePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def set_enabled(self, set_enabled_ = True):
        super(PrimitivePickSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_matchCriterion(self, set_matchCriterion_ = "MATCH_ANY"):
        super(PrimitivePickSensor, self).set_matchCriterion(set_matchCriterion_)
        if type(set_matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == set_matchCriterion_:
            pass
        elif 'MATCH_EVERY' == set_matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == set_matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_matchCriterion_ = set_matchCriterion_

    def get_matchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def set_metadata(self, set_metadata_ = None):
        super(PrimitivePickSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(PrimitivePickSensor, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def get_pickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def set_pickingGeometry(self, set_pickingGeometry_ = None):
        super(PrimitivePickSensor, self).set_pickingGeometry(set_pickingGeometry_)
        if type(set_pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_pickingGeometry_ = set_pickingGeometry_

    def get_pickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def set_pickTarget(self, set_pickTarget_):
        super(PrimitivePickSensor, self).set_pickTarget(set_pickTarget_)
        if type(set_pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_pickTarget_ = set_pickTarget_

    def get_pickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def set_DEF(self, set_DEF_):
        super(PrimitivePickSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(PrimitivePickSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(PrimitivePickSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProgramShader(X3DShaderNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Cg' == language_:
            pass
        elif 'GLSL' == language_:
            pass
        elif 'HLSL' == language_:
            pass
        else:
            raise InvalidFieldValueException()
        self.language_ = kwargs.pop("language")
        return

    def set_activate(self, set_activate_):
        super(ProgramShader, self).set_activate(set_activate_)
        if type(set_activate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_activate_ = set_activate_

    def get_isSelected(self):
        if type(self.isSelected_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isSelected_


    def get_isValid(self):
        if type(self.isValid_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isValid_

    def set_metadata(self, set_metadata_ = None):
        super(ProgramShader, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_programs(self, set_programs_):
        super(ProgramShader, self).set_programs(set_programs_)
        if type(set_programs_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_programs_ = set_programs_

    def get_programs(self):
        if type(self.programs_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.programs_

    def set_DEF(self, set_DEF_):
        super(ProgramShader, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ProgramShader, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ProgramShader, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProjectionVolumeStyle(X3DVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(ProjectionVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_intensityThreshold(self, set_intensityThreshold_ = 0):
        super(ProjectionVolumeStyle, self).set_intensityThreshold(set_intensityThreshold_)
        if type(set_intensityThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensityThreshold_ < 0:
                raise InvalidFieldValueException()
        if set_intensityThreshold_ > 1:
                raise InvalidFieldValueException()
        self.set_intensityThreshold_ = set_intensityThreshold_

    def get_intensityThreshold(self):
        if type(self.intensityThreshold_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensityThreshold_

    def set_metadata(self, set_metadata_ = None):
        super(ProjectionVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_type(self, set_type_ = "MAX"):
        super(ProjectionVolumeStyle, self).set_type(set_type_)
        if type(set_type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MAX' == set_type_:
            pass
        elif 'MIN' == set_type_:
            pass
        elif 'AVERAGE' == set_type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_type_ = set_type_

    def get_type(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def set_DEF(self, set_DEF_):
        super(ProjectionVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ProjectionVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ProjectionVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProtoInstance(X3DPrototypeInstance, X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_fieldValue(self, set_fieldValue_):
        super(ProtoInstance, self).set_fieldValue(set_fieldValue_)
        if type(set_fieldValue_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_fieldValue_ = set_fieldValue_

    def get_fieldValue(self):
        if type(self.fieldValue_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.fieldValue_

    def set_metadata(self, set_metadata_ = None):
        super(ProtoInstance, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_name(self, set_name_):
        super(ProtoInstance, self).set_name(set_name_)
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_DEF(self, set_DEF_):
        super(ProtoInstance, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ProtoInstance, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ProtoInstance, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ProximitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(ProximitySensor, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_


    def get_centerOfRotation_changed(self):
        if type(self.centerOfRotation_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_changed_

    def set_enabled(self, set_enabled_ = True):
        super(ProximitySensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_enterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def get_exitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(ProximitySensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_orientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def get_position_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def set_DEF(self, set_DEF_):
        super(ProximitySensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ProximitySensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ProximitySensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class QuadSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(QuadSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(QuadSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(QuadSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(QuadSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(QuadSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(QuadSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_texCoord(self, set_texCoord_ = None):
        super(QuadSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(QuadSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(QuadSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(QuadSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ReceiverPdu(X3DNetworkSensorNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def set_address(self, set_address_ = "localhost"):
        super(ReceiverPdu, self).set_address(set_address_)
        if type(set_address_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_address_ = set_address_

    def get_address(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def set_applicationID(self, set_applicationID_ = 0):
        super(ReceiverPdu, self).set_applicationID(set_applicationID_)
        if type(set_applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_applicationID_ = set_applicationID_

    def get_applicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def set_enabled(self, set_enabled_ = True):
        super(ReceiverPdu, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_entityID(self, set_entityID_ = 0):
        super(ReceiverPdu, self).set_entityID(set_entityID_)
        if type(set_entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityID_ = set_entityID_

    def get_entityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(ReceiverPdu, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isNetworkReader(self):
        if type(self.isNetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkReader_


    def get_isNetworkWriter(self):
        if type(self.isNetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkWriter_


    def get_isRtpHeaderHeard(self):
        if type(self.isRtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isRtpHeaderHeard_


    def get_isStandAlone(self):
        if type(self.isStandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isStandAlone_

    def set_metadata(self, set_metadata_ = None):
        super(ReceiverPdu, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_multicastRelayHost(self, set_multicastRelayHost_):
        super(ReceiverPdu, self).set_multicastRelayHost(set_multicastRelayHost_)
        if type(set_multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_multicastRelayHost_ = set_multicastRelayHost_

    def get_multicastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def set_multicastRelayPort(self, set_multicastRelayPort_ = 0):
        super(ReceiverPdu, self).set_multicastRelayPort(set_multicastRelayPort_)
        if type(set_multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_multicastRelayPort_ = set_multicastRelayPort_

    def get_multicastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def set_networkMode(self, set_networkMode_ = "standAlone"):
        super(ReceiverPdu, self).set_networkMode(set_networkMode_)
        if type(set_networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == set_networkMode_:
            pass
        elif 'networkReader' == set_networkMode_:
            pass
        elif 'networkWriter' == set_networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_networkMode_ = set_networkMode_

    def get_networkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def set_port(self, set_port_ = 0):
        super(ReceiverPdu, self).set_port(set_port_)
        if type(set_port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_port_ = set_port_

    def get_port(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def set_radioID(self, set_radioID_ = 0):
        super(ReceiverPdu, self).set_radioID(set_radioID_)
        if type(set_radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioID_ = set_radioID_

    def get_radioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def set_readInterval(self, set_readInterval_ = 0.1):
        super(ReceiverPdu, self).set_readInterval(set_readInterval_)
        if type(set_readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_readInterval_ = set_readInterval_

    def get_readInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def set_receivedPower(self, set_receivedPower_ = 0.0):
        super(ReceiverPdu, self).set_receivedPower(set_receivedPower_)
        if type(set_receivedPower_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_receivedPower_ = set_receivedPower_

    def get_receivedPower(self):
        if type(self.receivedPower_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.receivedPower_

    def set_receiverState(self, set_receiverState_ = 0):
        super(ReceiverPdu, self).set_receiverState(set_receiverState_)
        if type(set_receiverState_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_receiverState_ = set_receiverState_

    def get_receiverState(self):
        if type(self.receiverState_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.receiverState_

    def set_siteID(self, set_siteID_ = 0):
        super(ReceiverPdu, self).set_siteID(set_siteID_)
        if type(set_siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_siteID_ = set_siteID_

    def get_siteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def get_timestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def set_transmitterApplicationID(self, set_transmitterApplicationID_ = 0):
        super(ReceiverPdu, self).set_transmitterApplicationID(set_transmitterApplicationID_)
        if type(set_transmitterApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_transmitterApplicationID_ = set_transmitterApplicationID_

    def get_transmitterApplicationID(self):
        if type(self.transmitterApplicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterApplicationID_

    def set_transmitterEntityID(self, set_transmitterEntityID_ = 0):
        super(ReceiverPdu, self).set_transmitterEntityID(set_transmitterEntityID_)
        if type(set_transmitterEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_transmitterEntityID_ = set_transmitterEntityID_

    def get_transmitterEntityID(self):
        if type(self.transmitterEntityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterEntityID_

    def set_transmitterRadioID(self, set_transmitterRadioID_ = 0):
        super(ReceiverPdu, self).set_transmitterRadioID(set_transmitterRadioID_)
        if type(set_transmitterRadioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_transmitterRadioID_ = set_transmitterRadioID_

    def get_transmitterRadioID(self):
        if type(self.transmitterRadioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterRadioID_

    def set_transmitterSiteID(self, set_transmitterSiteID_ = 0):
        super(ReceiverPdu, self).set_transmitterSiteID(set_transmitterSiteID_)
        if type(set_transmitterSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_transmitterSiteID_ = set_transmitterSiteID_

    def get_transmitterSiteID(self):
        if type(self.transmitterSiteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitterSiteID_

    def set_whichGeometry(self, set_whichGeometry_ = 1):
        super(ReceiverPdu, self).set_whichGeometry(set_whichGeometry_)
        if type(set_whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_whichGeometry_ = set_whichGeometry_

    def get_whichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def set_writeInterval(self, set_writeInterval_ = 1.0):
        super(ReceiverPdu, self).set_writeInterval(set_writeInterval_)
        if type(set_writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_writeInterval_ = set_writeInterval_

    def get_writeInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def set_DEF(self, set_DEF_):
        super(ReceiverPdu, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ReceiverPdu, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ReceiverPdu, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Rectangle2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec2f:
            raise InvalidFieldTypeException()
        if size_ <= 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [2, 2])
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Rectangle2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Rectangle2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Rectangle2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Rectangle2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class RigidBody(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_angularDampingFactor(self, set_angularDampingFactor_ = 0.001):
        super(RigidBody, self).set_angularDampingFactor(set_angularDampingFactor_)
        if type(set_angularDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_angularDampingFactor_ = set_angularDampingFactor_

    def get_angularDampingFactor(self):
        if type(self.angularDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angularDampingFactor_

    def set_angularVelocity(self, set_angularVelocity_ = [0, 0, 0]):
        super(RigidBody, self).set_angularVelocity(set_angularVelocity_)
        if type(set_angularVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_angularVelocity_ = set_angularVelocity_

    def get_angularVelocity(self):
        if type(self.angularVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.angularVelocity_

    def set_autoDamp(self, set_autoDamp_ = False):
        super(RigidBody, self).set_autoDamp(set_autoDamp_)
        if type(set_autoDamp_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoDamp_ = set_autoDamp_

    def get_autoDamp(self):
        if type(self.autoDamp_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDamp_

    def set_autoDisable(self, set_autoDisable_ = False):
        super(RigidBody, self).set_autoDisable(set_autoDisable_)
        if type(set_autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoDisable_ = set_autoDisable_

    def get_autoDisable(self):
        if type(self.autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDisable_

    def set_centerOfMass(self, set_centerOfMass_ = [0, 0, 0]):
        super(RigidBody, self).set_centerOfMass(set_centerOfMass_)
        if type(set_centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_centerOfMass_ = set_centerOfMass_

    def get_centerOfMass(self):
        if type(self.centerOfMass_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfMass_

    def set_disableAngularSpeed(self, set_disableAngularSpeed_ = 0):
        super(RigidBody, self).set_disableAngularSpeed(set_disableAngularSpeed_)
        if type(set_disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_disableAngularSpeed_ = set_disableAngularSpeed_

    def get_disableAngularSpeed(self):
        if type(self.disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableAngularSpeed_

    def set_disableLinearSpeed(self, set_disableLinearSpeed_ = 0):
        super(RigidBody, self).set_disableLinearSpeed(set_disableLinearSpeed_)
        if type(set_disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_disableLinearSpeed_ = set_disableLinearSpeed_

    def get_disableLinearSpeed(self):
        if type(self.disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableLinearSpeed_

    def set_disableTime(self, set_disableTime_ = 0):
        super(RigidBody, self).set_disableTime(set_disableTime_)
        if type(set_disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_disableTime_ = set_disableTime_

    def get_disableTime(self):
        if type(self.disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.disableTime_

    def set_enabled(self, set_enabled_ = True):
        super(RigidBody, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_finiteRotationAxis(self, set_finiteRotationAxis_ = [0, 1, 0]):
        super(RigidBody, self).set_finiteRotationAxis(set_finiteRotationAxis_)
        if type(set_finiteRotationAxis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_finiteRotationAxis_ = set_finiteRotationAxis_

    def get_finiteRotationAxis(self):
        if type(self.finiteRotationAxis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.finiteRotationAxis_

    def set_fixed(self, set_fixed_ = False):
        super(RigidBody, self).set_fixed(set_fixed_)
        if type(set_fixed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_fixed_ = set_fixed_

    def get_fixed(self):
        if type(self.fixed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.fixed_

    def set_forces(self, set_forces_):
        super(RigidBody, self).set_forces(set_forces_)
        if type(set_forces_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_forces_ = set_forces_

    def get_forces(self):
        if type(self.forces_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.forces_

    def set_geometry(self, set_geometry_):
        super(RigidBody, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_inertia(self, set_inertia_ = [1, 0, 0, 0, 1, 0, 0, 0, 1]):
        super(RigidBody, self).set_inertia(set_inertia_)
        if type(set_inertia_) is not SFMatrix3f:
            raise InvalidFieldTypeException()
        self.set_inertia_ = set_inertia_

    def get_inertia(self):
        if type(self.inertia_) is not SFMatrix3f:
            raise InvalidFieldTypeException()
        return self.inertia_

    def set_linearDampingFactor(self, set_linearDampingFactor_ = 0.001):
        super(RigidBody, self).set_linearDampingFactor(set_linearDampingFactor_)
        if type(set_linearDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_linearDampingFactor_ = set_linearDampingFactor_

    def get_linearDampingFactor(self):
        if type(self.linearDampingFactor_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.linearDampingFactor_

    def set_linearVelocity(self, set_linearVelocity_ = [0, 0, 0]):
        super(RigidBody, self).set_linearVelocity(set_linearVelocity_)
        if type(set_linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_linearVelocity_ = set_linearVelocity_

    def get_linearVelocity(self):
        if type(self.linearVelocity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.linearVelocity_

    def set_mass(self, set_mass_ = 1):
        super(RigidBody, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_massDensityModel(self, set_massDensityModel_ = None):
        super(RigidBody, self).set_massDensityModel(set_massDensityModel_)
        if type(set_massDensityModel_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_massDensityModel_ = set_massDensityModel_

    def get_massDensityModel(self):
        if type(self.massDensityModel_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.massDensityModel_

    def set_metadata(self, set_metadata_ = None):
        super(RigidBody, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(RigidBody, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_position(self, set_position_ = [0, 0, 0]):
        super(RigidBody, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_torques(self, set_torques_):
        super(RigidBody, self).set_torques(set_torques_)
        if type(set_torques_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_torques_ = set_torques_

    def get_torques(self):
        if type(self.torques_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.torques_

    def set_useFiniteRotation(self, set_useFiniteRotation_ = False):
        super(RigidBody, self).set_useFiniteRotation(set_useFiniteRotation_)
        if type(set_useFiniteRotation_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_useFiniteRotation_ = set_useFiniteRotation_

    def get_useFiniteRotation(self):
        if type(self.useFiniteRotation_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useFiniteRotation_

    def set_useGlobalGravity(self, set_useGlobalGravity_ = True):
        super(RigidBody, self).set_useGlobalGravity(set_useGlobalGravity_)
        if type(set_useGlobalGravity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_useGlobalGravity_ = set_useGlobalGravity_

    def get_useGlobalGravity(self):
        if type(self.useGlobalGravity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.useGlobalGravity_

    def set_DEF(self, set_DEF_):
        super(RigidBody, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(RigidBody, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(RigidBody, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class RigidBodyCollection(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(collider_) is not SFNode:
            raise InvalidFieldTypeException()
        self.collider_ = kwargs.pop("collider", None)
        return

    def set_autoDisable(self, set_autoDisable_ = False):
        super(RigidBodyCollection, self).set_autoDisable(set_autoDisable_)
        if type(set_autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoDisable_ = set_autoDisable_

    def get_autoDisable(self):
        if type(self.autoDisable_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoDisable_

    def set_bodies(self, set_bodies_):
        super(RigidBodyCollection, self).set_bodies(set_bodies_)
        if type(set_bodies_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_bodies_ = set_bodies_

    def get_bodies(self):
        if type(self.bodies_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.bodies_

    def set_constantForceMix(self, set_constantForceMix_ = 0.0001):
        super(RigidBodyCollection, self).set_constantForceMix(set_constantForceMix_)
        if type(set_constantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_constantForceMix_ = set_constantForceMix_

    def get_constantForceMix(self):
        if type(self.constantForceMix_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.constantForceMix_

    def set_contactSurfaceThickness(self, set_contactSurfaceThickness_ = 0):
        super(RigidBodyCollection, self).set_contactSurfaceThickness(set_contactSurfaceThickness_)
        if type(set_contactSurfaceThickness_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_contactSurfaceThickness_ = set_contactSurfaceThickness_

    def get_contactSurfaceThickness(self):
        if type(self.contactSurfaceThickness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.contactSurfaceThickness_

    def set_disableAngularSpeed(self, set_disableAngularSpeed_ = 0):
        super(RigidBodyCollection, self).set_disableAngularSpeed(set_disableAngularSpeed_)
        if type(set_disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_disableAngularSpeed_ = set_disableAngularSpeed_

    def get_disableAngularSpeed(self):
        if type(self.disableAngularSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableAngularSpeed_

    def set_disableLinearSpeed(self, set_disableLinearSpeed_ = 0):
        super(RigidBodyCollection, self).set_disableLinearSpeed(set_disableLinearSpeed_)
        if type(set_disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_disableLinearSpeed_ = set_disableLinearSpeed_

    def get_disableLinearSpeed(self):
        if type(self.disableLinearSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.disableLinearSpeed_

    def set_disableTime(self, set_disableTime_ = 0):
        super(RigidBodyCollection, self).set_disableTime(set_disableTime_)
        if type(set_disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_disableTime_ = set_disableTime_

    def get_disableTime(self):
        if type(self.disableTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.disableTime_

    def set_enabled(self, set_enabled_ = True):
        super(RigidBodyCollection, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_errorCorrection(self, set_errorCorrection_ = 0.8):
        super(RigidBodyCollection, self).set_errorCorrection(set_errorCorrection_)
        if type(set_errorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_errorCorrection_ = set_errorCorrection_

    def get_errorCorrection(self):
        if type(self.errorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.errorCorrection_

    def set_gravity(self, set_gravity_ = [0, -9.8, 0]):
        super(RigidBodyCollection, self).set_gravity(set_gravity_)
        if type(set_gravity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_gravity_ = set_gravity_

    def get_gravity(self):
        if type(self.gravity_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.gravity_

    def set_iterations(self, set_iterations_ = 10):
        super(RigidBodyCollection, self).set_iterations(set_iterations_)
        if type(set_iterations_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_iterations_ = set_iterations_

    def get_iterations(self):
        if type(self.iterations_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.iterations_

    def set_joints(self, set_joints_):
        super(RigidBodyCollection, self).set_joints(set_joints_)
        if type(set_joints_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_joints_ = set_joints_

    def get_joints(self):
        if type(self.joints_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.joints_

    def set_maxCorrectionSpeed(self, set_maxCorrectionSpeed_ = -1):
        super(RigidBodyCollection, self).set_maxCorrectionSpeed(set_maxCorrectionSpeed_)
        if type(set_maxCorrectionSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxCorrectionSpeed_ = set_maxCorrectionSpeed_

    def get_maxCorrectionSpeed(self):
        if type(self.maxCorrectionSpeed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxCorrectionSpeed_

    def set_metadata(self, set_metadata_ = None):
        super(RigidBodyCollection, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_preferAccuracy(self, set_preferAccuracy_ = False):
        super(RigidBodyCollection, self).set_preferAccuracy(set_preferAccuracy_)
        if type(set_preferAccuracy_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_preferAccuracy_ = set_preferAccuracy_

    def get_preferAccuracy(self):
        if type(self.preferAccuracy_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.preferAccuracy_

    def set_contacts(self, set_contacts_):
        super(RigidBodyCollection, self).set_contacts(set_contacts_)
        if type(set_contacts_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_contacts_ = set_contacts_
    def set_DEF(self, set_DEF_):
        super(RigidBodyCollection, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(RigidBodyCollection, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(RigidBodyCollection, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarChaser(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", 0)
        if type(initialValue_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", 0)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(ScalarChaser, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(ScalarChaser, self).set_destination(set_destination_)
        if type(set_destination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(ScalarChaser, self).set_value(set_value_)
        if type(set_value_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ScalarChaser, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ScalarChaser, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ScalarChaser, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarDamper(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination", 0)
        if type(initialValue_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue", 0)
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(ScalarDamper, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(ScalarDamper, self).set_destination(set_destination_)
        if type(set_destination_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(ScalarDamper, self).set_value(set_value_)
        if type(set_value_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(ScalarDamper, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(ScalarDamper, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ScalarDamper, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ScalarDamper, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ScalarDamper, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScalarInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(ScalarInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(ScalarInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(ScalarInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_fraction(self, set_fraction_):
        super(ScalarInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(ScalarInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ScalarInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ScalarInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScreenFontStyle(X3DFontStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(family_) is not MFString:
            raise InvalidFieldTypeException()
        if '"SANS"' == family_:
            pass
        elif '"SERIF"' == family_:
            pass
        elif '"TYPEWRITER"' == family_:
            pass
        else:
            raise InvalidFieldValueException()
        self.family_ = kwargs.pop("family", "SERIF")
        if type(horizontal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.horizontal_ = kwargs.pop("horizontal", True)
        if type(justify_) is not MFString:
            raise InvalidFieldTypeException()
        if '"MIDDLE"' == justify_:
            pass
        elif '"MIDDLE" "BEGIN"' == justify_:
            pass
        elif '"MIDDLE" "END"' == justify_:
            pass
        elif '"MIDDLE" "FIRST"' == justify_:
            pass
        elif '"MIDDLE" "MIDDLE"' == justify_:
            pass
        elif '"BEGIN"' == justify_:
            pass
        elif '"BEGIN" "BEGIN"' == justify_:
            pass
        elif '"BEGIN" "END"' == justify_:
            pass
        elif '"BEGIN" "FIRST"' == justify_:
            pass
        elif '"BEGIN" "MIDDLE"' == justify_:
            pass
        elif '"END"' == justify_:
            pass
        elif '"END" "BEGIN"' == justify_:
            pass
        elif '"END" "END"' == justify_:
            pass
        elif '"END" "FIRST"' == justify_:
            pass
        elif '"END" "MIDDLE"' == justify_:
            pass
        elif '"FIRST"' == justify_:
            pass
        elif '"FIRST" "BEGIN"' == justify_:
            pass
        elif '"FIRST" "END"' == justify_:
            pass
        elif '"FIRST" "FIRST"' == justify_:
            pass
        elif '"FIRST" "MIDDLE"' == justify_:
            pass
        else:
            raise InvalidFieldValueException()
        self.justify_ = kwargs.pop("justify", "BEGIN")
        if type(language_) is not SFString:
            raise InvalidFieldTypeException()
        self.language_ = kwargs.pop("language")
        if type(leftToRight_) is not SFBool:
            raise InvalidFieldTypeException()
        self.leftToRight_ = kwargs.pop("leftToRight", True)
        if type(pointSize_) is not SFFloat:
            raise InvalidFieldTypeException()
        if pointSize_ <= 0:
                raise InvalidFieldValueException()
        self.pointSize_ = kwargs.pop("pointSize", 12.0)
        if type(spacing_) is not SFFloat:
            raise InvalidFieldTypeException()
        if spacing_ < 0:
                raise InvalidFieldValueException()
        self.spacing_ = kwargs.pop("spacing", 1.0)
        if type(style_) is not SFString:
            raise InvalidFieldTypeException()
        if 'PLAIN' == style_:
            pass
        elif 'BOLD' == style_:
            pass
        elif 'ITALIC' == style_:
            pass
        elif 'BOLDITALIC' == style_:
            pass
        else:
            raise InvalidFieldValueException()
        self.style_ = kwargs.pop("style", "PLAIN")
        if type(topToBottom_) is not SFBool:
            raise InvalidFieldTypeException()
        self.topToBottom_ = kwargs.pop("topToBottom", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(ScreenFontStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(ScreenFontStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ScreenFontStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ScreenFontStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ScreenGroup(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(ScreenGroup, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(ScreenGroup, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(ScreenGroup, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(ScreenGroup, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(ScreenGroup, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ScreenGroup, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ScreenGroup, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Script(X3DScriptNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(directOutput_) is not SFBool:
            raise InvalidFieldTypeException()
        self.directOutput_ = kwargs.pop("directOutput", False)
        if type(mustEvaluate_) is not SFBool:
            raise InvalidFieldTypeException()
        self.mustEvaluate_ = kwargs.pop("mustEvaluate", False)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Script, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_url(self, set_url_):
        super(Script, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(Script, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Script, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Script, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SegmentedVolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_dimensions(self, set_dimensions_ = [1, 1, 1]):
        super(SegmentedVolumeData, self).set_dimensions(set_dimensions_)
        if type(set_dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.set_dimensions_ = set_dimensions_

    def get_dimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def set_metadata(self, set_metadata_ = None):
        super(SegmentedVolumeData, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_renderStyle(self, set_renderStyle_):
        super(SegmentedVolumeData, self).set_renderStyle(set_renderStyle_)
        if type(set_renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_renderStyle_ = set_renderStyle_

    def get_renderStyle(self):
        if type(self.renderStyle_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def set_segmentEnabled(self, set_segmentEnabled_):
        super(SegmentedVolumeData, self).set_segmentEnabled(set_segmentEnabled_)
        if type(set_segmentEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        self.set_segmentEnabled_ = set_segmentEnabled_

    def get_segmentEnabled(self):
        if type(self.segmentEnabled_) is not MFBool:
            raise InvalidFieldTypeException()
        return self.segmentEnabled_

    def set_segmentIdentifiers(self, set_segmentIdentifiers_ = None):
        super(SegmentedVolumeData, self).set_segmentIdentifiers(set_segmentIdentifiers_)
        if type(set_segmentIdentifiers_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_segmentIdentifiers_ = set_segmentIdentifiers_

    def get_segmentIdentifiers(self):
        if type(self.segmentIdentifiers_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.segmentIdentifiers_

    def set_voxels(self, set_voxels_ = None):
        super(SegmentedVolumeData, self).set_voxels(set_voxels_)
        if type(set_voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_voxels_ = set_voxels_

    def get_voxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def set_DEF(self, set_DEF_):
        super(SegmentedVolumeData, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SegmentedVolumeData, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SegmentedVolumeData, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShadedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(phaseFunction_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Henyey-Greenstein' == phaseFunction_:
            pass
        elif 'NONE' == phaseFunction_:
            pass
        else:
            raise InvalidFieldValueException()
        self.phaseFunction_ = kwargs.pop("phaseFunction", "Henyey-Greenstein")
        return

    def set_enabled(self, set_enabled_ = True):
        super(ShadedVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_lighting(self, set_lighting_ = False):
        super(ShadedVolumeStyle, self).set_lighting(set_lighting_)
        if type(set_lighting_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_lighting_ = set_lighting_

    def get_lighting(self):
        if type(self.lighting_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.lighting_

    def set_material(self, set_material_ = None):
        super(ShadedVolumeStyle, self).set_material(set_material_)
        if type(set_material_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_material_ = set_material_

    def get_material(self):
        if type(self.material_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.material_

    def set_metadata(self, set_metadata_ = None):
        super(ShadedVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_shadows(self, set_shadows_ = False):
        super(ShadedVolumeStyle, self).set_shadows(set_shadows_)
        if type(set_shadows_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_shadows_ = set_shadows_

    def get_shadows(self):
        if type(self.shadows_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.shadows_

    def set_surfaceNormals(self, set_surfaceNormals_ = None):
        super(ShadedVolumeStyle, self).set_surfaceNormals(set_surfaceNormals_)
        if type(set_surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_surfaceNormals_ = set_surfaceNormals_

    def get_surfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def set_DEF(self, set_DEF_):
        super(ShadedVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ShadedVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ShadedVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShaderPart(X3DNode, X3DUrlObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(ShaderPart, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_type(self, set_type_ = "VERTEX"):
        super(ShaderPart, self).set_type(set_type_)
        if type(set_type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'VERTEX' == set_type_:
            pass
        elif 'FRAGMENT' == set_type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_type_ = set_type_

    def get_type(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def set_url(self, set_url_):
        super(ShaderPart, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(ShaderPart, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ShaderPart, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ShaderPart, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ShaderProgram(X3DNode, X3DUrlObject, X3DProgrammableShaderObject):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(ShaderProgram, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_type(self, set_type_ = "VERTEX"):
        super(ShaderProgram, self).set_type(set_type_)
        if type(set_type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'VERTEX' == set_type_:
            pass
        elif 'FRAGMENT' == set_type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_type_ = set_type_

    def get_type(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def set_url(self, set_url_):
        super(ShaderProgram, self).set_url(set_url_)
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    def set_DEF(self, set_DEF_):
        super(ShaderProgram, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ShaderProgram, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ShaderProgram, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Shape(X3DShapeNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_appearance(self, set_appearance_ = None):
        super(Shape, self).set_appearance(set_appearance_)
        if type(set_appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_appearance_ = set_appearance_

    def get_appearance(self):
        if type(self.appearance_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.appearance_

    def set_geometry(self, set_geometry_ = None):
        super(Shape, self).set_geometry(set_geometry_)
        if type(set_geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_geometry_ = set_geometry_

    def get_geometry(self):
        if type(self.geometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.geometry_

    def set_metadata(self, set_metadata_ = None):
        super(Shape, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Shape, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Shape, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Shape, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SignalPdu(X3DNetworkSensorNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def set_address(self, set_address_ = "localhost"):
        super(SignalPdu, self).set_address(set_address_)
        if type(set_address_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_address_ = set_address_

    def get_address(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def set_applicationID(self, set_applicationID_ = 0):
        super(SignalPdu, self).set_applicationID(set_applicationID_)
        if type(set_applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_applicationID_ = set_applicationID_

    def get_applicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def set_data(self, set_data_):
        super(SignalPdu, self).set_data(set_data_)
        if type(set_data_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_data_ = set_data_

    def get_data(self):
        if type(self.data_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.data_

    def set_dataLength(self, set_dataLength_ = 0):
        super(SignalPdu, self).set_dataLength(set_dataLength_)
        if type(set_dataLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_dataLength_ = set_dataLength_

    def get_dataLength(self):
        if type(self.dataLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.dataLength_

    def set_enabled(self, set_enabled_ = True):
        super(SignalPdu, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_encodingScheme(self, set_encodingScheme_ = 0):
        super(SignalPdu, self).set_encodingScheme(set_encodingScheme_)
        if type(set_encodingScheme_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_encodingScheme_ = set_encodingScheme_

    def get_encodingScheme(self):
        if type(self.encodingScheme_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.encodingScheme_

    def set_entityID(self, set_entityID_ = 0):
        super(SignalPdu, self).set_entityID(set_entityID_)
        if type(set_entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityID_ = set_entityID_

    def get_entityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(SignalPdu, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isNetworkReader(self):
        if type(self.isNetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkReader_


    def get_isNetworkWriter(self):
        if type(self.isNetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkWriter_


    def get_isRtpHeaderHeard(self):
        if type(self.isRtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isRtpHeaderHeard_


    def get_isStandAlone(self):
        if type(self.isStandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isStandAlone_

    def set_metadata(self, set_metadata_ = None):
        super(SignalPdu, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_multicastRelayHost(self, set_multicastRelayHost_):
        super(SignalPdu, self).set_multicastRelayHost(set_multicastRelayHost_)
        if type(set_multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_multicastRelayHost_ = set_multicastRelayHost_

    def get_multicastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def set_multicastRelayPort(self, set_multicastRelayPort_ = 0):
        super(SignalPdu, self).set_multicastRelayPort(set_multicastRelayPort_)
        if type(set_multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_multicastRelayPort_ = set_multicastRelayPort_

    def get_multicastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def set_networkMode(self, set_networkMode_ = "standAlone"):
        super(SignalPdu, self).set_networkMode(set_networkMode_)
        if type(set_networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == set_networkMode_:
            pass
        elif 'networkReader' == set_networkMode_:
            pass
        elif 'networkWriter' == set_networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_networkMode_ = set_networkMode_

    def get_networkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def set_port(self, set_port_ = 0):
        super(SignalPdu, self).set_port(set_port_)
        if type(set_port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_port_ = set_port_

    def get_port(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def set_radioID(self, set_radioID_ = 0):
        super(SignalPdu, self).set_radioID(set_radioID_)
        if type(set_radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioID_ = set_radioID_

    def get_radioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def set_readInterval(self, set_readInterval_ = 0.1):
        super(SignalPdu, self).set_readInterval(set_readInterval_)
        if type(set_readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_readInterval_ = set_readInterval_

    def get_readInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def set_sampleRate(self, set_sampleRate_ = 0):
        super(SignalPdu, self).set_sampleRate(set_sampleRate_)
        if type(set_sampleRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_sampleRate_ = set_sampleRate_

    def get_sampleRate(self):
        if type(self.sampleRate_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.sampleRate_

    def set_samples(self, set_samples_ = 0):
        super(SignalPdu, self).set_samples(set_samples_)
        if type(set_samples_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_samples_ = set_samples_

    def get_samples(self):
        if type(self.samples_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.samples_

    def set_siteID(self, set_siteID_ = 0):
        super(SignalPdu, self).set_siteID(set_siteID_)
        if type(set_siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_siteID_ = set_siteID_

    def get_siteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_

    def set_tdlType(self, set_tdlType_ = 0):
        super(SignalPdu, self).set_tdlType(set_tdlType_)
        if type(set_tdlType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_tdlType_ = set_tdlType_

    def get_tdlType(self):
        if type(self.tdlType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.tdlType_


    def get_timestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def set_whichGeometry(self, set_whichGeometry_ = 1):
        super(SignalPdu, self).set_whichGeometry(set_whichGeometry_)
        if type(set_whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_whichGeometry_ = set_whichGeometry_

    def get_whichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def set_writeInterval(self, set_writeInterval_ = 1.0):
        super(SignalPdu, self).set_writeInterval(set_writeInterval_)
        if type(set_writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_writeInterval_ = set_writeInterval_

    def get_writeInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def set_DEF(self, set_DEF_):
        super(SignalPdu, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SignalPdu, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SignalPdu, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SilhouetteEnhancementVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_enabled(self, set_enabled_ = True):
        super(SilhouetteEnhancementVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(SilhouetteEnhancementVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_silhouetteBoundaryOpacity(self, set_silhouetteBoundaryOpacity_ = 0):
        super(SilhouetteEnhancementVolumeStyle, self).set_silhouetteBoundaryOpacity(set_silhouetteBoundaryOpacity_)
        if type(set_silhouetteBoundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_silhouetteBoundaryOpacity_ < 0:
                raise InvalidFieldValueException()
        if set_silhouetteBoundaryOpacity_ > 1:
                raise InvalidFieldValueException()
        self.set_silhouetteBoundaryOpacity_ = set_silhouetteBoundaryOpacity_

    def get_silhouetteBoundaryOpacity(self):
        if type(self.silhouetteBoundaryOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteBoundaryOpacity_

    def set_silhouetteRetainedOpacity(self, set_silhouetteRetainedOpacity_ = 1):
        super(SilhouetteEnhancementVolumeStyle, self).set_silhouetteRetainedOpacity(set_silhouetteRetainedOpacity_)
        if type(set_silhouetteRetainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_silhouetteRetainedOpacity_ < 0:
                raise InvalidFieldValueException()
        if set_silhouetteRetainedOpacity_ > 1:
                raise InvalidFieldValueException()
        self.set_silhouetteRetainedOpacity_ = set_silhouetteRetainedOpacity_

    def get_silhouetteRetainedOpacity(self):
        if type(self.silhouetteRetainedOpacity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteRetainedOpacity_

    def set_silhouetteSharpness(self, set_silhouetteSharpness_ = 0.5):
        super(SilhouetteEnhancementVolumeStyle, self).set_silhouetteSharpness(set_silhouetteSharpness_)
        if type(set_silhouetteSharpness_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_silhouetteSharpness_ < 0:
                raise InvalidFieldValueException()
        self.set_silhouetteSharpness_ = set_silhouetteSharpness_

    def get_silhouetteSharpness(self):
        if type(self.silhouetteSharpness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.silhouetteSharpness_

    def set_surfaceNormals(self, set_surfaceNormals_ = None):
        super(SilhouetteEnhancementVolumeStyle, self).set_surfaceNormals(set_surfaceNormals_)
        if type(set_surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_surfaceNormals_ = set_surfaceNormals_

    def get_surfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def set_DEF(self, set_DEF_):
        super(SilhouetteEnhancementVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SilhouetteEnhancementVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SilhouetteEnhancementVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SingleAxisHingeJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_anchorPoint(self, set_anchorPoint_ = [0, 0, 0]):
        super(SingleAxisHingeJoint, self).set_anchorPoint(set_anchorPoint_)
        if type(set_anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_anchorPoint_ = set_anchorPoint_

    def get_anchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_


    def get_angle(self):
        if type(self.angle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angle_


    def get_angleRate(self):
        if type(self.angleRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.angleRate_

    def set_axis(self, set_axis_ = [0, 0, 0]):
        super(SingleAxisHingeJoint, self).set_axis(set_axis_)
        if type(set_axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis_ = set_axis_

    def get_axis(self):
        if type(self.axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis_

    def set_body1(self, set_body1_ = None):
        super(SingleAxisHingeJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def get_body1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_

    def set_body2(self, set_body2_ = None):
        super(SingleAxisHingeJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def get_body2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(SingleAxisHingeJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_maxAngle(self, set_maxAngle_ = 3.141592653):
        super(SingleAxisHingeJoint, self).set_maxAngle(set_maxAngle_)
        if type(set_maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxAngle_ = set_maxAngle_

    def get_maxAngle(self):
        if type(self.maxAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxAngle_

    def set_metadata(self, set_metadata_ = None):
        super(SingleAxisHingeJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minAngle(self, set_minAngle_ = -3.141592653):
        super(SingleAxisHingeJoint, self).set_minAngle(set_minAngle_)
        if type(set_minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_minAngle_ = set_minAngle_

    def get_minAngle(self):
        if type(self.minAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minAngle_

    def set_stopBounce(self, set_stopBounce_ = 0):
        super(SingleAxisHingeJoint, self).set_stopBounce(set_stopBounce_)
        if type(set_stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stopBounce_ = set_stopBounce_

    def get_stopBounce(self):
        if type(self.stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopBounce_

    def set_stopErrorCorrection(self, set_stopErrorCorrection_ = 0.8):
        super(SingleAxisHingeJoint, self).set_stopErrorCorrection(set_stopErrorCorrection_)
        if type(set_stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stopErrorCorrection_ = set_stopErrorCorrection_

    def get_stopErrorCorrection(self):
        if type(self.stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopErrorCorrection_

    def set_DEF(self, set_DEF_):
        super(SingleAxisHingeJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SingleAxisHingeJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SingleAxisHingeJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SliderJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_axis(self, set_axis_ = [0, 1, 0]):
        super(SliderJoint, self).set_axis(set_axis_)
        if type(set_axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis_ = set_axis_

    def get_axis(self):
        if type(self.axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis_

    def set_body1(self, set_body1_ = None):
        super(SliderJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_

    def set_body2(self, set_body2_ = None):
        super(SliderJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(SliderJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_maxSeparation(self, set_maxSeparation_ = 1):
        super(SliderJoint, self).set_maxSeparation(set_maxSeparation_)
        if type(set_maxSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_maxSeparation_ = set_maxSeparation_

    def get_maxSeparation(self):
        if type(self.maxSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxSeparation_

    def set_metadata(self, set_metadata_ = None):
        super(SliderJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minSeparation(self, set_minSeparation_ = 0):
        super(SliderJoint, self).set_minSeparation(set_minSeparation_)
        if type(set_minSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_minSeparation_ = set_minSeparation_

    def get_minSeparation(self):
        if type(self.minSeparation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minSeparation_


    def get_separation(self):
        if type(self.separation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.separation_


    def get_separationRate(self):
        if type(self.separationRate_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.separationRate_

    def set_sliderForce(self, set_sliderForce_ = 0):
        super(SliderJoint, self).set_sliderForce(set_sliderForce_)
        if type(set_sliderForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_sliderForce_ = set_sliderForce_

    def get_sliderForce(self):
        if type(self.sliderForce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.sliderForce_

    def set_stopBounce(self, set_stopBounce_ = 0):
        super(SliderJoint, self).set_stopBounce(set_stopBounce_)
        if type(set_stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stopBounce_ = set_stopBounce_

    def get_stopBounce(self):
        if type(self.stopBounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopBounce_

    def set_stopErrorCorrection(self, set_stopErrorCorrection_ = 1):
        super(SliderJoint, self).set_stopErrorCorrection(set_stopErrorCorrection_)
        if type(set_stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_stopErrorCorrection_ = set_stopErrorCorrection_

    def get_stopErrorCorrection(self):
        if type(self.stopErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stopErrorCorrection_

    def set_DEF(self, set_DEF_):
        super(SliderJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SliderJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SliderJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Sound(X3DSoundNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(spatialize_) is not SFBool:
            raise InvalidFieldTypeException()
        self.spatialize_ = kwargs.pop("spatialize", True)
        return

    def set_direction(self, set_direction_ = [0, 0, 1]):
        super(Sound, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_intensity(self, set_intensity_ = 1):
        super(Sound, self).set_intensity(set_intensity_)
        if type(set_intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensity_ < 0:
                raise InvalidFieldValueException()
        if set_intensity_ > 1:
                raise InvalidFieldValueException()
        self.set_intensity_ = set_intensity_

    def get_intensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def set_location(self, set_location_ = [0, 0, 0]):
        super(Sound, self).set_location(set_location_)
        if type(set_location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_location_ = set_location_

    def get_location(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def set_maxBack(self, set_maxBack_ = 10):
        super(Sound, self).set_maxBack(set_maxBack_)
        if type(set_maxBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_maxBack_ < 0:
                raise InvalidFieldValueException()
        self.set_maxBack_ = set_maxBack_

    def get_maxBack(self):
        if type(self.maxBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxBack_

    def set_maxFront(self, set_maxFront_ = 10):
        super(Sound, self).set_maxFront(set_maxFront_)
        if type(set_maxFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_maxFront_ < 0:
                raise InvalidFieldValueException()
        self.set_maxFront_ = set_maxFront_

    def get_maxFront(self):
        if type(self.maxFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxFront_

    def set_metadata(self, set_metadata_ = None):
        super(Sound, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minBack(self, set_minBack_ = 1):
        super(Sound, self).set_minBack(set_minBack_)
        if type(set_minBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_minBack_ < 0:
                raise InvalidFieldValueException()
        self.set_minBack_ = set_minBack_

    def get_minBack(self):
        if type(self.minBack_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minBack_

    def set_minFront(self, set_minFront_ = 1):
        super(Sound, self).set_minFront(set_minFront_)
        if type(set_minFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_minFront_ < 0:
                raise InvalidFieldValueException()
        self.set_minFront_ = set_minFront_

    def get_minFront(self):
        if type(self.minFront_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.minFront_

    def set_priority(self, set_priority_ = 0):
        super(Sound, self).set_priority(set_priority_)
        if type(set_priority_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_priority_ < 0:
                raise InvalidFieldValueException()
        if set_priority_ > 1:
                raise InvalidFieldValueException()
        self.set_priority_ = set_priority_

    def get_priority(self):
        if type(self.priority_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.priority_

    def set_source(self, set_source_ = None):
        super(Sound, self).set_source(set_source_)
        if type(set_source_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_source_ = set_source_

    def get_source(self):
        if type(self.source_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.source_

    def set_DEF(self, set_DEF_):
        super(Sound, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Sound, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Sound, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Sphere(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ <= 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 1)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_metadata(self, set_metadata_ = None):
        super(Sphere, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(Sphere, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Sphere, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Sphere, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SphereSensor(X3DDragSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_autoOffset(self, set_autoOffset_ = True):
        super(SphereSensor, self).set_autoOffset(set_autoOffset_)
        if type(set_autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_autoOffset_ = set_autoOffset_

    def get_autoOffset(self):
        if type(self.autoOffset_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.autoOffset_

    def set_description(self, set_description_):
        super(SphereSensor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(SphereSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(SphereSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_offset(self, set_offset_ = [0, 1, 0, 0]):
        super(SphereSensor, self).set_offset(set_offset_)
        if type(set_offset_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_offset_ = set_offset_

    def get_offset(self):
        if type(self.offset_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.offset_


    def get_rotation_changed(self):
        if type(self.rotation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_changed_


    def get_trackPoint_changed(self):
        if type(self.trackPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.trackPoint_changed_

    def set_DEF(self, set_DEF_):
        super(SphereSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SphereSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SphereSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplinePositionInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def set_key(self, set_key_):
        super(SplinePositionInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(SplinePositionInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_keyVelocity(self, set_keyVelocity_):
        super(SplinePositionInterpolator, self).set_keyVelocity(set_keyVelocity_)
        if type(set_keyVelocity_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_keyVelocity_ = set_keyVelocity_

    def get_keyVelocity(self):
        if type(self.keyVelocity_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def set_metadata(self, set_metadata_ = None):
        super(SplinePositionInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normalizeVelocity(self, set_normalizeVelocity_ = False):
        super(SplinePositionInterpolator, self).set_normalizeVelocity(set_normalizeVelocity_)
        if type(set_normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_normalizeVelocity_ = set_normalizeVelocity_

    def get_normalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, set_fraction_):
        super(SplinePositionInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(SplinePositionInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SplinePositionInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SplinePositionInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplinePositionInterpolator2D(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def set_key(self, set_key_):
        super(SplinePositionInterpolator2D, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(SplinePositionInterpolator2D, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_keyVelocity(self, set_keyVelocity_):
        super(SplinePositionInterpolator2D, self).set_keyVelocity(set_keyVelocity_)
        if type(set_keyVelocity_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_keyVelocity_ = set_keyVelocity_

    def get_keyVelocity(self):
        if type(self.keyVelocity_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def set_metadata(self, set_metadata_ = None):
        super(SplinePositionInterpolator2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normalizeVelocity(self, set_normalizeVelocity_ = False):
        super(SplinePositionInterpolator2D, self).set_normalizeVelocity(set_normalizeVelocity_)
        if type(set_normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_normalizeVelocity_ = set_normalizeVelocity_

    def get_normalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, set_fraction_):
        super(SplinePositionInterpolator2D, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(SplinePositionInterpolator2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SplinePositionInterpolator2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SplinePositionInterpolator2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SplineScalarInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(closed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.closed_ = kwargs.pop("closed", False)
        return

    def set_key(self, set_key_):
        super(SplineScalarInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(SplineScalarInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_keyVelocity(self, set_keyVelocity_):
        super(SplineScalarInterpolator, self).set_keyVelocity(set_keyVelocity_)
        if type(set_keyVelocity_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_keyVelocity_ = set_keyVelocity_

    def get_keyVelocity(self):
        if type(self.keyVelocity_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.keyVelocity_

    def set_metadata(self, set_metadata_ = None):
        super(SplineScalarInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normalizeVelocity(self, set_normalizeVelocity_ = False):
        super(SplineScalarInterpolator, self).set_normalizeVelocity(set_normalizeVelocity_)
        if type(set_normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_normalizeVelocity_ = set_normalizeVelocity_

    def get_normalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, set_fraction_):
        super(SplineScalarInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(SplineScalarInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SplineScalarInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SplineScalarInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SpotLight(X3DLightNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(radius_) is not SFFloat:
            raise InvalidFieldTypeException()
        if radius_ < 0:
                raise InvalidFieldValueException()
        self.radius_ = kwargs.pop("radius", 100)
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0):
        super(SpotLight, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_attenuation(self, set_attenuation_ = [1, 0, 0]):
        super(SpotLight, self).set_attenuation(set_attenuation_)
        if type(set_attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_attenuation_ < 0:
                raise InvalidFieldValueException()
        self.set_attenuation_ = set_attenuation_

    def get_attenuation(self):
        if type(self.attenuation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.attenuation_

    def set_beamWidth(self, set_beamWidth_ = 0.7854):
        super(SpotLight, self).set_beamWidth(set_beamWidth_)
        if type(set_beamWidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_beamWidth_ > 1.570796:
                raise InvalidFieldValueException()
        if set_beamWidth_ <= 0:
                raise InvalidFieldValueException()
        self.set_beamWidth_ = set_beamWidth_

    def get_beamWidth(self):
        if type(self.beamWidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.beamWidth_

    def set_color(self, set_color_ = [1, 1, 1]):
        super(SpotLight, self).set_color(set_color_)
        if type(set_color_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_color_ < 0:
                raise InvalidFieldValueException()
        if set_color_ > 1:
                raise InvalidFieldValueException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.color_

    def set_cutOffAngle(self, set_cutOffAngle_ = 1.570796):
        super(SpotLight, self).set_cutOffAngle(set_cutOffAngle_)
        if type(set_cutOffAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_cutOffAngle_ > 1.570796:
                raise InvalidFieldValueException()
        if set_cutOffAngle_ <= 0:
                raise InvalidFieldValueException()
        self.set_cutOffAngle_ = set_cutOffAngle_

    def get_cutOffAngle(self):
        if type(self.cutOffAngle_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.cutOffAngle_

    def set_direction(self, set_direction_ = [0, 0, -1]):
        super(SpotLight, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_global(self, set_global_ = True):
        super(SpotLight, self).set_global(set_global_)
        if type(set_global_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_global_ = set_global_

    def get_global(self):
        if type(self.global_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.global_

    def set_intensity(self, set_intensity_ = 1):
        super(SpotLight, self).set_intensity(set_intensity_)
        if type(set_intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_intensity_ < 0:
                raise InvalidFieldValueException()
        if set_intensity_ > 1:
                raise InvalidFieldValueException()
        self.set_intensity_ = set_intensity_

    def get_intensity(self):
        if type(self.intensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.intensity_

    def set_location(self, set_location_ = [0, 0, 0]):
        super(SpotLight, self).set_location(set_location_)
        if type(set_location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_location_ = set_location_

    def get_location(self):
        if type(self.location_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.location_

    def set_metadata(self, set_metadata_ = None):
        super(SpotLight, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_on(self, set_on_ = True):
        super(SpotLight, self).set_on(set_on_)
        if type(set_on_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_on_ = set_on_

    def get_on(self):
        if type(self.on_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.on_

    def set_DEF(self, set_DEF_):
        super(SpotLight, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SpotLight, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SpotLight, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SquadOrientationInterpolator(X3DInterpolatorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_key(self, set_key_):
        super(SquadOrientationInterpolator, self).set_key(set_key_)
        if type(set_key_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_key_ = set_key_

    def get_key(self):
        if type(self.key_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.key_

    def set_keyValue(self, set_keyValue_):
        super(SquadOrientationInterpolator, self).set_keyValue(set_keyValue_)
        if type(set_keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        self.set_keyValue_ = set_keyValue_

    def get_keyValue(self):
        if type(self.keyValue_) is not MFRotation:
            raise InvalidFieldTypeException()
        return self.keyValue_

    def set_metadata(self, set_metadata_ = None):
        super(SquadOrientationInterpolator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normalizeVelocity(self, set_normalizeVelocity_ = False):
        super(SquadOrientationInterpolator, self).set_normalizeVelocity(set_normalizeVelocity_)
        if type(set_normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_normalizeVelocity_ = set_normalizeVelocity_

    def get_normalizeVelocity(self):
        if type(self.normalizeVelocity_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.normalizeVelocity_

    def set_fraction(self, set_fraction_):
        super(SquadOrientationInterpolator, self).set_fraction(set_fraction_)
        if type(set_fraction_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_fraction_ = set_fraction_

    def get_value_changed(self):
        if type(self.value_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(SquadOrientationInterpolator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SquadOrientationInterpolator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SquadOrientationInterpolator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class StaticGroup(X3DChildNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.children_ = kwargs.pop("children")
        return

    def set_metadata(self, set_metadata_ = None):
        super(StaticGroup, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(StaticGroup, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(StaticGroup, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(StaticGroup, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class StringSensor(X3DKeyDeviceSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_deletionAllowed(self, set_deletionAllowed_ = True):
        super(StringSensor, self).set_deletionAllowed(set_deletionAllowed_)
        if type(set_deletionAllowed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_deletionAllowed_ = set_deletionAllowed_

    def get_deletionAllowed(self):
        if type(self.deletionAllowed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.deletionAllowed_

    def set_enabled(self, set_enabled_ = True):
        super(StringSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_enteredText(self):
        if type(self.enteredText_) is not SFString:
            raise InvalidFieldTypeException()
        return self.enteredText_


    def get_finalText(self):
        if type(self.finalText_) is not SFString:
            raise InvalidFieldTypeException()
        return self.finalText_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(StringSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(StringSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(StringSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(StringSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class SurfaceEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(surface_) is not SFNode:
            raise InvalidFieldTypeException()
        self.surface_ = kwargs.pop("surface", None)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_mass(self, set_mass_ = 0):
        super(SurfaceEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(SurfaceEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, set_coordIndex_):
        super(SurfaceEmitter, self).set_coordIndex(set_coordIndex_)
        if type(set_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_coordIndex_ = set_coordIndex_
    def set_speed(self, set_speed_ = 0):
        super(SurfaceEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(SurfaceEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(SurfaceEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(SurfaceEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(SurfaceEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Switch(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Switch, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Switch, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(Switch, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Switch, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_whichChoice(self, set_whichChoice_ = -1):
        super(Switch, self).set_whichChoice(set_whichChoice_)
        if type(set_whichChoice_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_whichChoice_ < -1:
                raise InvalidFieldValueException()
        self.set_whichChoice_ = set_whichChoice_

    def get_whichChoice(self):
        if type(self.whichChoice_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichChoice_

    def set_DEF(self, set_DEF_):
        super(Switch, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Switch, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Switch, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TexCoordChaser2D(X3DChaserNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(duration_) is not SFTime:
            raise InvalidFieldTypeException()
        if duration_ < 0:
                raise InvalidFieldValueException()
        self.duration_ = kwargs.pop("duration", 1)
        if type(initialDestination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination")
        if type(initialValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue")
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(TexCoordChaser2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(TexCoordChaser2D, self).set_destination(set_destination_)
        if type(set_destination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(TexCoordChaser2D, self).set_value(set_value_)
        if type(set_value_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(TexCoordChaser2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TexCoordChaser2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TexCoordChaser2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TexCoordDamper2D(X3DDamperNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(initialDestination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialDestination_ = kwargs.pop("initialDestination")
        if type(initialValue_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.initialValue_ = kwargs.pop("initialValue")
        if type(order_) is not SFInt32:
            raise InvalidFieldTypeException()
        if order_ < 0:
                raise InvalidFieldValueException()
        if order_ > 5:
                raise InvalidFieldValueException()
        self.order_ = kwargs.pop("order", 3)
        return


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(TexCoordDamper2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_destination(self, set_destination_):
        super(TexCoordDamper2D, self).set_destination(set_destination_)
        if type(set_destination_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_destination_ = set_destination_
    def set_value(self, set_value_):
        super(TexCoordDamper2D, self).set_value(set_value_)
        if type(set_value_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_
    def set_tau(self, set_tau_ = 0.3):
        super(TexCoordDamper2D, self).set_tau(set_tau_)
        if type(set_tau_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_tau_ < 0:
                raise InvalidFieldValueException()
        self.set_tau_ = set_tau_

    def get_tau(self):
        if type(self.tau_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.tau_

    def set_tolerance(self, set_tolerance_ = -1):
        super(TexCoordDamper2D, self).set_tolerance(set_tolerance_)
        if type(set_tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_tolerance_ = set_tolerance_

    def get_tolerance(self):
        if type(self.tolerance_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.tolerance_


    def get_value_changed(self):
        if type(self.value_changed_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.value_changed_

    def set_DEF(self, set_DEF_):
        super(TexCoordDamper2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TexCoordDamper2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TexCoordDamper2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Text(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def set_fontStyle(self, set_fontStyle_ = None):
        super(Text, self).set_fontStyle(set_fontStyle_)
        if type(set_fontStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fontStyle_ = set_fontStyle_

    def get_fontStyle(self):
        if type(self.fontStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fontStyle_

    def set_length(self, set_length_):
        super(Text, self).set_length(set_length_)
        if type(set_length_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_length_ < 0:
                raise InvalidFieldValueException()
        self.set_length_ = set_length_

    def get_length(self):
        if type(self.length_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.length_


    def get_lineBounds(self):
        if type(self.lineBounds_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.lineBounds_

    def set_maxExtent(self, set_maxExtent_ = 0.0):
        super(Text, self).set_maxExtent(set_maxExtent_)
        if type(set_maxExtent_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_maxExtent_ < 0:
                raise InvalidFieldValueException()
        self.set_maxExtent_ = set_maxExtent_

    def get_maxExtent(self):
        if type(self.maxExtent_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.maxExtent_

    def set_metadata(self, set_metadata_ = None):
        super(Text, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_origin(self):
        if type(self.origin_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.origin_

    def set_string(self, set_string_):
        super(Text, self).set_string(set_string_)
        if type(set_string_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_string_ = set_string_

    def get_string(self):
        if type(self.string_) is not MFString:
            raise InvalidFieldTypeException()
        return self.string_


    def get_textBounds(self):
        if type(self.textBounds_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.textBounds_

    def set_DEF(self, set_DEF_):
        super(Text, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Text, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Text, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureBackground(X3DBackgroundNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_backTexture(self, set_backTexture_ = None):
        super(TextureBackground, self).set_backTexture(set_backTexture_)
        if type(set_backTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_backTexture_ = set_backTexture_

    def get_backTexture(self):
        if type(self.backTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.backTexture_


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_bottomTexture(self, set_bottomTexture_ = None):
        super(TextureBackground, self).set_bottomTexture(set_bottomTexture_)
        if type(set_bottomTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_bottomTexture_ = set_bottomTexture_

    def get_bottomTexture(self):
        if type(self.bottomTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.bottomTexture_

    def set_frontTexture(self, set_frontTexture_ = None):
        super(TextureBackground, self).set_frontTexture(set_frontTexture_)
        if type(set_frontTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_frontTexture_ = set_frontTexture_

    def get_frontTexture(self):
        if type(self.frontTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.frontTexture_

    def set_groundAngle(self, set_groundAngle_):
        super(TextureBackground, self).set_groundAngle(set_groundAngle_)
        if type(set_groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_groundAngle_ < 0:
                raise InvalidFieldValueException()
        if set_groundAngle_ > 1.5708:
                raise InvalidFieldValueException()
        self.set_groundAngle_ = set_groundAngle_

    def get_groundAngle(self):
        if type(self.groundAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.groundAngle_

    def set_groundColor(self, set_groundColor_):
        super(TextureBackground, self).set_groundColor(set_groundColor_)
        if type(set_groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_groundColor_ < 0:
                raise InvalidFieldValueException()
        if set_groundColor_ > 1:
                raise InvalidFieldValueException()
        self.set_groundColor_ = set_groundColor_

    def get_groundColor(self):
        if type(self.groundColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.groundColor_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_leftTexture(self, set_leftTexture_ = None):
        super(TextureBackground, self).set_leftTexture(set_leftTexture_)
        if type(set_leftTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_leftTexture_ = set_leftTexture_

    def get_leftTexture(self):
        if type(self.leftTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.leftTexture_

    def set_metadata(self, set_metadata_ = None):
        super(TextureBackground, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rightTexture(self, set_rightTexture_ = None):
        super(TextureBackground, self).set_rightTexture(set_rightTexture_)
        if type(set_rightTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_rightTexture_ = set_rightTexture_

    def get_rightTexture(self):
        if type(self.rightTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.rightTexture_

    def set_bind(self, set_bind_):
        super(TextureBackground, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_skyAngle(self, set_skyAngle_):
        super(TextureBackground, self).set_skyAngle(set_skyAngle_)
        if type(set_skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_skyAngle_ < 0:
                raise InvalidFieldValueException()
        if set_skyAngle_ > 3.1416:
                raise InvalidFieldValueException()
        self.set_skyAngle_ = set_skyAngle_

    def get_skyAngle(self):
        if type(self.skyAngle_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.skyAngle_

    def set_skyColor(self, set_skyColor_ = [0, 0, 0]):
        super(TextureBackground, self).set_skyColor(set_skyColor_)
        if type(set_skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        if set_skyColor_ < 0:
                raise InvalidFieldValueException()
        if set_skyColor_ > 1:
                raise InvalidFieldValueException()
        self.set_skyColor_ = set_skyColor_

    def get_skyColor(self):
        if type(self.skyColor_) is not MFColor:
            raise InvalidFieldTypeException()
        return self.skyColor_

    def set_topTexture(self, set_topTexture_ = None):
        super(TextureBackground, self).set_topTexture(set_topTexture_)
        if type(set_topTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_topTexture_ = set_topTexture_

    def get_topTexture(self):
        if type(self.topTexture_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.topTexture_

    def set_transparency(self, set_transparency_ = 0):
        super(TextureBackground, self).set_transparency(set_transparency_)
        if type(set_transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_transparency_ < 0:
                raise InvalidFieldValueException()
        if set_transparency_ > 1:
                raise InvalidFieldValueException()
        self.set_transparency_ = set_transparency_

    def get_transparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def set_DEF(self, set_DEF_):
        super(TextureBackground, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureBackground, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureBackground, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinate(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(TextureCoordinate, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(TextureCoordinate, self).set_point(set_point_)
        if type(set_point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(TextureCoordinate, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureCoordinate, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureCoordinate, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinate3D(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(TextureCoordinate3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(TextureCoordinate3D, self).set_point(set_point_)
        if type(set_point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec3f:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(TextureCoordinate3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureCoordinate3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureCoordinate3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinate4D(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(TextureCoordinate4D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_point(self, set_point_):
        super(TextureCoordinate4D, self).set_point(set_point_)
        if type(set_point_) is not MFVec4f:
            raise InvalidFieldTypeException()
        self.set_point_ = set_point_

    def get_point(self):
        if type(self.point_) is not MFVec4f:
            raise InvalidFieldTypeException()
        return self.point_

    def set_DEF(self, set_DEF_):
        super(TextureCoordinate4D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureCoordinate4D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureCoordinate4D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureCoordinateGenerator(X3DTextureCoordinateNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(TextureCoordinateGenerator, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_mode(self, set_mode_ = "SPHERE"):
        super(TextureCoordinateGenerator, self).set_mode(set_mode_)
        if type(set_mode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'SPHERE' == set_mode_:
            pass
        elif 'CAMERASPACENORMAL' == set_mode_:
            pass
        elif 'CAMERASPACEPOSITION' == set_mode_:
            pass
        elif 'CAMERASPACEREFLECTIONVECTOR' == set_mode_:
            pass
        elif 'SPHERE-LOCAL' == set_mode_:
            pass
        elif 'COORD' == set_mode_:
            pass
        elif 'COORD-EYE' == set_mode_:
            pass
        elif 'NOISE' == set_mode_:
            pass
        elif 'NOISE-EYE' == set_mode_:
            pass
        elif 'SPHERE-REFLECT' == set_mode_:
            pass
        elif 'SPHERE-REFLECT-LOCAL' == set_mode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_mode_ = set_mode_

    def get_mode(self):
        if type(self.mode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.mode_

    def set_parameter(self, set_parameter_):
        super(TextureCoordinateGenerator, self).set_parameter(set_parameter_)
        if type(set_parameter_) is not MFFloat:
            raise InvalidFieldTypeException()
        self.set_parameter_ = set_parameter_

    def get_parameter(self):
        if type(self.parameter_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.parameter_

    def set_DEF(self, set_DEF_):
        super(TextureCoordinateGenerator, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureCoordinateGenerator, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureCoordinateGenerator, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureProperties(X3DNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(generateMipMaps_) is not SFBool:
            raise InvalidFieldTypeException()
        self.generateMipMaps_ = kwargs.pop("generateMipMaps", False)
        return

    def set_anisotropicDegree(self, set_anisotropicDegree_ = 1):
        super(TextureProperties, self).set_anisotropicDegree(set_anisotropicDegree_)
        if type(set_anisotropicDegree_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_anisotropicDegree_ < 1:
                raise InvalidFieldValueException()
        self.set_anisotropicDegree_ = set_anisotropicDegree_

    def get_anisotropicDegree(self):
        if type(self.anisotropicDegree_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.anisotropicDegree_

    def set_borderColor(self, set_borderColor_ = [0, 0, 0, 0]):
        super(TextureProperties, self).set_borderColor(set_borderColor_)
        if type(set_borderColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_borderColor_ < 0:
                raise InvalidFieldValueException()
        if set_borderColor_ > 1:
                raise InvalidFieldValueException()
        self.set_borderColor_ = set_borderColor_

    def get_borderColor(self):
        if type(self.borderColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.borderColor_

    def set_borderWidth(self, set_borderWidth_ = 0):
        super(TextureProperties, self).set_borderWidth(set_borderWidth_)
        if type(set_borderWidth_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_borderWidth_ < 0:
                raise InvalidFieldValueException()
        self.set_borderWidth_ = set_borderWidth_

    def get_borderWidth(self):
        if type(self.borderWidth_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.borderWidth_

    def set_boundaryModeR(self, set_boundaryModeR_ = "REPEAT"):
        super(TextureProperties, self).set_boundaryModeR(set_boundaryModeR_)
        if type(set_boundaryModeR_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == set_boundaryModeR_:
            pass
        elif 'CLAMP_TO_EDGE' == set_boundaryModeR_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == set_boundaryModeR_:
            pass
        elif 'MIRRORED_REPEAT' == set_boundaryModeR_:
            pass
        elif 'REPEAT' == set_boundaryModeR_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_boundaryModeR_ = set_boundaryModeR_

    def get_boundaryModeR(self):
        if type(self.boundaryModeR_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeR_

    def set_boundaryModeS(self, set_boundaryModeS_ = "REPEAT"):
        super(TextureProperties, self).set_boundaryModeS(set_boundaryModeS_)
        if type(set_boundaryModeS_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == set_boundaryModeS_:
            pass
        elif 'CLAMP_TO_EDGE' == set_boundaryModeS_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == set_boundaryModeS_:
            pass
        elif 'MIRRORED_REPEAT' == set_boundaryModeS_:
            pass
        elif 'REPEAT' == set_boundaryModeS_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_boundaryModeS_ = set_boundaryModeS_

    def get_boundaryModeS(self):
        if type(self.boundaryModeS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeS_

    def set_boundaryModeT(self, set_boundaryModeT_ = "REPEAT"):
        super(TextureProperties, self).set_boundaryModeT(set_boundaryModeT_)
        if type(set_boundaryModeT_) is not SFString:
            raise InvalidFieldTypeException()
        if 'CLAMP' == set_boundaryModeT_:
            pass
        elif 'CLAMP_TO_EDGE' == set_boundaryModeT_:
            pass
        elif 'CLAMP_TO_BOUNDARY' == set_boundaryModeT_:
            pass
        elif 'MIRRORED_REPEAT' == set_boundaryModeT_:
            pass
        elif 'REPEAT' == set_boundaryModeT_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_boundaryModeT_ = set_boundaryModeT_

    def get_boundaryModeT(self):
        if type(self.boundaryModeT_) is not SFString:
            raise InvalidFieldTypeException()
        return self.boundaryModeT_

    def set_magnificationFilter(self, set_magnificationFilter_ = "FASTEST"):
        super(TextureProperties, self).set_magnificationFilter(set_magnificationFilter_)
        if type(set_magnificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        if 'AVG_PIXEL' == set_magnificationFilter_:
            pass
        elif 'DEFAULT' == set_magnificationFilter_:
            pass
        elif 'FASTEST' == set_magnificationFilter_:
            pass
        elif 'NEAREST_PIXEL' == set_magnificationFilter_:
            pass
        elif 'NICEST' == set_magnificationFilter_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_magnificationFilter_ = set_magnificationFilter_

    def get_magnificationFilter(self):
        if type(self.magnificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        return self.magnificationFilter_

    def set_metadata(self, set_metadata_ = None):
        super(TextureProperties, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_minificationFilter(self, set_minificationFilter_ = "FASTEST"):
        super(TextureProperties, self).set_minificationFilter(set_minificationFilter_)
        if type(set_minificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        if 'AVG_PIXEL' == set_minificationFilter_:
            pass
        elif 'AVG_PIXEL_AVG_MIPMAP' == set_minificationFilter_:
            pass
        elif 'AVG_PIXEL_NEAREST_MIPMAP' == set_minificationFilter_:
            pass
        elif 'DEFAULT' == set_minificationFilter_:
            pass
        elif 'FASTEST' == set_minificationFilter_:
            pass
        elif 'NEAREST_PIXEL' == set_minificationFilter_:
            pass
        elif 'NEAREST_PIXEL_AVG_MIPMAP' == set_minificationFilter_:
            pass
        elif 'NEAREST_PIXEL_NEAREST_MIPMAP' == set_minificationFilter_:
            pass
        elif 'NICEST' == set_minificationFilter_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_minificationFilter_ = set_minificationFilter_

    def get_minificationFilter(self):
        if type(self.minificationFilter_) is not SFString:
            raise InvalidFieldTypeException()
        return self.minificationFilter_

    def set_textureCompression(self, set_textureCompression_ = "FASTEST"):
        super(TextureProperties, self).set_textureCompression(set_textureCompression_)
        if type(set_textureCompression_) is not SFString:
            raise InvalidFieldTypeException()
        if 'DEFAULT' == set_textureCompression_:
            pass
        elif 'FASTEST' == set_textureCompression_:
            pass
        elif 'HIGH' == set_textureCompression_:
            pass
        elif 'LOW' == set_textureCompression_:
            pass
        elif 'MEDIUM' == set_textureCompression_:
            pass
        elif 'NICEST' == set_textureCompression_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_textureCompression_ = set_textureCompression_

    def get_textureCompression(self):
        if type(self.textureCompression_) is not SFString:
            raise InvalidFieldTypeException()
        return self.textureCompression_

    def set_texturePriority(self, set_texturePriority_ = 0):
        super(TextureProperties, self).set_texturePriority(set_texturePriority_)
        if type(set_texturePriority_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_texturePriority_ < 0:
                raise InvalidFieldValueException()
        if set_texturePriority_ > 1:
                raise InvalidFieldValueException()
        self.set_texturePriority_ = set_texturePriority_

    def get_texturePriority(self):
        if type(self.texturePriority_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.texturePriority_

    def set_DEF(self, set_DEF_):
        super(TextureProperties, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureProperties, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureProperties, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransform(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_center(self, set_center_ = [0, 0]):
        super(TextureTransform, self).set_center(set_center_)
        if type(set_center_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_metadata(self, set_metadata_ = None):
        super(TextureTransform, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rotation(self, set_rotation_ = 0):
        super(TextureTransform, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1]):
        super(TextureTransform, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_translation(self, set_translation_ = [0, 0]):
        super(TextureTransform, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec2f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(TextureTransform, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureTransform, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureTransform, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransform3D(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(TextureTransform3D, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_metadata(self, set_metadata_ = None):
        super(TextureTransform3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(TextureTransform3D, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(TextureTransform3D, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(TextureTransform3D, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(TextureTransform3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureTransform3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureTransform3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TextureTransformMatrix3D(X3DTextureTransformNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_matrix(self, set_matrix_ = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]):
        super(TextureTransformMatrix3D, self).set_matrix(set_matrix_)
        if type(set_matrix_) is not SFMatrix4f:
            raise InvalidFieldTypeException()
        self.set_matrix_ = set_matrix_

    def get_matrix(self):
        if type(self.matrix_) is not SFMatrix4f:
            raise InvalidFieldTypeException()
        return self.matrix_

    def set_metadata(self, set_metadata_ = None):
        super(TextureTransformMatrix3D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(TextureTransformMatrix3D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TextureTransformMatrix3D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TextureTransformMatrix3D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TimeSensor(X3DTimeDependentNode, X3DSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_cycleInterval(self, set_cycleInterval_ = 1.0):
        super(TimeSensor, self).set_cycleInterval(set_cycleInterval_)
        if type(set_cycleInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        if set_cycleInterval_ <= 0:
                raise InvalidFieldValueException()
        self.set_cycleInterval_ = set_cycleInterval_

    def get_cycleInterval(self):
        if type(self.cycleInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.cycleInterval_


    def get_cycleTime(self):
        if type(self.cycleTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.cycleTime_


    def get_elapsedTime(self):
        if type(self.elapsedTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.elapsedTime_

    def set_enabled(self, set_enabled_ = True):
        super(TimeSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_fraction_changed(self):
        if type(self.fraction_changed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fraction_changed_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isPaused(self):
        if type(self.isPaused_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isPaused_

    def set_loop(self, set_loop_ = False):
        super(TimeSensor, self).set_loop(set_loop_)
        if type(set_loop_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_loop_ = set_loop_

    def get_loop(self):
        if type(self.loop_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.loop_

    def set_metadata(self, set_metadata_ = None):
        super(TimeSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_pauseTime(self, set_pauseTime_ = 0):
        super(TimeSensor, self).set_pauseTime(set_pauseTime_)
        if type(set_pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_pauseTime_ = set_pauseTime_

    def get_pauseTime(self):
        if type(self.pauseTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.pauseTime_

    def set_resumeTime(self, set_resumeTime_ = 0):
        super(TimeSensor, self).set_resumeTime(set_resumeTime_)
        if type(set_resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_resumeTime_ = set_resumeTime_

    def get_resumeTime(self):
        if type(self.resumeTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.resumeTime_

    def set_startTime(self, set_startTime_ = 0):
        super(TimeSensor, self).set_startTime(set_startTime_)
        if type(set_startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_startTime_ = set_startTime_

    def get_startTime(self):
        if type(self.startTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.startTime_

    def set_stopTime(self, set_stopTime_ = 0):
        super(TimeSensor, self).set_stopTime(set_stopTime_)
        if type(set_stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_stopTime_ = set_stopTime_

    def get_stopTime(self):
        if type(self.stopTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.stopTime_


    def get_time(self):
        if type(self.time_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.time_

    def set_DEF(self, set_DEF_):
        super(TimeSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TimeSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TimeSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TimeTrigger(X3DTriggerNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_metadata(self, set_metadata_ = None):
        super(TimeTrigger, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_boolean(self, set_boolean_):
        super(TimeTrigger, self).set_boolean(set_boolean_)
        if type(set_boolean_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_boolean_ = set_boolean_

    def get_triggerTime(self):
        if type(self.triggerTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.triggerTime_

    def set_DEF(self, set_DEF_):
        super(TimeTrigger, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TimeTrigger, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TimeTrigger, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ToneMappedVolumeStyle(X3DComposableVolumeRenderStyleNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_coolColor(self, set_coolColor_ = [0, 0, 1, 0]):
        super(ToneMappedVolumeStyle, self).set_coolColor(set_coolColor_)
        if type(set_coolColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_coolColor_ < 0:
                raise InvalidFieldValueException()
        if set_coolColor_ > 1:
                raise InvalidFieldValueException()
        self.set_coolColor_ = set_coolColor_

    def get_coolColor(self):
        if type(self.coolColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.coolColor_

    def set_enabled(self, set_enabled_ = True):
        super(ToneMappedVolumeStyle, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_metadata(self, set_metadata_ = None):
        super(ToneMappedVolumeStyle, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_surfaceNormals(self, set_surfaceNormals_ = None):
        super(ToneMappedVolumeStyle, self).set_surfaceNormals(set_surfaceNormals_)
        if type(set_surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_surfaceNormals_ = set_surfaceNormals_

    def get_surfaceNormals(self):
        if type(self.surfaceNormals_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.surfaceNormals_

    def set_warmColor(self, set_warmColor_ = [1, 1, 0, 0]):
        super(ToneMappedVolumeStyle, self).set_warmColor(set_warmColor_)
        if type(set_warmColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        if set_warmColor_ < 0:
                raise InvalidFieldValueException()
        if set_warmColor_ > 1:
                raise InvalidFieldValueException()
        self.set_warmColor_ = set_warmColor_

    def get_warmColor(self):
        if type(self.warmColor_) is not SFColorRGBA:
            raise InvalidFieldTypeException()
        return self.warmColor_

    def set_DEF(self, set_DEF_):
        super(ToneMappedVolumeStyle, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ToneMappedVolumeStyle, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ToneMappedVolumeStyle, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TouchSensor(X3DTouchSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_description(self, set_description_):
        super(TouchSensor, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_enabled(self, set_enabled_ = True):
        super(TouchSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_hitNormal_changed(self):
        if type(self.hitNormal_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitNormal_changed_


    def get_hitPoint_changed(self):
        if type(self.hitPoint_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.hitPoint_changed_


    def get_hitTexCoord_changed(self):
        if type(self.hitTexCoord_changed_) is not SFVec2f:
            raise InvalidFieldTypeException()
        return self.hitTexCoord_changed_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isOver(self):
        if type(self.isOver_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isOver_

    def set_metadata(self, set_metadata_ = None):
        super(TouchSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_touchTime(self):
        if type(self.touchTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.touchTime_

    def set_DEF(self, set_DEF_):
        super(TouchSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TouchSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TouchSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Transform(X3DGroupingNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Transform, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_center(self, set_center_ = [0, 0, 0]):
        super(Transform, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(Transform, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_metadata(self, set_metadata_ = None):
        super(Transform, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Transform, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_rotation(self, set_rotation_ = [0, 0, 1, 0]):
        super(Transform, self).set_rotation(set_rotation_)
        if type(set_rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_rotation_ = set_rotation_

    def get_rotation(self):
        if type(self.rotation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.rotation_

    def set_scale(self, set_scale_ = [1, 1, 1]):
        super(Transform, self).set_scale(set_scale_)
        if type(set_scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_scale_ = set_scale_

    def get_scale(self):
        if type(self.scale_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.scale_

    def set_scaleOrientation(self, set_scaleOrientation_ = [0, 0, 1, 0]):
        super(Transform, self).set_scaleOrientation(set_scaleOrientation_)
        if type(set_scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_scaleOrientation_ = set_scaleOrientation_

    def get_scaleOrientation(self):
        if type(self.scaleOrientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.scaleOrientation_

    def set_translation(self, set_translation_ = [0, 0, 0]):
        super(Transform, self).set_translation(set_translation_)
        if type(set_translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_translation_ = set_translation_

    def get_translation(self):
        if type(self.translation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.translation_

    def set_DEF(self, set_DEF_):
        super(Transform, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Transform, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Transform, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TransformSensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(TransformSensor, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_enabled(self, set_enabled_ = True):
        super(TransformSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_enterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def get_exitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(TransformSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_


    def get_orientation_changed(self):
        if type(self.orientation_changed_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_changed_


    def get_position_changed(self):
        if type(self.position_changed_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_changed_

    def set_targetObject(self, set_targetObject_ = None):
        super(TransformSensor, self).set_targetObject(set_targetObject_)
        if type(set_targetObject_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_targetObject_ = set_targetObject_

    def get_targetObject(self):
        if type(self.targetObject_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.targetObject_

    def set_DEF(self, set_DEF_):
        super(TransformSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TransformSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TransformSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TransmitterPdu(X3DNetworkSensorNode, X3DBoundedObject):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        if type(geoSystem_) is not MFString:
            raise InvalidFieldTypeException()
        self.geoSystem_ = kwargs.pop("geoSystem", ["GD", "WE"])
        if type(rtpHeaderExpected_) is not SFBool:
            raise InvalidFieldTypeException()
        self.rtpHeaderExpected_ = kwargs.pop("rtpHeaderExpected", False)
        return

    def set_address(self, set_address_ = "localhost"):
        super(TransmitterPdu, self).set_address(set_address_)
        if type(set_address_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_address_ = set_address_

    def get_address(self):
        if type(self.address_) is not SFString:
            raise InvalidFieldTypeException()
        return self.address_

    def set_antennaLocation(self, set_antennaLocation_ = [0, 0, 0]):
        super(TransmitterPdu, self).set_antennaLocation(set_antennaLocation_)
        if type(set_antennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_antennaLocation_ = set_antennaLocation_

    def get_antennaLocation(self):
        if type(self.antennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.antennaLocation_

    def set_antennaPatternLength(self, set_antennaPatternLength_ = 0):
        super(TransmitterPdu, self).set_antennaPatternLength(set_antennaPatternLength_)
        if type(set_antennaPatternLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_antennaPatternLength_ = set_antennaPatternLength_

    def get_antennaPatternLength(self):
        if type(self.antennaPatternLength_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.antennaPatternLength_

    def set_antennaPatternType(self, set_antennaPatternType_ = 0):
        super(TransmitterPdu, self).set_antennaPatternType(set_antennaPatternType_)
        if type(set_antennaPatternType_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_antennaPatternType_ = set_antennaPatternType_

    def get_antennaPatternType(self):
        if type(self.antennaPatternType_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.antennaPatternType_

    def set_applicationID(self, set_applicationID_ = 0):
        super(TransmitterPdu, self).set_applicationID(set_applicationID_)
        if type(set_applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_applicationID_ = set_applicationID_

    def get_applicationID(self):
        if type(self.applicationID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.applicationID_

    def set_cryptoKeyID(self, set_cryptoKeyID_ = 0):
        super(TransmitterPdu, self).set_cryptoKeyID(set_cryptoKeyID_)
        if type(set_cryptoKeyID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_cryptoKeyID_ = set_cryptoKeyID_

    def get_cryptoKeyID(self):
        if type(self.cryptoKeyID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.cryptoKeyID_

    def set_cryptoSystem(self, set_cryptoSystem_ = 0):
        super(TransmitterPdu, self).set_cryptoSystem(set_cryptoSystem_)
        if type(set_cryptoSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_cryptoSystem_ = set_cryptoSystem_

    def get_cryptoSystem(self):
        if type(self.cryptoSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.cryptoSystem_

    def set_enabled(self, set_enabled_ = True):
        super(TransmitterPdu, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_entityID(self, set_entityID_ = 0):
        super(TransmitterPdu, self).set_entityID(set_entityID_)
        if type(set_entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_entityID_ = set_entityID_

    def get_entityID(self):
        if type(self.entityID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.entityID_

    def set_frequency(self, set_frequency_ = 0):
        super(TransmitterPdu, self).set_frequency(set_frequency_)
        if type(set_frequency_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_frequency_ = set_frequency_

    def get_frequency(self):
        if type(self.frequency_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.frequency_

    def set_geoCoords(self, set_geoCoords_ = [0, 0, 0]):
        super(TransmitterPdu, self).set_geoCoords(set_geoCoords_)
        if type(set_geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        self.set_geoCoords_ = set_geoCoords_

    def get_geoCoords(self):
        if type(self.geoCoords_) is not SFVec3d:
            raise InvalidFieldTypeException()
        return self.geoCoords_

    def set_inputSource(self, set_inputSource_ = 0):
        super(TransmitterPdu, self).set_inputSource(set_inputSource_)
        if type(set_inputSource_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_inputSource_ = set_inputSource_

    def get_inputSource(self):
        if type(self.inputSource_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.inputSource_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_


    def get_isNetworkReader(self):
        if type(self.isNetworkReader_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkReader_


    def get_isNetworkWriter(self):
        if type(self.isNetworkWriter_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isNetworkWriter_


    def get_isRtpHeaderHeard(self):
        if type(self.isRtpHeaderHeard_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isRtpHeaderHeard_


    def get_isStandAlone(self):
        if type(self.isStandAlone_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isStandAlone_

    def set_lengthOfModulationParameters(self, set_lengthOfModulationParameters_ = 0):
        super(TransmitterPdu, self).set_lengthOfModulationParameters(set_lengthOfModulationParameters_)
        if type(set_lengthOfModulationParameters_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_lengthOfModulationParameters_ = set_lengthOfModulationParameters_

    def get_lengthOfModulationParameters(self):
        if type(self.lengthOfModulationParameters_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.lengthOfModulationParameters_

    def set_metadata(self, set_metadata_ = None):
        super(TransmitterPdu, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_modulationTypeDetail(self, set_modulationTypeDetail_ = 0):
        super(TransmitterPdu, self).set_modulationTypeDetail(set_modulationTypeDetail_)
        if type(set_modulationTypeDetail_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_modulationTypeDetail_ = set_modulationTypeDetail_

    def get_modulationTypeDetail(self):
        if type(self.modulationTypeDetail_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeDetail_

    def set_modulationTypeMajor(self, set_modulationTypeMajor_ = 0):
        super(TransmitterPdu, self).set_modulationTypeMajor(set_modulationTypeMajor_)
        if type(set_modulationTypeMajor_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_modulationTypeMajor_ = set_modulationTypeMajor_

    def get_modulationTypeMajor(self):
        if type(self.modulationTypeMajor_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeMajor_

    def set_modulationTypeSpreadSpectrum(self, set_modulationTypeSpreadSpectrum_ = 0):
        super(TransmitterPdu, self).set_modulationTypeSpreadSpectrum(set_modulationTypeSpreadSpectrum_)
        if type(set_modulationTypeSpreadSpectrum_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_modulationTypeSpreadSpectrum_ = set_modulationTypeSpreadSpectrum_

    def get_modulationTypeSpreadSpectrum(self):
        if type(self.modulationTypeSpreadSpectrum_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeSpreadSpectrum_

    def set_modulationTypeSystem(self, set_modulationTypeSystem_ = 0):
        super(TransmitterPdu, self).set_modulationTypeSystem(set_modulationTypeSystem_)
        if type(set_modulationTypeSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_modulationTypeSystem_ = set_modulationTypeSystem_

    def get_modulationTypeSystem(self):
        if type(self.modulationTypeSystem_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.modulationTypeSystem_

    def set_multicastRelayHost(self, set_multicastRelayHost_):
        super(TransmitterPdu, self).set_multicastRelayHost(set_multicastRelayHost_)
        if type(set_multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_multicastRelayHost_ = set_multicastRelayHost_

    def get_multicastRelayHost(self):
        if type(self.multicastRelayHost_) is not SFString:
            raise InvalidFieldTypeException()
        return self.multicastRelayHost_

    def set_multicastRelayPort(self, set_multicastRelayPort_ = 0):
        super(TransmitterPdu, self).set_multicastRelayPort(set_multicastRelayPort_)
        if type(set_multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_multicastRelayPort_ = set_multicastRelayPort_

    def get_multicastRelayPort(self):
        if type(self.multicastRelayPort_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.multicastRelayPort_

    def set_networkMode(self, set_networkMode_ = "standAlone"):
        super(TransmitterPdu, self).set_networkMode(set_networkMode_)
        if type(set_networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        if 'standAlone' == set_networkMode_:
            pass
        elif 'networkReader' == set_networkMode_:
            pass
        elif 'networkWriter' == set_networkMode_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_networkMode_ = set_networkMode_

    def get_networkMode(self):
        if type(self.networkMode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.networkMode_

    def set_port(self, set_port_ = 0):
        super(TransmitterPdu, self).set_port(set_port_)
        if type(set_port_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_port_ = set_port_

    def get_port(self):
        if type(self.port_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.port_

    def set_power(self, set_power_ = 0.0):
        super(TransmitterPdu, self).set_power(set_power_)
        if type(set_power_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_power_ = set_power_

    def get_power(self):
        if type(self.power_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.power_

    def set_radioEntityTypeCategory(self, set_radioEntityTypeCategory_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeCategory(set_radioEntityTypeCategory_)
        if type(set_radioEntityTypeCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeCategory_ = set_radioEntityTypeCategory_

    def get_radioEntityTypeCategory(self):
        if type(self.radioEntityTypeCategory_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeCategory_

    def set_radioEntityTypeCountry(self, set_radioEntityTypeCountry_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeCountry(set_radioEntityTypeCountry_)
        if type(set_radioEntityTypeCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeCountry_ = set_radioEntityTypeCountry_

    def get_radioEntityTypeCountry(self):
        if type(self.radioEntityTypeCountry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeCountry_

    def set_radioEntityTypeDomain(self, set_radioEntityTypeDomain_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeDomain(set_radioEntityTypeDomain_)
        if type(set_radioEntityTypeDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeDomain_ = set_radioEntityTypeDomain_

    def get_radioEntityTypeDomain(self):
        if type(self.radioEntityTypeDomain_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeDomain_

    def set_radioEntityTypeKind(self, set_radioEntityTypeKind_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeKind(set_radioEntityTypeKind_)
        if type(set_radioEntityTypeKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeKind_ = set_radioEntityTypeKind_

    def get_radioEntityTypeKind(self):
        if type(self.radioEntityTypeKind_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeKind_

    def set_radioEntityTypeNomenclature(self, set_radioEntityTypeNomenclature_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeNomenclature(set_radioEntityTypeNomenclature_)
        if type(set_radioEntityTypeNomenclature_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeNomenclature_ = set_radioEntityTypeNomenclature_

    def get_radioEntityTypeNomenclature(self):
        if type(self.radioEntityTypeNomenclature_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeNomenclature_

    def set_radioEntityTypeNomenclatureVersion(self, set_radioEntityTypeNomenclatureVersion_ = 0):
        super(TransmitterPdu, self).set_radioEntityTypeNomenclatureVersion(set_radioEntityTypeNomenclatureVersion_)
        if type(set_radioEntityTypeNomenclatureVersion_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioEntityTypeNomenclatureVersion_ = set_radioEntityTypeNomenclatureVersion_

    def get_radioEntityTypeNomenclatureVersion(self):
        if type(self.radioEntityTypeNomenclatureVersion_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioEntityTypeNomenclatureVersion_

    def set_radioID(self, set_radioID_ = 0):
        super(TransmitterPdu, self).set_radioID(set_radioID_)
        if type(set_radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_radioID_ = set_radioID_

    def get_radioID(self):
        if type(self.radioID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.radioID_

    def set_readInterval(self, set_readInterval_ = 0.1):
        super(TransmitterPdu, self).set_readInterval(set_readInterval_)
        if type(set_readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_readInterval_ = set_readInterval_

    def get_readInterval(self):
        if type(self.readInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.readInterval_

    def set_relativeAntennaLocation(self, set_relativeAntennaLocation_ = [0, 0, 0]):
        super(TransmitterPdu, self).set_relativeAntennaLocation(set_relativeAntennaLocation_)
        if type(set_relativeAntennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_relativeAntennaLocation_ = set_relativeAntennaLocation_

    def get_relativeAntennaLocation(self):
        if type(self.relativeAntennaLocation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.relativeAntennaLocation_

    def set_siteID(self, set_siteID_ = 0):
        super(TransmitterPdu, self).set_siteID(set_siteID_)
        if type(set_siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_siteID_ = set_siteID_

    def get_siteID(self):
        if type(self.siteID_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.siteID_


    def get_timestamp(self):
        if type(self.timestamp_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.timestamp_

    def set_transmitFrequencyBandwidth(self, set_transmitFrequencyBandwidth_ = 0):
        super(TransmitterPdu, self).set_transmitFrequencyBandwidth(set_transmitFrequencyBandwidth_)
        if type(set_transmitFrequencyBandwidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        self.set_transmitFrequencyBandwidth_ = set_transmitFrequencyBandwidth_

    def get_transmitFrequencyBandwidth(self):
        if type(self.transmitFrequencyBandwidth_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transmitFrequencyBandwidth_

    def set_transmitState(self, set_transmitState_ = 0):
        super(TransmitterPdu, self).set_transmitState(set_transmitState_)
        if type(set_transmitState_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_transmitState_ = set_transmitState_

    def get_transmitState(self):
        if type(self.transmitState_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.transmitState_

    def set_whichGeometry(self, set_whichGeometry_ = 1):
        super(TransmitterPdu, self).set_whichGeometry(set_whichGeometry_)
        if type(set_whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        self.set_whichGeometry_ = set_whichGeometry_

    def get_whichGeometry(self):
        if type(self.whichGeometry_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.whichGeometry_

    def set_writeInterval(self, set_writeInterval_ = 1.0):
        super(TransmitterPdu, self).set_writeInterval(set_writeInterval_)
        if type(set_writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        self.set_writeInterval_ = set_writeInterval_

    def get_writeInterval(self):
        if type(self.writeInterval_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.writeInterval_

    def set_DEF(self, set_DEF_):
        super(TransmitterPdu, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TransmitterPdu, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TransmitterPdu, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleFanSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(TriangleFanSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(TriangleFanSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(TriangleFanSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fanCount(self, set_fanCount_):
        super(TriangleFanSet, self).set_fanCount(set_fanCount_)
        if type(set_fanCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if set_fanCount_ < 3:
                raise InvalidFieldValueException()
        self.set_fanCount_ = set_fanCount_

    def get_fanCount(self):
        if type(self.fanCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.fanCount_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(TriangleFanSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(TriangleFanSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(TriangleFanSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_texCoord(self, set_texCoord_ = None):
        super(TriangleFanSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(TriangleFanSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TriangleFanSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TriangleFanSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(TriangleSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(TriangleSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(TriangleSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(TriangleSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(TriangleSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(TriangleSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_texCoord(self, set_texCoord_ = None):
        super(TriangleSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(TriangleSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TriangleSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TriangleSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleSet2D(X3DGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", False)
        return

    def set_metadata(self, set_metadata_ = None):
        super(TriangleSet2D, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_vertices(self, set_vertices_):
        super(TriangleSet2D, self).set_vertices(set_vertices_)
        if type(set_vertices_) is not MFVec2f:
            raise InvalidFieldTypeException()
        self.set_vertices_ = set_vertices_

    def get_vertices(self):
        if type(self.vertices_) is not MFVec2f:
            raise InvalidFieldTypeException()
        return self.vertices_

    def set_DEF(self, set_DEF_):
        super(TriangleSet2D, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TriangleSet2D, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TriangleSet2D, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TriangleStripSet(X3DComposedGeometryNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(ccw_) is not SFBool:
            raise InvalidFieldTypeException()
        self.ccw_ = kwargs.pop("ccw", True)
        if type(colorPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.colorPerVertex_ = kwargs.pop("colorPerVertex", True)
        if type(normalPerVertex_) is not SFBool:
            raise InvalidFieldTypeException()
        self.normalPerVertex_ = kwargs.pop("normalPerVertex", True)
        if type(solid_) is not SFBool:
            raise InvalidFieldTypeException()
        self.solid_ = kwargs.pop("solid", True)
        return

    def set_attrib(self, set_attrib_):
        super(TriangleStripSet, self).set_attrib(set_attrib_)
        if type(set_attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_attrib_ = set_attrib_

    def get_attrib(self):
        if type(self.attrib_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.attrib_

    def set_color(self, set_color_ = None):
        super(TriangleStripSet, self).set_color(set_color_)
        if type(set_color_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_color_ = set_color_

    def get_color(self):
        if type(self.color_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.color_

    def set_coord(self, set_coord_ = None):
        super(TriangleStripSet, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_fogCoord(self, set_fogCoord_ = None):
        super(TriangleStripSet, self).set_fogCoord(set_fogCoord_)
        if type(set_fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_fogCoord_ = set_fogCoord_

    def get_fogCoord(self):
        if type(self.fogCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.fogCoord_

    def set_metadata(self, set_metadata_ = None):
        super(TriangleStripSet, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_normal(self, set_normal_ = None):
        super(TriangleStripSet, self).set_normal(set_normal_)
        if type(set_normal_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_normal_ = set_normal_

    def get_normal(self):
        if type(self.normal_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.normal_

    def set_stripCount(self, set_stripCount_):
        super(TriangleStripSet, self).set_stripCount(set_stripCount_)
        if type(set_stripCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        if set_stripCount_ < 3:
                raise InvalidFieldValueException()
        self.set_stripCount_ = set_stripCount_

    def get_stripCount(self):
        if type(self.stripCount_) is not MFInt32:
            raise InvalidFieldTypeException()
        return self.stripCount_

    def set_texCoord(self, set_texCoord_ = None):
        super(TriangleStripSet, self).set_texCoord(set_texCoord_)
        if type(set_texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_texCoord_ = set_texCoord_

    def get_texCoord(self):
        if type(self.texCoord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.texCoord_

    def set_DEF(self, set_DEF_):
        super(TriangleStripSet, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TriangleStripSet, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TriangleStripSet, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class TwoSidedMaterial(X3DMaterialNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_ambientIntensity(self, set_ambientIntensity_ = 0.2):
        super(TwoSidedMaterial, self).set_ambientIntensity(set_ambientIntensity_)
        if type(set_ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_ambientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_ambientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_ambientIntensity_ = set_ambientIntensity_

    def get_ambientIntensity(self):
        if type(self.ambientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.ambientIntensity_

    def set_backAmbientIntensity(self, set_backAmbientIntensity_ = 0.2):
        super(TwoSidedMaterial, self).set_backAmbientIntensity(set_backAmbientIntensity_)
        if type(set_backAmbientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_backAmbientIntensity_ < 0:
                raise InvalidFieldValueException()
        if set_backAmbientIntensity_ > 1:
                raise InvalidFieldValueException()
        self.set_backAmbientIntensity_ = set_backAmbientIntensity_

    def get_backAmbientIntensity(self):
        if type(self.backAmbientIntensity_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backAmbientIntensity_

    def set_backDiffuseColor(self, set_backDiffuseColor_ = [0.8, 0.8, 0.8]):
        super(TwoSidedMaterial, self).set_backDiffuseColor(set_backDiffuseColor_)
        if type(set_backDiffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_backDiffuseColor_ < 0:
                raise InvalidFieldValueException()
        if set_backDiffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.set_backDiffuseColor_ = set_backDiffuseColor_

    def get_backDiffuseColor(self):
        if type(self.backDiffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backDiffuseColor_

    def set_backEmissiveColor(self, set_backEmissiveColor_ = [0, 0, 0]):
        super(TwoSidedMaterial, self).set_backEmissiveColor(set_backEmissiveColor_)
        if type(set_backEmissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_backEmissiveColor_ < 0:
                raise InvalidFieldValueException()
        if set_backEmissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.set_backEmissiveColor_ = set_backEmissiveColor_

    def get_backEmissiveColor(self):
        if type(self.backEmissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backEmissiveColor_

    def set_backShininess(self, set_backShininess_ = 0.2):
        super(TwoSidedMaterial, self).set_backShininess(set_backShininess_)
        if type(set_backShininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_backShininess_ < 0:
                raise InvalidFieldValueException()
        if set_backShininess_ > 1:
                raise InvalidFieldValueException()
        self.set_backShininess_ = set_backShininess_

    def get_backShininess(self):
        if type(self.backShininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backShininess_

    def set_backSpecularColor(self, set_backSpecularColor_ = [0, 0, 0]):
        super(TwoSidedMaterial, self).set_backSpecularColor(set_backSpecularColor_)
        if type(set_backSpecularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_backSpecularColor_ < 0:
                raise InvalidFieldValueException()
        if set_backSpecularColor_ > 1:
                raise InvalidFieldValueException()
        self.set_backSpecularColor_ = set_backSpecularColor_

    def get_backSpecularColor(self):
        if type(self.backSpecularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.backSpecularColor_

    def set_backTransparency(self, set_backTransparency_ = 0):
        super(TwoSidedMaterial, self).set_backTransparency(set_backTransparency_)
        if type(set_backTransparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_backTransparency_ < 0:
                raise InvalidFieldValueException()
        if set_backTransparency_ > 1:
                raise InvalidFieldValueException()
        self.set_backTransparency_ = set_backTransparency_

    def get_backTransparency(self):
        if type(self.backTransparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.backTransparency_

    def set_diffuseColor(self, set_diffuseColor_ = [0.8, 0.8, 0.8]):
        super(TwoSidedMaterial, self).set_diffuseColor(set_diffuseColor_)
        if type(set_diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_diffuseColor_ < 0:
                raise InvalidFieldValueException()
        if set_diffuseColor_ > 1:
                raise InvalidFieldValueException()
        self.set_diffuseColor_ = set_diffuseColor_

    def get_diffuseColor(self):
        if type(self.diffuseColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.diffuseColor_

    def set_emissiveColor(self, set_emissiveColor_ = [0, 0, 0]):
        super(TwoSidedMaterial, self).set_emissiveColor(set_emissiveColor_)
        if type(set_emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_emissiveColor_ < 0:
                raise InvalidFieldValueException()
        if set_emissiveColor_ > 1:
                raise InvalidFieldValueException()
        self.set_emissiveColor_ = set_emissiveColor_

    def get_emissiveColor(self):
        if type(self.emissiveColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.emissiveColor_

    def set_metadata(self, set_metadata_ = None):
        super(TwoSidedMaterial, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_separateBackColor(self, set_separateBackColor_ = False):
        super(TwoSidedMaterial, self).set_separateBackColor(set_separateBackColor_)
        if type(set_separateBackColor_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_separateBackColor_ = set_separateBackColor_

    def get_separateBackColor(self):
        if type(self.separateBackColor_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.separateBackColor_

    def set_shininess(self, set_shininess_ = 0.2):
        super(TwoSidedMaterial, self).set_shininess(set_shininess_)
        if type(set_shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_shininess_ < 0:
                raise InvalidFieldValueException()
        if set_shininess_ > 1:
                raise InvalidFieldValueException()
        self.set_shininess_ = set_shininess_

    def get_shininess(self):
        if type(self.shininess_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.shininess_

    def set_specularColor(self, set_specularColor_ = [0, 0, 0]):
        super(TwoSidedMaterial, self).set_specularColor(set_specularColor_)
        if type(set_specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        if set_specularColor_ < 0:
                raise InvalidFieldValueException()
        if set_specularColor_ > 1:
                raise InvalidFieldValueException()
        self.set_specularColor_ = set_specularColor_

    def get_specularColor(self):
        if type(self.specularColor_) is not SFColor:
            raise InvalidFieldTypeException()
        return self.specularColor_

    def set_transparency(self, set_transparency_ = 0):
        super(TwoSidedMaterial, self).set_transparency(set_transparency_)
        if type(set_transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_transparency_ < 0:
                raise InvalidFieldValueException()
        if set_transparency_ > 1:
                raise InvalidFieldValueException()
        self.set_transparency_ = set_transparency_

    def get_transparency(self):
        if type(self.transparency_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.transparency_

    def set_DEF(self, set_DEF_):
        super(TwoSidedMaterial, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(TwoSidedMaterial, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(TwoSidedMaterial, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class UniversalJoint(X3DRigidJointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_anchorPoint(self, set_anchorPoint_ = [0, 0, 0]):
        super(UniversalJoint, self).set_anchorPoint(set_anchorPoint_)
        if type(set_anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_anchorPoint_ = set_anchorPoint_

    def get_anchorPoint(self):
        if type(self.anchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.anchorPoint_

    def set_axis1(self, set_axis1_ = [0, 0, 0]):
        super(UniversalJoint, self).set_axis1(set_axis1_)
        if type(set_axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis1_ = set_axis1_

    def get_axis1(self):
        if type(self.axis1_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis1_

    def set_axis2(self, set_axis2_ = [0, 0, 0]):
        super(UniversalJoint, self).set_axis2(set_axis2_)
        if type(set_axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_axis2_ = set_axis2_

    def get_axis2(self):
        if type(self.axis2_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.axis2_

    def set_body1(self, set_body1_ = None):
        super(UniversalJoint, self).set_body1(set_body1_)
        if type(set_body1_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body1_ = set_body1_

    def get_body1(self):
        if type(self.body1_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body1_


    def get_body1AnchorPoint(self):
        if type(self.body1AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1AnchorPoint_


    def get_body1Axis(self):
        if type(self.body1Axis_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body1Axis_

    def set_body2(self, set_body2_ = None):
        super(UniversalJoint, self).set_body2(set_body2_)
        if type(set_body2_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_body2_ = set_body2_

    def get_body2(self):
        if type(self.body2_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.body2_


    def get_body2AnchorPoint(self):
        if type(self.body2AnchorPoint_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.body2AnchorPoint_


    def get_body2Axis(self):
        if type(self.body2Axis_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.body2Axis_

    def set_forceOutput(self, set_forceOutput_ = "NONE"):
        super(UniversalJoint, self).set_forceOutput(set_forceOutput_)
        if type(set_forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_forceOutput_:
            pass
        elif '"NONE"' == set_forceOutput_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_forceOutput_ = set_forceOutput_

    def get_forceOutput(self):
        if type(self.forceOutput_) is not MFString:
            raise InvalidFieldTypeException()
        return self.forceOutput_

    def set_metadata(self, set_metadata_ = None):
        super(UniversalJoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_stop1Bounce(self, set_stop1Bounce_ = 0):
        super(UniversalJoint, self).set_stop1Bounce(set_stop1Bounce_)
        if type(set_stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_stop1Bounce_ < 0:
                raise InvalidFieldValueException()
        if set_stop1Bounce_ > 1:
                raise InvalidFieldValueException()
        self.set_stop1Bounce_ = set_stop1Bounce_

    def get_stop1Bounce(self):
        if type(self.stop1Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1Bounce_

    def set_stop1ErrorCorrection(self, set_stop1ErrorCorrection_ = 0.8):
        super(UniversalJoint, self).set_stop1ErrorCorrection(set_stop1ErrorCorrection_)
        if type(set_stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_stop1ErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if set_stop1ErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.set_stop1ErrorCorrection_ = set_stop1ErrorCorrection_

    def get_stop1ErrorCorrection(self):
        if type(self.stop1ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop1ErrorCorrection_

    def set_stop2Bounce(self, set_stop2Bounce_ = 0):
        super(UniversalJoint, self).set_stop2Bounce(set_stop2Bounce_)
        if type(set_stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_stop2Bounce_ < 0:
                raise InvalidFieldValueException()
        if set_stop2Bounce_ > 1:
                raise InvalidFieldValueException()
        self.set_stop2Bounce_ = set_stop2Bounce_

    def get_stop2Bounce(self):
        if type(self.stop2Bounce_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2Bounce_

    def set_stop2ErrorCorrection(self, set_stop2ErrorCorrection_ = 0.8):
        super(UniversalJoint, self).set_stop2ErrorCorrection(set_stop2ErrorCorrection_)
        if type(set_stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_stop2ErrorCorrection_ < 0:
                raise InvalidFieldValueException()
        if set_stop2ErrorCorrection_ > 1:
                raise InvalidFieldValueException()
        self.set_stop2ErrorCorrection_ = set_stop2ErrorCorrection_

    def get_stop2ErrorCorrection(self):
        if type(self.stop2ErrorCorrection_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.stop2ErrorCorrection_

    def set_DEF(self, set_DEF_):
        super(UniversalJoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(UniversalJoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(UniversalJoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Viewpoint(X3DViewpointNode):
    def __init__(self, **kwargs):
        super().__init__()
        return


    def get_bindTime(self):
        if type(self.bindTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.bindTime_

    def set_centerOfRotation(self, set_centerOfRotation_ = [0, 0, 0]):
        super(Viewpoint, self).set_centerOfRotation(set_centerOfRotation_)
        if type(set_centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_centerOfRotation_ = set_centerOfRotation_

    def get_centerOfRotation(self):
        if type(self.centerOfRotation_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.centerOfRotation_

    def set_description(self, set_description_):
        super(Viewpoint, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_fieldOfView(self, set_fieldOfView_ = 0.7854):
        super(Viewpoint, self).set_fieldOfView(set_fieldOfView_)
        if type(set_fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_fieldOfView_ <= 0:
                raise InvalidFieldValueException()
        if set_fieldOfView_ >= 3.1416:
                raise InvalidFieldValueException()
        self.set_fieldOfView_ = set_fieldOfView_

    def get_fieldOfView(self):
        if type(self.fieldOfView_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.fieldOfView_


    def get_isBound(self):
        if type(self.isBound_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isBound_

    def set_jump(self, set_jump_ = True):
        super(Viewpoint, self).set_jump(set_jump_)
        if type(set_jump_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_jump_ = set_jump_

    def get_jump(self):
        if type(self.jump_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.jump_

    def set_metadata(self, set_metadata_ = None):
        super(Viewpoint, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_orientation(self, set_orientation_ = [0, 0, 1, 0]):
        super(Viewpoint, self).set_orientation(set_orientation_)
        if type(set_orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        self.set_orientation_ = set_orientation_

    def get_orientation(self):
        if type(self.orientation_) is not SFRotation:
            raise InvalidFieldTypeException()
        return self.orientation_

    def set_position(self, set_position_ = [0, 0, 10]):
        super(Viewpoint, self).set_position(set_position_)
        if type(set_position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_position_ = set_position_

    def get_position(self):
        if type(self.position_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.position_

    def set_retainUserOffsets(self, set_retainUserOffsets_ = False):
        super(Viewpoint, self).set_retainUserOffsets(set_retainUserOffsets_)
        if type(set_retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_retainUserOffsets_ = set_retainUserOffsets_

    def get_retainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_bind(self, set_bind_):
        super(Viewpoint, self).set_bind(set_bind_)
        if type(set_bind_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_bind_ = set_bind_
    def set_DEF(self, set_DEF_):
        super(Viewpoint, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Viewpoint, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Viewpoint, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class ViewpointGroup(X3DChildNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(ViewpointGroup, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_children(self, set_children_):
        super(ViewpointGroup, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_description(self, set_description_):
        super(ViewpointGroup, self).set_description(set_description_)
        if type(set_description_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_description_ = set_description_

    def get_description(self):
        if type(self.description_) is not SFString:
            raise InvalidFieldTypeException()
        return self.description_

    def set_displayed(self, set_displayed_ = True):
        super(ViewpointGroup, self).set_displayed(set_displayed_)
        if type(set_displayed_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_displayed_ = set_displayed_

    def get_displayed(self):
        if type(self.displayed_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.displayed_

    def set_metadata(self, set_metadata_ = None):
        super(ViewpointGroup, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_retainUserOffsets(self, set_retainUserOffsets_ = False):
        super(ViewpointGroup, self).set_retainUserOffsets(set_retainUserOffsets_)
        if type(set_retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_retainUserOffsets_ = set_retainUserOffsets_

    def get_retainUserOffsets(self):
        if type(self.retainUserOffsets_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.retainUserOffsets_

    def set_DEF(self, set_DEF_):
        super(ViewpointGroup, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(ViewpointGroup, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(ViewpointGroup, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class Viewport(X3DViewportNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def add_children(self, add_children_):
        super(Viewport, self).add_children(add_children_)
        if type(add_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.add_children_ = add_children_
    def set_children(self, set_children_):
        super(Viewport, self).set_children(set_children_)
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_clipBoundary(self, set_clipBoundary_ = [0, 1, 0, 1]):
        super(Viewport, self).set_clipBoundary(set_clipBoundary_)
        if type(set_clipBoundary_) is not MFFloat:
            raise InvalidFieldTypeException()
        if set_clipBoundary_ < 0:
                raise InvalidFieldValueException()
        if set_clipBoundary_ > 1:
                raise InvalidFieldValueException()
        self.set_clipBoundary_ = set_clipBoundary_

    def get_clipBoundary(self):
        if type(self.clipBoundary_) is not MFFloat:
            raise InvalidFieldTypeException()
        return self.clipBoundary_

    def set_metadata(self, set_metadata_ = None):
        super(Viewport, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def remove_children(self, remove_children_):
        super(Viewport, self).remove_children(remove_children_)
        if type(remove_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.remove_children_ = remove_children_
    def set_DEF(self, set_DEF_):
        super(Viewport, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(Viewport, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(Viewport, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VisibilitySensor(X3DEnvironmentalSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(size_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if size_ < 0:
                raise InvalidFieldValueException()
        self.size_ = kwargs.pop("size", [0, 0, 0])
        return

    def set_center(self, set_center_ = [0, 0, 0]):
        super(VisibilitySensor, self).set_center(set_center_)
        if type(set_center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_center_ = set_center_

    def get_center(self):
        if type(self.center_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.center_

    def set_enabled(self, set_enabled_ = True):
        super(VisibilitySensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_enterTime(self):
        if type(self.enterTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.enterTime_


    def get_exitTime(self):
        if type(self.exitTime_) is not SFTime:
            raise InvalidFieldTypeException()
        return self.exitTime_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_metadata(self, set_metadata_ = None):
        super(VisibilitySensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_DEF(self, set_DEF_):
        super(VisibilitySensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(VisibilitySensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(VisibilitySensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumeData(X3DVolumeDataNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(bboxCenter_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxCenter_ = kwargs.pop("bboxCenter", [0, 0, 0])
        if type(bboxSize_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.bboxSize_ = kwargs.pop("bboxSize", [-1, -1, -1])
        return

    def set_dimensions(self, set_dimensions_ = [1, 1, 1]):
        super(VolumeData, self).set_dimensions(set_dimensions_)
        if type(set_dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_dimensions_ <= 0:
                raise InvalidFieldValueException()
        self.set_dimensions_ = set_dimensions_

    def get_dimensions(self):
        if type(self.dimensions_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.dimensions_

    def set_metadata(self, set_metadata_ = None):
        super(VolumeData, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_renderStyle(self, set_renderStyle_ = None):
        super(VolumeData, self).set_renderStyle(set_renderStyle_)
        if type(set_renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_renderStyle_ = set_renderStyle_

    def get_renderStyle(self):
        if type(self.renderStyle_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.renderStyle_

    def set_voxels(self, set_voxels_ = None):
        super(VolumeData, self).set_voxels(set_voxels_)
        if type(set_voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_voxels_ = set_voxels_

    def get_voxels(self):
        if type(self.voxels_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.voxels_

    def set_DEF(self, set_DEF_):
        super(VolumeData, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(VolumeData, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(VolumeData, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumeEmitter(X3DParticleEmitterNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        if coordIndex_ < -1:
                raise InvalidFieldValueException()
        self.coordIndex_ = kwargs.pop("coordIndex", -1)
        if type(internal_) is not SFBool:
            raise InvalidFieldTypeException()
        self.internal_ = kwargs.pop("internal", True)
        if type(surfaceArea_) is not SFFloat:
            raise InvalidFieldTypeException()
        if surfaceArea_ < 0:
                raise InvalidFieldValueException()
        self.surfaceArea_ = kwargs.pop("surfaceArea", 0)
        return

    def set_coord(self, set_coord_ = None):
        super(VolumeEmitter, self).set_coord(set_coord_)
        if type(set_coord_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_coord_ = set_coord_

    def get_coord(self):
        if type(self.coord_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.coord_

    def set_direction(self, set_direction_ = [0, 1, 0]):
        super(VolumeEmitter, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        if set_direction_ < -1:
                raise InvalidFieldValueException()
        if set_direction_ > 1:
                raise InvalidFieldValueException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_mass(self, set_mass_ = 0):
        super(VolumeEmitter, self).set_mass(set_mass_)
        if type(set_mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_mass_ < 0:
                raise InvalidFieldValueException()
        self.set_mass_ = set_mass_

    def get_mass(self):
        if type(self.mass_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.mass_

    def set_metadata(self, set_metadata_ = None):
        super(VolumeEmitter, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_coordIndex(self, set_coordIndex_):
        super(VolumeEmitter, self).set_coordIndex(set_coordIndex_)
        if type(set_coordIndex_) is not MFInt32:
            raise InvalidFieldTypeException()
        self.set_coordIndex_ = set_coordIndex_
    def set_speed(self, set_speed_ = 0):
        super(VolumeEmitter, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_variation(self, set_variation_ = 0.25):
        super(VolumeEmitter, self).set_variation(set_variation_)
        if type(set_variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_variation_ < 0:
                raise InvalidFieldValueException()
        self.set_variation_ = set_variation_

    def get_variation(self):
        if type(self.variation_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.variation_

    def set_DEF(self, set_DEF_):
        super(VolumeEmitter, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(VolumeEmitter, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(VolumeEmitter, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class VolumePickSensor(X3DPickSensorNode):
    def __init__(self, **kwargs):
        super().__init__()
        if type(intersectionType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'BOUNDS' == intersectionType_:
            pass
        elif 'GEOMETRY' == intersectionType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.intersectionType_ = kwargs.pop("intersectionType", "BOUNDS")
        if type(sortOrder_) is not SFString:
            raise InvalidFieldTypeException()
        if 'ANY' == sortOrder_:
            pass
        elif 'CLOSEST' == sortOrder_:
            pass
        elif 'ALL' == sortOrder_:
            pass
        elif 'ALL_SORTED' == sortOrder_:
            pass
        else:
            raise InvalidFieldValueException()
        self.sortOrder_ = kwargs.pop("sortOrder", "CLOSEST")
        return

    def set_enabled(self, set_enabled_ = True):
        super(VolumePickSensor, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_


    def get_isActive(self):
        if type(self.isActive_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.isActive_

    def set_matchCriterion(self, set_matchCriterion_ = "MATCH_ANY"):
        super(VolumePickSensor, self).set_matchCriterion(set_matchCriterion_)
        if type(set_matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        if 'MATCH_ANY' == set_matchCriterion_:
            pass
        elif 'MATCH_EVERY' == set_matchCriterion_:
            pass
        elif 'MATCH_ONLY_ONE' == set_matchCriterion_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_matchCriterion_ = set_matchCriterion_

    def get_matchCriterion(self):
        if type(self.matchCriterion_) is not SFString:
            raise InvalidFieldTypeException()
        return self.matchCriterion_

    def set_metadata(self, set_metadata_ = None):
        super(VolumePickSensor, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_objectType(self, set_objectType_ = "ALL"):
        super(VolumePickSensor, self).set_objectType(set_objectType_)
        if type(set_objectType_) is not MFString:
            raise InvalidFieldTypeException()
        if '"ALL"' == set_objectType_:
            pass
        elif '"NONE"' == set_objectType_:
            pass
        elif '"TERRAIN"' == set_objectType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_objectType_ = set_objectType_

    def get_objectType(self):
        if type(self.objectType_) is not MFString:
            raise InvalidFieldTypeException()
        return self.objectType_


    def get_pickedGeometry(self):
        if type(self.pickedGeometry_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickedGeometry_

    def set_pickingGeometry(self, set_pickingGeometry_ = None):
        super(VolumePickSensor, self).set_pickingGeometry(set_pickingGeometry_)
        if type(set_pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_pickingGeometry_ = set_pickingGeometry_

    def get_pickingGeometry(self):
        if type(self.pickingGeometry_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.pickingGeometry_

    def set_pickTarget(self, set_pickTarget_):
        super(VolumePickSensor, self).set_pickTarget(set_pickTarget_)
        if type(set_pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_pickTarget_ = set_pickTarget_

    def get_pickTarget(self):
        if type(self.pickTarget_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.pickTarget_

    def set_DEF(self, set_DEF_):
        super(VolumePickSensor, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(VolumePickSensor, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(VolumePickSensor, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class WindPhysicsModel(X3DParticlePhysicsModelNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_direction(self, set_direction_ = [1, 0, 0]):
        super(WindPhysicsModel, self).set_direction(set_direction_)
        if type(set_direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        self.set_direction_ = set_direction_

    def get_direction(self):
        if type(self.direction_) is not SFVec3f:
            raise InvalidFieldTypeException()
        return self.direction_

    def set_enabled(self, set_enabled_ = True):
        super(WindPhysicsModel, self).set_enabled(set_enabled_)
        if type(set_enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        self.set_enabled_ = set_enabled_

    def get_enabled(self):
        if type(self.enabled_) is not SFBool:
            raise InvalidFieldTypeException()
        return self.enabled_

    def set_gustiness(self, set_gustiness_ = 0.1):
        super(WindPhysicsModel, self).set_gustiness(set_gustiness_)
        if type(set_gustiness_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_gustiness_ < 0:
                raise InvalidFieldValueException()
        self.set_gustiness_ = set_gustiness_

    def get_gustiness(self):
        if type(self.gustiness_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.gustiness_

    def set_metadata(self, set_metadata_ = None):
        super(WindPhysicsModel, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_speed(self, set_speed_ = 0.1):
        super(WindPhysicsModel, self).set_speed(set_speed_)
        if type(set_speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_speed_ < 0:
                raise InvalidFieldValueException()
        self.set_speed_ = set_speed_

    def get_speed(self):
        if type(self.speed_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.speed_

    def set_turbulence(self, set_turbulence_ = 0):
        super(WindPhysicsModel, self).set_turbulence(set_turbulence_)
        if type(set_turbulence_) is not SFFloat:
            raise InvalidFieldTypeException()
        if set_turbulence_ < 0:
                raise InvalidFieldValueException()
        if set_turbulence_ > 1:
                raise InvalidFieldValueException()
        self.set_turbulence_ = set_turbulence_

    def get_turbulence(self):
        if type(self.turbulence_) is not SFFloat:
            raise InvalidFieldTypeException()
        return self.turbulence_

    def set_DEF(self, set_DEF_):
        super(WindPhysicsModel, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(WindPhysicsModel, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(WindPhysicsModel, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class WorldInfo(X3DInfoNode):
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_info(self, set_info_):
        super(WorldInfo, self).set_info(set_info_)
        if type(set_info_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_info_ = set_info_

    def get_info(self):
        if type(self.info_) is not MFString:
            raise InvalidFieldTypeException()
        return self.info_

    def set_metadata(self, set_metadata_ = None):
        super(WorldInfo, self).set_metadata(set_metadata_)
        if type(set_metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_metadata_ = set_metadata_

    def get_metadata(self):
        if type(self.metadata_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.metadata_

    def set_title(self, set_title_):
        super(WorldInfo, self).set_title(set_title_)
        if type(set_title_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_title_ = set_title_

    def get_title(self):
        if type(self.title_) is not SFString:
            raise InvalidFieldTypeException()
        return self.title_

    def set_DEF(self, set_DEF_):
        super(WorldInfo, self).set_DEF(set_DEF_)
        if type(set_DEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_DEF_ = set_DEF_

    def get_DEF(self):
        if type(self.DEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.DEF_

    def set_USE(self, set_USE_):
        super(WorldInfo, self).set_USE(set_USE_)
        if type(set_USE_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_USE_ = set_USE_

    def get_USE(self):
        if type(self.USE_) is not SFString:
            raise InvalidFieldTypeException()
        return self.USE_

    def set_class(self, set_class_):
        super(WorldInfo, self).set_class(set_class_)
        if type(set_class_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_class_ = set_class_

    def get_class(self):
        if type(self.class_) is not SFString:
            raise InvalidFieldTypeException()
        return self.class_

    pass


class component():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_level(self, set_level_ = 1):
        if type(set_level_) is not SFInt32:
            raise InvalidFieldTypeException()
        if set_level_ < 1:
                raise InvalidFieldValueException()
        if set_level_ > 5:
                raise InvalidFieldValueException()
        self.set_level_ = set_level_

    def get_level(self):
        if type(self.level_) is not SFInt32:
            raise InvalidFieldTypeException()
        return self.level_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Core' == set_name_:
            pass
        elif 'CADGeometry' == set_name_:
            pass
        elif 'CubeMapTexturing' == set_name_:
            pass
        elif 'DIS' == set_name_:
            pass
        elif 'EnvironmentalEffects' == set_name_:
            pass
        elif 'EnvironmentalSensor' == set_name_:
            pass
        elif 'EventUtilities' == set_name_:
            pass
        elif 'Followers' == set_name_:
            pass
        elif 'Geometry2D' == set_name_:
            pass
        elif 'Geometry3D' == set_name_:
            pass
        elif 'Geospatial' == set_name_:
            pass
        elif 'Grouping' == set_name_:
            pass
        elif 'H-Anim' == set_name_:
            pass
        elif 'Interpolation' == set_name_:
            pass
        elif 'KeyDeviceSensor' == set_name_:
            pass
        elif 'Layering' == set_name_:
            pass
        elif 'Layout' == set_name_:
            pass
        elif 'Lighting' == set_name_:
            pass
        elif 'Navigation' == set_name_:
            pass
        elif 'Networking' == set_name_:
            pass
        elif 'NURBS' == set_name_:
            pass
        elif 'ParticleSystems' == set_name_:
            pass
        elif 'Picking' == set_name_:
            pass
        elif 'PointingDeviceSensor' == set_name_:
            pass
        elif 'Rendering' == set_name_:
            pass
        elif 'RigidBodyPhysics' == set_name_:
            pass
        elif 'Scripting' == set_name_:
            pass
        elif 'Shaders' == set_name_:
            pass
        elif 'Shape' == set_name_:
            pass
        elif 'Sound' == set_name_:
            pass
        elif 'Text' == set_name_:
            pass
        elif 'Texturing' == set_name_:
            pass
        elif 'Texturing3D' == set_name_:
            pass
        elif 'Time' == set_name_:
            pass
        elif 'VolumeRendering' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    pass


class connect():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_nodeField(self, set_nodeField_):
        if type(set_nodeField_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_nodeField_ = set_nodeField_

    def get_nodeField(self):
        if type(self.nodeField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.nodeField_

    def set_protoField(self, set_protoField_):
        if type(set_protoField_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_protoField_ = set_protoField_

    def get_protoField(self):
        if type(self.protoField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.protoField_

    pass


class EXPORT():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_AS(self, set_AS_):
        if type(set_AS_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_AS_ = set_AS_

    def get_AS(self):
        if type(self.AS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.AS_

    def set_localDEF(self, set_localDEF_):
        if type(set_localDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_localDEF_ = set_localDEF_

    def get_localDEF(self):
        if type(self.localDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.localDEF_

    pass


class ExternProtoDeclare():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_appinfo(self, set_appinfo_):
        if type(set_appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_appinfo_ = set_appinfo_

    def get_appinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def set_documentation(self, set_documentation_):
        if type(set_documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_documentation_ = set_documentation_

    def get_documentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def set_field(self, set_field_):
        if type(set_field_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_field_ = set_field_

    def get_field(self):
        if type(self.field_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.field_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_url(self, set_url_):
        if type(set_url_) is not MFString:
            raise InvalidFieldTypeException()
        self.set_url_ = set_url_

    def get_url(self):
        if type(self.url_) is not MFString:
            raise InvalidFieldTypeException()
        return self.url_

    pass


class field():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_accessType(self, set_accessType_):
        if type(set_accessType_) is not SFString:
            raise InvalidFieldTypeException()
        if 'initializeOnly' == set_accessType_:
            pass
        elif 'inputOnly' == set_accessType_:
            pass
        elif 'outputOnly' == set_accessType_:
            pass
        elif 'inputOutput' == set_accessType_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_accessType_ = set_accessType_

    def get_accessType(self):
        if type(self.accessType_) is not SFString:
            raise InvalidFieldTypeException()
        return self.accessType_

    def set_appinfo(self, set_appinfo_):
        if type(set_appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_appinfo_ = set_appinfo_

    def get_appinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def set_children(self, set_children_):
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_documentation(self, set_documentation_):
        if type(set_documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_documentation_ = set_documentation_

    def get_documentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_type(self, set_type_):
        if type(set_type_) is not SFString:
            raise InvalidFieldTypeException()
        if 'SFBool' == set_type_:
            pass
        elif 'MFBool' == set_type_:
            pass
        elif 'SFColor' == set_type_:
            pass
        elif 'MFColor' == set_type_:
            pass
        elif 'SFColorRGBA' == set_type_:
            pass
        elif 'MFColorRGBA' == set_type_:
            pass
        elif 'SFDouble' == set_type_:
            pass
        elif 'MFDouble' == set_type_:
            pass
        elif 'SFFloat' == set_type_:
            pass
        elif 'MFFloat' == set_type_:
            pass
        elif 'SFImage' == set_type_:
            pass
        elif 'MFImage' == set_type_:
            pass
        elif 'SFInt32' == set_type_:
            pass
        elif 'SFNode' == set_type_:
            pass
        elif 'MFNode' == set_type_:
            pass
        elif 'MFInt32' == set_type_:
            pass
        elif 'SFRotation' == set_type_:
            pass
        elif 'MFRotation' == set_type_:
            pass
        elif 'SFString' == set_type_:
            pass
        elif 'MFString' == set_type_:
            pass
        elif 'SFTime' == set_type_:
            pass
        elif 'MFTime' == set_type_:
            pass
        elif 'SFVec2d' == set_type_:
            pass
        elif 'MFVec2d' == set_type_:
            pass
        elif 'SFVec2f' == set_type_:
            pass
        elif 'MFVec2f' == set_type_:
            pass
        elif 'SFVec3d' == set_type_:
            pass
        elif 'MFVec3d' == set_type_:
            pass
        elif 'SFVec3f' == set_type_:
            pass
        elif 'MFVec3f' == set_type_:
            pass
        elif 'SFVec4d' == set_type_:
            pass
        elif 'MFVec4d' == set_type_:
            pass
        elif 'SFVec4f' == set_type_:
            pass
        elif 'MFVec4f' == set_type_:
            pass
        elif 'SFMatrix3d' == set_type_:
            pass
        elif 'MFMatrix3d' == set_type_:
            pass
        elif 'SFMatrix3f' == set_type_:
            pass
        elif 'MFMatrix3f' == set_type_:
            pass
        elif 'SFMatrix4d' == set_type_:
            pass
        elif 'MFMatrix4d' == set_type_:
            pass
        elif 'SFMatrix4f' == set_type_:
            pass
        elif 'MFMatrix4f' == set_type_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_type_ = set_type_

    def get_type(self):
        if type(self.type_) is not SFString:
            raise InvalidFieldTypeException()
        return self.type_

    def set_value(self, set_value_):
        if type(set_value_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not SFString:
            raise InvalidFieldTypeException()
        return self.value_

    pass


class fieldValue():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_children(self, set_children_):
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_value(self, set_value_):
        if type(set_value_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_value_ = set_value_

    def get_value(self):
        if type(self.value_) is not SFString:
            raise InvalidFieldTypeException()
        return self.value_

    pass


class head():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_component(self, set_component_):
        if type(set_component_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_component_ = set_component_

    def get_component(self):
        if type(self.component_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.component_

    def set_meta(self, set_meta_):
        if type(set_meta_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_meta_ = set_meta_

    def get_meta(self):
        if type(self.meta_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.meta_

    def set_unit(self, set_unit_):
        if type(set_unit_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_unit_ = set_unit_

    def get_unit(self):
        if type(self.unit_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.unit_

    pass


class IMPORT():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_AS(self, set_AS_):
        if type(set_AS_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_AS_ = set_AS_

    def get_AS(self):
        if type(self.AS_) is not SFString:
            raise InvalidFieldTypeException()
        return self.AS_

    def set_importedDEF(self, set_importedDEF_):
        if type(set_importedDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_importedDEF_ = set_importedDEF_

    def get_importedDEF(self):
        if type(self.importedDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.importedDEF_

    def set_inlineDEF(self, set_inlineDEF_):
        if type(set_inlineDEF_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_inlineDEF_ = set_inlineDEF_

    def get_inlineDEF(self):
        if type(self.inlineDEF_) is not SFString:
            raise InvalidFieldTypeException()
        return self.inlineDEF_

    pass


class IS():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_connect(self, set_connect_):
        if type(set_connect_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_connect_ = set_connect_

    def get_connect(self):
        if type(self.connect_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.connect_

    pass


class meta():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_content(self, set_content_):
        if type(set_content_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_content_ = set_content_

    def get_content(self):
        if type(self.content_) is not SFString:
            raise InvalidFieldTypeException()
        return self.content_

    def set_dir(self, set_dir_):
        if type(set_dir_) is not SFString:
            raise InvalidFieldTypeException()
        if 'rtl' == set_dir_:
            pass
        elif 'ltr' == set_dir_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_dir_ = set_dir_

    def get_dir(self):
        if type(self.dir_) is not SFString:
            raise InvalidFieldTypeException()
        return self.dir_

    def set_http_equiv(self, set_http_equiv_):
        if type(set_http_equiv_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_http_equiv_ = set_http_equiv_

    def get_http_equiv(self):
        if type(self.http_equiv_) is not SFString:
            raise InvalidFieldTypeException()
        return self.http_equiv_

    def set_lang(self, set_lang_):
        if type(set_lang_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_lang_ = set_lang_

    def get_lang(self):
        if type(self.lang_) is not SFString:
            raise InvalidFieldTypeException()
        return self.lang_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        if 'accessRights' == set_name_:
            pass
        elif 'contributor' == set_name_:
            pass
        elif 'created' == set_name_:
            pass
        elif 'creator' == set_name_:
            pass
        elif 'description' == set_name_:
            pass
        elif 'drawing' == set_name_:
            pass
        elif 'error' == set_name_:
            pass
        elif 'generator' == set_name_:
            pass
        elif 'hint' == set_name_:
            pass
        elif 'identifier' == set_name_:
            pass
        elif 'Image' == set_name_:
            pass
        elif 'info' == set_name_:
            pass
        elif 'license' == set_name_:
            pass
        elif 'modified' == set_name_:
            pass
        elif 'MovingImage' == set_name_:
            pass
        elif 'photo' == set_name_:
            pass
        elif 'reference' == set_name_:
            pass
        elif 'requires' == set_name_:
            pass
        elif 'rights' == set_name_:
            pass
        elif 'robots' == set_name_:
            pass
        elif 'Sound' == set_name_:
            pass
        elif 'specificationSection' == set_name_:
            pass
        elif 'specificationUrl' == set_name_:
            pass
        elif 'subject' == set_name_:
            pass
        elif 'Text' == set_name_:
            pass
        elif 'title' == set_name_:
            pass
        elif 'TODO' == set_name_:
            pass
        elif 'translator' == set_name_:
            pass
        elif 'translated' == set_name_:
            pass
        elif 'version' == set_name_:
            pass
        elif 'warning' == set_name_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_scheme(self, set_scheme_):
        if type(set_scheme_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_scheme_ = set_scheme_

    def get_scheme(self):
        if type(self.scheme_) is not SFString:
            raise InvalidFieldTypeException()
        return self.scheme_

    pass


class ProtoBody():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_children(self, set_children_):
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    pass


class ProtoDeclare():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_appinfo(self, set_appinfo_):
        if type(set_appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_appinfo_ = set_appinfo_

    def get_appinfo(self):
        if type(self.appinfo_) is not SFString:
            raise InvalidFieldTypeException()
        return self.appinfo_

    def set_documentation(self, set_documentation_):
        if type(set_documentation_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_documentation_ = set_documentation_

    def get_documentation(self):
        if type(self.documentation_) is not SFString:
            raise InvalidFieldTypeException()
        return self.documentation_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    def set_ProtoBody(self, set_ProtoBody_ = None):
        if type(set_ProtoBody_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_ProtoBody_ = set_ProtoBody_

    def get_ProtoBody(self):
        if type(self.ProtoBody_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.ProtoBody_

    def set_ProtoInterface(self, set_ProtoInterface_ = None):
        if type(set_ProtoInterface_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_ProtoInterface_ = set_ProtoInterface_

    def get_ProtoInterface(self):
        if type(self.ProtoInterface_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.ProtoInterface_

    pass


class ProtoInterface():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_field(self, set_field_):
        if type(set_field_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_field_ = set_field_

    def get_field(self):
        if type(self.field_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.field_

    pass


class ROUTE():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_fromField(self, set_fromField_):
        if type(set_fromField_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_fromField_ = set_fromField_

    def get_fromField(self):
        if type(self.fromField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fromField_

    def set_fromNode(self, set_fromNode_):
        if type(set_fromNode_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_fromNode_ = set_fromNode_

    def get_fromNode(self):
        if type(self.fromNode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.fromNode_

    def set_toField(self, set_toField_):
        if type(set_toField_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_toField_ = set_toField_

    def get_toField(self):
        if type(self.toField_) is not SFString:
            raise InvalidFieldTypeException()
        return self.toField_

    def set_toNode(self, set_toNode_):
        if type(set_toNode_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_toNode_ = set_toNode_

    def get_toNode(self):
        if type(self.toNode_) is not SFString:
            raise InvalidFieldTypeException()
        return self.toNode_

    pass


class Scene():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_children(self, set_children_):
        if type(set_children_) is not MFNode:
            raise InvalidFieldTypeException()
        self.set_children_ = set_children_

    def get_children(self):
        if type(self.children_) is not MFNode:
            raise InvalidFieldTypeException()
        return self.children_

    pass


class unit():
    def __init__(self, **kwargs):
        super().__init__()
        if type(category_) is not SFString:
            raise InvalidFieldTypeException()
        if 'angle' == category_:
            pass
        elif 'force' == category_:
            pass
        elif 'length' == category_:
            pass
        elif 'mass' == category_:
            pass
        else:
            raise InvalidFieldValueException()
        self.category_ = kwargs.pop("category")
        return

    def set_conversionFactor(self, set_conversionFactor_ = 1.0):
        if type(set_conversionFactor_) is not SFDouble:
            raise InvalidFieldTypeException()
        if set_conversionFactor_ <= 0:
                raise InvalidFieldValueException()
        self.set_conversionFactor_ = set_conversionFactor_

    def get_conversionFactor(self):
        if type(self.conversionFactor_) is not SFDouble:
            raise InvalidFieldTypeException()
        return self.conversionFactor_

    def set_name(self, set_name_):
        if type(set_name_) is not SFString:
            raise InvalidFieldTypeException()
        self.set_name_ = set_name_

    def get_name(self):
        if type(self.name_) is not SFString:
            raise InvalidFieldTypeException()
        return self.name_

    pass


class X3D():
    def __init__(self, **kwargs):
        super().__init__()
        return

    def set_head(self, set_head_ = None):
        if type(set_head_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_head_ = set_head_

    def get_head(self):
        if type(self.head_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.head_

    def set_profile(self, set_profile_ = "Immersive"):
        if type(set_profile_) is not SFString:
            raise InvalidFieldTypeException()
        if 'Core' == set_profile_:
            pass
        elif 'Interchange' == set_profile_:
            pass
        elif 'CADInterchange' == set_profile_:
            pass
        elif 'Interactive' == set_profile_:
            pass
        elif 'Immersive' == set_profile_:
            pass
        elif 'MedicalInterchange' == set_profile_:
            pass
        elif 'MPEG4Interactive' == set_profile_:
            pass
        elif 'Full' == set_profile_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_profile_ = set_profile_

    def get_profile(self):
        if type(self.profile_) is not SFString:
            raise InvalidFieldTypeException()
        return self.profile_

    def set_Scene(self, set_Scene_ = None):
        if type(set_Scene_) is not SFNode:
            raise InvalidFieldTypeException()
        self.set_Scene_ = set_Scene_

    def get_Scene(self):
        if type(self.Scene_) is not SFNode:
            raise InvalidFieldTypeException()
        return self.Scene_

    def set_version(self, set_version_ = "3.3"):
        if type(set_version_) is not SFString:
            raise InvalidFieldTypeException()
        if '3.0' == set_version_:
            pass
        elif '3.1' == set_version_:
            pass
        elif '3.2' == set_version_:
            pass
        elif '3.3' == set_version_:
            pass
        else:
            raise InvalidFieldValueException()
        self.set_version_ = set_version_

    def get_version(self):
        if type(self.version_) is not SFString:
            raise InvalidFieldTypeException()
        return self.version_

    pass


